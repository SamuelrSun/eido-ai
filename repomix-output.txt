This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
public/
  placeholder.svg
  robots.txt
src/
  components/
    auth/
      Auth.tsx
      AuthGuard.tsx
      PasswordChangeForm.tsx
      UserProfile.tsx
    chat/
      ChatBot.tsx
      ChatInput.tsx
      ChatMessage.tsx
      FileUpload.tsx
      MarkdownRenderer.tsx
    class/
      dialog/
        ClassInfoSection.tsx
        CreateClassDialogContent.tsx
        EmojiPicker.tsx
        MaterialsUploadSection.tsx
        OpenAIConfigSection.tsx
        WidgetSelectionSection.tsx
      CreateClassDialog.tsx
      EditClassDialog.tsx
    layout/
      sidebar/
        SidebarAccount.tsx
        SidebarHeader.tsx
        SidebarNavigation.tsx
        SidebarWidgets.tsx
      AppLayout.tsx
      AppSidebar.tsx
      PageHeader.tsx
    policy/
      PolicyCard.tsx
    ui/
      accordion.tsx
      alert-dialog.tsx
      alert.tsx
      aspect-ratio.tsx
      avatar.tsx
      badge.tsx
      breadcrumb.tsx
      button.tsx
      card.tsx
      carousel.tsx
      chart.tsx
      checkbox.tsx
      collapsible.tsx
      command.tsx
      context-menu.tsx
      dialog.tsx
      drawer.tsx
      dropdown-menu.tsx
      form.tsx
      hover-card.tsx
      index.ts
      input-otp.tsx
      input.tsx
      label.tsx
      menubar.tsx
      navigation-menu.tsx
      pagination.tsx
      popover.tsx
      progress.tsx
      radio-group.tsx
      resizable.tsx
      scroll-area.tsx
      select.tsx
      separator.tsx
      sheet.tsx
      sidebar.tsx
      skeleton.tsx
      slider.tsx
      sonner.tsx
      switch.tsx
      table.tsx
      tabs.tsx
      textarea.tsx
      toast.tsx
      toaster.tsx
      toggle-group.tsx
      toggle.tsx
      tooltip.tsx
      use-toast.ts
    widgets/
      AddWidgetsDialog.tsx
      WidgetCard.tsx
  features/
    files/
      components/
        FileGrid.tsx
        NewFolderDialog.tsx
        StorageUsage.tsx
        UploadDialog.tsx
        VectorStoreUploadDialog.tsx
      pages/
        FilesPage.tsx
      types.ts
  hooks/
    use-class-widgets.tsx
    use-mobile.tsx
    use-sidebar-state.ts
    use-toast.ts
    use-widgets.tsx
  integrations/
    supabase/
      client.ts
      types.ts
  lib/
    utils.ts
  pages/
    AccountPage.tsx
    AuthPage.tsx
    DatabasePage.tsx
    FlashcardsPage.tsx
    HomePage.tsx
    NotFound.tsx
    PolicyCenter.tsx
    QuizSessionPage.tsx
    QuizzesPage.tsx
    SuperTutor.tsx
  services/
    quiz/
      index.ts
      quizGenerator.ts
      quizRepository.ts
      types.ts
    classOpenAIConfig.ts
    flashcardService.ts
  types/
    flashcard.ts
  utils/
    emojiUtils.ts
  App.css
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
supabase/
  .temp/
    cli-latest
  functions/
    _shared/
      cors.ts
    chat/
      index.ts
    generate-flashcards/
      index.ts
    generate-quiz/
      index.ts
    list-vector-store-files/
      index.ts
    process-syllabus/
      index.ts
    provision-class-resources/
      index.ts
    upload-to-vector-store/
      index.ts
  config.toml
.gitignore
components.json
eslint.config.js
index.html
package.json
postcss.config.js
README.md
tailwind.config.ts
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Files
================================================================

================
File: public/placeholder.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>

================
File: public/robots.txt
================
User-agent: Googlebot
Allow: /

User-agent: Bingbot
Allow: /

User-agent: Twitterbot
Allow: /

User-agent: facebookexternalhit
Allow: /

User-agent: *
Allow: /

================
File: src/components/auth/Auth.tsx
================
import { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { Loader2, Mail, Lock, Eye, EyeOff } from "lucide-react";
import { useNavigate } from 'react-router-dom';

export function Auth() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [fullName, setFullName] = useState('');
  const [loading, setLoading] = useState(false);
  const [authMode, setAuthMode] = useState<'signin' | 'signup'>('signup'); // Default to signup
  const [showPassword, setShowPassword] = useState(false);
  const { toast } = useToast();
  const navigate = useNavigate();

  const handleAuth = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    try {
      if (authMode === 'signup') {
        // For signup, enforce 10-character password
        if (password.length < 10) {
          throw new Error("Password should be at least 10 characters long.");
        }
        
        const { error } = await supabase.auth.signUp({ 
          email, 
          password,
          options: {
            emailRedirectTo: window.location.origin,
            data: {
              full_name: fullName
            }
          }
        });
        
        if (error) throw error;
        
        toast({
          title: "Account created successfully",
          description: "We've sent you a confirmation link to complete your signup.",
        });
      } else {
        // For signin
        const { error } = await supabase.auth.signInWithPassword({ email, password });
        if (error) throw error;
        
        toast({
          title: "Welcome to the Eido beta!",
          description: "You have been signed in successfully.",
        });
        
        // Redirect to home page after successful sign in
        navigate('/');
      }
    } catch (error) {
      console.error('Auth error:', error);
      let errorMessage = "An error occurred during authentication";
      
      if (error instanceof Error) {
        // Handle common authentication errors with more user-friendly messages
        if (error.message.includes("Email not confirmed")) {
          errorMessage = "Please check your email inbox and confirm your email address before signing in.";
        } else if (error.message.includes("Invalid login credentials")) {
          errorMessage = "Invalid email or password. Please try again.";
        } else if (error.message.includes("User already registered")) {
          errorMessage = "An account with this email already exists. Please sign in instead.";
        } else if (error.message.includes("Password should be")) {
          errorMessage = "Password should be at least 10 characters long.";
        } else {
          errorMessage = error.message;
        }
      }
      
      toast({
        title: "Authentication error",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const toggleAuthMode = () => {
    setAuthMode(authMode === 'signin' ? 'signup' : 'signin');
  };

  const toggleShowPassword = () => {
    setShowPassword(!showPassword);
  };

  return (
    <Card className="w-full max-w-md bg-white shadow-lg border-0">
      <CardHeader className="space-y-2">
        <CardTitle className="text-2xl font-bold text-center">
          {authMode === 'signin' ? 'Sign In' : 'Create Account'}
        </CardTitle>
        <CardDescription className="text-center">
          {authMode === 'signin' 
            ? 'Enter your credentials to access your account' 
            : 'Welcome to our Beta!'}
        </CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleAuth} className="space-y-4">
          {authMode === 'signup' && (
            <div className="space-y-2">
              <Label htmlFor="fullName">Full Name</Label>
              <Input
                id="fullName"
                type="text"
                placeholder="Your name"
                value={fullName}
                onChange={(e) => setFullName(e.target.value)}
                className="bg-muted/30"
              />
            </div>
          )}
          <div className="space-y-2">
            <Label htmlFor="email">Email</Label>
            <div className="relative">
              <Input
                id="email"
                type="email"
                placeholder="your@email.com"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                className="bg-muted/30 pl-10"
              />
              <Mail className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
            </div>
          </div>
          <div className="space-y-2">
            <Label htmlFor="password">Password</Label>
            <div className="relative">
              <Input
                id="password"
                type={showPassword ? "text" : "password"}
                placeholder="••••••••••"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                minLength={authMode === 'signup' ? 10 : undefined}
                className="bg-muted/30 pl-10"
              />
              <Lock className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
              <Button 
                type="button" 
                variant="ghost" 
                size="icon" 
                className="absolute right-1 top-1 h-8 w-8 text-muted-foreground"
                onClick={toggleShowPassword}
              >
                {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
              </Button>
            </div>
            {authMode === 'signup' && (
              <p className="text-xs text-muted-foreground mt-1">
                Password must be at least 10 characters long
              </p>
            )}
          </div>

          <Button 
            type="submit" 
            className="w-full bg-sidebar hover:bg-sidebar-accent text-white"
            disabled={loading}
          >
            {loading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
            {loading ? 'Processing...' : authMode === 'signin' ? 'Sign In' : 'Create Account'}
          </Button>
        </form>
      </CardContent>
      <CardFooter>
        <Button 
          variant="ghost" 
          onClick={toggleAuthMode} 
          className="w-full text-sm hover:bg-muted/20"
        >
          {authMode === 'signin' 
            ? "Don't have an account? Sign Up" 
            : "Already have an account? Sign In"}
        </Button>
      </CardFooter>
    </Card>
  );
}

================
File: src/components/auth/AuthGuard.tsx
================
import { ReactNode, useEffect, useState } from "react";
import { Navigate, useLocation, Outlet } from "react-router-dom";
import { supabase } from "@/integrations/supabase/client";
import { Loader2 } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface AuthGuardProps {
  children?: ReactNode;
}

export function AuthGuard({ children }: AuthGuardProps) {
  const [isAuthenticated, setIsAuthenticated] = useState<boolean | null>(null);
  const [isChecking, setIsChecking] = useState(true);
  const location = useLocation();
  const { toast } = useToast();

  useEffect(() => {
    const checkAuth = async () => {
      try {
        setIsChecking(true);
        const { data, error } = await supabase.auth.getSession();
        
        if (error) {
          console.error("Error checking auth session:", error);
          setIsAuthenticated(false);
          return;
        }
        
        console.log("Auth check in AuthGuard:", data.session?.user?.id);
        setIsAuthenticated(!!data.session);
        
        if (!data.session) {
          console.log("No active session found");
          toast({
            title: "Authentication required",
            description: "Please sign in to access this feature.",
            variant: "default",
          });
        }
      } catch (error) {
        console.error("Error checking auth:", error);
        setIsAuthenticated(false);
      } finally {
        setIsChecking(false);
      }
    };
    
    checkAuth();
    
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
      console.log("Auth state change in AuthGuard:", event, session?.user?.id);
      setIsAuthenticated(!!session);
      
      if (event === 'SIGNED_IN') {
        toast({
          title: "Signed in successfully",
          description: "Welcome back!",
        });
      } else if (event === 'SIGNED_OUT') {
        toast({
          title: "Signed out",
          description: "You have been signed out.",
        });
      }
    });

    return () => subscription.unsubscribe();
  }, [toast]);

  // Show loading indicator while checking auth status
  if (isChecking) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <Loader2 className="h-12 w-12 animate-spin text-cybercoach-blue" />
      </div>
    );
  }

  // Redirect to login if not authenticated
  if (!isAuthenticated) {
    return <Navigate to="/auth" state={{ from: location }} replace />;
  }

  // User is authenticated, render children or Outlet
  return children ? <>{children}</> : <Outlet />;
}

================
File: src/components/auth/PasswordChangeForm.tsx
================
import { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { Loader2, Eye, EyeOff } from "lucide-react";

export function PasswordChangeForm() {
  const [currentPassword, setCurrentPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [showCurrentPassword, setShowCurrentPassword] = useState(false);
  const [showNewPassword, setShowNewPassword] = useState(false);
  const { toast } = useToast();

  const toggleShowCurrentPassword = () => {
    setShowCurrentPassword(!showCurrentPassword);
  };

  const toggleShowNewPassword = () => {
    setShowNewPassword(!showNewPassword);
  };

  const handlePasswordChange = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validate passwords
    if (newPassword.length < 10) {
      toast({
        title: "Password Error",
        description: "New password should be at least 10 characters long.",
        variant: "destructive",
      });
      return;
    }

    if (newPassword !== confirmPassword) {
      toast({
        title: "Password Error",
        description: "New passwords do not match.",
        variant: "destructive",
      });
      return;
    }

    setLoading(true);
    try {
      // First authenticate with current password to verify user
      const { error: signInError } = await supabase.auth.signInWithPassword({
        email: (await supabase.auth.getUser()).data.user?.email || '',
        password: currentPassword,
      });

      if (signInError) {
        throw new Error("Current password is incorrect");
      }

      // Then update to new password
      const { error: updateError } = await supabase.auth.updateUser({ 
        password: newPassword 
      });

      if (updateError) throw updateError;

      // Clear form
      setCurrentPassword('');
      setNewPassword('');
      setConfirmPassword('');
      
      toast({
        title: "Success",
        description: "Your password has been updated successfully.",
      });
    } catch (error) {
      console.error('Password change error:', error);
      toast({
        title: "Password Change Failed",
        description: error instanceof Error ? error.message : "Failed to update password. Please try again.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Change Password</CardTitle>
        <CardDescription>
          Update your account password
        </CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handlePasswordChange} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="currentPassword">Current Password</Label>
            <div className="relative">
              <Input
                id="currentPassword"
                type={showCurrentPassword ? "text" : "password"}
                value={currentPassword}
                onChange={(e) => setCurrentPassword(e.target.value)}
                required
                className="pr-10"
                placeholder="Enter current password"
              />
              <Button 
                type="button" 
                variant="ghost" 
                size="icon" 
                className="absolute right-1 top-1 h-8 w-8 text-muted-foreground"
                onClick={toggleShowCurrentPassword}
              >
                {showCurrentPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
              </Button>
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="newPassword">New Password</Label>
            <div className="relative">
              <Input
                id="newPassword"
                type={showNewPassword ? "text" : "password"}
                value={newPassword}
                onChange={(e) => setNewPassword(e.target.value)}
                required
                minLength={10}
                className="pr-10"
                placeholder="Enter new password"
              />
              <Button 
                type="button" 
                variant="ghost" 
                size="icon" 
                className="absolute right-1 top-1 h-8 w-8 text-muted-foreground"
                onClick={toggleShowNewPassword}
              >
                {showNewPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
              </Button>
            </div>
            <p className="text-xs text-muted-foreground">
              Password must be at least 10 characters long
            </p>
          </div>

          <div className="space-y-2">
            <Label htmlFor="confirmPassword">Confirm New Password</Label>
            <Input
              id="confirmPassword"
              type="password"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              required
              placeholder="Confirm new password"
            />
          </div>

          <Button 
            type="submit" 
            className="w-full"
            disabled={loading}
          >
            {loading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
            {loading ? 'Updating...' : 'Update Password'}
          </Button>
        </form>
      </CardContent>
    </Card>
  );
}

================
File: src/components/auth/UserProfile.tsx
================
import { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { Loader2, Upload, Camera } from "lucide-react";
import { useNavigate } from 'react-router-dom';
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"; 

export function UserProfile() {
  const [user, setUser] = useState<any>(null);
  const [profile, setProfile] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [uploadingPhoto, setUploadingPhoto] = useState(false);
  const { toast } = useToast();
  const navigate = useNavigate();

  useEffect(() => {
    const fetchUserAndProfile = async () => {
      try {
        const { data: { user } } = await supabase.auth.getUser();
        setUser(user);
        
        if (user) {
          // Fetch profile information from the profiles table
          try {
            const { data, error } = await supabase
              .from('profiles')
              .select('*')
              .eq('id', user.id)
              .single() as any; // Type assertion to bypass TypeScript error
              
            if (error) {
              console.error("Error fetching profile:", error);
            } else {
              setProfile(data);
              console.log("Profile data loaded:", data);
            }
          } catch (error) {
            console.error("Error in profile fetch:", error);
          }
        }
      } catch (error) {
        console.error('Error fetching user:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchUserAndProfile();

    // Listen for auth state changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        if (event === 'SIGNED_IN') {
          setUser(session?.user || null);
          
          // Fetch profile when signed in
          if (session?.user) {
            try {
              const { data, error } = await supabase
                .from('profiles')
                .select('*')
                .eq('id', session.user.id)
                .single() as any; // Type assertion to bypass TypeScript error
                
              if (error) {
                console.error("Error fetching profile on auth change:", error);
              } else {
                setProfile(data);
                console.log("Profile data loaded on auth change:", data);
              }
            } catch (error) {
              console.error("Error in profile fetch on auth change:", error);
            }
          }
        } else if (event === 'SIGNED_OUT') {
          setUser(null);
          setProfile(null);
        }
      }
    );

    return () => {
      // Clean up the subscription
      subscription?.unsubscribe();
    };
  }, []);

  const handleSignOut = async () => {
    try {
      setLoading(true);
      await supabase.auth.signOut();
      toast({
        title: "Signed out",
        description: "You have been signed out successfully.",
      });
      setUser(null);
      setProfile(null);
      navigate("/auth");
    } catch (error) {
      console.error('Error signing out:', error);
      toast({
        title: "Error",
        description: "Failed to sign out. Please try again.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleProfilePhotoChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    
    if (!file || !user) return;
    
    // Check file size (limit to 5MB)
    if (file.size > 5 * 1024 * 1024) {
      toast({
        title: "File too large",
        description: "Profile photo must be less than 5MB",
        variant: "destructive",
      });
      return;
    }
    
    // Check file type
    if (!file.type.startsWith('image/')) {
      toast({
        title: "Invalid file type",
        description: "Please upload an image file",
        variant: "destructive",
      });
      return;
    }
    
    try {
      setUploadingPhoto(true);
      
      // Generate a unique file name
      const fileExt = file.name.split('.').pop();
      const fileName = `${user.id}-${Math.random().toString(36).substring(2)}.${fileExt}`;
      // Change path from 'avatars/' to 'profiles/' to match our bucket name
      const filePath = `${fileName}`;
      
      console.log("Uploading file to path:", filePath);
      
      // Upload the file to Supabase Storage with the correct bucket name
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('profiles')
        .upload(filePath, file);
        
      if (uploadError) {
        console.error("Upload error:", uploadError);
        throw uploadError;
      }
      
      console.log("Upload successful:", uploadData);
      
      // Get the public URL
      const publicUrl = supabase.storage
        .from('profiles')
        .getPublicUrl(filePath).data.publicUrl;
      
      console.log("Public URL:", publicUrl);
      
      // Update the user profile with the new avatar URL
      const { error: updateError } = await supabase
        .from('profiles')
        .update({ avatar_url: publicUrl })
        .eq('id', user.id);
        
      if (updateError) {
        console.error("Profile update error:", updateError);
        throw updateError;
      }
      
      // Update the local state
      setProfile({
        ...profile,
        avatar_url: publicUrl
      });
      
      toast({
        title: "Profile photo updated",
        description: "Your profile photo has been updated successfully.",
      });
    } catch (error: any) {
      console.error('Error uploading photo:', error);
      toast({
        title: "Upload failed",
        description: error.message || "Failed to upload profile photo. Please try again.",
        variant: "destructive",
      });
    } finally {
      setUploadingPhoto(false);
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center p-4">
        <Loader2 className="h-8 w-8 animate-spin text-cybercoach-blue" />
      </div>
    );
  }

  if (!user) {
    return null;
  }

  const userInitials = profile?.full_name 
    ? profile.full_name.split(' ').map((n: string) => n[0]).join('').toUpperCase()
    : user.email.charAt(0).toUpperCase();

  return (
    <Card>
      <CardHeader>
        <CardTitle>User Profile</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex flex-col items-center gap-2">
          <div className="relative group">
            <Avatar className="h-24 w-24 border-2 border-white shadow-md">
              {profile?.avatar_url ? (
                <AvatarImage src={profile.avatar_url} alt={profile?.full_name || user.email} />
              ) : null}
              <AvatarFallback className="text-xl">{userInitials}</AvatarFallback>
            </Avatar>
            
            <label 
              htmlFor="avatar-upload"
              className="absolute bottom-0 right-0 p-1 bg-primary text-primary-foreground rounded-full cursor-pointer shadow-md hover:bg-primary/90 transition-colors"
            >
              <Camera className="h-4 w-4" />
              <span className="sr-only">Upload profile photo</span>
            </label>

            <input 
              type="file" 
              id="avatar-upload" 
              className="hidden" 
              accept="image/*"
              onChange={handleProfilePhotoChange}
              disabled={uploadingPhoto}
            />
          </div>
          
          {uploadingPhoto && (
            <div className="flex items-center gap-1 text-sm text-muted-foreground">
              <Loader2 className="h-3 w-3 animate-spin" />
              <span>Uploading...</span>
            </div>
          )}
        </div>
        
        {profile?.full_name && (
          <div>
            <p className="text-sm font-medium text-gray-500">Name</p>
            <p>{profile.full_name}</p>
          </div>
        )}
        
        <div>
          <p className="text-sm font-medium text-gray-500">Email</p>
          <p>{user.email}</p>
        </div>
        
        <div>
          <p className="text-sm font-medium text-gray-500">User ID</p>
          <p className="text-xs font-mono break-all">{user.id}</p>
        </div>
        
        <Button onClick={handleSignOut} variant="outline" className="w-full">
          {loading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
          Sign Out
        </Button>
      </CardContent>
    </Card>
  );
}

================
File: src/components/chat/ChatBot.tsx
================
import { useState, useRef, useEffect } from "react";
import { Send, Database, Bot, AlertCircle } from "lucide-react";
import { Button } from "@/components/ui/button";
import { ChatMessage } from "./ChatMessage";
import { ChatInput } from "./ChatInput";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { OpenAIConfig } from "@/services/classOpenAIConfig";
import { Badge } from "@/components/ui/badge";
import { Alert } from "@/components/ui/alert";

export interface Message {
  role: "user" | "assistant" | "system";
  content: string;
}

interface ChatBotProps {
  title?: string;
  subtitle?: string;
  placeholder?: string;
  suggestions?: string[];
  knowledgeBase?: string;
  openAIConfig?: OpenAIConfig;
  disableToasts?: boolean;
  loadingIndicator?: React.ReactNode;
  onResponseGenerationStateChange?: (isGenerating: boolean) => void;
}

export function ChatBot({
  title = "AI Chat",
  subtitle = "Ask me anything",
  placeholder = "Send a message...",
  suggestions = [],
  knowledgeBase,
  openAIConfig,
  disableToasts = false,
  loadingIndicator,
  onResponseGenerationStateChange
}: ChatBotProps) {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [activeVectorStore, setActiveVectorStore] = useState<string | null>(null);
  const [activeAssistant, setActiveAssistant] = useState<string | null>(null);
  const [usedVectorStore, setUsedVectorStore] = useState(false);
  const [usedAssistant, setUsedAssistant] = useState(false);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  // Scroll to bottom of messages only when new messages are added
  useEffect(() => {
    // Only scroll when there are actual messages
    if (messages.length > 0) {
      messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    }
  }, [messages]);

  // Update the response generation state when loading changes
  useEffect(() => {
    if (onResponseGenerationStateChange) {
      onResponseGenerationStateChange(isLoading);
    }
  }, [isLoading, onResponseGenerationStateChange]);

  const handleSendMessage = async (messageText: string) => {
    if (!messageText.trim()) return;
    
    // Clear previous error state
    setErrorMessage(null);

    // Add user message to chat
    const userMessage: Message = { role: "user", content: messageText };
    setMessages(prev => [...prev, userMessage]);
    setInputValue("");
    setIsLoading(true);

    try {
      console.log("Using custom OpenAI config:", openAIConfig ? "Yes" : "No");
      if (openAIConfig) {
        console.log("Vector Store ID:", openAIConfig.vectorStoreId);
        console.log("Assistant ID:", openAIConfig.assistantId);
        console.log("API Key provided:", openAIConfig.apiKey ? "Yes" : "No");
      }
      
      // Call the Supabase Edge Function with the class-specific OpenAI configuration
      const { data, error } = await supabase.functions.invoke("chat", {
        body: {
          message: messageText,
          history: messages,
          openAIConfig: openAIConfig,
          knowledgeBase: knowledgeBase
        }
      });

      if (error) {
        console.error("Edge function error:", error);
        throw new Error(`Edge function error: ${error.message}`);
      }

      if (data.error) {
        console.error("API response error:", data.error);
        setErrorMessage(data.error);
        throw new Error(data.error);
      }

      // Add AI response to chat
      const aiMessage: Message = { role: "assistant", content: data.response };
      setMessages(prev => [...prev, aiMessage]);
      
      // Store the active vector store and assistant IDs for display
      setActiveVectorStore(data.vectorStoreId || null);
      setActiveAssistant(data.assistantId || null);
      setUsedVectorStore(data.usedVectorStore || false);
      setUsedAssistant(data.usedAssistant || false);
      
      // All toasts are now permanently disabled by setting disableToasts to true
      // and adding false to the condition to ensure it's always false

    } catch (error: any) {
      console.error("Error getting AI response:", error);
      
      let errorMessage = "Failed to get a response from AI.";
      
      // Provide more user-friendly error messages based on common issues
      if (error.message?.includes("Invalid OpenAI API key") || 
          error.message?.includes("Authentication error")) {
        errorMessage = "Invalid OpenAI API key. Please check your class settings and update the API key.";
      } else if (error.message?.includes("OpenAI API key not provided")) {
        errorMessage = "No OpenAI API key found. Please add an API key in your class settings.";
      } else if (error.message?.includes("rate limit")) {
        errorMessage = "OpenAI API rate limit exceeded. Please try again in a few minutes.";
      } else if (error.message?.includes("Edge function")) {
        errorMessage = "Connection issue with the AI service. Please check your internet connection and try again.";
      } else if (error.message?.includes("vector store")) {
        errorMessage = "Failed to connect to your class knowledge base. Using general knowledge instead.";
      }
      
      setErrorMessage(errorMessage);
      
      // All toasts are now permanently disabled

      // Add error message to chat
      const errorMessageContent: Message = {
        role: "assistant",
        content: `Sorry, I couldn't process your request. ${errorMessage}`
      };
      setMessages(prev => [...prev, errorMessageContent]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex flex-col h-[600px] max-h-[80vh]">
      <div className="pb-4 border-b">
        <div className="flex items-center justify-between">
          <h2 className="text-lg font-medium">{title}</h2>
          
          <div className="flex gap-2">
            {activeVectorStore && (
              <Badge variant={usedVectorStore ? "default" : "outline"} className="flex items-center gap-1">
                <Database className="h-3 w-3" />
                <span className="text-xs">{usedVectorStore ? "Using" : "Has"} Knowledge Base</span>
              </Badge>
            )}
            
            {activeAssistant && (
              <Badge variant={usedAssistant ? "default" : "outline"} className="flex items-center gap-1">
                <Bot className="h-3 w-3" />
                <span className="text-xs">{usedAssistant ? "Using" : "Has"} Assistant</span>
              </Badge>
            )}
          </div>
        </div>
        <p className="text-sm text-muted-foreground">{subtitle}</p>
      </div>

      <div className="flex-1 overflow-y-auto py-4 space-y-4 scrollbar-thin">
        {messages.map((message, index) => (
          <ChatMessage
            key={index}
            content={message.content}
            isUser={message.role === "user"}
          />
        ))}

        {errorMessage && messages.length > 0 && (
          <Alert variant="destructive" className="mx-4 my-2">
            <AlertCircle className="h-4 w-4" />
            <div className="ml-2 text-sm">{errorMessage}</div>
          </Alert>
        )}

        {/* Custom loading indicator */}
        {isLoading && loadingIndicator}

        {messages.length === 0 && (
          <div className="p-4">
            <p className="text-sm text-center text-muted-foreground mb-4">
              I can help answer questions about {knowledgeBase || "various topics"}
            </p>
            
            {openAIConfig?.vectorStoreId && (
              <div className="bg-green-50 border border-green-200 rounded-md p-3 mb-4 text-sm text-green-800">
                <p className="font-medium flex items-center gap-2">
                  <Database className="h-4 w-4" />
                  Using dedicated knowledge base
                </p>
                <p className="text-xs text-green-600 mt-1">
                  Answers will be based on your class materials
                </p>
              </div>
            )}
            
            {!openAIConfig?.apiKey && (
              <div className="bg-amber-50 border border-amber-200 rounded-md p-3 mb-4 text-sm text-amber-800">
                <p className="font-medium">No OpenAI API key configured</p>
                <p className="text-xs text-amber-700 mt-1">
                  Please add an API key in your class settings for this feature to work
                </p>
              </div>
            )}
            
            {suggestions.length > 0 && (
              <div className="space-y-2">
                <p className="text-sm text-center font-medium">Try asking:</p>
                <div className="flex flex-wrap gap-2 justify-center">
                  {suggestions.map((suggestion, i) => (
                    <Button
                      key={i}
                      variant="outline"
                      size="sm"
                      onClick={() => handleSendMessage(suggestion)}
                      className="text-xs"
                    >
                      {suggestion}
                    </Button>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}

        {/* Keep the ref but don't force scroll on initial render */}
        <div ref={messagesEndRef} />
      </div>

      <div className="pt-4 border-t mt-auto">
        <ChatInput 
          onSend={handleSendMessage} 
          suggestions={[]} 
          isLoading={isLoading} 
        />
      </div>
    </div>
  );
}

================
File: src/components/chat/ChatInput.tsx
================
import { useState, FormEvent } from "react";
import { SendHorizontal } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";

interface ChatInputProps {
  onSend: (message: string) => void;
  suggestions?: string[];
  isLoading?: boolean;
}

export function ChatInput({ onSend, suggestions = [], isLoading = false }: ChatInputProps) {
  const [input, setInput] = useState("");

  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();
    if (input.trim()) {
      onSend(input);
      setInput("");
    }
  };

  const handleSuggestionClick = (suggestion: string) => {
    onSend(suggestion);
  };

  return (
    <div className="mt-4">
      {suggestions.length > 0 && (
        <div className="mb-3 flex flex-wrap gap-2">
          {suggestions.map((suggestion, index) => (
            <Button
              key={index}
              variant="outline"
              size="sm"
              onClick={() => handleSuggestionClick(suggestion)}
              className="text-sm bg-white"
            >
              {suggestion}
            </Button>
          ))}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="flex items-center gap-2">
        <Input
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Type your message here..."
          className="flex-grow"
          disabled={isLoading}
        />
        <Button type="submit" disabled={isLoading || !input.trim()}>
          <SendHorizontal className="h-5 w-5 mr-1" />
          Send
        </Button>
      </form>
    </div>
  );
}

================
File: src/components/chat/ChatMessage.tsx
================
import React from 'react';
import { ThumbsUp, ThumbsDown, Copy, Check } from 'lucide-react';
import { MarkdownRenderer } from './MarkdownRenderer';
import { Button } from '@/components/ui/button';

interface ChatMessageProps {
  content: string;
  isUser: boolean;
  timestamp?: string;
  onCopy?: () => void;
  isCopied?: boolean;
}

export function ChatMessage({ content, isUser, timestamp, onCopy, isCopied = false }: ChatMessageProps) {
  return (
    <div className={`${isUser ? 'user-message' : 'ai-message'}`}>
      <div className="flex items-center justify-between mb-1">
        <span className="font-medium text-sm">
          {isUser ? 'You' : 'CyberCoach AI'}
        </span>
        {timestamp && (
          <span className="text-xs text-gray-500 ml-2">{timestamp}</span>
        )}
        {!isUser && onCopy && (
          <Button 
            variant="ghost" 
            size="sm" 
            className="ml-auto text-gray-500 hover:text-cybercoach-blue h-7 px-2"
            onClick={onCopy}
            title="Copy to clipboard"
          >
            {isCopied ? (
              <Check className="h-4 w-4" />
            ) : (
              <Copy className="h-4 w-4" />
            )}
          </Button>
        )}
      </div>
      
      {isUser ? (
        <p>{content}</p>
      ) : (
        <>
          <MarkdownRenderer content={content} />
          
          <div className="flex items-center mt-3 space-x-2 text-sm">
            <Button variant="ghost" size="sm" className="text-gray-500 hover:text-cybercoach-blue">
              <ThumbsUp className="h-4 w-4 mr-1" />
              <span>Helpful</span>
            </Button>
            <Button variant="ghost" size="sm" className="text-gray-500 hover:text-cybercoach-blue">
              <ThumbsDown className="h-4 w-4 mr-1" />
              <span>Not helpful</span>
            </Button>
            <Button variant="link" size="sm" className="text-cybercoach-teal">
              Suggest a better answer
            </Button>
          </div>
        </>
      )}
    </div>
  );
}

================
File: src/components/chat/FileUpload.tsx
================
import { useState } from "react";
import { Upload, X, FileUp } from "lucide-react";
import { Button } from "@/components/ui/button";

interface FileUploadProps {
  onFileUpload: (file: File) => void;
  compact?: boolean;
}

export function FileUpload({ onFileUpload, compact = false }: FileUploadProps) {
  const [file, setFile] = useState<File | null>(null);
  const [isDragOver, setIsDragOver] = useState(false);

  const handleFileDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      const uploadedFile = e.dataTransfer.files[0];
      setFile(uploadedFile);
      onFileUpload(uploadedFile);
    }
  };
  
  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const uploadedFile = e.target.files[0];
      setFile(uploadedFile);
      onFileUpload(uploadedFile);
    }
  };
  
  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(true);
  };
  
  const handleDragLeave = () => {
    setIsDragOver(false);
  };
  
  const removeFile = () => {
    setFile(null);
  };

  if (compact) {
    return (
      <div>
        {!file ? (
          <div
            className={`border-2 border-dashed rounded-lg p-2 text-center ${
              isDragOver ? "border-cybercoach-teal bg-cybercoach-teal/5" : "border-gray-300"
            }`}
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
            onDrop={handleFileDrop}
          >
            <p className="text-xs text-gray-500">
              <span className="font-semibold">Drop file</span> or 
              <label htmlFor="compact-file-upload" className="text-cybercoach-teal cursor-pointer ml-1">
                browse
              </label>
            </p>
            <input
              type="file"
              className="hidden"
              id="compact-file-upload"
              accept=".pdf,.docx,.pptx,.txt"
              onChange={handleFileSelect}
            />
          </div>
        ) : (
          <div className="flex items-center justify-between bg-cybercoach-teal/10 p-2 rounded-lg">
            <div className="flex items-center overflow-hidden">
              <FileUp className="h-4 w-4 text-cybercoach-teal flex-shrink-0 mr-2" />
              <span className="text-xs font-medium truncate max-w-[120px]">
                {file.name}
              </span>
            </div>
            <Button
              variant="ghost"
              size="icon"
              className="h-6 w-6"
              onClick={removeFile}
            >
              <X className="h-3 w-3" />
            </Button>
          </div>
        )}
      </div>
    );
  }

  return (
    <div className="mb-6">
      {!file ? (
        <div
          className={`border-2 border-dashed rounded-lg p-6 text-center ${
            isDragOver ? "border-cybercoach-teal bg-cybercoach-teal/5" : "border-gray-300"
          }`}
          onDragOver={handleDragOver}
          onDragLeave={handleDragLeave}
          onDrop={handleFileDrop}
        >
          <FileUp className="mx-auto h-10 w-10 text-gray-400 mb-2" />
          <p className="mb-2 text-sm text-gray-500">
            <span className="font-semibold">Click to upload</span> or drag and drop
          </p>
          <p className="text-xs text-gray-500">
            PDF, DOCX, PPTX or TXT (MAX. 10MB)
          </p>
          <input
            type="file"
            className="hidden"
            id="file-upload"
            accept=".pdf,.docx,.pptx,.txt"
            onChange={handleFileSelect}
          />
          <label htmlFor="file-upload">
            <Button variant="outline" className="mt-4" size="sm" asChild>
              <span>
                <Upload className="h-4 w-4 mr-2" />
                Select File
              </span>
            </Button>
          </label>
        </div>
      ) : (
        <div className="flex items-center justify-between bg-cybercoach-teal/10 p-3 rounded-lg">
          <div className="flex items-center">
            <FileUp className="h-5 w-5 text-cybercoach-teal mr-2" />
            <span className="text-sm font-medium truncate max-w-[200px]">
              {file.name}
            </span>
            <span className="text-xs text-gray-500 ml-2">
              {(file.size / 1024).toFixed(1)} KB
            </span>
          </div>
          <Button
            variant="ghost"
            size="icon"
            className="h-8 w-8"
            onClick={removeFile}
          >
            <X className="h-4 w-4" />
          </Button>
        </div>
      )}
    </div>
  );
}

================
File: src/components/chat/MarkdownRenderer.tsx
================
import React from 'react';

interface MarkdownRendererProps {
  content: string;
}

export function MarkdownRenderer({ content }: MarkdownRendererProps) {
  // Basic markdown rendering logic
  const renderMarkdown = (text: string) => {
    // Replace bold (both ** and __ syntax)
    let rendered = text.replace(/(\*\*|__)(.*?)\1/g, '<strong>$2</strong>');
    
    // Replace italics (both * and _ syntax)
    rendered = rendered.replace(/(\*|_)(.*?)\1/g, '<em>$2</em>');
    
    // Replace links
    rendered = rendered.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer" class="text-cybercoach-teal underline">$1</a>');
    
    // Handle bullet lists properly
    rendered = rendered.replace(
      /(?:^\s*-\s+(.+)$\n?)+/gm, 
      function(match) {
        // Extract each list item
        const items = match.split('\n')
          .filter(line => line.trim().match(/^\s*-\s+/))
          .map(line => `<li>${line.replace(/^\s*-\s+/, '')}</li>`)
          .join('');
        
        return `<ul class="list-disc pl-5 my-2 space-y-0.5">${items}</ul>`;
      }
    );
    
    // Handle numbered lists (already working well, but adding for completeness)
    rendered = rendered.replace(
      /(?:^\s*\d+\.\s+(.+)$\n?)+/gm,
      function(match) {
        // Extract each list item
        const items = match.split('\n')
          .filter(line => line.trim().match(/^\s*\d+\.\s+/))
          .map(line => `<li>${line.replace(/^\s*\d+\.\s+/, '')}</li>`)
          .join('');
        
        return `<ol class="list-decimal pl-5 my-2 space-y-0.5">${items}</ol>`;
      }
    );
    
    // Replace code blocks
    rendered = rendered.replace(/`([^`]+)`/g, '<code class="bg-gray-100 px-1 rounded">$1</code>');
    
    // Replace line breaks with <br />
    rendered = rendered.replace(/\n/g, '<br />');
    
    return rendered;
  };

  return (
    <div 
      className="markdown-content" 
      dangerouslySetInnerHTML={{ __html: renderMarkdown(content) }}
    />
  );
}

================
File: src/components/class/dialog/ClassInfoSection.tsx
================
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import React from "react";

interface ClassInfoSectionProps {
  title: string;
  professor: string;
  classTime: string;
  classroom: string;
  emoji: string;
  onTitleChange: (value: string) => void;
  onProfessorChange: (value: string) => void;
  onClassTimeChange: (value: string) => void;
  onClassroomChange: (value: string) => void;
  onEmojiChange: (value: string) => void;
  onEmojiPickerOpen?: () => void;
}

export function ClassInfoSection({
  title,
  professor,
  classTime,
  classroom,
  emoji,
  onTitleChange,
  onProfessorChange,
  onClassTimeChange,
  onClassroomChange,
  onEmojiChange,
  onEmojiPickerOpen
}: ClassInfoSectionProps) {
  return (
    <div className="space-y-4">
      <h3 className="text-lg font-medium">Class Information</h3>
      
      <div className="flex items-center gap-4">
        <div 
          className="flex items-center justify-center w-16 h-16 bg-gray-100 rounded-lg cursor-pointer hover:bg-gray-200 transition-all"
          onClick={onEmojiPickerOpen}
        >
          <span className="text-4xl">{emoji || "📚"}</span>
        </div>
        
        <div className="flex-1 space-y-2">
          <Label htmlFor="class-title">Class Title *</Label>
          <Input 
            id="class-title" 
            value={title} 
            onChange={(e) => onTitleChange(e.target.value)} 
            placeholder="e.g., Introduction to Computer Science" 
            required
          />
        </div>
      </div>
      
      <div className="grid gap-4 md:grid-cols-2">
        <div className="space-y-2">
          <Label htmlFor="professor">Professor</Label>
          <Input 
            id="professor" 
            value={professor} 
            onChange={(e) => onProfessorChange(e.target.value)} 
            placeholder="e.g., Dr. Smith"
          />
        </div>
        
        <div className="space-y-2">
          <Label htmlFor="class-time">Class Time</Label>
          <Input 
            id="class-time" 
            value={classTime} 
            onChange={(e) => onClassTimeChange(e.target.value)} 
            placeholder="e.g., Mon/Wed 2:00-3:30 PM"
          />
        </div>
      </div>
      
      <div className="space-y-2">
        <Label htmlFor="classroom">Classroom</Label>
        <Input 
          id="classroom" 
          value={classroom} 
          onChange={(e) => onClassroomChange(e.target.value)} 
          placeholder="e.g., Science Building, Room 301"
        />
      </div>
    </div>
  );
}

================
File: src/components/class/dialog/CreateClassDialogContent.tsx
================
import React, { useState, useEffect } from "react";
import { BookOpen, SquareCheck } from "lucide-react";
import { ClassInfoSection } from "./ClassInfoSection";
import { OpenAIConfigSection } from "./OpenAIConfigSection";
import { WidgetSelectionSection } from "./WidgetSelectionSection";
import { ScrollArea } from "@/components/ui/scroll-area";
import { ClassData } from "../CreateClassDialog";
import { classOpenAIConfigService } from "@/services/classOpenAIConfig";
import { getEmojiForClass } from "@/utils/emojiUtils";
import { EmojiPicker } from "./EmojiPicker";
import { supabase } from "@/integrations/supabase/client";

interface CreateClassDialogContentProps {
  onClassCreate: (classData: ClassData) => void;
  onCancel: () => void;
  initialData?: ClassData;
  isEditing?: boolean;
}

// Interface for database row response
interface ClassOpenAIConfigRow {
  api_key?: string;
  assistant_id?: string;
  class_time?: string;
  class_title: string;
  classroom?: string;
  created_at?: string;
  emoji?: string;
  id: string;
  professor?: string;
  updated_at?: string;
  user_id?: string;
  vector_store_id?: string;
  enabled_widgets?: string[];
}

const availableWidgets = [
  {
    id: "flashcards",
    name: "Flashcards",
    description: "Create and study with interactive flashcards",
    path: "/flashcards",
    icon: <BookOpen className="h-5 w-5" />,
  },
  {
    id: "quizzes",
    name: "Quizzes",
    description: "Test your knowledge with adaptive quizzes",
    path: "/quizzes",
    icon: <SquareCheck className="h-5 w-5" />,
  }
];

export function CreateClassDialogContent({ onClassCreate, onCancel, initialData, isEditing = false }: CreateClassDialogContentProps) {
  const [title, setTitle] = useState(initialData?.title || "");
  const [professor, setProfessor] = useState(initialData?.professor || "");
  const [classTime, setClassTime] = useState(initialData?.classTime || "");
  const [classroom, setClassroom] = useState(initialData?.classroom || "");
  const [selectedWidgets, setSelectedWidgets] = useState<string[]>(initialData?.enabledWidgets || ["flashcards", "quizzes"]);
  const [emoji, setEmoji] = useState(initialData?.emoji || "");
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  
  // OpenAI configuration states
  const [openAIApiKey, setOpenAIApiKey] = useState(initialData?.openAIConfig?.apiKey || "");
  const [vectorStoreId, setVectorStoreId] = useState(initialData?.openAIConfig?.vectorStoreId || "");
  const [assistantId, setAssistantId] = useState(initialData?.openAIConfig?.assistantId || "");
  const [showOpenAIConfig, setShowOpenAIConfig] = useState(
    isEditing ? !!(initialData?.openAIConfig?.apiKey || initialData?.openAIConfig?.vectorStoreId || initialData?.openAIConfig?.assistantId) : false
  );
  const [user, setUser] = useState<any>(null);

  console.log("Initial emoji:", initialData?.emoji);
  console.log("Current emoji state:", emoji);
  console.log("Initial widgets:", initialData?.enabledWidgets);
  console.log("Current widgets state:", selectedWidgets);

  // Check for authenticated user
  useEffect(() => {
    const checkAuth = async () => {
      try {
        const { data } = await supabase.auth.getUser();
        console.log("Auth user in dialog content:", data.user?.id);
        setUser(data.user);
      } catch (error) {
        console.error("Error checking auth in dialog content:", error);
      }
    };
    
    checkAuth();
  }, []);

  // Fetch config from Supabase when editing
  useEffect(() => {
    const fetchConfig = async () => {
      if (initialData && isEditing && initialData.title && user) {
        try {
          console.log(`Fetching config for ${initialData.title} with user ID ${user.id}`);
          const config = await classOpenAIConfigService.getConfigForClass(initialData.title);
          if (config) {
            setOpenAIApiKey(config.apiKey || "");
            setVectorStoreId(config.vectorStoreId || "");
            setAssistantId(config.assistantId || "");
            setShowOpenAIConfig(true);
          }
          
          // Fetch the class record to get any other data
          const { data, error } = await supabase
            .from('class_openai_configs')
            .select('*')
            .eq('class_title', initialData.title)
            .eq('user_id', user.id)
            .maybeSingle();
            
          if (!error && data) {
            // Cast data as our enhanced interface
            const configData = data as ClassOpenAIConfigRow;
            
            // Set data from database
            setEmoji(configData.emoji || initialData.emoji || "");
            setProfessor(configData.professor || initialData.professor || "");
            setClassTime(configData.class_time || initialData.classTime || "");
            setClassroom(configData.classroom || initialData.classroom || "");
            
            // For enabled_widgets, make sure it exists and is an array
            if (configData.enabled_widgets && Array.isArray(configData.enabled_widgets)) {
              setSelectedWidgets(configData.enabled_widgets);
              console.log("Setting widgets from DB:", configData.enabled_widgets);
            } else {
              setSelectedWidgets(initialData.enabledWidgets || ["flashcards", "quizzes"]);
              console.log("Setting widgets from initialData or default:", initialData.enabledWidgets || ["flashcards", "quizzes"]);
            }
          }
        } catch (error) {
          console.error("Error fetching OpenAI config:", error);
        }
      }
    };
    
    fetchConfig();
  }, [initialData, isEditing, user]);

  // Set default emoji only for new classes and only if no emoji is explicitly set
  useEffect(() => {
    if (title && !emoji && !isEditing) {
      const generatedEmoji = getEmojiForClass(title);
      console.log(`Generated emoji for ${title}:`, generatedEmoji);
      setEmoji(generatedEmoji);
    }
  }, [title, emoji, isEditing]);

  // Update values when initialData changes (important for edit mode)
  useEffect(() => {
    if (initialData) {
      console.log("Setting initial data:", initialData);
      setTitle(initialData.title || "");
      setProfessor(initialData.professor || "");
      setClassTime(initialData.classTime || "");
      setClassroom(initialData.classroom || "");
      
      // Ensure enabledWidgets is always an array
      if (initialData.enabledWidgets && Array.isArray(initialData.enabledWidgets)) {
        setSelectedWidgets(initialData.enabledWidgets);
      } else {
        setSelectedWidgets(["flashcards", "quizzes"]);
      }
      
      setOpenAIApiKey(initialData.openAIConfig?.apiKey || "");
      setVectorStoreId(initialData.openAIConfig?.vectorStoreId || "");
      setAssistantId(initialData.openAIConfig?.assistantId || "");
      setEmoji(initialData.emoji || "");
      setShowOpenAIConfig(!!(initialData.openAIConfig?.apiKey || initialData.openAIConfig?.vectorStoreId || initialData.openAIConfig?.assistantId));
    }
  }, [initialData]);

  // Update parent component whenever form data changes
  useEffect(() => {
    if (!title) return;
    
    // Ensure selectedWidgets is always an array
    const safeSelectedWidgets = Array.isArray(selectedWidgets) ? selectedWidgets : ["flashcards", "quizzes"];
    
    const classData: ClassData = {
      title,
      professor,
      classTime,
      classroom,
      enabledWidgets: safeSelectedWidgets,
      emoji
    };
    
    // Add OpenAI configuration if any fields are provided
    if (openAIApiKey || vectorStoreId || assistantId) {
      classData.openAIConfig = {
        apiKey: openAIApiKey,
        vectorStoreId: vectorStoreId,
        assistantId: assistantId
      };
    }
    
    console.log("Updating class data:", classData);
    onClassCreate(classData);
    
    // If user is authenticated and in edit mode, also save to database
    if (user && isEditing && title) {
      classOpenAIConfigService.saveConfigForClass(
        title, 
        classData.openAIConfig || {}, 
        emoji,
        professor,
        classTime,
        classroom,
        safeSelectedWidgets
      ).catch(error => {
        console.error("Error saving class config:", error);
      });
    }
  }, [title, professor, classTime, classroom, selectedWidgets, emoji, openAIApiKey, vectorStoreId, assistantId, onClassCreate, user, isEditing]);

  const handleToggleWidget = (id: string) => {
    console.log("Toggle widget:", id);
    console.log("Current widgets:", selectedWidgets);
    
    setSelectedWidgets(prev => {
      // Ensure prev is an array
      const safeWidgets = Array.isArray(prev) ? prev : ["flashcards", "quizzes"];
      
      // Toggle the widget
      return safeWidgets.includes(id) 
        ? safeWidgets.filter(widgetId => widgetId !== id) 
        : [...safeWidgets, id];
    });
  };

  const handleSelectEmoji = (selectedEmoji: string) => {
    console.log("Selected emoji:", selectedEmoji);
    setEmoji(selectedEmoji);
    setShowEmojiPicker(false);
  };

  return (
    <ScrollArea className="max-h-[calc(90vh-180px)]">
      <div className="space-y-6 py-2 pr-4">
        {/* Class title and information */}
        <ClassInfoSection 
          title={title}
          professor={professor}
          classTime={classTime}
          classroom={classroom}
          emoji={emoji}
          onTitleChange={setTitle}
          onProfessorChange={setProfessor}
          onClassTimeChange={setClassTime}
          onClassroomChange={setClassroom}
          onEmojiChange={setEmoji}
          onEmojiPickerOpen={() => setShowEmojiPicker(true)}
        />
        
        {/* Emoji Picker Dialog */}
        {showEmojiPicker && (
          <EmojiPicker 
            open={showEmojiPicker}
            onOpenChange={setShowEmojiPicker}
            onSelect={handleSelectEmoji}
          />
        )}
        
        {/* OpenAI Configuration */}
        <OpenAIConfigSection 
          openAIApiKey={openAIApiKey}
          vectorStoreId={vectorStoreId}
          assistantId={assistantId}
          showOpenAIConfig={showOpenAIConfig}
          onApiKeyChange={setOpenAIApiKey}
          onVectorStoreIdChange={setVectorStoreId}
          onAssistantIdChange={setAssistantId}
          onToggleConfig={() => setShowOpenAIConfig(!showOpenAIConfig)}
        />
        
        {/* Widget selection */}
        <WidgetSelectionSection 
          selectedWidgets={selectedWidgets}
          availableWidgets={availableWidgets}
          onToggleWidget={handleToggleWidget}
        />
      </div>
    </ScrollArea>
  );
}

================
File: src/components/class/dialog/EmojiPicker.tsx
================
import React, { useState } from "react";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Input } from "@/components/ui/input";
import { Search } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

interface EmojiPickerProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSelect: (emoji: string) => void;
}

// Educational subject categories
const emojiCategories = {
  "STEM": [
    "⚛️", "🧪", "🧬", "🔭", "🧮", "📊", "📈", "🔢", "📐", "🔬", "🧠", "🤖", 
    "💻", "👨‍💻", "📱", "⚙️", "🔌", "🔋", "💾", "📡", "📕", "📚", "🔍", "📝", 
    "🧮", "🔄", "📏", "📊", "📑", "📒", "🧫", "🦠", "💉", "💊", "🫀", "🦴", 
    "🔭", "🔬", "⚗️", "🧲", "🔩", "⚖️", "🦾", "🔋", "💻"
  ],
  "Humanities": [
    "📚", "📝", "🏛️", "🧠", "🎨", "🎵", "🗣️", "🎭", "📜", "🖋️", "✍️", "📰",
    "📕", "📖", "📗", "📘", "📙", "🗂️", "🖼️", "🎨", "🎬", "🎤", "🎼", "🎧", "🎵", 
    "🗿", "🏺", "🗝️", "🖌️", "🧩", "🎪", "🎹", "🎲", "🎯", "🎮", "🎨", "🖍️", 
    "🏺", "🎭", "👑", "🏆", "🎖️", "📰", "📻", "🖥️", "🖨️"
  ],
  "Business & Economics": [
    "💼", "📈", "💰", "📊", "🧮", "📢", "👔", "📋", "💹", "💱", "💲", "💳", "💵", 
    "💴", "💶", "💷", "📉", "📑", "📁", "📅", "⌚", "🗓️", "📱", "🗄️", "📒", "🖋️",
    "📝", "📌", "📎", "📏", "📐", "📘", "📊", "📋", "📇", "🗃️", "📂", "🖇️", "🗂️", 
    "📮", "📭", "🏦", "🏧", "💸", "💰", "💎"
  ],
  "Languages & Communication": [
    "🗣️", "📝", "✍️", "🌍", "🔤", "🔡", "🔠", "🔣", "📰", "📑", "🗒️", "📔", "🖋️", 
    "✏️", "📖", "📚", "🔖", "🗯️", "💬", "🗨️", "✉️", "📧", "🎙️", "🎤", "📣", "📢", 
    "🔊", "📱", "📲", "📞", "📌", "🗞️", "🗞️", "📰"
  ],
  "Social Sciences": [
    "👥", "🧠", "🏺", "🗺️", "🏛️", "⚖️", "🕊️", "🌐", "🧮", "📊", "📈", "📉", "📋", 
    "📊", "🗂️", "📁", "📂", "🗃️", "📰", "📑", "📚", "💭", "🔍", "🧩", "🧿", "🌱", 
    "🌿", "🌎", "🌍", "🌏", "🏙️", "🏘️", "🏫", "🧑‍⚖️", "👨‍👩‍👧‍👦"
  ],
  "Arts & Physical Education": [
    "🎨", "🎭", "🎬", "🎧", "🎵", "🎼", "🎺", "🎸", "🎻", "🎹", "🏃", "⚽", "🏀", 
    "🏈", "⚾", "🥎", "🎾", "🏐", "🏉", "🏓", "🏸", "🏒", "🏑", "🏏", "⛳", "🏹", 
    "🎣", "🥊", "🥋", "🎽", "🛹", "🎿", "🏂", "🏋️", "🤸", "🤺", "⛹️", "🤾", 
    "🏌️", "🏄", "🏊", "🤽", "🚣", "🧗", "🚵", "🚴", "🏆"
  ],
  "Symbols & Tools": [
    "🔍", "🔎", "📌", "📎", "🖇️", "📏", "📐", "✂️", "🖊️", "🖋️", "✒️", "🖌️", "🖍️", 
    "📝", "✏️", "📓", "📔", "📒", "📕", "📗", "📘", "📙", "📚", "📖", "🔖", "🗒️", 
    "🔗", "📋", "📊", "📈", "📉", "📇", "🗃️", "🗄️", "📂", "📁", "📰", "🗞️", "📊",
    "🔒", "🔑", "🗝️", "🔨", "🧰", "🧲", "🔧", "🔩", "⚙️"
  ]
};

export function EmojiPicker({ open, onOpenChange, onSelect }: EmojiPickerProps) {
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("STEM");
  
  const handleEmojiClick = (emoji: string) => {
    onSelect(emoji);
  };
  
  const filteredEmojis = searchTerm ? 
    Object.values(emojiCategories).flat().filter(emoji => {
      // Simple search - just check if the emoji contains the search term
      return emoji.includes(searchTerm);
    }) :
    emojiCategories[selectedCategory as keyof typeof emojiCategories];
  
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-md">
        <DialogTitle className="text-center">Select Subject Emoji</DialogTitle>
        
        <div className="relative mb-4">
          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input 
            placeholder="Search emojis..." 
            className="pl-8" 
            value={searchTerm} 
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
        
        {!searchTerm && (
          <Tabs defaultValue="STEM" value={selectedCategory} onValueChange={setSelectedCategory}>
            <TabsList className="grid grid-cols-3 mb-4">
              <TabsTrigger value="STEM">STEM</TabsTrigger>
              <TabsTrigger value="Humanities">Humanities</TabsTrigger>
              <TabsTrigger value="Social Sciences">Social</TabsTrigger>
            </TabsList>
          </Tabs>
        )}
        
        <ScrollArea className="h-[300px] pr-4">
          <div className="grid grid-cols-8 gap-2">
            {filteredEmojis.map((emoji, index) => (
              <Button 
                key={index} 
                variant="ghost" 
                className="h-9 w-9 p-0 hover:bg-accent"
                onClick={() => handleEmojiClick(emoji)}
              >
                <span className="text-xl">{emoji}</span>
              </Button>
            ))}
          </div>
        </ScrollArea>
      </DialogContent>
    </Dialog>
  );
}

================
File: src/components/class/dialog/MaterialsUploadSection.tsx
================
import React from "react";
import { Upload } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";

interface MaterialsUploadSectionProps {
  onUpload: () => void;
}

export function MaterialsUploadSection({ onUpload }: MaterialsUploadSectionProps) {
  return (
    <div>
      <Label>Upload Materials (optional)</Label>
      <div className="mt-2">
        <Button 
          variant="outline" 
          className="w-full h-20 flex flex-col"
          onClick={onUpload}
        >
          <Upload className="h-6 w-6 mb-2" />
          <span>Upload syllabus, notes, readings, etc.</span>
          <span className="text-xs text-muted-foreground mt-1">Files will be processed for your class AI</span>
        </Button>
      </div>
    </div>
  );
}

================
File: src/components/class/dialog/OpenAIConfigSection.tsx
================
import React from "react";
import { Code, Info, Database, Bot } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from "@/components/ui/tooltip";

interface OpenAIConfigSectionProps {
  openAIApiKey: string;
  vectorStoreId: string;
  assistantId: string;
  showOpenAIConfig: boolean;
  onApiKeyChange: (value: string) => void;
  onVectorStoreIdChange: (value: string) => void;
  onAssistantIdChange: (value: string) => void;
  onToggleConfig: () => void;
}

export function OpenAIConfigSection({
  openAIApiKey,
  vectorStoreId,
  assistantId,
  showOpenAIConfig,
  onApiKeyChange,
  onVectorStoreIdChange,
  onAssistantIdChange,
  onToggleConfig
}: OpenAIConfigSectionProps) {
  return (
    <div className="border rounded-lg p-4">
      <div className="flex justify-between items-center mb-4">
        <div className="flex items-center gap-2">
          <Code className="h-5 w-5" />
          <Label className="text-base font-medium">OpenAI Configuration</Label>
          <Tooltip>
            <TooltipTrigger asChild>
              <Info className="h-4 w-4 text-muted-foreground cursor-help" />
            </TooltipTrigger>
            <TooltipContent className="max-w-sm">
              <p>Configure class-specific OpenAI settings to use dedicated resources for this class.</p>
              <p className="mt-2">Each class can have its own Vector Store for specialized knowledge and AI Assistant.</p>
            </TooltipContent>
          </Tooltip>
        </div>
        <Button
          variant="ghost"
          size="sm"
          onClick={onToggleConfig}
        >
          {showOpenAIConfig ? "Hide" : "Show"}
        </Button>
      </div>
      
      {showOpenAIConfig && (
        <div className="space-y-6">
          <div>
            <Label htmlFor="openai-api-key" className="flex items-center gap-1 mb-3">
              OpenAI API Key
              <Tooltip>
                <TooltipTrigger asChild>
                  <Info className="h-3 w-3 text-muted-foreground cursor-help" />
                </TooltipTrigger>
                <TooltipContent>
                  Your OpenAI API key for this class. This will be stored securely.
                </TooltipContent>
              </Tooltip>
            </Label>
            <Input 
              id="openai-api-key"
              type="text" 
              placeholder="sk-..." 
              value={openAIApiKey}
              onChange={(e) => onApiKeyChange(e.target.value)}
              className="font-mono"
            />
          </div>
          
          <div>
            <Label htmlFor="assistant-id" className="flex items-center gap-1 mb-3">
              <Bot className="h-4 w-4 mr-1" />
              Assistant ID
              <Tooltip>
                <TooltipTrigger asChild>
                  <Info className="h-3 w-3 text-muted-foreground cursor-help" />
                </TooltipTrigger>
                <TooltipContent>
                  The ID of your OpenAI Assistant that contains your class knowledge. Recommended approach.
                </TooltipContent>
              </Tooltip>
            </Label>
            <Input 
              id="assistant-id"
              placeholder="asst_..." 
              value={assistantId}
              onChange={(e) => onAssistantIdChange(e.target.value)}
              className="font-mono"
            />
          </div>
          
          <div>
            <Label htmlFor="vector-store-id" className="flex items-center gap-1 mb-3">
              <Database className="h-4 w-4 mr-1" />
              Vector Store ID (Legacy)
              <Tooltip>
                <TooltipTrigger asChild>
                  <Info className="h-3 w-3 text-muted-foreground cursor-help" />
                </TooltipTrigger>
                <TooltipContent className="max-w-sm">
                  <p>Vector Store IDs are now deprecated. Please use an Assistant instead.</p>
                  <p className="mt-1">Create an Assistant in the OpenAI platform and connect files to it directly.</p>
                </TooltipContent>
              </Tooltip>
            </Label>
            <Input 
              id="vector-store-id"
              placeholder="vs_..." 
              value={vectorStoreId}
              onChange={(e) => onVectorStoreIdChange(e.target.value)}
              className="font-mono"
            />
          </div>
        </div>
      )}
    </div>
  );
}

================
File: src/components/class/dialog/WidgetSelectionSection.tsx
================
import React from "react";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { WidgetCard } from "@/components/widgets/WidgetCard";
import { AddWidgetsDialog } from "@/components/widgets/AddWidgetsDialog";
import { useToast } from "@/hooks/use-toast";

interface Widget {
  id: string;
  name: string;
  description: string;
  path: string;
  icon: React.ReactNode;
}

interface WidgetSelectionSectionProps {
  selectedWidgets: string[];
  availableWidgets: Widget[];
  onToggleWidget: (id: string) => void;
}

export function WidgetSelectionSection({
  selectedWidgets,
  availableWidgets,
  onToggleWidget
}: WidgetSelectionSectionProps) {
  const [isAddWidgetsOpen, setIsAddWidgetsOpen] = React.useState(false);
  const { toast } = useToast();
  
  // Ensure selectedWidgets is always an array with default values if not
  const safeSelectedWidgets = Array.isArray(selectedWidgets) ? selectedWidgets : ["flashcards", "quizzes"];
  
  // Display only the recommended widgets (limit to 3)
  const recommendedWidgets = availableWidgets.slice(0, 3);
  
  const handleToggleWidget = (id: string) => {
    try {
      onToggleWidget(id);
    } catch (error) {
      console.error(`Error toggling widget ${id}:`, error);
      toast({
        title: "Error updating widget",
        description: "Failed to update widget selection. Please try again.",
        variant: "destructive"
      });
    }
  };
  
  return (
    <div>
      <Label className="mb-2 block">Select Widgets for this Class</Label>
      <div className="space-y-3">
        {recommendedWidgets.map(widget => (
          <WidgetCard
            key={widget.id}
            id={widget.id}
            name={widget.name}
            description={widget.description}
            icon={widget.icon}
            isSelected={safeSelectedWidgets.includes(widget.id)}
            onToggle={() => handleToggleWidget(widget.id)}
          />
        ))}
        
        <Button
          variant="outline"
          className="w-full flex items-center justify-center py-6"
          onClick={() => setIsAddWidgetsOpen(true)}
        >
          <PlusCircle className="mr-2 h-4 w-4" />
          See More Widgets
        </Button>
      </div>
      
      <AddWidgetsDialog 
        open={isAddWidgetsOpen} 
        onOpenChange={setIsAddWidgetsOpen}
        classMode={true}
        currentClassName="Current Class"
      />
    </div>
  );
}

================
File: src/components/class/CreateClassDialog.tsx
================
import { 
  Dialog,
  DialogContent,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogDescription
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { CreateClassDialogContent } from "./dialog/CreateClassDialogContent";
import { useState, useEffect } from "react";
import { classOpenAIConfigService } from "@/services/classOpenAIConfig";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";

interface CreateClassDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onClassCreate: (classData: ClassData) => void;
}

export interface ClassData {
  title: string;
  professor?: string;
  classTime?: string;
  classroom?: string;
  emoji?: string;
  enabledWidgets: string[];
  openAIConfig?: {
    apiKey?: string;
    vectorStoreId?: string;
    assistantId?: string;
  };
}

export function CreateClassDialog({ open, onOpenChange, onClassCreate }: CreateClassDialogProps) {
  const [isFormValid, setIsFormValid] = useState(false);
  const [formData, setFormData] = useState<ClassData | null>(null);
  const [user, setUser] = useState<any>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();
  
  // Check for authenticated user
  useEffect(() => {
    const checkAuth = async () => {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        console.log("Auth session check in CreateClassDialog:", session);
        setUser(session?.user || null);
      } catch (error) {
        console.error("Error checking auth in CreateClassDialog:", error);
      }
    };
    
    checkAuth();
    
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
      console.log("Auth state change in CreateClassDialog:", event, session?.user?.id);
      setUser(session?.user || null);
    });
    
    return () => subscription.unsubscribe();
  }, []);
  
  // Reset form when dialog closes
  useEffect(() => {
    if (!open) {
      setFormData(null);
      setIsFormValid(false);
      setIsSubmitting(false);
    }
  }, [open]);
  
  const handleSubmit = async () => {
    if (!formData || !formData.title.trim()) {
      toast({
        title: "Missing information",
        description: "Please provide a title for your class.",
        variant: "destructive",
      });
      return;
    }
    
    try {
      setIsSubmitting(true);
      
      // Double-check authentication
      if (!user) {
        const { data: { session } } = await supabase.auth.getSession();
        if (!session?.user) {
          throw new Error("You must be signed in to create a class");
        }
        setUser(session.user);
      }
      
      console.log("Creating class with user:", user?.id);
      console.log("Class data:", formData);
      
      // Ensure enabledWidgets is always an array
      const safeEnabledWidgets = Array.isArray(formData.enabledWidgets) ? formData.enabledWidgets : ["flashcards", "quizzes"];
      
      // Save to database
      await classOpenAIConfigService.saveConfigForClass(
        formData.title, 
        formData.openAIConfig || {},
        formData.emoji,
        formData.professor,
        formData.classTime,
        formData.classroom,
        safeEnabledWidgets
      );
      
      // Then call the parent callback with safe data
      const safeFormData = {
        ...formData,
        enabledWidgets: safeEnabledWidgets
      };
      
      // Close dialog first before notifying parent component
      onOpenChange(false);
      
      // Then notify the parent component
      onClassCreate(safeFormData);
      
      setFormData(null);
      setIsFormValid(false);
      
      toast({
        title: "Class created successfully",
        description: `${formData.title} has been added to your dashboard.`,
      });
    } catch (error: any) {
      console.error("Error saving class:", error);
      toast({
        title: "Error creating class",
        description: error.message || "There was a problem saving your class data. Please make sure you're signed in and try again.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleCancel = () => {
    onOpenChange(false);
    setFormData(null);
    setIsFormValid(false);
  };

  const handleFormDataChange = (data: ClassData) => {
    setFormData(data);
    setIsFormValid(!!data.title.trim());
  };

  return (
    <Dialog 
      open={open} 
      onOpenChange={(newOpen) => {
        if (!isSubmitting) {
          onOpenChange(newOpen);
        }
      }}
    >
      <DialogContent className="sm:max-w-2xl max-h-[90vh]">
        <DialogHeader className="text-left">
          <DialogTitle>Create New Class</DialogTitle>
          <DialogDescription>
            Set up your new class with all the tools you'll need
          </DialogDescription>
        </DialogHeader>
        
        <CreateClassDialogContent 
          onClassCreate={handleFormDataChange}
          onCancel={handleCancel}
        />
        
        <DialogFooter className="flex justify-between sm:justify-between mt-4 pt-2 border-t">
          <Button variant="outline" onClick={handleCancel} disabled={isSubmitting}>
            Cancel
          </Button>
          <Button 
            onClick={handleSubmit} 
            disabled={!isFormValid || !user || isSubmitting}
          >
            {isSubmitting ? "Creating..." : "Create Class"}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

================
File: src/components/class/EditClassDialog.tsx
================
import { 
  Dialog,
  DialogContent,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogDescription
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { CreateClassDialogContent } from "./dialog/CreateClassDialogContent";
import { useState, useEffect } from "react";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { ClassData } from "./CreateClassDialog";
import { useToast } from "@/hooks/use-toast";
import { classOpenAIConfigService } from "@/services/classOpenAIConfig";
import { supabase } from "@/integrations/supabase/client";

interface EditClassDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onClassUpdate: (classData: ClassData) => void;
  onClassDelete: () => void;
  initialData: ClassData;
}

export function EditClassDialog({ 
  open, 
  onOpenChange, 
  onClassUpdate, 
  onClassDelete,
  initialData 
}: EditClassDialogProps) {
  // State to track form validity (for the update button)
  const [isFormValid, setIsFormValid] = useState(false);
  // Reference to form data for submission
  const [formData, setFormData] = useState<ClassData | null>(null);
  const [showDeleteAlert, setShowDeleteAlert] = useState(false);
  const { toast } = useToast();
  const [user, setUser] = useState<any>(null);
  const [isDeleting, setIsDeleting] = useState(false);
  const [isSaving, setIsSaving] = useState(false);

  useEffect(() => {
    // Check for authenticated user
    const checkAuth = async () => {
      const { data: { session } } = await supabase.auth.getSession();
      setUser(session?.user || null);
    };
    
    checkAuth();
    
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
      setUser(session?.user || null);
    });
    
    return () => subscription.unsubscribe();
  }, []);

  useEffect(() => {
    if (initialData && open) {
      setFormData(initialData);
      setIsFormValid(!!initialData.title.trim());
    }
  }, [initialData, open]);

  const handleSubmit = async () => {
    if (!formData || !formData.title.trim()) {
      toast({
        title: "Missing information",
        description: "Please provide a title for your class.",
        variant: "destructive"
      });
      return;
    }

    if (!user) {
      toast({
        title: "Authentication required",
        description: "Please sign in to update your class.",
        variant: "destructive"
      });
      return;
    }
    
    try {
      setIsSaving(true);
      // If user is authenticated, save to database first
      await classOpenAIConfigService.saveConfigForClass(
        formData.title, 
        formData.openAIConfig || {},
        formData.emoji,
        formData.professor,
        formData.classTime,
        formData.classroom,
        formData.enabledWidgets
      );
      
      // Then call the parent callback
      onClassUpdate(formData);
      
      toast({
        title: "Class updated",
        description: `${formData.title} has been updated successfully.`
      });
      
      // Close the dialog immediately after successful update
      onOpenChange(false);
    } catch (error: any) {
      console.error("Error updating class:", error);
      toast({
        title: "Error updating class",
        description: error.message || "There was a problem saving your class data.",
        variant: "destructive",
      });
    } finally {
      setIsSaving(false);
    }
  };

  const handleCancel = () => {
    onOpenChange(false);
  };

  const handleFormDataChange = (data: ClassData) => {
    setFormData(data);
    setIsFormValid(!!data.title.trim());
  };

  const handleDelete = async () => {
    if (!initialData?.title) {
      toast({
        title: "Error deleting class",
        description: "No class title provided for deletion.",
        variant: "destructive",
      });
      return;
    }
    
    if (!user) {
      toast({
        title: "Authentication required",
        description: "Please sign in to delete your class.",
        variant: "destructive",
      });
      return;
    }
    
    try {
      setIsDeleting(true);
      setShowDeleteAlert(false); // Close the confirmation dialog immediately
      
      // Delete from database first - with proper error handling
      await classOpenAIConfigService.deleteClass(initialData.title);
      
      // Close the dialog immediately
      onOpenChange(false);
      
      // Then call the parent callback
      onClassDelete();
      
      toast({
        title: "Class deleted",
        description: `${initialData.title} has been removed from your dashboard.`
      });
    } catch (error: any) {
      console.error("Error deleting class:", error);
      toast({
        title: "Error deleting class",
        description: error.message || "There was a problem removing your class data.",
        variant: "destructive",
      });
      // Don't close the dialog if there's an error
    } finally {
      setIsDeleting(false);
    }
  };

  return (
    <>
      <Dialog 
        open={open} 
        onOpenChange={(newOpen) => {
          // Only allow changes if not in the middle of an operation
          if (!isDeleting && !isSaving) {
            onOpenChange(newOpen);
          }
        }}
      >
        <DialogContent className="sm:max-w-2xl max-h-[90vh]">
          <DialogHeader>
            <DialogTitle>Edit Class</DialogTitle>
            <DialogDescription>
              Update your class settings and enabled tools
            </DialogDescription>
          </DialogHeader>
          
          <CreateClassDialogContent 
            onClassCreate={handleFormDataChange}
            onCancel={handleCancel}
            initialData={initialData}
            isEditing={true}
          />
          
          <DialogFooter className="flex justify-between sm:justify-between mt-4 pt-2 border-t">
            <div className="flex gap-2">
              <Button variant="outline" onClick={handleCancel} disabled={isDeleting || isSaving}>
                Cancel
              </Button>
              <Button 
                variant="destructive" 
                onClick={() => setShowDeleteAlert(true)}
                disabled={isDeleting || isSaving}
              >
                {isDeleting ? "Deleting..." : "Delete Class"}
              </Button>
            </div>
            <Button 
              onClick={handleSubmit} 
              disabled={!isFormValid || !user || isDeleting || isSaving}
            >
              {isSaving ? "Updating..." : "Update Class"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <AlertDialog 
        open={showDeleteAlert} 
        onOpenChange={(newOpen) => {
          // Only allow changes if not in the middle of deleting
          if (!isDeleting) {
            setShowDeleteAlert(newOpen);
          }
        }}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This action cannot be undone. This will permanently delete the class
              and all associated data.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel disabled={isDeleting}>Cancel</AlertDialogCancel>
            <AlertDialogAction 
              onClick={handleDelete}
              className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
              disabled={isDeleting}
            >
              {isDeleting ? "Deleting..." : "Delete"}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}

================
File: src/components/layout/sidebar/SidebarAccount.tsx
================
import { NavLink } from "react-router-dom";
import { LogIn } from "lucide-react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { useEffect, useState } from "react";
import { supabase } from "@/integrations/supabase/client";

interface SidebarAccountProps {
  loading: boolean;
  user: any;
}

export function SidebarAccount({ loading, user }: SidebarAccountProps) {
  const [profile, setProfile] = useState<any>(null);
  
  useEffect(() => {
    // Fetch profile data when user is available
    const fetchProfile = async () => {
      if (!user) return;
      
      try {
        const { data, error } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', user.id)
          .single() as any;
          
        if (error) {
          console.error("Error fetching profile:", error);
        } else {
          setProfile(data);
        }
      } catch (error) {
        console.error("Error in profile fetch:", error);
      }
    };
    
    fetchProfile();
  }, [user]);

  if (loading) {
    return null; // Don't render anything while loading
  }
  
  if (!user) {
    return (
      <NavLink
        to="/auth"
        className={({ isActive }) => 
          `flex items-center px-4 py-2 rounded-md transition-colors ${
            isActive 
              ? "bg-sidebar-accent text-sidebar-accent-foreground font-medium" 
              : "text-sidebar-foreground hover:bg-sidebar-accent/50"
          }`
        }
      >
        <LogIn className="mr-2 h-5 w-5" />
        <span>Sign In</span>
      </NavLink>
    );
  }
  
  // Get user initials for avatar fallback
  const userInitials = profile?.full_name
    ? profile.full_name.split(' ').map((n: string) => n[0]).join('').toUpperCase()
    : user.email?.charAt(0).toUpperCase() || "U";
    
  return (
    <NavLink 
      to="/account"
      className={({ isActive }) => 
        `flex items-center p-2 rounded-md transition-colors ${
          isActive 
            ? "bg-sidebar-accent text-sidebar-accent-foreground font-medium" 
            : "text-sidebar-foreground hover:bg-sidebar-accent/50"
        }`
      }
    >
      <Avatar className="w-8 h-8 rounded-full bg-sidebar-accent">
        {profile?.avatar_url && (
          <AvatarImage src={profile.avatar_url} alt={profile?.full_name || user.email} />
        )}
        <AvatarFallback className="text-xs font-medium">{userInitials}</AvatarFallback>
      </Avatar>
      <div className="ml-2 overflow-hidden">
        <p className="font-medium truncate">{user.email}</p>
        <p className="text-xs opacity-70 truncate">Signed In</p>
      </div>
    </NavLink>
  );
}

================
File: src/components/layout/sidebar/SidebarHeader.tsx
================
import { X, GraduationCap } from "lucide-react";
import { Button } from "@/components/ui/button";

interface SidebarHeaderProps {
  onClose: () => void;
  activeClassName: string | null;
}

export function SidebarHeader({ onClose, activeClassName }: SidebarHeaderProps) {
  return (
    <div className="flex flex-col p-4 border-b border-sidebar-border">
      <div className="flex items-center justify-between mb-2">
        <div className="flex items-center">
          <div className="w-8 h-8 rounded-md flex items-center justify-center mr-2">
            <img 
              src="/eido-icon.png" 
              alt="Eido AI Logo" 
              className="h-8 w-8 object-contain"
            />
          </div>
          <span className="font-semibold text-xl">Eido</span>
        </div>
        <Button 
          variant="ghost" 
          size="icon" 
          onClick={onClose}
          className="md:hidden text-sidebar-foreground hover:bg-sidebar-accent"
        >
          <X className="h-5 w-5" />
        </Button>
      </div>
      
      {/* Display active class at the top under Eido */}
      {activeClassName && (
        <div className="py-1 px-1">
          <div className="text-sm font-medium text-sidebar-foreground truncate">
            {activeClassName}
          </div>
        </div>
      )}
    </div>
  );
}

================
File: src/components/layout/sidebar/SidebarNavigation.tsx
================
import { ReactNode } from "react";
import { NavLink } from "react-router-dom";

interface NavItem {
  icon: ReactNode;
  label: string;
  to: string;
  exact?: boolean;
}

interface SidebarNavigationProps {
  navItems: NavItem[];
}

export function SidebarNavigation({ navItems }: SidebarNavigationProps) {
  return (
    <ul className="space-y-2 px-2">
      {navItems.map((item) => (
        <li key={item.to}>
          <NavLink
            to={item.to}
            end={item.exact}
            className={({ isActive }) => 
              `flex items-center px-4 py-2 rounded-md transition-colors ${
                isActive 
                  ? "bg-sidebar-accent text-sidebar-accent-foreground font-medium" 
                  : "text-sidebar-foreground hover:bg-sidebar-accent/50"
              }`
            }
          >
            {item.icon}
            <span>{item.label}</span>
          </NavLink>
        </li>
      ))}
    </ul>
  );
}

================
File: src/components/layout/sidebar/SidebarWidgets.tsx
================
import { ReactNode } from "react";
import { NavLink } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { LayoutGrid, Loader2 } from "lucide-react";
import { WidgetType } from "@/hooks/use-widgets";

interface WidgetNavItem {
  icon: ReactNode;
  label: string;
  to: string;
  widgetId: WidgetType;
}

interface SidebarWidgetsProps {
  activeClassName: string | null;
  widgetNavItems: WidgetNavItem[];
  isLoading: boolean;
  onAddWidgetsClick: () => void;
}

export function SidebarWidgets({
  activeClassName,
  widgetNavItems,
  isLoading,
  onAddWidgetsClick
}: SidebarWidgetsProps) {
  return (
    <div className="pt-4">
      <div className="px-4 py-2 flex justify-between items-center">
        <h3 className="text-xs font-semibold text-sidebar-foreground/70 uppercase">
          {activeClassName ? "Class Widgets" : "Available Widgets"}
        </h3>
        {activeClassName && (
          <Button 
            onClick={onAddWidgetsClick}
            variant="ghost"
            size="sm"
            className="flex items-center gap-1 h-7 text-sidebar-foreground hover:text-primary hover:bg-sidebar-accent/80"
          >
            <LayoutGrid className="h-4 w-4" />
            <span>Add</span>
          </Button>
        )}
      </div>
      
      {isLoading ? (
        <div className="flex items-center justify-center p-4">
          <Loader2 className="h-4 w-4 mr-2 animate-spin" />
          <span className="text-xs text-muted-foreground">Loading...</span>
        </div>
      ) : widgetNavItems.length > 0 ? (
        <ul className="space-y-2 px-2">
          {widgetNavItems.map((item) => (
            <li key={item.to}>
              <NavLink
                to={item.to}
                className={({ isActive }) => 
                  `flex items-center px-4 py-2 rounded-md transition-colors ${
                    isActive 
                      ? "bg-sidebar-accent text-sidebar-accent-foreground font-medium" 
                      : "text-sidebar-foreground hover:bg-sidebar-accent/50"
                  }`
                }
              >
                {item.icon}
                <span>{item.label}</span>
              </NavLink>
            </li>
          ))}
        </ul>
      ) : (
        <p className="text-xs text-muted-foreground px-4 py-2">
          {activeClassName 
            ? "No widgets added yet" 
            : "Select a class to use widgets"}
        </p>
      )}
    </div>
  );
}

================
File: src/components/layout/AppLayout.tsx
================
import { useState, useEffect } from "react";
import { Outlet, useLocation } from "react-router-dom";
import { AppSidebar } from "./AppSidebar";
import { Menu } from "lucide-react"; 
import { Button } from "@/components/ui/button";
import { Toaster } from "@/components/ui/toaster";
import { WidgetsProvider } from "@/hooks/use-widgets";
import { ClassWidgetsProvider } from "@/hooks/use-class-widgets";

export function AppLayout() {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [activeClass, setActiveClass] = useState<any>(null);
  const location = useLocation();

  // Load active class from session storage and handle homepage clearing
  useEffect(() => {
    if (location.pathname === '/') {
      // Clear active class when on homepage
      setActiveClass(null);
      sessionStorage.removeItem('activeClass');
    } else {
      // Get active class from session storage on other pages
      const storedActiveClass = sessionStorage.getItem('activeClass');
      if (storedActiveClass) {
        try {
          setActiveClass(JSON.parse(storedActiveClass));
        } catch (e) {
          console.error("Error parsing stored active class", e);
        }
      }
    }
  }, [location.pathname]);

  return (
    <WidgetsProvider>
      <ClassWidgetsProvider 
        classId={activeClass?.title} 
        defaultWidgets={activeClass?.enabledWidgets || ["supertutor", "database"]}
      >
        <div className="flex h-screen overflow-hidden bg-background">
          {/* Mobile sidebar */}
          <div className="md:hidden">
            {isSidebarOpen && (
              <div 
                className="fixed inset-0 z-40 bg-background/80 backdrop-blur-sm"
                onClick={() => setIsSidebarOpen(false)}
              />
            )}
            
            <div className={`fixed inset-y-0 left-0 z-50 w-64 transform transition-transform duration-200 ${
              isSidebarOpen ? 'translate-x-0' : '-translate-x-full'
            }`}>
              <AppSidebar onClose={() => setIsSidebarOpen(false)} />
            </div>
          </div>
          
          {/* Desktop sidebar */}
          <div className="hidden md:block">
            <AppSidebar onClose={() => {}} />
          </div>
          
          {/* Main content */}
          <div className="flex-1 flex flex-col overflow-hidden">
            {/* Mobile header */}
            <header className="flex items-center px-4 py-2 border-b md:hidden">
              <Button 
                variant="ghost" 
                size="icon" 
                onClick={() => setIsSidebarOpen(true)}
              >
                <Menu className="h-6 w-6" />
              </Button>
              <div className="flex items-center mx-auto">
                <div className="w-8 h-8 rounded-md flex items-center justify-center mr-2">
                  <img 
                    src="/eido-icon.png" 
                    alt="Eido AI Logo" 
                    className="h-8 w-8 object-contain"
                  />
                </div>
                <h1 className="text-lg font-semibold">Eido</h1>
              </div>
              <div className="w-9"></div> {/* Empty div for centering */}
            </header>
            
            {/* Content area */}
            <main className="flex-1 overflow-auto p-4 md:p-8">
              <Outlet />
              <Toaster />
            </main>
          </div>
        </div>
      </ClassWidgetsProvider>
    </WidgetsProvider>
  );
}

================
File: src/components/layout/AppSidebar.tsx
================
import { 
  MessageCircle,
  Home,
  Search,
  BookOpen,
  SquareCheck,
  Database
} from "lucide-react";
import { useNavigate } from "react-router-dom";
import { AddWidgetsDialog } from "@/components/widgets/AddWidgetsDialog";
import { WidgetType } from "@/hooks/use-widgets";
import { useSidebarState } from "@/hooks/use-sidebar-state";
import { SidebarHeader } from "./sidebar/SidebarHeader";
import { SidebarNavigation } from "./sidebar/SidebarNavigation";
import { SidebarWidgets } from "./sidebar/SidebarWidgets";
import { SidebarAccount } from "./sidebar/SidebarAccount";

interface AppSidebarProps {
  onClose: () => void;
}

export function AppSidebar({ onClose }: AppSidebarProps) {
  const navigate = useNavigate();
  const { 
    user, 
    loading, 
    isWidgetsDialogOpen, 
    setIsWidgetsDialogOpen,
    activeClassName,
    enabledWidgets,
    widgetsLoading
  } = useSidebarState();

  // Define all navigation items - core features
  const coreNavItems = [
    {
      icon: <Home className="mr-2 h-5 w-5" />,
      label: "Home",
      to: "/",
      exact: true
    }
  ];
  
  // Define all possible widget navigation items
  const widgetNavItems = [
    {
      icon: <Search className="mr-2 h-5 w-5" />,
      label: "Super Tutor",
      to: "/super-stu",
      widgetId: "supertutor" as WidgetType
    },
    {
      icon: <Database className="mr-2 h-5 w-5" />,
      label: "Database",
      to: "/database",
      widgetId: "database" as WidgetType
    },
    {
      icon: <BookOpen className="mr-2 h-5 w-5" />,
      label: "Flashcards",
      to: "/flashcards",
      widgetId: "flashcards" as WidgetType
    },
    {
      icon: <SquareCheck className="mr-2 h-5 w-5" />,
      label: "Quizzes",
      to: "/quizzes",
      widgetId: "quizzes" as WidgetType
    }
  ];
  
  // Filter widget nav items by enabled widgets for the current class
  const visibleWidgetNavItems = widgetNavItems.filter(item => 
    enabledWidgets.includes(item.widgetId)
  );

  return (
    <div className="flex flex-col h-screen w-64 bg-sidebar text-sidebar-foreground border-r border-sidebar-border">
      <SidebarHeader onClose={onClose} activeClassName={activeClassName} />
      
      <nav className="flex-1 overflow-auto py-4">
        <SidebarNavigation navItems={coreNavItems} />
        
        <SidebarWidgets
          activeClassName={activeClassName}
          widgetNavItems={visibleWidgetNavItems}
          isLoading={widgetsLoading}
          onAddWidgetsClick={() => setIsWidgetsDialogOpen(true)}
        />
      </nav>
      
      <div className="mt-auto border-t border-sidebar-border/50 px-2 py-4">
        <SidebarAccount loading={loading} user={user} />
      </div>
      
      {/* Add Widgets Dialog */}
      <AddWidgetsDialog 
        open={isWidgetsDialogOpen} 
        onOpenChange={setIsWidgetsDialogOpen} 
        classMode={true}
        currentClassName={activeClassName || ""}
      />
    </div>
  );
}

================
File: src/components/layout/PageHeader.tsx
================
import * as React from "react"

interface PageHeaderProps {
  title: string
  description?: string
}

export function PageHeader({ title, description }: PageHeaderProps) {
  return (
    <div className="space-y-1">
      <h1 className="text-2xl font-semibold tracking-tight">{title}</h1>
      {description && (
        <p className="text-sm text-muted-foreground">{description}</p>
      )}
    </div>
  )
}

================
File: src/components/policy/PolicyCard.tsx
================
import { useState } from "react";
import { ChevronDown, ChevronUp } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";

interface PolicyCardProps {
  title: string;
  summary: string;
  details: string;
  icon: React.ReactNode;
  lastUpdated: string;
  department?: string;
}

export function PolicyCard({ title, summary, details, icon, lastUpdated, department }: PolicyCardProps) {
  const [expanded, setExpanded] = useState(false);
  const [acknowledged, setAcknowledged] = useState(false);

  const toggleExpanded = () => {
    setExpanded(!expanded);
  };

  const acknowledgePolicy = () => {
    setAcknowledged(true);
  };

  return (
    <div className="policy-card overflow-hidden">
      <div className="flex items-start">
        <div className="p-2 bg-cybercoach-teal-light/20 text-cybercoach-teal rounded-md">
          {icon}
        </div>
        
        <div className="ml-4 flex-grow">
          <div className="flex justify-between items-center">
            <h3 className="font-semibold text-lg">{title}</h3>
            {department && (
              <Badge variant="secondary" className="ml-2">
                {department}
              </Badge>
            )}
          </div>
          
          <p className="text-gray-600 mt-1">{summary}</p>
        </div>
      </div>
      
      <div className={`mt-4 transition-all duration-300 ${expanded ? 'max-h-[500px]' : 'max-h-0'} overflow-hidden`}>
        <div className="p-4 bg-slate-50 rounded-md">
          <p className="whitespace-pre-line">{details}</p>
          
          {!acknowledged && (
            <Button 
              onClick={acknowledgePolicy} 
              className="mt-4 bg-cybercoach-blue hover:bg-cybercoach-blue-dark"
            >
              Acknowledge Policy
            </Button>
          )}
          
          {acknowledged && (
            <p className="mt-4 text-sm text-green-600 font-medium">
              ✓ You have acknowledged this policy
            </p>
          )}
        </div>
      </div>
      
      <div className="flex items-center justify-between mt-4 pt-2 border-t border-gray-100">
        <p className="text-xs text-gray-500">
          Last updated: {lastUpdated}
        </p>
        
        <Button 
          variant="ghost" 
          size="sm" 
          className="text-cybercoach-blue flex items-center" 
          onClick={toggleExpanded}
        >
          {expanded ? (
            <>
              <ChevronUp className="h-4 w-4 mr-1" />
              Hide Details
            </>
          ) : (
            <>
              <ChevronDown className="h-4 w-4 mr-1" />
              View More
            </>
          )}
        </Button>
      </div>
    </div>
  );
}

================
File: src/components/ui/accordion.tsx
================
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

================
File: src/components/ui/alert-dialog.tsx
================
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

================
File: src/components/ui/alert.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

================
File: src/components/ui/aspect-ratio.tsx
================
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

================
File: src/components/ui/avatar.tsx
================
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: src/components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: src/components/ui/breadcrumb.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

================
File: src/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: src/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: src/components/ui/carousel.tsx
================
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

================
File: src/components/ui/chart.tsx
================
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

================
File: src/components/ui/checkbox.tsx
================
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

================
File: src/components/ui/collapsible.tsx
================
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

================
File: src/components/ui/command.tsx
================
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

================
File: src/components/ui/context-menu.tsx
================
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

================
File: src/components/ui/dialog.tsx
================
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: src/components/ui/drawer.tsx
================
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

================
File: src/components/ui/dropdown-menu.tsx
================
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: src/components/ui/form.tsx
================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: src/components/ui/hover-card.tsx
================
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

================
File: src/components/ui/index.ts
================
// Export all UI components for easier imports
export { Button } from "./button";
export { Input } from "./input";
export { Label } from "./label";
export { Popover, PopoverTrigger, PopoverContent } from "./popover";

================
File: src/components/ui/input-otp.tsx
================
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

================
File: src/components/ui/input.tsx
================
import * as React from "react"
import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: src/components/ui/label.tsx
================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: src/components/ui/menubar.tsx
================
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

================
File: src/components/ui/navigation-menu.tsx
================
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

================
File: src/components/ui/pagination.tsx
================
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}

================
File: src/components/ui/popover.tsx
================
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

================
File: src/components/ui/progress.tsx
================
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

================
File: src/components/ui/radio-group.tsx
================
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

================
File: src/components/ui/resizable.tsx
================
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

================
File: src/components/ui/scroll-area.tsx
================
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: src/components/ui/select.tsx
================
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: src/components/ui/separator.tsx
================
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: src/components/ui/sheet.tsx
================
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  VariantProps<typeof sheetVariants> { }

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}

================
File: src/components/ui/sidebar.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

================
File: src/components/ui/skeleton.tsx
================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: src/components/ui/slider.tsx
================
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

================
File: src/components/ui/sonner.tsx
================
import { useTheme } from "next-themes"
import { Toaster as Sonner, toast } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster, toast }

================
File: src/components/ui/switch.tsx
================
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: src/components/ui/table.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

================
File: src/components/ui/tabs.tsx
================
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: src/components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }

================
File: src/components/ui/toast.tsx
================
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: src/components/ui/toaster.tsx
================
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"
import { useToast } from "@/components/ui/use-toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: src/components/ui/toggle-group.tsx
================
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

================
File: src/components/ui/toggle.tsx
================
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

================
File: src/components/ui/tooltip.tsx
================
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: src/components/ui/use-toast.ts
================
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_VALUE
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: src/components/widgets/AddWidgetsDialog.tsx
================
import { useState, useEffect } from "react";
import { 
  BookOpen, 
  Check, 
  X,
  Search,
  Database,
  Info,
  Loader2,
  SquareCheck
} from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { 
  Tooltip,
  TooltipTrigger,
  TooltipContent
} from "@/components/ui/tooltip";
import { cn } from "@/lib/utils";
import { useWidgets, WidgetType } from "@/hooks/use-widgets";
import { useClassWidgets } from "@/hooks/use-class-widgets";

interface AddWidgetsDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  classMode?: boolean;
  currentClassName?: string;
}

export function AddWidgetsDialog({ 
  open, 
  onOpenChange,
  classMode = false,
  currentClassName = "Current Class"
}: AddWidgetsDialogProps) {
  const globalWidgets = useWidgets();
  const classWidgets = useClassWidgets();
  
  // Use either class widgets or global widgets depending on mode
  const { 
    enabledWidgets, 
    toggleWidget, 
    isLoading 
  } = classMode ? classWidgets : globalWidgets;
  
  const [localEnabledWidgets, setLocalEnabledWidgets] = useState<WidgetType[]>(enabledWidgets);

  // Reset local state when dialog opens or enabledWidgets change
  useEffect(() => {
    if (open) {
      setLocalEnabledWidgets(enabledWidgets);
    }
  }, [open, enabledWidgets]);

  const toggleLocalWidget = (widget: WidgetType) => {
    setLocalEnabledWidgets(current => {
      if (current.includes(widget)) {
        return current.filter(w => w !== widget);
      } else {
        return [...current, widget];
      }
    });
  };

  const applyChanges = () => {
    // Find widgets to enable and disable
    const toEnable = localEnabledWidgets.filter(w => !enabledWidgets.includes(w));
    const toDisable = enabledWidgets.filter(w => !localEnabledWidgets.includes(w));
    
    // Apply changes
    toEnable.forEach(w => toggleWidget(w));
    toDisable.forEach(w => toggleWidget(w));
    
    onOpenChange(false);
  };

  const cancelChanges = () => {
    setLocalEnabledWidgets(enabledWidgets);
    onOpenChange(false);
  };

  const allWidgets = [
    {
      id: "flashcards" as WidgetType,
      name: "Flashcards",
      description: "Study with digital flashcards",
      icon: BookOpen,
    },
    {
      id: "quizzes" as WidgetType,
      name: "Quizzes",
      description: "Test your knowledge with quizzes",
      icon: SquareCheck,
    },
    {
      id: "supertutor" as WidgetType,
      name: "Super Tutor",
      description: "AI-powered learning assistant",
      icon: Search,
    },
    {
      id: "database" as WidgetType,
      name: "Database",
      description: "Store and manage your files",
      icon: Database,
    }
  ];

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>
            {classMode 
              ? `Manage Widgets for ${currentClassName}` 
              : "Manage Widgets"
            }
          </DialogTitle>
          <DialogDescription>
            {classMode
              ? "Enable or disable widgets for this class."
              : "Enable or disable widgets for your dashboard."
            }
          </DialogDescription>
        </DialogHeader>
        
        {isLoading ? (
          <div className="flex items-center justify-center py-8">
            <Loader2 className="h-8 w-8 animate-spin text-primary" />
            <span className="ml-2 text-sm text-muted-foreground">Loading your widgets...</span>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3 py-4">
            {allWidgets.map(widget => (
              <div
                key={widget.id}
                className={cn(
                  "flex items-center p-3 rounded-lg border cursor-pointer transition-colors",
                  localEnabledWidgets.includes(widget.id)
                    ? "bg-primary/10 border-primary"
                    : "bg-background hover:bg-accent/50"
                )}
                onClick={() => toggleLocalWidget(widget.id)}
              >
                <div className={cn(
                  "flex items-center justify-center rounded-md w-10 h-10 mr-3 text-white",
                  localEnabledWidgets.includes(widget.id)
                    ? "bg-primary"
                    : "bg-muted-foreground/30"
                )}>
                  <widget.icon className="h-5 w-5" />
                </div>
                <div className="flex-1">
                  <p className="text-sm font-medium">{widget.name}</p>
                  <p className="text-xs text-muted-foreground line-clamp-1">
                    {widget.description}
                  </p>
                </div>
                <div className="ml-2">
                  {localEnabledWidgets.includes(widget.id) ? (
                    <Check className="h-5 w-5 text-primary" />
                  ) : (
                    <Tooltip>
                      <TooltipTrigger>
                        <Info className="h-4 w-4 text-muted-foreground" />
                      </TooltipTrigger>
                      <TooltipContent side="top">
                        Click to enable
                      </TooltipContent>
                    </Tooltip>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
        
        <DialogFooter className="gap-2 sm:gap-0">
          <Button type="button" variant="outline" onClick={cancelChanges}>
            <X className="mr-2 h-4 w-4" />
            Cancel
          </Button>
          <Button type="button" onClick={applyChanges} disabled={isLoading}>
            <Check className="mr-2 h-4 w-4" />
            Apply Changes
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

================
File: src/components/widgets/WidgetCard.tsx
================
import { Check } from "lucide-react";
import { Card, CardContent } from "@/components/ui/card";
import { cn } from "@/lib/utils";

interface WidgetCardProps {
  id: string;
  name: string;
  description: string;
  icon: React.ReactNode;
  isSelected: boolean;
  onToggle: (id: string) => void;
}

export function WidgetCard({
  id,
  name,
  description,
  icon,
  isSelected,
  onToggle,
}: WidgetCardProps) {
  return (
    <Card
      className={cn(
        "cursor-pointer transition-all border-2",
        isSelected
          ? "border-primary bg-primary/5"
          : "hover:border-primary/30"
      )}
      onClick={() => onToggle(id)}
    >
      <CardContent className="p-4 flex items-start gap-3">
        <div className="p-2 bg-primary/10 rounded-md text-primary">
          {icon}
        </div>
        <div className="flex-1">
          <h3 className="font-medium">{name}</h3>
          <p className="text-sm text-muted-foreground">{description}</p>
        </div>
        {isSelected && (
          <div className="text-primary">
            <Check className="h-5 w-5" />
          </div>
        )}
      </CardContent>
    </Card>
  );
}

================
File: src/features/files/components/FileGrid.tsx
================
import * as React from "react"
import { File, Folder, Trash2 } from "lucide-react"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Button } from "@/components/ui/button"
import { FileType, FolderType, SelectedItem } from "../types"

interface FileGridProps {
  files: FileType[]
  folders: FolderType[]
  loading: boolean
  selectionMode: boolean
  selectedItems: SelectedItem[]
  onFileSelect: (file: FileType) => void
  onFolderSelect: (folder: FolderType) => void
  onDelete: (id: string, isFolder: boolean) => void
  onFileOpen: (url: string) => void
}

export function FileGrid({
  files,
  folders,
  loading,
  selectionMode,
  selectedItems,
  onFileSelect,
  onFolderSelect,
  onDelete,
  onFileOpen,
}: FileGridProps) {
  if (loading) {
    return (
      <div className="flex flex-col items-center justify-center h-full py-10">
        <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-gray-900" />
        <p className="text-gray-500 mt-4">Loading your files...</p>
      </div>
    )
  }

  if (files.length === 0 && folders.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center h-full text-center py-10">
        <div className="h-16 w-16 text-gray-300 mb-4" />
        <h3 className="text-lg font-medium text-gray-700">No files found</h3>
        <p className="text-gray-500 mb-4 max-w-md">
          Upload files or create folders to get started. You can also drag and drop
          files here.
        </p>
      </div>
    )
  }

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return "0 Bytes"
    const k = 1024
    const sizes = ["Bytes", "KB", "MB", "GB"]
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i]
  }

  return (
    <ScrollArea className="h-[calc(100vh-300px)]">
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
        {folders.map((folder) => (
          <div
            key={folder.id}
            className={`border rounded-lg p-3 hover:shadow-md transition-all cursor-pointer ${
              selectedItems.some((item) => item.id === folder.id)
                ? "ring-2 ring-primary"
                : ""
            }`}
            onClick={() => onFolderSelect(folder)}
          >
            <div className="flex justify-between items-start mb-2">
              <div className="flex items-center">
                <Folder className="h-8 w-8 text-blue-500" />
                <h4 className="font-medium truncate ml-2" title={folder.name}>
                  {folder.name}
                </h4>
              </div>
              <Button
                variant="ghost"
                size="icon"
                className="h-8 w-8"
                onClick={(e) => {
                  e.stopPropagation()
                  onDelete(folder.id, true)
                }}
              >
                <Trash2 className="h-4 w-4" />
              </Button>
            </div>
          </div>
        ))}

        {files.map((file) => (
          <div
            key={file.id}
            className={`border rounded-lg p-3 hover:shadow-md transition-all cursor-pointer ${
              selectedItems.some((item) => item.id === file.id)
                ? "ring-2 ring-primary"
                : ""
            }`}
            onClick={() => onFileSelect(file)}
          >
            <div className="flex justify-between items-start mb-2">
              <div className="flex items-center">
                <File className="h-8 w-8 text-gray-500" />
                <h4 className="font-medium truncate ml-2" title={file.name}>
                  {file.name}
                </h4>
              </div>
              <Button
                variant="ghost"
                size="icon"
                className="h-8 w-8"
                onClick={(e) => {
                  e.stopPropagation()
                  onDelete(file.id, false)
                }}
              >
                <Trash2 className="h-4 w-4" />
              </Button>
            </div>
            <div className="text-xs text-gray-500 mt-2 flex flex-col gap-1">
              <div>Size: {formatFileSize(file.size)}</div>
              <div>
                Modified: {new Date(file.last_modified).toLocaleDateString()}
              </div>
              {file.status === "uploading" && (
                <div className="mt-2">
                  <div className="h-1 w-full bg-gray-200 rounded-full overflow-hidden">
                    <div
                      className="h-full bg-primary transition-all duration-300"
                      style={{ width: `${file.progress}%` }}
                    />
                  </div>
                  <p className="text-xs text-gray-500 mt-1">
                    Uploading... {file.progress}%
                  </p>
                </div>
              )}
              {file.status === "error" && (
                <p className="text-xs text-red-500 mt-1">Upload failed</p>
              )}
            </div>
          </div>
        ))}
      </div>
    </ScrollArea>
  )
}

================
File: src/features/files/components/NewFolderDialog.tsx
================
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";

interface NewFolderDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (folderName: string) => void;
}

export const NewFolderDialog = ({
  isOpen,
  onClose,
  onSubmit,
}: NewFolderDialogProps) => {
  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    const folderName = formData.get("folderName") as string;
    if (folderName.trim()) {
      onSubmit(folderName.trim());
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Create New Folder</DialogTitle>
          <DialogDescription>
            Enter a name for your new folder.
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="grid gap-4 py-4">
          <Input
            name="folderName"
            placeholder="Folder Name"
            autoFocus
          />
        </form>

        <DialogFooter>
          <Button variant="outline" onClick={onClose}>
            Cancel
          </Button>
          <Button type="submit" form="new-folder-form">
            Create Folder
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

================
File: src/features/files/components/StorageUsage.tsx
================
import { Progress } from "@/components/ui/progress";
import { UserStorage } from "../types";

interface StorageUsageProps {
  storage: UserStorage;
}

export const StorageUsage = ({ storage }: StorageUsageProps) => {
  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return "0 Bytes";
    const k = 1024;
    const sizes = ["Bytes", "KB", "MB", "GB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
  };

  const usagePercentage = (storage.storage_used / storage.storage_limit) * 100;

  return (
    <div className="mt-2">
      <div className="flex justify-between items-center text-sm mb-1">
        <span>Storage usage</span>
        <span>{usagePercentage.toFixed(1)}% used</span>
      </div>
      <Progress value={usagePercentage} className="h-2" />
      <div className="flex justify-end mt-1">
        <span className="text-xs text-gray-500">
          {formatFileSize(storage.storage_used)} of{" "}
          {formatFileSize(storage.storage_limit)}
        </span>
      </div>
    </div>
  );
};

================
File: src/features/files/components/UploadDialog.tsx
================
import { Upload } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";

interface UploadDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onFileSelect: (files: FileList) => void;
}

export const UploadDialog = ({
  isOpen,
  onClose,
  onFileSelect,
}: UploadDialogProps) => {
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Upload Files</DialogTitle>
          <DialogDescription>
            Upload files to your current folder. Supported formats include PDF,
            DOCX, PPTX, TXT, JPG, and PNG.
          </DialogDescription>
        </DialogHeader>

        <div className="grid gap-4 py-4">
          <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
            <Upload className="mx-auto h-12 w-12 text-gray-400 mb-2" />
            <p className="mb-2 text-gray-600">
              <span className="font-semibold">Drop files here</span> or click to
              upload
            </p>
            <p className="text-xs text-gray-500 mb-4">Maximum 50MB per file</p>
            <input
              type="file"
              className="hidden"
              id="file-upload"
              onChange={(e) => e.target.files && onFileSelect(e.target.files)}
              multiple
            />
            <label htmlFor="file-upload">
              <Button variant="outline" className="mt-2" asChild>
                <span>
                  <Upload className="h-4 w-4 mr-2" />
                  Select Files
                </span>
              </Button>
            </label>
          </div>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={onClose}>
            Cancel
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

================
File: src/features/files/components/VectorStoreUploadDialog.tsx
================
import { File, Upload } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { SelectedItem } from "../types";

interface VectorStoreUploadDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: () => void;
  selectedItems: SelectedItem[];
  isUploading: boolean;
  uploadProgress: number;
}

export const VectorStoreUploadDialog = ({
  isOpen,
  onClose,
  onConfirm,
  selectedItems,
  isUploading,
  uploadProgress,
}: VectorStoreUploadDialogProps) => {
  const filesToUpload = selectedItems.filter(
    (item) => item.type === "file" && item.url
  );

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Upload to Vector Store</DialogTitle>
          <DialogDescription>
            You are about to upload {filesToUpload.length} files to the OpenAI
            Vector Store. These files will be available for AI-powered features.
          </DialogDescription>
        </DialogHeader>

        {isUploading ? (
          <div className="py-6">
            <div className="mb-2 flex justify-between text-xs">
              <span>Uploading to Vector Store...</span>
              <span>{uploadProgress}%</span>
            </div>
            <Progress value={uploadProgress} className="h-2 mb-4" />
            <p className="text-xs text-gray-500 text-center">
              This may take a few moments depending on the file size.
            </p>
          </div>
        ) : (
          <div className="py-4">
            <ul className="max-h-40 overflow-y-auto border rounded-lg divide-y">
              {filesToUpload.map((file) => (
                <li key={file.id} className="p-2 flex items-center">
                  <File className="h-4 w-4 text-blue-500 mr-2" />
                  <span className="text-sm truncate">{file.name}</span>
                </li>
              ))}
            </ul>
          </div>
        )}

        <DialogFooter>
          {!isUploading && (
            <>
              <Button variant="outline" onClick={onClose}>
                Cancel
              </Button>
              <Button onClick={onConfirm}>
                <Upload className="h-4 w-4 mr-2" />
                Upload to Vector Store
              </Button>
            </>
          )}
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

================
File: src/features/files/pages/FilesPage.tsx
================
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Search, FolderPlus, Upload, ArrowUp, Check } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { PageHeader } from "@/components/layout/PageHeader";
import { toast } from "@/components/ui/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { FileGrid } from "../components/FileGrid";
import { UploadDialog } from "../components/UploadDialog";
import { NewFolderDialog } from "../components/NewFolderDialog";
import { VectorStoreUploadDialog } from "../components/VectorStoreUploadDialog";
import { StorageUsage } from "../components/StorageUsage";
import {
  FileType,
  FolderType,
  SelectedItem,
  UserStorage,
  VectorStoreFileType,
} from "../types";
import { User } from "@supabase/supabase-js";
import { formatFileSize } from "@/lib/utils";
import type { Database } from "@/integrations/supabase/types";

type FileRow = Database['public']['Tables']['files']['Row'];
type FolderRow = Database['public']['Tables']['file_folders']['Row'];
type UserStorageRow = Database['public']['Tables']['user_storage']['Row'];

export const FilesPage = () => {
  const [files, setFiles] = useState<FileRow[]>([]);
  const [folders, setFolders] = useState<FolderRow[]>([]);
  const [currentFolderId, setCurrentFolderId] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [userStorage, setUserStorage] = useState<UserStorageRow | null>(null);
  const [breadcrumbs, setBreadcrumbs] = useState<{ id: string | null; name: string }[]>([
    { id: null, name: "Main" },
  ]);
  const [isUploadDialogOpen, setIsUploadDialogOpen] = useState(false);
  const [isNewFolderDialogOpen, setIsNewFolderDialogOpen] = useState(false);
  const [dragging, setDragging] = useState(false);
  const [loading, setLoading] = useState(true);
  const [loadError, setLoadError] = useState<string | null>(null);
  const [user, setUser] = useState<User | null>(null);
  const navigate = useNavigate();
  const [vectorStoreFiles, setVectorStoreFiles] = useState<VectorStoreFileType[]>([]);
  const [isLoadingVectorFiles, setIsLoadingVectorFiles] = useState(false);
  const [activeTab, setActiveTab] = useState("myFiles");
  const [selectionMode, setSelectionMode] = useState(false);
  const [selectedItems, setSelectedItems] = useState<SelectedItem[]>([]);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadingProgress, setUploadingProgress] = useState(0);
  const [vectorUploadDialogOpen, setVectorUploadDialogOpen] = useState(false);

  // Fetch current user and all required data
  useEffect(() => {
    let isMounted = true;
    setLoading(true);
    setLoadError(null);

    const fetchAll = async () => {
      try {
        const { data: sessionData, error: sessionError } = await supabase.auth.getSession();
        if (sessionError || !sessionData.session?.user) {
          throw new Error("Authentication required. Please sign in.");
        }
        const user = sessionData.session.user;
        if (!isMounted) return;
        setUser(user);

        const { data: storageData, error: storageError } = await supabase
          .from("user_storage")
          .select("*")
          .eq("user_id", user.id)
          .single();
        if (storageError && storageError.code !== "PGRST116") throw storageError;
        if (storageData) setUserStorage(storageData);

        let folderQuery = supabase
          .from("file_folders")
          .select("*")
          .eq("user_id", user.id);
        if (currentFolderId === null) {
          folderQuery = folderQuery.is("parent_id", null);
        } else {
          folderQuery = folderQuery.eq("parent_id", currentFolderId);
        }
        const { data: folderData, error: folderError } = await folderQuery;
        if (folderError) throw folderError;
        setFolders(folderData || []);

        let fileQuery = supabase
          .from("files")
          .select("*")
          .eq("user_id", user.id);
        if (currentFolderId === null) {
          fileQuery = fileQuery.is("folder_id", null);
        } else {
          fileQuery = fileQuery.eq("folder_id", currentFolderId);
        }
        const { data: fileData, error: fileError } = await fileQuery;
        if (fileError) throw fileError;
        setFiles(fileData || []);

        setLoading(false);
      } catch (err) {
        setLoadError(err instanceof Error ? err.message : String(err));
        setLoading(false);
      }
    };
    fetchAll();
    return () => { isMounted = false; };
  }, [currentFolderId]);

  // Load vector store files
  useEffect(() => {
    const fetchVectorStoreFiles = async () => {
      if (!user) return;

      setIsLoadingVectorFiles(true);

      try {
        const { data: sessionData } = await supabase.auth.getSession();
        if (!sessionData.session) {
          throw new Error("Authentication required");
        }

        const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;

        const response = await fetch(
          `${supabaseUrl}/functions/v1/list-vector-store-files`,
          {
            headers: {
              Authorization: `Bearer ${sessionData.session.access_token}`,
            },
          }
        );

        if (!response.ok) {
          const errorText = await response.text();
          let errorMessage = "Failed to fetch vector store files";

          try {
            const errorData = JSON.parse(errorText);
            errorMessage = errorData.error || errorMessage;
          } catch (e) {
            errorMessage =
              errorText.length > 100
                ? `${errorText.substring(0, 100)}...`
                : errorText;
          }

          throw new Error(errorMessage);
        }

        const result = await response.json();
        setVectorStoreFiles(result.files || []);
      } catch (error: unknown) {
        const errMsg = error instanceof Error ? error.message : String(error);
        console.error("Error fetching vector store files:", errMsg);
        toast({
          title: "Error fetching vector store files",
          description: errMsg,
          variant: "destructive",
        });
      } finally {
        setIsLoadingVectorFiles(false);
      }
    };

    if (activeTab === "vectorStore" && user) {
      fetchVectorStoreFiles();
    }
  }, [activeTab, user]);

  // Filter files/folders based on search query
  const currentFolderItems = {
    files: files.filter((file) =>
      file.name.toLowerCase().includes(searchQuery.toLowerCase())
    ),
    folders: folders.filter((folder) =>
      folder.name.toLowerCase().includes(searchQuery.toLowerCase())
    ),
  };

  const handleFileSelect = (file: FileRow) => {
    if (selectionMode) {
      toggleSelectItem({
        id: file.id,
        name: file.name,
        type: "file",
        url: file.url,
        size: file.size,
      });
    }
  };

  const handleFolderSelect = (folder: FolderRow) => {
    if (selectionMode) {
      toggleSelectItem({
        id: folder.id,
        name: folder.name,
        type: "folder",
      });
    } else {
      navigateToFolder(folder.id, folder.name);
    }
  };

  const navigateToFolder = (folderId: string | null, folderName: string) => {
    if (folderId === null) {
      setCurrentFolderId(null);
      setBreadcrumbs([{ id: null, name: "Main" }]);
      return;
    }

    setCurrentFolderId(folderId);

    if (folderId === breadcrumbs[breadcrumbs.length - 1].id) {
      return;
    }

    const existingIndex = breadcrumbs.findIndex((b) => b.id === folderId);
    if (existingIndex !== -1) {
      setBreadcrumbs(breadcrumbs.slice(0, existingIndex + 1));
    } else {
      setBreadcrumbs([...breadcrumbs, { id: folderId, name: folderName }]);
    }
  };

  const handleFileUpload = async (files: FileList) => {
    if (!user) {
      toast({
        title: "Authentication required",
        description: "Please sign in to upload files",
        variant: "destructive",
      });
      return;
    }

    const selectedFiles = Array.from(files);
    const now = new Date().toISOString();
    const newFiles: FileRow[] = selectedFiles.map((file) => ({
      id: Math.random().toString(36).substring(2, 9),
      name: file.name,
      size: file.size,
      type: file.type,
      user_id: user.id,
      folder_id: currentFolderId,
      created_at: now,
      last_modified: now,
      category: "other",
      tags: [],
      status: "uploading",
      url: "",
    }));
    setFiles((prevFiles) => [...prevFiles, ...newFiles]);
    toast({
      title: `${newFiles.length} ${newFiles.length === 1 ? "file" : "files"} uploading`,
      description: "Your files will be processed shortly.",
    });
    for (const [index, file] of selectedFiles.entries()) {
      const newFileId = newFiles[index].id;
      const updateProgress = (progress: number) => {
        setFiles((prevFiles) =>
          prevFiles.map((f) => (f.id === newFileId ? { ...f, progress } : f))
        );
      };
      try {
        const { data: sessionData } = await supabase.auth.getSession();
        if (!sessionData.session) {
          throw new Error("Authentication required");
        }
        const fileName = `${Date.now()}_${file.name.replace(/\s+/g, "_")}`;
        const filePath = `${fileName}`;
        const { data: storageData, error: storageError } = await supabase.storage
          .from("file_storage")
          .upload(filePath, file, {
            cacheControl: "3600",
            upsert: false,
          });
        updateProgress(50);
        if (storageError) throw storageError;
        updateProgress(75);
        const { data: urlData } = supabase.storage
          .from("file_storage")
          .getPublicUrl(filePath);
        const { data: fileRecord, error: insertError } = await supabase
          .from("files")
          .insert([
            {
              name: file.name,
              size: file.size,
              type: file.type,
              folder_id: currentFolderId,
              user_id: user.id,
              url: urlData.publicUrl,
              last_modified: now,
              created_at: now,
              category: "other",
              status: "complete",
              tags: [],
            },
          ])
          .select()
          .single();
        if (insertError) throw insertError;
        updateProgress(100);
        setFiles((prevFiles) =>
          prevFiles.map((f) =>
            f.id === newFileId
              ? {
                  ...fileRecord,
                  progress: 100,
                  status: "complete",
                  tags: fileRecord.tags || [],
                }
              : f
          )
        );
      } catch (error: unknown) {
        const errMsg = error instanceof Error ? error.message : String(error);
        setFiles((prevFiles) =>
          prevFiles.map((f) =>
            f.id === newFileId ? { ...f, status: "error" } : f
          )
        );
        toast({
          title: `Failed to upload ${file.name}`,
          description: errMsg,
          variant: "destructive",
        });
      }
    }
    setIsUploadDialogOpen(false);
  };

  const handleFileDrop = async (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setDragging(false);

    if (!user) {
      toast({
        title: "Authentication required",
        description: "Please sign in to upload files",
        variant: "destructive",
      });
      return;
    }

    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      await handleFileUpload(e.dataTransfer.files);
    }
  };

  const createNewFolder = async (folderName: string) => {
    if (!user) {
      toast({
        title: "Authentication required",
        description: "Please sign in to create folders",
        variant: "destructive",
      });
      return;
    }

    try {
      const { data, error } = await supabase
        .from("file_folders")
        .insert([
          {
            name: folderName,
            parent_id: currentFolderId,
            user_id: user.id,
          },
        ])
        .select()
        .single();

      if (error) throw error;

      setFolders((prev) => [...prev, data]);
      setIsNewFolderDialogOpen(false);

      toast({
        title: "Folder created",
        description: `"${folderName}" has been created successfully.`,
      });
    } catch (error: unknown) {
      const errMsg = error instanceof Error ? error.message : String(error);
      console.error("Error creating folder:", errMsg);
      toast({
        title: "Error creating folder",
        description: errMsg,
        variant: "destructive",
      });
    }
  };

  const deleteItem = async (id: string, isFolder: boolean) => {
    if (!user) return;

    try {
      if (isFolder) {
        const deleteFolder = async (folderId: string) => {
          const { data: folderFiles, error: filesError } = await supabase
            .from("files")
            .select("*")
            .eq("folder_id", folderId);

          if (filesError) throw filesError;

          for (const file of folderFiles || []) {
            if (file.url) {
              const urlParts = file.url.split("/");
              const fileName = urlParts[urlParts.length - 1];

              if (fileName) {
                await supabase.storage.from("file_storage").remove([fileName]);
              }
            }
          }

          if (folderFiles && folderFiles.length > 0) {
            const { error: deleteFilesError } = await supabase
              .from("files")
              .delete()
              .eq("folder_id", folderId);

            if (deleteFilesError) throw deleteFilesError;
          }

          const { data: subfolders, error: subfoldersError } = await supabase
            .from("file_folders")
            .select("*")
            .eq("parent_id", folderId);

          if (subfoldersError) throw subfoldersError;

          for (const folder of subfolders || []) {
            await deleteFolder(folder.id);
          }

          const { error: deleteFolderError } = await supabase
            .from("file_folders")
            .delete()
            .eq("id", folderId);

          if (deleteFolderError) throw deleteFolderError;

          setFolders((prevFolders) =>
            prevFolders.filter((folder) => folder.id !== folderId)
          );
        };

        await deleteFolder(id);

        toast({
          title: "Folder deleted",
          description: "The folder and all its contents have been removed.",
        });
      } else {
        const fileToDelete = files.find((file) => file.id === id);

        if (fileToDelete) {
          if (fileToDelete.url) {
            const urlParts = fileToDelete.url.split("/");
            const fileName = urlParts[urlParts.length - 1];

            if (fileName) {
              await supabase.storage.from("file_storage").remove([fileName]);
            }
          }

          const { error } = await supabase.from("files").delete().eq("id", id);

          if (error) throw error;

          setFiles((prevFiles) =>
            prevFiles.filter((file) => file.id !== id)
          );

          toast({
            title: "File deleted",
            description: `"${fileToDelete.name}" has been removed.`,
          });
        }
      }
    } catch (error: unknown) {
      const errMsg = error instanceof Error ? error.message : String(error);
      console.error("Error deleting item:", errMsg);
      toast({
        title: "Error deleting item",
        description: errMsg,
        variant: "destructive",
      });
    }
  };

  const toggleSelectItem = (item: SelectedItem) => {
    setSelectedItems((prevItems) => {
      const exists = prevItems.some((i) => i.id === item.id);
      if (exists) {
        return prevItems.filter((i) => i.id !== item.id);
      } else {
        return [...prevItems, item];
      }
    });
  };

  const pushToVectorStore = async () => {
    if (selectedItems.length === 0) {
      toast({
        title: "No items selected",
        description:
          "Please select at least one file to upload to the vector store.",
        variant: "destructive",
      });
      return;
    }

    const filesToUpload = selectedItems.filter(
      (item) => item.type === "file" && item.url
    );

    if (filesToUpload.length === 0) {
      toast({
        title: "No valid files selected",
        description:
          "Please select files to upload. Folders cannot be directly uploaded to the vector store.",
        variant: "destructive",
      });
      return;
    }

    setVectorUploadDialogOpen(true);
  };

  const confirmVectorUpload = async () => {
    try {
      setIsUploading(true);
      setUploadingProgress(10);

      const { data: sessionData } = await supabase.auth.getSession();
      if (!sessionData.session) {
        throw new Error("Authentication required");
      }

      const filesToUpload = selectedItems.filter(
        (item) => item.type === "file" && item.url
      );
      setUploadingProgress(30);

      const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;

      const response = await fetch(
        `${supabaseUrl}/functions/v1/upload-to-vector-store`,
        {
          method: "POST",
          headers: {
            Authorization: `Bearer ${sessionData.session.access_token}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            files: filesToUpload.map((file) => ({
              id: file.id,
              name: file.name,
              url: file.url,
              size: file.size,
            })),
          }),
        }
      );

      setUploadingProgress(70);

      if (!response.ok) {
        const errorText = await response.text();
        let errorMessage = "Failed to upload to vector store";

        try {
          const errorData = JSON.parse(errorText);
          errorMessage = errorData.error || errorMessage;
        } catch (e) {
          errorMessage =
            errorText.length > 100
              ? `${errorText.substring(0, 100)}...`
              : errorText;
        }

        throw new Error(errorMessage);
      }

      const result = await response.json();
      setUploadingProgress(100);

      if (activeTab === "vectorStore") {
        setActiveTab("myFiles");
        setTimeout(() => setActiveTab("vectorStore"), 100);
      }

      setSelectionMode(false);
      setSelectedItems([]);

      toast({
        title: "Files uploaded to vector store",
        description: `Successfully uploaded ${filesToUpload.length} files to your vector store.`,
      });
    } catch (error: unknown) {
      const errMsg = error instanceof Error ? error.message : String(error);
      console.error("Error uploading to vector store:", errMsg);
      toast({
        title: "Upload to vector store failed",
        description: errMsg,
        variant: "destructive",
      });
    } finally {
      setIsUploading(false);
      setVectorUploadDialogOpen(false);
    }
  };

  const cancelSelectionMode = () => {
    setSelectionMode(false);
    setSelectedItems([]);
  };

  if (loading) {
    return <div className="flex items-center justify-center min-h-screen"><div className="animate-spin h-10 w-10 border-b-2 border-gray-900 rounded-full" /></div>;
  }
  if (loadError) {
    return <div className="flex flex-col items-center justify-center min-h-screen text-red-600">{loadError}</div>;
  }

  return (
    <div className="space-y-6">
      <PageHeader
        title="Database"
        description="Store, organize, and access your files and learning materials."
      />

      <div className="bg-white p-6 rounded-xl shadow-sm border">
        <div className="mb-6 space-y-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            <Input
              type="search"
              placeholder="Search files and folders..."
              className="pl-10"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>

          <StorageUsage storage={userStorage} />
        </div>

        <Tabs
          defaultValue="myFiles"
          value={activeTab}
          onValueChange={setActiveTab}
          className="mb-6"
        >
          <TabsList className="grid w-full max-w-md grid-cols-2">
            <TabsTrigger value="myFiles">Local Files</TabsTrigger>
            <TabsTrigger value="vectorStore">
              Vector Store
              <Badge variant="outline" className="ml-2 bg-blue-50">
                AI
              </Badge>
            </TabsTrigger>
          </TabsList>

          <TabsContent value="myFiles" className="mt-6">
            <div className="flex gap-3 mb-6 mt-4">
              {!selectionMode ? (
                <>
                  <Button
                    variant="outline"
                    onClick={() => setIsUploadDialogOpen(true)}
                    className="py-6 my-2"
                  >
                    <Upload className="h-4 w-4 mr-2" />
                    Upload Files
                  </Button>
                  <Button
                    variant="outline"
                    onClick={() => setIsNewFolderDialogOpen(true)}
                    className="py-6 my-2"
                  >
                    <FolderPlus className="h-4 w-4 mr-2" />
                    New Folder
                  </Button>
                  <Button
                    variant="outline"
                    onClick={() => setSelectionMode(true)}
                    className="py-6 my-2 ml-auto"
                  >
                    <Check className="h-4 w-4 mr-2" />
                    Select Items
                  </Button>
                </>
              ) : (
                <>
                  <Button
                    variant="default"
                    onClick={pushToVectorStore}
                    className="py-6 my-2"
                  >
                    <ArrowUp className="h-4 w-4 mr-2" />
                    Push to Vector Store ({selectedItems.length})
                  </Button>
                  <Button
                    variant="outline"
                    onClick={cancelSelectionMode}
                    className="py-6 my-2"
                  >
                    Cancel
                  </Button>
                </>
              )}
            </div>

            <div
              className={`min-h-[400px] border-2 border-dashed rounded-lg p-4 ${
                dragging ? "border-purple-500 bg-purple-50" : "border-gray-200"
              }`}
              onDragOver={(e) => {
                e.preventDefault();
                setDragging(true);
              }}
              onDragLeave={() => setDragging(false)}
              onDrop={handleFileDrop}
            >
              <FileGrid
                files={currentFolderItems.files}
                folders={currentFolderItems.folders}
                loading={loading}
                selectionMode={selectionMode}
                selectedItems={selectedItems}
                onFileSelect={handleFileSelect}
                onFolderSelect={handleFolderSelect}
                onDelete={deleteItem}
                onFileOpen={(url) => window.open(url, "_blank")}
              />
            </div>
          </TabsContent>

          <TabsContent value="vectorStore" className="mt-6">
            <div className="mb-6">
              <div className="flex justify-between items-center">
                <h3 className="text-lg font-medium">Vector Store Files</h3>
                <Badge variant="outline" className="bg-blue-50 text-blue-700">
                  Connected to OpenAI
                </Badge>
              </div>
              <p className="text-gray-500 text-sm mt-1">
                These files are stored in your OpenAI vector store and are
                available for AI-powered features.
              </p>
            </div>

            <div className="min-h-[400px] border-2 rounded-lg p-4 border-gray-200">
              {isLoadingVectorFiles ? (
                <div className="flex flex-col items-center justify-center h-full py-10">
                  <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-gray-900" />
                  <p className="text-gray-500 mt-4">
                    Loading your vector store files...
                  </p>
                </div>
              ) : vectorStoreFiles.length === 0 ? (
                <div className="flex flex-col items-center justify-center h-full text-center py-10">
                  <div className="h-16 w-16 text-gray-300 mb-4" />
                  <h3 className="text-lg font-medium text-gray-700">
                    No files found in vector store
                  </h3>
                  <p className="text-gray-500 mb-4 max-w-md">
                    Files added to your OpenAI vector store will appear here. You
                    can use these files with AI features.
                  </p>
                  <Button
                    onClick={() => {
                      setActiveTab("myFiles");
                      setSelectionMode(true);
                    }}
                    className="py-6 mt-4"
                  >
                    <ArrowUp className="h-4 w-4 mr-2" />
                    Upload Files to Vector Store
                  </Button>
                </div>
              ) : (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                  {vectorStoreFiles.map((file) => (
                    <div
                      key={file.id}
                      className="border rounded-lg p-3 hover:shadow-md transition-all"
                    >
                      <div className="flex justify-between items-start mb-2">
                        <div className="flex items-center">
                          <div className="h-8 w-8 text-blue-500" />
                          <h4 className="font-medium truncate ml-2" title={file.filename}>
                            {file.filename}
                          </h4>
                        </div>
                      </div>
                      <div className="text-xs text-gray-500 mt-2 flex flex-col gap-1">
                        <div>
                          Added:{" "}
                          {new Date(file.created_at * 1000).toLocaleDateString()}
                        </div>
                        <div>
                          Modified:{" "}
                          {new Date(file.modified_at * 1000).toLocaleDateString()}
                        </div>
                        {file.size && (
                          <div>Size: {formatFileSize(file.size)}</div>
                        )}
                        {file.purpose && (
                          <div className="mt-1">
                            <Badge variant="secondary" className="text-xs">
                              {file.purpose}
                            </Badge>
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </TabsContent>
        </Tabs>
      </div>

      <UploadDialog
        isOpen={isUploadDialogOpen}
        onClose={() => setIsUploadDialogOpen(false)}
        onFileSelect={handleFileUpload}
      />

      <NewFolderDialog
        isOpen={isNewFolderDialogOpen}
        onClose={() => setIsNewFolderDialogOpen(false)}
        onSubmit={createNewFolder}
      />

      <VectorStoreUploadDialog
        isOpen={vectorUploadDialogOpen}
        onClose={() => setVectorUploadDialogOpen(false)}
        onConfirm={confirmVectorUpload}
        selectedItems={selectedItems}
        isUploading={isUploading}
        uploadProgress={uploadingProgress}
      />
    </div>
  );
};

================
File: src/features/files/types.ts
================
export interface FolderType {
  id: string;
  name: string;
  parent_id: string | null;
  user_id: string;
  created_at: string;
}

export interface FileType {
  id: string;
  name: string;
  size: number;
  type: string;
  url?: string;
  folder_id: string | null;
  user_id: string;
  last_modified: string;
  category: string;
  tags: string[];
  progress: number;
  status: 'uploading' | 'processing' | 'complete' | 'error';
}

export interface SelectedItem {
  id: string;
  name: string;
  type: 'file' | 'folder';
  url?: string;
  size?: number;
}

export interface UserStorage {
  storage_used: number;
  storage_limit: number;
}

export interface VectorStoreFileType {
  id: string;
  filename: string;
  purpose: string;
  created_at: number;
  modified_at: number;
  size?: number;
}

================
File: src/hooks/use-class-widgets.tsx
================
import { createContext, useState, useContext, useEffect, ReactNode } from "react";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { WidgetType } from "@/hooks/use-widgets";

interface ClassWidgetsContextType {
  enabledWidgets: WidgetType[];
  toggleWidget: (widget: WidgetType) => void;
  isWidgetEnabled: (widget: WidgetType) => boolean;
  isLoading: boolean;
  setClassWidgets: (widgets: WidgetType[]) => void;
}

interface ClassWidgetsProviderProps {
  children: ReactNode;
  classId?: string;
  defaultWidgets?: WidgetType[];
}

// Enhanced interface to match the database response
interface ClassOpenAIConfigRow {
  api_key?: string;
  assistant_id?: string;
  class_time?: string;
  class_title: string;
  classroom?: string;
  created_at?: string;
  emoji?: string;
  id: string;
  professor?: string;
  updated_at?: string;
  user_id?: string;
  vector_store_id?: string;
  enabled_widgets?: string[];
}

// Default widgets for any class
export const DEFAULT_CLASS_WIDGETS: WidgetType[] = ["flashcards", "quizzes"];

const ClassWidgetsContext = createContext<ClassWidgetsContextType>({
  enabledWidgets: DEFAULT_CLASS_WIDGETS,
  toggleWidget: () => {},
  isWidgetEnabled: () => false,
  isLoading: true,
  setClassWidgets: () => {},
});

export const useClassWidgets = () => useContext(ClassWidgetsContext);

export const ClassWidgetsProvider = ({ 
  children, 
  classId, 
  defaultWidgets = DEFAULT_CLASS_WIDGETS 
}: ClassWidgetsProviderProps) => {
  const [enabledWidgets, setEnabledWidgets] = useState<WidgetType[]>(defaultWidgets);
  const [isLoading, setIsLoading] = useState(true);
  const { toast } = useToast();
  const [user, setUser] = useState<any>(null);
  const [saveTimeout, setSaveTimeout] = useState<NodeJS.Timeout | null>(null);

  // Check for authenticated user
  useEffect(() => {
    const checkAuth = async () => {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        console.log("Auth session in class widgets:", session?.user?.id);
        setUser(session?.user || null);
      } catch (error) {
        console.error("Error checking auth in class widgets:", error);
      }
    };
    
    checkAuth();
    
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
      console.log("Auth state change in class widgets:", event, session?.user?.id);
      setUser(session?.user || null);
    });
    
    return () => subscription.unsubscribe();
  }, []);

  // Load class widgets from database
  useEffect(() => {
    const loadClassWidgets = async () => {
      setIsLoading(true);
      try {
        // Always try to load from database if user is authenticated and class ID exists
        if (user && classId) {
          console.log(`Attempting to load widgets for class ${classId} from database with user ID ${user.id}`);
          const { data, error } = await supabase
            .from('class_openai_configs')
            .select('*')
            .eq('class_title', classId)
            .eq('user_id', user.id)
            .maybeSingle();
            
          if (error) {
            console.error("Error loading class from database:", error);
            throw error;
          } else if (data) {
            console.log(`Found class ${classId} in database:`, data);
            
            // Try to update active class in session storage
            try {
              const activeClass = sessionStorage.getItem('activeClass');
              if (activeClass) {
                const parsedClass = JSON.parse(activeClass);
                if (parsedClass.title === classId) {
                  // Cast data as our enhanced interface
                  const configData = data as ClassOpenAIConfigRow;
                  
                  // Check if enabled_widgets exists in the database response
                  if (configData.enabled_widgets && Array.isArray(configData.enabled_widgets)) {
                    console.log(`Loaded widgets for class ${classId} from database:`, configData.enabled_widgets);
                    setEnabledWidgets(configData.enabled_widgets as WidgetType[]);
                    setIsLoading(false);
                    return;
                  }
                }
              }
            } catch (e) {
              console.error("Error updating active class:", e);
            }
            
            // If no enabled_widgets found in the database record, use defaults
            console.log(`No valid widgets found in database for class ${classId}, using defaults:`, defaultWidgets);
            setEnabledWidgets(defaultWidgets);
          } else {
            // Class not found in database, use defaults
            console.log(`Class ${classId} not found in database, using defaults:`, defaultWidgets);
            setEnabledWidgets(defaultWidgets);
          }
        } else {
          // No user authenticated or no class ID, use defaults
          if (!user) {
            console.log('No user authenticated in class widgets, using default widgets:', defaultWidgets);
          } else if (!classId) {
            console.log('No classId provided in class widgets, using default widgets:', defaultWidgets);
          }
          setEnabledWidgets(defaultWidgets);
        }
      } catch (error) {
        console.error("Error loading class widgets:", error);
        setEnabledWidgets(defaultWidgets);
      } finally {
        setIsLoading(false);
      }
    };

    loadClassWidgets();
  }, [classId, defaultWidgets, user]);

  // Save widgets to database when they change with debounce
  useEffect(() => {
    const saveWidgets = async () => {
      if (isLoading || !user || !classId) return;
      
      try {
        console.log(`Saving widgets for class ${classId} to database:`, enabledWidgets);
        
        // Try to update in database
        const { data, error } = await supabase
          .from('class_openai_configs')
          .select('id')
          .eq('class_title', classId)
          .eq('user_id', user.id)
          .maybeSingle();
          
        if (error) {
          console.error("Error checking if class exists:", error);
          throw error;
        }
        
        if (data) {
          // Update existing record
          const { error: updateError } = await supabase
            .from('class_openai_configs')
            .update({ 
              enabled_widgets: enabledWidgets,
              updated_at: new Date().toISOString()
            })
            .eq('id', data.id)
            .eq('user_id', user.id);
            
          if (updateError) {
            console.error("Error updating class widgets:", updateError);
            throw updateError;
          }
        } else {
          // Create new record
          const { error: insertError } = await supabase
            .from('class_openai_configs')
            .insert({ 
              class_title: classId,
              user_id: user.id,
              enabled_widgets: enabledWidgets,
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString()
            });
            
          if (insertError) {
            console.error("Error inserting class widgets:", insertError);
            throw insertError;
          }
        }
        
        console.log(`Successfully saved widgets for class ${classId}`);
        
        // Also update the active class if this is the active class
        const activeClass = sessionStorage.getItem('activeClass');
        if (activeClass) {
          try {
            const parsedClass = JSON.parse(activeClass);
            if (parsedClass.title === classId) {
              parsedClass.enabledWidgets = enabledWidgets;
              sessionStorage.setItem('activeClass', JSON.stringify(parsedClass));
              console.log("Updated widgets in active class in session storage");
            }
          } catch (e) {
            console.error("Error updating active class:", e);
          }
        }
      } catch (error) {
        console.error("Error saving class widgets:", error);
        toast({
          title: "Error saving widget preferences",
          description: "Failed to save your widget preferences for this class.",
          variant: "destructive",
        });
      }
    };

    // Clear any existing timeout
    if (saveTimeout) {
      clearTimeout(saveTimeout);
    }
    
    // Set a new timeout to debounce the save operation
    if (!isLoading && user && classId) {
      const timeout = setTimeout(() => {
        saveWidgets();
      }, 500);
      setSaveTimeout(timeout);
    }
    
    // Cleanup on unmount
    return () => {
      if (saveTimeout) {
        clearTimeout(saveTimeout);
      }
    };
  }, [enabledWidgets, classId, isLoading, toast, user]);

  const toggleWidget = (widget: WidgetType) => {
    console.log(`Toggling widget ${widget} for class ${classId}`);
    setEnabledWidgets(current => {
      const currentIsArray = Array.isArray(current);
      const safeCurrentWidgets = currentIsArray ? current : DEFAULT_CLASS_WIDGETS;
      
      if (safeCurrentWidgets.includes(widget)) {
        console.log(`Removing widget ${widget}`);
        return safeCurrentWidgets.filter(w => w !== widget);
      } else {
        console.log(`Adding widget ${widget}`);
        return [...safeCurrentWidgets, widget];
      }
    });
  };

  const isWidgetEnabled = (widget: WidgetType) => {
    if (!Array.isArray(enabledWidgets)) {
      return DEFAULT_CLASS_WIDGETS.includes(widget);
    }
    return enabledWidgets.includes(widget);
  };

  const setClassWidgets = (widgets: WidgetType[]) => {
    if (!Array.isArray(widgets)) {
      console.warn("Attempted to set non-array widgets:", widgets);
      setEnabledWidgets(DEFAULT_CLASS_WIDGETS);
      return;
    }
    setEnabledWidgets(widgets);
  };

  const contextValue = {
    enabledWidgets: Array.isArray(enabledWidgets) ? enabledWidgets : DEFAULT_CLASS_WIDGETS,
    toggleWidget,
    isWidgetEnabled,
    isLoading,
    setClassWidgets
  };

  return (
    <ClassWidgetsContext.Provider value={contextValue}>
      {children}
    </ClassWidgetsContext.Provider>
  );
};

================
File: src/hooks/use-mobile.tsx
================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

================
File: src/hooks/use-sidebar-state.ts
================
import { useState, useEffect } from "react";
import { useLocation } from "react-router-dom";
import { supabase } from "@/integrations/supabase/client";
import { useClassWidgets } from "@/hooks/use-class-widgets";
import { WidgetType } from "@/hooks/use-widgets";

export function useSidebarState() {
  const [user, setUser] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [isWidgetsDialogOpen, setIsWidgetsDialogOpen] = useState(false);
  const [activeClassName, setActiveClassName] = useState<string | null>(null);
  const location = useLocation();
  const { enabledWidgets, isLoading: widgetsLoading } = useClassWidgets();
  
  // Load user and auth state
  useEffect(() => {
    const fetchUser = async () => {
      try {
        const { data } = await supabase.auth.getSession();
        setUser(data.session?.user || null);
      } finally {
        setLoading(false);
      }
    };
    
    fetchUser();
    
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
      setUser(session?.user || null);
    });
    
    // Get active class name from session storage
    const activeClass = sessionStorage.getItem('activeClass');
    if (activeClass) {
      try {
        const parsedClass = JSON.parse(activeClass);
        setActiveClassName(parsedClass.title);
      } catch (e) {
        console.error("Error parsing active class:", e);
      }
    }
    
    return () => subscription.unsubscribe();
  }, []);

  // Update active class name when location changes
  useEffect(() => {
    if (location.pathname === '/') {
      setActiveClassName(null);
    } else {
      const activeClass = sessionStorage.getItem('activeClass');
      if (activeClass) {
        try {
          const parsedClass = JSON.parse(activeClass);
          setActiveClassName(parsedClass.title);
        } catch (e) {
          console.error("Error parsing active class:", e);
        }
      }
    }
  }, [location.pathname]);

  return {
    user,
    loading,
    isWidgetsDialogOpen,
    setIsWidgetsDialogOpen,
    activeClassName,
    enabledWidgets,
    widgetsLoading
  };
}

================
File: src/hooks/use-toast.ts
================
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: src/hooks/use-widgets.tsx
================
import { createContext, useState, useContext, useEffect, ReactNode } from "react";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";

export type WidgetType = "flashcards" | "quizzes" | "supertutor" | "database";

interface WidgetsContextType {
  enabledWidgets: WidgetType[];
  toggleWidget: (widget: WidgetType) => void;
  isWidgetEnabled: (widget: WidgetType) => boolean;
  isLoading: boolean;
}

const WidgetsContext = createContext<WidgetsContextType>({
  enabledWidgets: [],
  toggleWidget: () => {},
  isWidgetEnabled: () => false,
  isLoading: true,
});

// Default widgets that are enabled for all users - removed calendar since it's now a default feature
const DEFAULT_WIDGETS: WidgetType[] = ["flashcards"];

export const useWidgets = () => useContext(WidgetsContext);

export const WidgetsProvider = ({ children }: { children: ReactNode }) => {
  const [enabledWidgets, setEnabledWidgets] = useState<WidgetType[]>(DEFAULT_WIDGETS);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [user, setUser] = useState<any>(null);
  const { toast } = useToast();

  // Listen for auth state changes
  useEffect(() => {
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
      // Handle auth changes including logout
      const newUser = session?.user || null;
      setUser(newUser);
      
      // On logout, reset to defaults or local storage
      if (event === 'SIGNED_OUT') {
        const storedWidgets = localStorage.getItem("enabledWidgets");
        if (storedWidgets) {
          try {
            const parsedWidgets = JSON.parse(storedWidgets);
            setEnabledWidgets(parsedWidgets);
          } catch (e) {
            console.error("Failed to parse stored widgets", e);
            setEnabledWidgets(DEFAULT_WIDGETS);
          }
        } else {
          setEnabledWidgets(DEFAULT_WIDGETS);
        }
        setIsLoading(false);
      }
    });

    // Initial auth check
    supabase.auth.getSession().then(({ data: { session } }) => {
      setUser(session?.user || null);
    });

    return () => subscription.unsubscribe();
  }, []);

  // Load user widgets when user changes
  useEffect(() => {
    const loadUserWidgets = async () => {
      setIsLoading(true);
      
      try {
        if (user) {
          console.log("Loading widgets for user:", user.id);
          
          // Try to fetch user's widget preferences
          const { data, error } = await supabase
            .from('user_widgets')
            .select('enabled_widgets')
            .eq('user_id', user.id)
            .single();

          if (error) {
            // Only throw if it's not a "no rows returned" error
            if (error.code !== 'PGRST116') {
              throw error;
            }
            
            // If no widgets found for user, create default entry
            console.log("No user widgets found, creating defaults");
            await supabase
              .from('user_widgets')
              .insert({
                user_id: user.id,
                enabled_widgets: DEFAULT_WIDGETS
              });
            
            setEnabledWidgets(DEFAULT_WIDGETS);
          } else if (data) {
            console.log("Found user widgets:", data.enabled_widgets);
            // Convert string array to WidgetType array with type safety
            const widgets = data.enabled_widgets
              .filter((widget: string) => 
                ["flashcards", "quizzes", "supertutor", "database"].includes(widget)
              ) as WidgetType[];
            
            setEnabledWidgets(widgets);
          }
        } else {
          // Use local storage for non-authenticated users
          const storedWidgets = localStorage.getItem("enabledWidgets");
          if (storedWidgets) {
            try {
              const parsedWidgets = JSON.parse(storedWidgets);
              console.log("Using local storage widgets:", parsedWidgets);
              setEnabledWidgets(parsedWidgets);
            } catch (e) {
              console.error("Failed to parse stored widgets", e);
              setEnabledWidgets(DEFAULT_WIDGETS);
            }
          } else {
            console.log("No local storage widgets, using defaults");
            setEnabledWidgets(DEFAULT_WIDGETS);
            localStorage.setItem("enabledWidgets", JSON.stringify(DEFAULT_WIDGETS));
          }
        }
      } catch (error: any) {
        console.error("Error loading widgets:", error);
        toast({
          title: "Error loading widgets",
          description: error.message || "Failed to load your widget preferences",
          variant: "destructive",
        });
        // Fall back to defaults
        setEnabledWidgets(DEFAULT_WIDGETS);
      } finally {
        setIsLoading(false);
      }
    };

    // Load widgets whenever user state changes
    loadUserWidgets();
  }, [user, toast]);

  // Save widget changes to database when they change
  useEffect(() => {
    const saveWidgets = async () => {
      if (isLoading) return; // Avoid saving during initial load
      
      try {
        console.log("Saving widgets:", enabledWidgets);
        
        if (user) {
          // Save to database for authenticated users
          console.log("Saving to database for user:", user.id);
          const { error } = await supabase
            .from('user_widgets')
            .upsert({
              user_id: user.id,
              enabled_widgets: enabledWidgets,
              updated_at: new Date().toISOString(),
            }, { onConflict: 'user_id' });
            
          if (error) {
            throw error;
          }
        } 
        
        // Always save to localStorage regardless of authentication status
        // This ensures persistence across page reloads for both logged-in and guest users
        localStorage.setItem("enabledWidgets", JSON.stringify(enabledWidgets));
      } catch (error: any) {
        console.error("Error saving widgets:", error);
        toast({
          title: "Error saving widgets",
          description: error.message || "Failed to save your widget preferences",
          variant: "destructive",
        });
      }
    };

    // Skip the first render
    if (!isLoading) {
      saveWidgets();
    }
  }, [enabledWidgets, user, isLoading, toast]);

  const toggleWidget = (widget: WidgetType) => {
    console.log("Toggling widget:", widget);
    setEnabledWidgets(current => {
      if (current.includes(widget)) {
        return current.filter(w => w !== widget);
      } else {
        return [...current, widget];
      }
    });
  };

  const isWidgetEnabled = (widget: WidgetType) => {
    return enabledWidgets.includes(widget);
  };

  return (
    <WidgetsContext.Provider value={{ 
      enabledWidgets, 
      toggleWidget,
      isWidgetEnabled,
      isLoading
    }}>
      {children}
    </WidgetsContext.Provider>
  );
};

================
File: src/integrations/supabase/client.ts
================
// src/integrations/supabase/client.ts
import { createClient, SupabaseClient } from '@supabase/supabase-js';
import type { Database } from './types'; // This will be the auto-generated types

// These should be loaded from environment variables,
// matching your VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!SUPABASE_URL) {
  console.error('Error: SUPABASE_URL is not defined. Please check your .env file.');
  throw new Error('SUPABASE_URL is not defined.');
}
if (!SUPABASE_PUBLISHABLE_KEY) {
  console.error('Error: SUPABASE_PUBLISHABLE_KEY is not defined. Please check your .env file.');
  throw new Error('SUPABASE_PUBLISHABLE_KEY is not defined.');
}

// Define the CustomDatabase interface which extends the auto-generated Database type
export interface CustomDatabase extends Database {
  public: Database['public'] & {
    Tables: Database['public']['Tables'] & {
      profiles: {
        Row: {
          user_id: string;
          full_name: string | null;
          avatar_url: string | null;
          created_at: string | null;
          updated_at: string | null;
          usage_description: string | null;
        };
        Insert: {
          user_id: string;
          full_name?: string | null;
          avatar_url?: string | null;
          created_at?: string | null;
          updated_at?: string | null;
          usage_description?: string | null;
        };
        Update: {
          user_id?: string;
          full_name?: string | null;
          avatar_url?: string | null;
          created_at?: string | null;
          updated_at?: string | null;
          usage_description?: string | null;
        };
      };
      classes: {
        Row: {
          class_id: string;
          class_title: string;
          vector_store_id: string | null;
          assistant_id: string | null;
          user_id: string | null;
          created_at: string | null;
          updated_at: string | null;
          emoji: string | null;
          professor: string | null;
          class_time: string | null;
          classroom: string | null;
          enabled_widgets: string[] | null;
        };
        Insert: {
          class_id?: string;
          class_title: string;
          vector_store_id?: string | null;
          assistant_id?: string | null;
          user_id?: string | null;
          created_at?: string | null;
          updated_at?: string | null;
          emoji?: string | null;
          professor?: string | null;
          class_time?: string | null;
          classroom?: string | null;
          enabled_widgets?: string[] | null;
        };
        Update: {
          class_id?: string;
          class_title?: string;
          vector_store_id?: string | null;
          assistant_id?: string | null;
          user_id?: string | null;
          updated_at?: string | null;
          emoji?: string | null;
          professor?: string | null;
          class_time?: string | null;
          classroom?: string | null;
          enabled_widgets?: string[] | null;
        };
      };
      database: {
        Row: {
            database_id: string;
            user_id: string | null;
            class_id: string | null;
            created_at: string | null;
        };
        Insert: {
            database_id?: string;
            user_id?: string | null;
            class_id?: string | null;
            created_at?: string | null;
        };
        Update: {
            database_id?: string;
            user_id?: string | null;
            class_id?: string | null;
            created_at?: string | null;
        };
      };
      file_folders: {
        Row: {
          folder_id: string;
          name: string;
          parent_id: string | null;
          user_id: string | null;
          created_at: string | null;
          class_id: string | null;
          database_id: string | null;
        };
        Insert: {
          folder_id?: string;
          name: string;
          parent_id?: string | null;
          user_id?: string | null;
          created_at?: string | null;
          class_id?: string | null;
          database_id?: string | null;
        };
        Update: {
          folder_id?: string;
          name?: string;
          parent_id?: string | null;
          user_id?: string | null;
          class_id?: string | null;
          database_id?: string | null;
        };
      };
      files: {
        Row: {
          file_id: string;
          name: string;
          size: number | null;
          type: string | null;
          folder_id: string | null;
          user_id: string | null;
          url: string | null;
          last_modified: string | null;
          created_at: string | null;
          category: string | null;
          tags: string[] | null;
          status: string | null;
          class_id: string | null;
          database_id: string | null;
        };
        Insert: {
          file_id?: string;
          name: string;
          size?: number | null;
          type?: string | null;
          folder_id?: string | null;
          user_id?: string | null;
          url?: string | null;
          last_modified?: string | null;
          created_at?: string | null;
          category?: string | null;
          tags?: string[] | null;
          status?: string | null;
          class_id?: string | null;
          database_id?: string | null;
        };
        Update: {
          file_id?: string;
          name?: string;
          size?: number | null;
          type?: string | null;
          folder_id?: string | null;
          user_id?: string | null;
          url?: string | null;
          last_modified?: string | null;
          category?: string | null;
          tags?: string[] | null;
          status?: string | null;
          class_id?: string | null;
          database_id?: string | null;
        };
      };
      "flashcard-decks": {
        Row: {
          flashcard_deck_id: string;
          title: string;
          description: string | null;
          color: string | null;
          user_id: string | null;
          created_at: string | null;
          updated_at: string | null;
          card_count: number | null;
          due_cards: number | null;
          new_cards: number | null;
          class_title: string | null;
          class_id: string | null;
        };
        Insert: {
          flashcard_deck_id?: string;
          title: string;
          description?: string | null;
          color?: string | null;
          user_id?: string | null;
          card_count?: number | null;
          due_cards?: number | null;
          new_cards?: number | null;
          class_title?: string | null;
          class_id?: string | null;
        };
        Update: {
          flashcard_deck_id?: string;
          title?: string;
          description?: string | null;
          color?: string | null;
          user_id?: string | null;
          card_count?: number | null;
          due_cards?: number | null;
          new_cards?: number | null;
          class_title?: string | null;
          class_id?: string | null;
        };
      };
      flashcards: {
        Row: {
          flashcard_id: string;
          flashcard_deck_id: string;
          front: string;
          back: string;
          difficulty: string | null;
          next_review: string | null;
          last_reviewed: string | null;
          review_count: number | null;
          created_at: string | null;
          updated_at: string | null;
          user_id: string | null;
          class_id: string | null;
        };
        Insert: {
          flashcard_id?: string;
          flashcard_deck_id: string;
          front: string;
          back: string;
          difficulty?: string | null;
          next_review?: string | null;
          last_reviewed?: string | null;
          review_count?: number | null;
          user_id?: string | null;
          class_id?: string | null;
        };
        Update: {
          flashcard_id?: string;
          flashcard_deck_id?: string;
          front?: string;
          back?: string;
          difficulty?: string | null;
          next_review?: string | null;
          last_reviewed?: string | null;
          review_count?: number | null;
          user_id?: string | null;
          class_id?: string | null;
        };
      };
      quiz_questions: {
        Row: {
          quiz_questions_id: string;
          quiz_id: string;
          question_text: string;
          options: string[] | null;
          correct_answer_index: number | null;
          explanation: string | null;
          created_at: string | null;
          user_id: string | null;
          class_id: string | null;
        };
        Insert: {
          quiz_questions_id?: string;
          quiz_id: string;
          question_text: string;
          options?: string[] | null;
          correct_answer_index?: number | null;
          explanation?: string | null;
          user_id?: string | null;
          class_id?: string | null;
        };
        Update: {
          quiz_questions_id?: string;
          quiz_id?: string;
          question_text?: string;
          options?: string[] | null;
          correct_answer_index?: number | null;
          explanation?: string | null;
          user_id?: string | null;
          class_id?: string | null;
        };
      };
      quizzes: {
        Row: {
          quiz_id: string;
          title: string;
          description: string | null;
          question_count: number | null;
          time_estimate: number | null;
          difficulty: string | null;
          coverage: string | null;
          user_id: string | null;
          created_at: string | null;
          updated_at: string | null;
          class_id: string | null;
        };
        Insert: {
          quiz_id?: string;
          title: string;
          description?: string | null;
          question_count?: number | null;
          time_estimate?: number | null;
          difficulty?: string | null;
          coverage?: string | null;
          user_id?: string | null;
          class_id?: string | null;
        };
        Update: {
          quiz_id?: string;
          title?: string;
          description?: string | null;
          question_count?: number | null;
          time_estimate?: number | null;
          difficulty?: string | null;
          coverage?: string | null;
          user_id?: string | null;
          class_id?: string | null;
        };
      };
      user_storage: {
        Row: {
          user_id: string;
          storage_used: number | null;
          storage_limit: number | null;
        };
        Insert: {
          user_id: string;
          storage_used?: number | null;
          storage_limit?: number | null;
        };
        Update: {
          user_id?: string;
          storage_used?: number | null;
          storage_limit?: number | null;
        };
      };
      api_key: {
        Row: {
          id: string;
          user_id: string | null;
          key_name: string | null;
          key_value: string | null;
          created_at: string | null;
          updated_at: string | null;
        };
        Insert: {
          id?: string;
          user_id?: string | null;
          key_name?: string | null;
          key_value?: string | null;
        };
        Update: {
          id?: string;
          user_id?: string | null;
          key_name?: string | null;
          key_value?: string | null;
        };
      };
      // user_widgets definition removed as it's not currently in the user's schema for class widgets
      embeddings?: {
        Row: {
          id: string;
          content: string | null;
          embedding: unknown | null;
          user_id: string | null;
          created_at: string | null;
        };
        Insert: {
          id?: string;
          content?: string | null;
          embedding?: unknown | null;
          user_id?: string | null;
        };
        Update: {
          id?: string;
          content?: string | null;
          embedding?: unknown | null;
          user_id?: string | null;
        };
      };
    };
  };
}

// Create and export the Supabase client with the custom types
export const supabase: SupabaseClient<CustomDatabase> = createClient<CustomDatabase>(
  SUPABASE_URL,
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
    }
  }
);

================
File: src/integrations/supabase/types.ts
================
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  public: {
    Tables: {
      classes: {
        Row: {
          assistant_id: string | null
          class_id: string
          class_time: string | null
          class_title: string
          classroom: string | null
          created_at: string | null
          emoji: string | null
          enabled_widgets: string[] | null
          professor: string | null
          updated_at: string | null
          user_id: string | null
          vector_store_id: string | null
        }
        Insert: {
          assistant_id?: string | null
          class_id?: string
          class_time?: string | null
          class_title: string
          classroom?: string | null
          created_at?: string | null
          emoji?: string | null
          enabled_widgets?: string[] | null
          professor?: string | null
          updated_at?: string | null
          user_id?: string | null
          vector_store_id?: string | null
        }
        Update: {
          assistant_id?: string | null
          class_id?: string
          class_time?: string | null
          class_title?: string
          classroom?: string | null
          created_at?: string | null
          emoji?: string | null
          enabled_widgets?: string[] | null
          professor?: string | null
          updated_at?: string | null
          user_id?: string | null
          vector_store_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "classes_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["user_id"]
          },
        ]
      }
      database: {
        Row: {
          class_id: string | null
          created_at: string
          database_id: string
          user_id: string | null
        }
        Insert: {
          class_id?: string | null
          created_at?: string
          database_id?: string
          user_id?: string | null
        }
        Update: {
          class_id?: string | null
          created_at?: string
          database_id?: string
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "database_class_id_fkey"
            columns: ["class_id"]
            isOneToOne: false
            referencedRelation: "classes"
            referencedColumns: ["class_id"]
          },
          {
            foreignKeyName: "database_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["user_id"]
          },
        ]
      }
      embeddings: {
        Row: {
          content: string
          created_at: string
          embedding: string | null
          id: string
          user_id: string | null
        }
        Insert: {
          content: string
          created_at?: string
          embedding?: string | null
          id?: string
          user_id?: string | null
        }
        Update: {
          content?: string
          created_at?: string
          embedding?: string | null
          id?: string
          user_id?: string | null
        }
        Relationships: []
      }
      file_folders: {
        Row: {
          class_id: string | null
          created_at: string
          database_id: string | null
          folder_id: string
          name: string
          parent_id: string | null
          user_id: string
        }
        Insert: {
          class_id?: string | null
          created_at?: string
          database_id?: string | null
          folder_id?: string
          name: string
          parent_id?: string | null
          user_id: string
        }
        Update: {
          class_id?: string | null
          created_at?: string
          database_id?: string | null
          folder_id?: string
          name?: string
          parent_id?: string | null
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "file_folders_class_id_fkey"
            columns: ["class_id"]
            isOneToOne: false
            referencedRelation: "classes"
            referencedColumns: ["class_id"]
          },
          {
            foreignKeyName: "file_folders_database_id_fkey"
            columns: ["database_id"]
            isOneToOne: false
            referencedRelation: "database"
            referencedColumns: ["database_id"]
          },
          {
            foreignKeyName: "file_folders_parent_id_fkey"
            columns: ["parent_id"]
            isOneToOne: false
            referencedRelation: "file_folders"
            referencedColumns: ["folder_id"]
          },
          {
            foreignKeyName: "file_folders_user_id_fkey1"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["user_id"]
          },
        ]
      }
      files: {
        Row: {
          category: string | null
          class_id: string | null
          created_at: string
          database_id: string | null
          file_id: string
          folder_id: string | null
          last_modified: string
          name: string
          size: number
          status: string | null
          tags: string[] | null
          type: string
          url: string | null
          user_id: string
        }
        Insert: {
          category?: string | null
          class_id?: string | null
          created_at?: string
          database_id?: string | null
          file_id?: string
          folder_id?: string | null
          last_modified?: string
          name: string
          size: number
          status?: string | null
          tags?: string[] | null
          type: string
          url?: string | null
          user_id: string
        }
        Update: {
          category?: string | null
          class_id?: string | null
          created_at?: string
          database_id?: string | null
          file_id?: string
          folder_id?: string | null
          last_modified?: string
          name?: string
          size?: number
          status?: string | null
          tags?: string[] | null
          type?: string
          url?: string | null
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "files_class_id_fkey"
            columns: ["class_id"]
            isOneToOne: false
            referencedRelation: "classes"
            referencedColumns: ["class_id"]
          },
          {
            foreignKeyName: "files_database_id_fkey"
            columns: ["database_id"]
            isOneToOne: false
            referencedRelation: "database"
            referencedColumns: ["database_id"]
          },
          {
            foreignKeyName: "files_folder_id_fkey"
            columns: ["folder_id"]
            isOneToOne: false
            referencedRelation: "file_folders"
            referencedColumns: ["folder_id"]
          },
          {
            foreignKeyName: "files_user_id_fkey1"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["user_id"]
          },
        ]
      }
      "flashcard-decks": {
        Row: {
          card_count: number
          class_id: string | null
          class_title: string | null
          color: string
          created_at: string
          description: string
          due_cards: number
          flashcard_deck_id: string
          new_cards: number
          title: string
          updated_at: string
          user_id: string | null
        }
        Insert: {
          card_count?: number
          class_id?: string | null
          class_title?: string | null
          color: string
          created_at?: string
          description: string
          due_cards?: number
          flashcard_deck_id?: string
          new_cards?: number
          title: string
          updated_at?: string
          user_id?: string | null
        }
        Update: {
          card_count?: number
          class_id?: string | null
          class_title?: string | null
          color?: string
          created_at?: string
          description?: string
          due_cards?: number
          flashcard_deck_id?: string
          new_cards?: number
          title?: string
          updated_at?: string
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "flashcard-decks_class_id_fkey"
            columns: ["class_id"]
            isOneToOne: false
            referencedRelation: "classes"
            referencedColumns: ["class_id"]
          },
          {
            foreignKeyName: "flashcard-decks_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["user_id"]
          },
        ]
      }
      flashcards: {
        Row: {
          back: string
          class_id: string | null
          created_at: string
          difficulty: string
          flashcard_deck_id: string
          flashcard_id: string
          front: string
          last_reviewed: string | null
          next_review: string
          review_count: number | null
          updated_at: string
          user_id: string | null
        }
        Insert: {
          back: string
          class_id?: string | null
          created_at?: string
          difficulty?: string
          flashcard_deck_id: string
          flashcard_id?: string
          front: string
          last_reviewed?: string | null
          next_review?: string
          review_count?: number | null
          updated_at?: string
          user_id?: string | null
        }
        Update: {
          back?: string
          class_id?: string | null
          created_at?: string
          difficulty?: string
          flashcard_deck_id?: string
          flashcard_id?: string
          front?: string
          last_reviewed?: string | null
          next_review?: string
          review_count?: number | null
          updated_at?: string
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "flashcards_class_id_fkey"
            columns: ["class_id"]
            isOneToOne: false
            referencedRelation: "classes"
            referencedColumns: ["class_id"]
          },
          {
            foreignKeyName: "flashcards_flashcard_deck_id_fkey"
            columns: ["flashcard_deck_id"]
            isOneToOne: false
            referencedRelation: "flashcard-decks"
            referencedColumns: ["flashcard_deck_id"]
          },
          {
            foreignKeyName: "flashcards_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["user_id"]
          },
        ]
      }
      profiles: {
        Row: {
          avatar_url: string | null
          created_at: string
          full_name: string | null
          updated_at: string
          usage_description: string | null
          user_id: string
        }
        Insert: {
          avatar_url?: string | null
          created_at?: string
          full_name?: string | null
          updated_at?: string
          usage_description?: string | null
          user_id: string
        }
        Update: {
          avatar_url?: string | null
          created_at?: string
          full_name?: string | null
          updated_at?: string
          usage_description?: string | null
          user_id?: string
        }
        Relationships: []
      }
      quiz_questions: {
        Row: {
          class_id: string | null
          correct_answer_index: number
          created_at: string
          explanation: string
          options: string[]
          question_text: string
          quiz_id: string
          quiz_questions_id: string
          user_id: string | null
        }
        Insert: {
          class_id?: string | null
          correct_answer_index: number
          created_at?: string
          explanation: string
          options: string[]
          question_text: string
          quiz_id: string
          quiz_questions_id?: string
          user_id?: string | null
        }
        Update: {
          class_id?: string | null
          correct_answer_index?: number
          created_at?: string
          explanation?: string
          options?: string[]
          question_text?: string
          quiz_id?: string
          quiz_questions_id?: string
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "quiz_questions_class_id_fkey"
            columns: ["class_id"]
            isOneToOne: false
            referencedRelation: "classes"
            referencedColumns: ["class_id"]
          },
          {
            foreignKeyName: "quiz_questions_quiz_id_fkey"
            columns: ["quiz_id"]
            isOneToOne: false
            referencedRelation: "quizzes"
            referencedColumns: ["quiz_id"]
          },
          {
            foreignKeyName: "quiz_questions_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["user_id"]
          },
        ]
      }
      quizzes: {
        Row: {
          class_id: string | null
          coverage: string
          created_at: string
          description: string
          difficulty: string
          question_count: number
          quiz_id: string
          time_estimate: number
          title: string
          updated_at: string
          user_id: string | null
        }
        Insert: {
          class_id?: string | null
          coverage: string
          created_at?: string
          description: string
          difficulty?: string
          question_count?: number
          quiz_id?: string
          time_estimate?: number
          title: string
          updated_at?: string
          user_id?: string | null
        }
        Update: {
          class_id?: string | null
          coverage?: string
          created_at?: string
          description?: string
          difficulty?: string
          question_count?: number
          quiz_id?: string
          time_estimate?: number
          title?: string
          updated_at?: string
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "quizzes_class_id_fkey"
            columns: ["class_id"]
            isOneToOne: false
            referencedRelation: "classes"
            referencedColumns: ["class_id"]
          },
        ]
      }
      user_storage: {
        Row: {
          storage_limit: number
          storage_used: number
          user_id: string
        }
        Insert: {
          storage_limit?: number
          storage_used?: number
          user_id: string
        }
        Update: {
          storage_limit?: number
          storage_used?: number
          user_id?: string
        }
        Relationships: []
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      binary_quantize: {
        Args: { "": string } | { "": unknown }
        Returns: unknown
      }
      halfvec_avg: {
        Args: { "": number[] }
        Returns: unknown
      }
      halfvec_out: {
        Args: { "": unknown }
        Returns: unknown
      }
      halfvec_send: {
        Args: { "": unknown }
        Returns: string
      }
      halfvec_typmod_in: {
        Args: { "": unknown[] }
        Returns: number
      }
      hnsw_bit_support: {
        Args: { "": unknown }
        Returns: unknown
      }
      hnsw_halfvec_support: {
        Args: { "": unknown }
        Returns: unknown
      }
      hnsw_sparsevec_support: {
        Args: { "": unknown }
        Returns: unknown
      }
      hnswhandler: {
        Args: { "": unknown }
        Returns: unknown
      }
      ivfflat_bit_support: {
        Args: { "": unknown }
        Returns: unknown
      }
      ivfflat_halfvec_support: {
        Args: { "": unknown }
        Returns: unknown
      }
      ivfflathandler: {
        Args: { "": unknown }
        Returns: unknown
      }
      l2_norm: {
        Args: { "": unknown } | { "": unknown }
        Returns: number
      }
      l2_normalize: {
        Args: { "": string } | { "": unknown } | { "": unknown }
        Returns: string
      }
      sparsevec_out: {
        Args: { "": unknown }
        Returns: unknown
      }
      sparsevec_send: {
        Args: { "": unknown }
        Returns: string
      }
      sparsevec_typmod_in: {
        Args: { "": unknown[] }
        Returns: number
      }
      vector_avg: {
        Args: { "": number[] }
        Returns: string
      }
      vector_dims: {
        Args: { "": string } | { "": unknown }
        Returns: number
      }
      vector_norm: {
        Args: { "": string }
        Returns: number
      }
      vector_out: {
        Args: { "": string }
        Returns: unknown
      }
      vector_send: {
        Args: { "": string }
        Returns: string
      }
      vector_typmod_in: {
        Args: { "": unknown[] }
        Returns: number
      }
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

type DefaultSchema = Database[Extract<keyof Database, "public">]

export type Tables<
  DefaultSchemaTableNameOrOptions extends
    | keyof (DefaultSchema["Tables"] & DefaultSchema["Views"])
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof (Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
        Database[DefaultSchemaTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? (Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
      Database[DefaultSchemaTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema["Tables"] &
        DefaultSchema["Views"])
    ? (DefaultSchema["Tables"] &
        DefaultSchema["Views"])[DefaultSchemaTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  DefaultSchemaEnumNameOrOptions extends
    | keyof DefaultSchema["Enums"]
    | { schema: keyof Database },
  EnumName extends DefaultSchemaEnumNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema["Enums"]
    ? DefaultSchema["Enums"][DefaultSchemaEnumNameOrOptions]
    : never

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof DefaultSchema["CompositeTypes"]
    | { schema: keyof Database },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
    : never = never,
> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }
  ? Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema["CompositeTypes"]
    ? DefaultSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
    : never

export const Constants = {
  public: {
    Enums: {},
  },
} as const

================
File: src/lib/utils.ts
================
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function formatFileSize(bytes: number): string {
  if (bytes === 0) return "0 Bytes";
  const k = 1024;
  const sizes = ["Bytes", "KB", "MB", "GB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
}

================
File: src/pages/AccountPage.tsx
================
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { UserProfile } from "@/components/auth/UserProfile";
import { PasswordChangeForm } from "@/components/auth/PasswordChangeForm";
import { supabase } from "@/integrations/supabase/client";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { Loader2 } from "lucide-react";
import { PageHeader } from "@/components/layout/PageHeader";

const AccountPage = () => {
  const [session, setSession] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();
  const { toast } = useToast();

  useEffect(() => {
    const fetchSession = async () => {
      try {
        const { data } = await supabase.auth.getSession();
        setSession(data.session);
        
        // If user is not logged in, redirect to auth page
        if (!data.session) {
          navigate("/auth");
        }
      } finally {
        setLoading(false);
      }
    };

    fetchSession();

    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
      
      // If user logs out, redirect to auth page
      if (!session) {
        navigate("/auth");
      }
    });

    return () => subscription.unsubscribe();
  }, [navigate]);

  const handleSignOut = async () => {
    setLoading(true);
    try {
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      
      toast({
        title: "Signed out successfully",
        description: "You've been signed out of your account",
      });
      navigate("/auth");
    } catch (error) {
      console.error("Error signing out:", error);
      toast({
        title: "Sign out failed",
        description: "There was a problem signing you out. Please try again.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-[50vh]">
        <Loader2 className="h-12 w-12 animate-spin text-cybercoach-blue" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <PageHeader 
        title="My Account"
        description="Manage your profile and account settings"
      />

      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="md:col-span-1">
          <UserProfile />
        </div>
        <div className="md:col-span-3 space-y-6">
          <PasswordChangeForm />
          
          <Card>
            <CardHeader>
              <CardTitle>Account Settings</CardTitle>
              <CardDescription>
                Update your account preferences and settings
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <h3 className="font-medium">Email Notifications</h3>
                <p className="text-sm text-gray-500">
                  Configure what types of emails you want to receive
                </p>
                {/* Add notification settings here in the future */}
              </div>
              
              <div className="pt-6 border-t">
                <Button variant="destructive" onClick={handleSignOut} disabled={loading}>
                  {loading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
                  Sign Out
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default AccountPage;

================
File: src/pages/AuthPage.tsx
================
import { Auth } from "@/components/auth/Auth";
import { PageHeader } from "@/components/layout/PageHeader";

const AuthPage = () => {
  return (
    <div className="flex flex-col min-h-screen bg-gradient-to-b from-background to-muted/50">
      <div className="flex-1 flex flex-col items-center justify-center px-4 py-10">
        <div className="w-full max-w-md mb-6 flex flex-col items-center">
          <div className="flex items-center justify-center mb-4">
            <img 
              src="/eido-icon.png" 
              alt="Eido Logo" 
              className="h-20 w-20 object-contain"
            />
          </div>
          <h1 className="text-3xl font-bold text-center mb-2">Welcome to Eido</h1>
          <p className="text-center text-muted-foreground mb-8">
            Your AI Copilot for Education
          </p>
        </div>

        <Auth />
        
        <div className="mt-8 text-center text-sm text-muted-foreground">
          <p>
            By using Eido, you agree to our Terms of Service and Privacy Policy.
          </p>
        </div>
      </div>
    </div>
  );
};

export default AuthPage;

================
File: src/pages/DatabasePage.tsx
================
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { 
  Search, 
  FolderPlus,
  Upload,
  File,
  Folder,
  MoreHorizontal,
  Trash,
  ArrowUp,
  Loader2,
  ChevronRight,
  CloudLightning,
  Check
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Input } from "@/components/ui/input";
import { toast } from "@/components/ui/use-toast";
import { ScrollArea } from "@/components/ui/scroll-area";
import { 
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger
} from "@/components/ui/dropdown-menu";
import { PageHeader } from "@/components/layout/PageHeader";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Checkbox } from "@/components/ui/checkbox";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { supabase } from "@/integrations/supabase/client";

interface FolderType {
  id: string;
  name: string;
  parent_id: string | null;
  created_at: string;
}

interface FileType {
  id: string;
  name: string;
  size: number;
  type: string;
  last_modified: string;
  category: string;
  tags: string[];
  status: 'uploading' | 'processing' | 'complete' | 'error';
  progress: number;
  url?: string;
  folder_id: string | null;
  user_id?: string;
}

interface UserStorage {
  storage_used: number;
  storage_limit: number;
}

interface VectorStoreFileType {
  id: string;
  created_at: number;
  modified_at: number;
  object: string;
  filename: string;
  size?: number;
  purpose?: string;
  status?: string;
  vector_store_id?: string;
}

interface SelectedItem {
  id: string;
  name: string;
  type: 'file' | 'folder';
  url?: string;
  size?: number;
}

const formatFileSize = (bytes: number) => {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

// Change return type to React.ReactNode instead of string
const getFileIcon = (fileType: string): React.ReactNode => {
  return <File className="h-8 w-8 text-blue-500" />;
};

const DatabasePage = () => {
  const [files, setFiles] = useState<FileType[]>([]);
  const [folders, setFolders] = useState<FolderType[]>([]);
  const [currentFolderId, setCurrentFolderId] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [userStorage, setUserStorage] = useState<UserStorage>({ 
    storage_used: 0, 
    storage_limit: 1024 * 1024 * 1024 // Default 1GB
  });
  const [breadcrumbs, setBreadcrumbs] = useState<{id: string | null, name: string}[]>([
    { id: null, name: 'Main' }
  ]);
  const [isUploadDialogOpen, setIsUploadDialogOpen] = useState(false);
  const [isNewFolderDialogOpen, setIsNewFolderDialogOpen] = useState(false);
  const [newFolderName, setNewFolderName] = useState('');
  const [dragging, setDragging] = useState(false);
  const [loading, setLoading] = useState(true);
  const [user, setUser] = useState<any>(null);
  const navigate = useNavigate();
  const [vectorStoreFiles, setVectorStoreFiles] = useState<VectorStoreFileType[]>([]);
  const [isLoadingVectorFiles, setIsLoadingVectorFiles] = useState(false);
  const [activeTab, setActiveTab] = useState("myFiles");
  
  // State for selection mode
  const [selectionMode, setSelectionMode] = useState(false);
  const [selectedItems, setSelectedItems] = useState<SelectedItem[]>([]);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadingProgress, setUploadingProgress] = useState(0);
  const [vectorUploadDialogOpen, setVectorUploadDialogOpen] = useState(false);
  
  // Fetch current user
  useEffect(() => {
    const fetchUser = async () => {
      const { data } = await supabase.auth.getSession();
      setUser(data.session?.user || null);
    };
    
    fetchUser();
    
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
      setUser(session?.user || null);
    });
    
    return () => subscription.unsubscribe();
  }, []);
  
  // Fetch user storage info
  useEffect(() => {
    const fetchUserStorage = async () => {
      if (!user) return;
      
      const { data, error } = await supabase
        .from('user_storage')
        .select('*')
        .eq('user_id', user.id)
        .single();
      
      if (data) {
        setUserStorage({
          storage_used: data.storage_used,
          storage_limit: data.storage_limit
        });
      } else if (error && error.code !== 'PGRST116') { // Not found error
        console.error("Error fetching storage info:", error);
        toast({
          title: "Error fetching storage info",
          description: error.message,
          variant: "destructive"
        });
      }
    };
    
    if (user) {
      fetchUserStorage();
    }
  }, [user]);
  
  // Fetch folders and files for current folder
  useEffect(() => {
    const fetchFoldersAndFiles = async () => {
      if (!user) return;
      
      setLoading(true);
      
      try {
        // Fetch folders - Use IS NULL check instead of eq with null
        let folderQuery = supabase
          .from('file_folders')
          .select('*')
          .eq('user_id', user.id);
          
        if (currentFolderId === null) {
          folderQuery = folderQuery.is('parent_id', null);
        } else {
          folderQuery = folderQuery.eq('parent_id', currentFolderId);
        }
        
        const { data: folderData, error: folderError } = await folderQuery;
        
        if (folderError) throw folderError;
        
        // Fetch files - Use IS NULL check for null folder_id
        let fileQuery = supabase
          .from('files')
          .select('*')
          .eq('user_id', user.id);
          
        if (currentFolderId === null) {
          fileQuery = fileQuery.is('folder_id', null);
        } else {
          fileQuery = fileQuery.eq('folder_id', currentFolderId);
        }
        
        const { data: fileData, error: fileError } = await fileQuery;
        
        if (fileError) throw fileError;
        
        setFolders(folderData || []);
        
        // Add progress property to files (needed for UI) and ensure status is a valid value
        const filesWithProgress = (fileData || []).map(file => ({
          ...file,
          progress: 100,
          status: (file.status as 'uploading' | 'processing' | 'complete' | 'error') || 'complete',
          tags: file.tags || []
        }));
        
        setFiles(filesWithProgress as FileType[]);
      } catch (error: any) {
        console.error("Error fetching folders and files:", error);
        toast({
          title: "Error loading data",
          description: error.message,
          variant: "destructive"
        });
      } finally {
        setLoading(false);
      }
    };
    
    if (user) {
      fetchFoldersAndFiles();
    }
  }, [currentFolderId, user]);
  
  // Load vector store files
  useEffect(() => {
    const fetchVectorStoreFiles = async () => {
      if (!user) return;
      
      setIsLoadingVectorFiles(true);
      
      try {
        const { data: sessionData } = await supabase.auth.getSession();
        if (!sessionData.session) {
          throw new Error("Authentication required");
        }
        
        // Fix: Use the proper VITE_SUPABASE_URL environment variable
        const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
        
        const response = await fetch(`${supabaseUrl}/functions/v1/list-vector-store-files`, {
          headers: {
            Authorization: `Bearer ${sessionData.session.access_token}`,
          },
        });
        
        if (!response.ok) {
          const errorText = await response.text();
          let errorMessage = "Failed to fetch vector store files";
          
          try {
            // Try to parse as JSON to get a better error message
            const errorData = JSON.parse(errorText);
            errorMessage = errorData.error || errorMessage;
          } catch (e) {
            // If it's not JSON, use the raw text (but limit length)
            errorMessage = errorText.length > 100 ? 
              `${errorText.substring(0, 100)}...` : errorText;
          }
          
          throw new Error(errorMessage);
        }
        
        const result = await response.json();
        setVectorStoreFiles(result.files || []);
        console.log("Fetched vector store files:", result);
      } catch (error: any) {
        console.error("Error fetching vector store files:", error);
        toast({
          title: "Error fetching vector store files",
          description: error.message,
          variant: "destructive"
        });
      } finally {
        setIsLoadingVectorFiles(false);
      }
    };
    
    if (activeTab === "vectorStore" && user) {
      fetchVectorStoreFiles();
    }
  }, [activeTab, user]);
  
  // Filter files/folders based on search query
  const currentFolderItems = {
    files: files.filter(file => 
      file.name.toLowerCase().includes(searchQuery.toLowerCase())
    ),
    folders: folders.filter(folder => 
      folder.name.toLowerCase().includes(searchQuery.toLowerCase())
    )
  };

  // Navigate to a folder
  const navigateToFolder = async (folderId: string | null, folderName: string) => {
    // If in selection mode, don't navigate but select/deselect the folder
    if (selectionMode && folderId !== null) {
      toggleSelectItem({
        id: folderId,
        name: folderName,
        type: 'folder'
      });
      return;
    }
    
    if (folderId === null) {
      // Navigate to root
      setCurrentFolderId(null);
      setBreadcrumbs([{ id: null, name: 'Main' }]);
      return;
    }
    
    setCurrentFolderId(folderId);
    
    // Update breadcrumbs
    if (folderId === breadcrumbs[breadcrumbs.length - 1].id) {
      // Already at this folder
      return;
    }

    // Check if folder exists in current breadcrumb
    const existingIndex = breadcrumbs.findIndex(b => b.id === folderId);
    if (existingIndex !== -1) {
      // If folder exists in breadcrumb, truncate to that point
      setBreadcrumbs(breadcrumbs.slice(0, existingIndex + 1));
    } else {
      // Add new folder to breadcrumbs
      setBreadcrumbs([...breadcrumbs, { id: folderId, name: folderName }]);
    }
  };
  
  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!user) {
      toast({
        title: "Authentication required",
        description: "Please sign in to upload files",
        variant: "destructive"
      });
      return;
    }
    
    if (e.target.files && e.target.files.length > 0) {
      const selectedFiles = Array.from(e.target.files);
      
      // Create temporary file entries for UI
      const newFiles: FileType[] = selectedFiles.map(file => ({
        id: Math.random().toString(36).substring(2, 9),
        name: file.name,
        size: file.size,
        type: file.type,
        last_modified: new Date(file.lastModified).toISOString(),
        category: 'other',
        tags: [],
        progress: 0,
        status: 'uploading' as const,
        folder_id: currentFolderId,
      }));
      
      setFiles(prevFiles => [...prevFiles, ...newFiles]);
      
      toast({
        title: `${newFiles.length} ${newFiles.length === 1 ? 'file' : 'files'} uploading`,
        description: "Your files will be processed shortly.",
      });
      
      // Upload each file to Supabase storage
      for (const [index, file] of selectedFiles.entries()) {
        const newFileId = newFiles[index].id;
        
        // Update progress for this file
        const updateProgress = (progress: number) => {
          setFiles(prevFiles => 
            prevFiles.map(f => 
              f.id === newFileId ? { ...f, progress } : f
            )
          );
        };
        
        try {
          // Check for authentication
          const { data: sessionData } = await supabase.auth.getSession();
          if (!sessionData.session) {
            throw new Error("Authentication required");
          }

          // Generate a unique file path
          const fileName = `${Date.now()}_${file.name.replace(/\s+/g, '_')}`;
          const filePath = `${fileName}`;
          
          // 1. Upload to storage with authentication
          const { data: storageData, error: storageError } = await supabase.storage
            .from('file_storage')
            .upload(filePath, file, {
              cacheControl: '3600',
              upsert: false // Set to false to avoid overwriting
            });

          // Manual progress updates
          updateProgress(50);
          
          if (storageError) throw storageError;
          
          updateProgress(75);
          
          // 2. Get the URL
          const { data: urlData } = supabase.storage
            .from('file_storage')
            .getPublicUrl(filePath);
          
          // 3. Create record in files table
          const { data: fileRecord, error: insertError } = await supabase
            .from('files')
            .insert([
              {
                name: file.name,
                size: file.size,
                type: file.type,
                folder_id: currentFolderId,
                user_id: user.id,
                url: urlData.publicUrl,
                last_modified: new Date().toISOString(),
                category: 'other',
                status: 'complete'
              }
            ])
            .select()
            .single();
          
          if (insertError) throw insertError;
          
          // 4. Update the file entry in state
          updateProgress(100);
          setFiles(prevFiles => 
            prevFiles.map(f => 
              f.id === newFileId ? { 
                ...fileRecord, 
                progress: 100,
                status: 'complete' as const,
                tags: fileRecord.tags || []
              } : f
            ) as FileType[]
          );
        } catch (error: any) {
          console.error("Error uploading file:", error);
          
          // Update file status to error
          setFiles(prevFiles => 
            prevFiles.map(f => 
              f.id === newFileId ? { ...f, status: 'error' as const } : f
            )
          );
          
          toast({
            title: `Failed to upload ${file.name}`,
            description: error.message,
            variant: "destructive"
          });
        }
      }
      
      // Close the upload dialog
      setIsUploadDialogOpen(false);
    }
  };
  
  const handleFileDrop = async (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setDragging(false);
    
    if (!user) {
      toast({
        title: "Authentication required",
        description: "Please sign in to upload files",
        variant: "destructive"
      });
      return;
    }

    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      const droppedFiles = Array.from(e.dataTransfer.files);
      
      // Create temporary file entries for UI
      const newFiles: FileType[] = droppedFiles.map(file => ({
        id: Math.random().toString(36).substring(2, 9),
        name: file.name,
        size: file.size,
        type: file.type,
        last_modified: new Date(file.lastModified).toISOString(),
        category: 'other',
        tags: [],
        progress: 0,
        status: 'uploading' as const,
        folder_id: currentFolderId,
      }));
      
      setFiles(prevFiles => [...prevFiles, ...newFiles]);
      
      toast({
        title: `${newFiles.length} ${newFiles.length === 1 ? 'file' : 'files'} uploading`,
        description: "Your files will be processed shortly.",
      });
      
      // Upload each file to Supabase storage
      for (const [index, file] of droppedFiles.entries()) {
        const newFileId = newFiles[index].id;
        
        // Update progress for this file
        const updateProgress = (progress: number) => {
          setFiles(prevFiles => 
            prevFiles.map(f => 
              f.id === newFileId ? { ...f, progress } : f
            )
          );
        };
        
        try {
          // Check for authentication
          const { data: sessionData } = await supabase.auth.getSession();
          if (!sessionData.session) {
            throw new Error("Authentication required");
          }

          // Generate a unique file path
          const fileName = `${Date.now()}_${file.name.replace(/\s+/g, '_')}`;
          const filePath = `${fileName}`;
          
          // 1. Upload to storage with authentication
          const { data: storageData, error: storageError } = await supabase.storage
            .from('file_storage')
            .upload(filePath, file, {
              cacheControl: '3600',
              upsert: false // Set to false to avoid overwriting
            });

          // Manual progress updates
          updateProgress(50);
          
          if (storageError) throw storageError;
          
          updateProgress(75);
          
          // 2. Get the URL
          const { data: urlData } = supabase.storage
            .from('file_storage')
            .getPublicUrl(filePath);
          
          // 3. Create record in files table
          const { data: fileRecord, error: insertError } = await supabase
            .from('files')
            .insert([
              {
                name: file.name,
                size: file.size,
                type: file.type,
                folder_id: currentFolderId,
                user_id: user.id,
                url: urlData.publicUrl,
                last_modified: new Date().toISOString(),
                category: 'other',
                status: 'complete'
              }
            ])
            .select()
            .single();
          
          if (insertError) throw insertError;
          
          // 4. Update the file entry in state
          updateProgress(100);
          setFiles(prevFiles => 
            prevFiles.map(f => 
              f.id === newFileId ? { 
                ...fileRecord, 
                progress: 100,
                status: 'complete' as const,
                tags: fileRecord.tags || []
              } : f
            ) as FileType[]
          );
        } catch (error: any) {
          console.error("Error uploading file:", error);
          
          // Update file status to error
          setFiles(prevFiles => 
            prevFiles.map(f => 
              f.id === newFileId ? { ...f, status: 'error' as const } : f
            )
          );
          
          toast({
            title: `Failed to upload ${file.name}`,
            description: error.message,
            variant: "destructive"
          });
        }
      }
    }
  };
  
  const createNewFolder = async () => {
    if (!user) {
      toast({
        title: "Authentication required",
        description: "Please sign in to create folders",
        variant: "destructive"
      });
      return;
    }
    
    if (!newFolderName.trim()) {
      toast({
        title: "Folder name required",
        description: "Please enter a name for your folder.",
        variant: "destructive"
      });
      return;
    }
    
    try {
      const { data, error } = await supabase
        .from('file_folders')
        .insert([
          {
            name: newFolderName.trim(),
            parent_id: currentFolderId,
            user_id: user.id
          }
        ])
        .select()
        .single();
      
      if (error) throw error;
      
      setFolders(prev => [...prev, data]);
      setIsNewFolderDialogOpen(false);
      setNewFolderName('');
      
      toast({
        title: "Folder created",
        description: `"${newFolderName}" has been created successfully.`
      });
    } catch (error: any) {
      console.error("Error creating folder:", error);
      toast({
        title: "Error creating folder",
        description: error.message,
        variant: "destructive"
      });
    }
  };
  
  const deleteItem = async (id: string, isFolder: boolean) => {
    if (!user) return;
    
    try {
      if (isFolder) {
        // Delete folder and all its contents recursively
        const deleteFolder = async (folderId: string) => {
          // Get all files in the folder
          const { data: folderFiles, error: filesError } = await supabase
            .from('files')
            .select('*')
            .eq('folder_id', folderId);
          
          if (filesError) throw filesError;
          
          // Delete each file from storage
          for (const file of folderFiles || []) {
            // Extract path from URL and delete from storage
            if (file.url) {
              // Fix: Extract just the filename from the URL
              const urlParts = file.url.split('/');
              const fileName = urlParts[urlParts.length - 1];
              
              if (fileName) {
                await supabase.storage
                  .from('file_storage')
                  .remove([fileName]);
              }
            }
          }
          
          // Delete files from database
          if (folderFiles && folderFiles.length > 0) {
            const { error: deleteFilesError } = await supabase
              .from('files')
              .delete()
              .eq('folder_id', folderId);
            
            if (deleteFilesError) throw deleteFilesError;
          }
          
          // Find all subfolders
          const { data: subfolders, error: subfoldersError } = await supabase
            .from('file_folders')
            .select('*')
            .eq('parent_id', folderId);
          
          if (subfoldersError) throw subfoldersError;
          
          // Delete all subfolders recursively
          for (const folder of subfolders || []) {
            await deleteFolder(folder.id);
          }
          
          // Delete the folder itself
          const { error: deleteFolderError } = await supabase
            .from('file_folders')
            .delete()
            .eq('id', folderId);
          
          if (deleteFolderError) throw deleteFolderError;
          
          // Update UI state
          setFolders(prevFolders => prevFolders.filter(folder => folder.id !== folderId));
        };
        
        await deleteFolder(id);
        
        toast({
          title: "Folder deleted",
          description: "The folder and all its contents have been removed."
        });
      } else {
        // Get file info
        const fileToDelete = files.find(file => file.id === id);
        
        if (fileToDelete) {
          // Delete file from storage if it has a URL
          if (fileToDelete.url) {
            // Fix: Extract just the filename from the URL
            const urlParts = fileToDelete.url.split('/');
            const fileName = urlParts[urlParts.length - 1];
            
            if (fileName) {
              await supabase.storage
                .from('file_storage')
                .remove([fileName]);
            }
          }
          
          // Delete from database
          const { error } = await supabase
            .from('files')
            .delete()
            .eq('id', id);
          
          if (error) throw error;
          
          // Update UI state
          setFiles(prevFiles => prevFiles.filter(file => file.id !== id));
          
          toast({
            title: "File deleted",
            description: `"${fileToDelete.name}" has been removed.`
          });
        }
      }
    } catch (error: any) {
      console.error("Error deleting item:", error);
      toast({
        title: "Error deleting item",
        description: error.message,
        variant: "destructive"
      });
    }
  };
  
  const formatTimestamp = (timestamp: number) => {
    return new Date(timestamp * 1000).toLocaleDateString();
  };

  // Function to handle toggling selection of an item
  const toggleSelectItem = (item: SelectedItem) => {
    setSelectedItems(prevItems => {
      const exists = prevItems.some(i => i.id === item.id);
      if (exists) {
        // Remove from selected items
        return prevItems.filter(i => i.id !== item.id);
      } else {
        // Add to selected items
        return [...prevItems, item];
      }
    });
  };

  // Function to handle pushing selected items to vector store
  const pushToVectorStore = async () => {
    if (selectedItems.length === 0) {
      toast({
        title: "No items selected",
        description: "Please select at least one file to upload to the vector store.",
        variant: "destructive"
      });
      return;
    }

    // Only files can be uploaded to the vector store
    const filesToUpload = selectedItems.filter(item => item.type === 'file' && item.url);
    
    if (filesToUpload.length === 0) {
      toast({
        title: "No valid files selected",
        description: "Please select files to upload. Folders cannot be directly uploaded to the vector store.",
        variant: "destructive"
      });
      return;
    }

    // Show the upload confirmation dialog
    setVectorUploadDialogOpen(true);
  };

  // Function to handle confirmed vector store upload
  const confirmVectorUpload = async () => {
    try {
      setIsUploading(true);
      setUploadingProgress(10);
      
      // Get auth session for the function call
      const { data: sessionData } = await supabase.auth.getSession();
      if (!sessionData.session) {
        throw new Error("Authentication required");
      }
      
      const filesToUpload = selectedItems.filter(item => item.type === 'file' && item.url);
      setUploadingProgress(30);
      
      // Fix: Use the proper VITE_SUPABASE_URL environment variable
      const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
      
      // Call an edge function that would handle the upload to Vector Store
      const response = await fetch(`${supabaseUrl}/functions/v1/upload-to-vector-store`, {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${sessionData.session.access_token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          files: filesToUpload.map(file => ({
            id: file.id,
            name: file.name,
            url: file.url,
            size: file.size
          }))
        }),
      });
      
      setUploadingProgress(70);
      
      if (!response.ok) {
        const errorText = await response.text();
        let errorMessage = "Failed to upload to vector store";
        
        try {
          const errorData = JSON.parse(errorText);
          errorMessage = errorData.error || errorMessage;
        } catch (e) {
          errorMessage = errorText.length > 100 ? 
            `${errorText.substring(0, 100)}...` : errorText;
        }
        
        throw new Error(errorMessage);
      }
      
      const result = await response.json();
      setUploadingProgress(100);
      
      // Refresh vector store files list
      if (activeTab === "vectorStore") {
        // This will trigger the useEffect to reload vector store files
        setActiveTab("myFiles");
        setTimeout(() => setActiveTab("vectorStore"), 100);
      }
      
      // Exit selection mode
      setSelectionMode(false);
      setSelectedItems([]);
      
      toast({
        title: "Files uploaded to vector store",
        description: `Successfully uploaded ${filesToUpload.length} files to your vector store.`,
      });
      
    } catch (error: any) {
      console.error("Error uploading to vector store:", error);
      toast({
        title: "Upload to vector store failed",
        description: error.message,
        variant: "destructive"
      });
    } finally {
      setIsUploading(false);
      setVectorUploadDialogOpen(false);
    }
  };
  
  // Exit selection mode
  const cancelSelectionMode = () => {
    setSelectionMode(false);
    setSelectedItems([]);
  };
  
  if (!user) {
    return (
      <div className="space-y-6">
        <PageHeader 
          title="Database"
          description="You need to sign in to access your files and folders."
        />
        <div className="bg-white p-6 rounded-xl shadow-sm border text-center py-12">
          <h3 className="text-lg font-medium text-gray-700 mb-4">Authentication Required</h3>
          <p className="text-gray-500 mb-6">Please sign in to access your database and files.</p>
          <Button onClick={() => navigate('/auth')}>Sign In</Button>
        </div>
      </div>
    );
  }
  
  return (
    <div className="space-y-6">
      <PageHeader 
        title="Database"
        description="Store, organize, and access your files and learning materials."
      />
      
      <div className="bg-white p-6 rounded-xl shadow-sm border">
        {/* Top Section: Search and Storage */}
        <div className="mb-6 space-y-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            <Input
              type="search"
              placeholder="Search files and folders..."
              className="pl-10"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
          
          <div className="mt-2">
            <div className="flex justify-between items-center text-sm mb-1">
              <span>Storage usage</span>
              <span>{((userStorage.storage_used / userStorage.storage_limit) * 100).toFixed(1)}% used</span>
            </div>
            <Progress value={(userStorage.storage_used / userStorage.storage_limit) * 100} className="h-2" />
            <div className="flex justify-end mt-1">
              <span className="text-xs text-gray-500">
                {formatFileSize(userStorage.storage_used)} of {formatFileSize(userStorage.storage_limit)}
              </span>
            </div>
          </div>
        </div>
        
        {/* Tabs for Local Files and Vector Store Files */}
        <Tabs defaultValue="myFiles" value={activeTab} onValueChange={setActiveTab} className="mb-6">
          <TabsList className="grid w-full max-w-md grid-cols-2">
            <TabsTrigger value="myFiles">Local Files</TabsTrigger>
            <TabsTrigger value="vectorStore">
              Vector Store 
              <Badge variant="outline" className="ml-2 bg-blue-50">AI</Badge>
            </TabsTrigger>
          </TabsList>
          
          <TabsContent value="myFiles" className="mt-6">
            {/* Action Buttons */}
            <div className="flex gap-3 mb-6 mt-4">
              {!selectionMode ? (
                <>
                  <Button variant="outline" onClick={() => setIsUploadDialogOpen(true)} className="py-6 my-2">
                    <Upload className="h-4 w-4 mr-2" />
                    Upload Files
                  </Button>
                  <Button variant="outline" onClick={() => setIsNewFolderDialogOpen(true)} className="py-6 my-2">
                    <FolderPlus className="h-4 w-4 mr-2" />
                    New Folder
                  </Button>
                  <Button variant="outline" onClick={() => setSelectionMode(true)} className="py-6 my-2 ml-auto">
                    <Check className="h-4 w-4 mr-2" />
                    Select Items
                  </Button>
                </>
              ) : (
                <>
                  <Button variant="default" onClick={pushToVectorStore} className="py-6 my-2">
                    <ArrowUp className="h-4 w-4 mr-2" />
                    Push to Vector Store ({selectedItems.length})
                  </Button>
                  <Button variant="outline" onClick={cancelSelectionMode} className="py-6 my-2">
                    Cancel
                  </Button>
                </>
              )}
            </div>
            
            {/* Breadcrumbs Navigation */}
            <div className="flex flex-wrap items-center mb-6 text-lg">
              {breadcrumbs.map((crumb, index) => (
                <div key={index} className="flex items-center">
                  {index > 0 && (
                    <ChevronRight className="h-5 w-5 mx-2 text-gray-400" />
                  )}
                  <button
                    onClick={() => navigateToFolder(crumb.id, crumb.name)}
                    className={`px-4 py-2 rounded-full transition-all ${
                      index === breadcrumbs.length - 1 
                        ? 'bg-blue-100 text-blue-700 font-medium' 
                        : 'text-gray-700 hover:bg-gray-100'
                    }`}
                  >
                    {crumb.name}
                  </button>
                </div>
              ))}
            </div>
            
            {/* File/Folder Drop Area */}
            <div 
              className={`min-h-[400px] border-2 border-dashed rounded-lg p-4 ${
                dragging ? "border-purple-500 bg-purple-50" : "border-gray-200"
              }`}
              onDragOver={(e) => {
                e.preventDefault();
                setDragging(true);
              }}
              onDragLeave={() => setDragging(false)}
              onDrop={handleFileDrop}
            >
              {/* Loading state */}
              {loading && (
                <div className="flex flex-col items-center justify-center h-full py-10">
                  <Loader2 className="h-10 w-10 text-purple-500 animate-spin mb-4" />
                  <p className="text-gray-500">Loading your files and folders...</p>
                </div>
              )}
              
              {/* Empty state */}
              {!loading && currentFolderItems.folders.length === 0 && currentFolderItems.files.length === 0 ? (
                <div className="flex flex-col items-center justify-center h-full text-center py-10">
                  <FolderPlus className="h-16 w-16 text-gray-300 mb-4" />
                  <h3 className="text-lg font-medium text-gray-700">This folder is empty</h3>
                  <p className="text-gray-500 mb-4">
                    Upload files or create folders to get started
                  </p>
                  <div className="flex gap-3">
                    <Button onClick={() => setIsUploadDialogOpen(true)} className="py-6">
                      <Upload className="h-4 w-4 mr-2" />
                      Upload Files
                    </Button>
                    <Button variant="outline" onClick={() => setIsNewFolderDialogOpen(true)} className="py-6">
                      <FolderPlus className="h-4 w-4 mr-2" />
                      New Folder
                    </Button>
                  </div>
                </div>
              ) : (
                <ScrollArea className="h-[500px] pr-4">
                  {/* Folders Section */}
                  {!loading && currentFolderItems.folders.length > 0 && (
                    <div className="mb-8">
                      <h3 className="font-medium text-gray-700 mb-2">Folders</h3>
                      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                        {currentFolderItems.folders.map(folder => (
                          <div 
                            key={folder.id}
                            className={`border rounded-lg p-3 flex flex-col hover:shadow-md transition-all cursor-pointer ${
                              selectedItems.some(item => item.id === folder.id) ? 'border-blue-500 bg-blue-50' : ''
                            }`}
                            onClick={() => navigateToFolder(folder.id, folder.name)}
                          >
                            <div className="flex justify-between items-start mb-2">
                              <div className="flex items-center">
                                {selectionMode && (
                                  <Checkbox
                                    checked={selectedItems.some(item => item.id === folder.id)}
                                    onCheckedChange={() => toggleSelectItem({
                                      id: folder.id,
                                      name: folder.name,
                                      type: 'folder'
                                    })}
                                    onClick={(e) => e.stopPropagation()}
                                    className="mr-2"
                                  />
                                )}
                                <Folder className="h-8 w-8 text-yellow-500 mr-2" />
                                <h4 className="font-medium truncate" title={folder.name}>
                                  {folder.name}
                                </h4>
                              </div>
                              <DropdownMenu>
                                <DropdownMenuTrigger asChild onClick={(e) => e.stopPropagation()}>
                                  <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                                    <MoreHorizontal className="h-4 w-4" />
                                  </Button>
                                </DropdownMenuTrigger>
                                <DropdownMenuContent align="end">
                                  <DropdownMenuItem 
                                    className="text-red-600 cursor-pointer"
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      deleteItem(folder.id, true);
                                    }}
                                  >
                                    <Trash className="h-4 w-4 mr-2" />
                                    Delete
                                  </DropdownMenuItem>
                                </DropdownMenuContent>
                              </DropdownMenu>
                            </div>
                            <div className="text-xs text-gray-500">
                              {new Date(folder.created_at).toLocaleDateString()}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  {/* Files Section */}
                  {!loading && currentFolderItems.files.length > 0 && (
                    <div>
                      <h3 className="font-medium text-gray-700 mb-2">Files</h3>
                      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                        {currentFolderItems.files.map(file => (
                          <div 
                            key={file.id}
                            className={`border rounded-lg p-3 hover:shadow-md transition-all ${
                              selectedItems.some(item => item.id === file.id) ? 'border-blue-500 bg-blue-50' : ''
                            }`}
                            onClick={() => {
                              if (selectionMode) {
                                toggleSelectItem({
                                  id: file.id,
                                  name: file.name,
                                  type: 'file',
                                  url: file.url,
                                  size: file.size
                                });
                              }
                            }}
                          >
                            <div className="flex justify-between items-start mb-2">
                              <div className="flex items-center">
                                {selectionMode && (
                                  <Checkbox
                                    checked={selectedItems.some(item => item.id === file.id)}
                                    onCheckedChange={() => toggleSelectItem({
                                      id: file.id,
                                      name: file.name,
                                      type: 'file',
                                      url: file.url,
                                      size: file.size
                                    })}
                                    onClick={(e) => e.stopPropagation()}
                                    className="mr-2"
                                  />
                                )}
                                {getFileIcon(file.type)}
                                <h4 className="font-medium truncate ml-2" title={file.name}>
                                  {file.name}
                                </h4>
                              </div>
                              <DropdownMenu>
                                <DropdownMenuTrigger asChild onClick={(e) => e.stopPropagation()}>
                                  <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                                    <MoreHorizontal className="h-4 w-4" />
                                  </Button>
                                </DropdownMenuTrigger>
                                <DropdownMenuContent align="end">
                                  {file.url && (
                                    <DropdownMenuItem
                                      onClick={(e) => {
                                        e.stopPropagation();
                                        window.open(file.url, '_blank');
                                      }}
                                    >
                                      <File className="h-4 w-4 mr-2" />
                                      Open
                                    </DropdownMenuItem>
                                  )}
                                  <DropdownMenuItem 
                                    className="text-red-600 cursor-pointer"
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      deleteItem(file.id, false);
                                    }}
                                  >
                                    <Trash className="h-4 w-4 mr-2" />
                                    Delete
                                  </DropdownMenuItem>
                                </DropdownMenuContent>
                              </DropdownMenu>
                            </div>
                            
                            {file.status !== 'complete' ? (
                              <div className="mt-2">
                                <div className="flex justify-between text-xs mb-1">
                                  <span>
                                    {file.status === 'uploading' 
                                      ? `Uploading (${file.progress}%)` 
                                      : file.status === 'processing'
                                        ? 'Processing...'
                                        : 'Error uploading'}
                                  </span>
                                </div>
                                <Progress value={file.progress} className="h-1" />
                              </div>
                            ) : (
                              <>
                                <div className="text-xs text-gray-500 mt-1">
                                  {formatFileSize(file.size)}
                                </div>
                                <div className="text-xs text-gray-500">
                                  {new Date(file.last_modified).toLocaleDateString()}
                                </div>
                              </>
                            )}
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </ScrollArea>
              )}
            </div>
          </TabsContent>
          
          <TabsContent value="vectorStore" className="mt-6">
            <div className="mb-6">
              <div className="flex justify-between items-center">
                <h3 className="text-lg font-medium">Vector Store Files</h3>
                <Badge variant="outline" className="bg-blue-50 text-blue-700">Connected to OpenAI</Badge>
              </div>
              <p className="text-gray-500 text-sm mt-1">
                These files are stored in your OpenAI vector store and are available for AI-powered features.
              </p>
            </div>
            
            {/* Vector Store Files Area */}
            <div className="min-h-[400px] border-2 rounded-lg p-4 border-gray-200">
              {/* Loading state */}
              {isLoadingVectorFiles && (
                <div className="flex flex-col items-center justify-center h-full py-10">
                  <Loader2 className="h-10 w-10 text-blue-500 animate-spin mb-4" />
                  <p className="text-gray-500">Loading your vector store files...</p>
                </div>
              )}
              
              {/* Empty state */}
              {!isLoadingVectorFiles && vectorStoreFiles.length === 0 ? (
                <div className="flex flex-col items-center justify-center h-full text-center py-10">
                  <CloudLightning className="h-16 w-16 text-gray-300 mb-4" />
                  <h3 className="text-lg font-medium text-gray-700">No files found in vector store</h3>
                  <p className="text-gray-500 mb-4 max-w-md">
                    Files added to your OpenAI vector store will appear here. You can use these files with AI features.
                  </p>
                  <Button 
                    onClick={() => {
                      setActiveTab("myFiles");
                      setSelectionMode(true);
                    }}
                    className="py-6 mt-4"
                  >
                    <ArrowUp className="h-4 w-4 mr-2" />
                    Upload Files to Vector Store
                  </Button>
                </div>
              ) : !isLoadingVectorFiles && (
                <ScrollArea className="h-[500px] pr-4">
                  <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                    {vectorStoreFiles.map(file => (
                      <div 
                        key={file.id}
                        className="border rounded-lg p-3 hover:shadow-md transition-all"
                      >
                        <div className="flex justify-between items-start mb-2">
                          <div className="flex items-center">
                            <File className="h-8 w-8 text-blue-500" />
                            <h4 className="font-medium truncate ml-2" title={file.filename}>
                              {file.filename}
                            </h4>
                          </div>
                        </div>
                        <div className="text-xs text-gray-500 mt-2 flex flex-col gap-1">
                          <div>Added: {formatTimestamp(file.created_at)}</div>
                          <div>Modified: {formatTimestamp(file.modified_at)}</div>
                          {file.size && <div>Size: {formatFileSize(file.size)}</div>}
                          {file.purpose && (
                            <div className="mt-1">
                              <Badge variant="secondary" className="text-xs">
                                {file.purpose}
                              </Badge>
                            </div>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </ScrollArea>
              )}
            </div>
          </TabsContent>
        </Tabs>
      </div>
      
      {/* Upload Dialog */}
      <Dialog open={isUploadDialogOpen} onOpenChange={setIsUploadDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Upload Files</DialogTitle>
            <DialogDescription>
              Upload files to your current folder. Supported formats include PDF, DOCX, PPTX, TXT, JPG, and PNG.
            </DialogDescription>
          </DialogHeader>
          
          <div className="grid gap-4 py-4">
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
              <Upload className="mx-auto h-12 w-12 text-gray-400 mb-2" />
              <p className="mb-2 text-gray-600">
                <span className="font-semibold">Drop files here</span> or click to upload
              </p>
              <p className="text-xs text-gray-500 mb-4">
                Maximum 50MB per file
              </p>
              <input
                type="file"
                className="hidden"
                id="file-upload"
                onChange={handleFileUpload}
                multiple
              />
              <label htmlFor="file-upload">
                <Button variant="outline" className="mt-2" asChild>
                  <span>
                    <Upload className="h-4 w-4 mr-2" />
                    Select Files
                  </span>
                </Button>
              </label>
            </div>
          </div>
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsUploadDialogOpen(false)}>
              Cancel
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      
      {/* New Folder Dialog */}
      <Dialog open={isNewFolderDialogOpen} onOpenChange={setIsNewFolderDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Create New Folder</DialogTitle>
            <DialogDescription>
              Enter a name for your new folder.
            </DialogDescription>
          </DialogHeader>
          
          <div className="grid gap-4 py-4">
            <Input
              placeholder="Folder Name"
              value={newFolderName}
              onChange={(e) => setNewFolderName(e.target.value)}
              autoFocus
            />
          </div>
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsNewFolderDialogOpen(false)}>
              Cancel
            </Button>
            <Button onClick={createNewFolder}>Create Folder</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Vector Store Upload Dialog */}
      <Dialog open={vectorUploadDialogOpen} onOpenChange={setVectorUploadDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Upload to Vector Store</DialogTitle>
            <DialogDescription>
              You are about to upload {selectedItems.filter(item => item.type === 'file').length} files to the OpenAI Vector Store.
              These files will be available for AI-powered features.
            </DialogDescription>
          </DialogHeader>
          
          {isUploading ? (
            <div className="py-6">
              <div className="mb-2 flex justify-between text-xs">
                <span>Uploading to Vector Store...</span>
                <span>{uploadingProgress}%</span>
              </div>
              <Progress value={uploadingProgress} className="h-2 mb-4" />
              <p className="text-xs text-gray-500 text-center">
                This may take a few moments depending on the file size.
              </p>
            </div>
          ) : (
            <div className="py-4">
              <ul className="max-h-40 overflow-y-auto border rounded-lg divide-y">
                {selectedItems
                  .filter(item => item.type === 'file')
                  .map(file => (
                    <li key={file.id} className="p-2 flex items-center">
                      <File className="h-4 w-4 text-blue-500 mr-2" />
                      <span className="text-sm truncate">{file.name}</span>
                    </li>
                  ))}
              </ul>
            </div>
          )}
          
          <DialogFooter>
            {!isUploading && (
              <>
                <Button variant="outline" onClick={() => setVectorUploadDialogOpen(false)}>
                  Cancel
                </Button>
                <Button onClick={confirmVectorUpload}>
                  <Upload className="h-4 w-4 mr-2" />
                  Upload to Vector Store
                </Button>
              </>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default DatabasePage;

================
File: src/pages/FlashcardsPage.tsx
================
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent } from "@/components/ui/card";
import {
  BookOpen,
  Plus,
  BarChart3,
  Clock,
  ArrowLeft,
  ArrowRight,
  Loader,
  Eye,
  Trash2
} from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { PageHeader } from "@/components/layout/PageHeader";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { toast } from "sonner";
import { Form, FormField, FormItem, FormLabel, FormControl, FormDescription } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { flashcardService } from "@/services/flashcardService";
import { Deck, FlashcardContent } from "@/types/flashcard";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { 
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";

// Form schema for deck generation
const deckGenerationSchema = z.object({
  title: z.string().min(3, "Title must be at least 3 characters"),
  cardCount: z.coerce.number().min(3).max(50),
});

type DeckGenerationFormValues = z.infer<typeof deckGenerationSchema>;

const FlashcardsPage = () => {
  const [activeTab, setActiveTab] = useState("browse");
  const [isFlipped, setIsFlipped] = useState(false);
  const [currentCardIndex, setCurrentCardIndex] = useState(0);
  const [openGenerateDialog, setOpenGenerateDialog] = useState(false);
  const [openViewDialog, setOpenViewDialog] = useState(false);
  const [viewingDeck, setViewingDeck] = useState<Deck | null>(null);
  const [decks, setDecks] = useState<Deck[]>([]);
  const [currentDeck, setCurrentDeck] = useState<Deck | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [isLoadingDecks, setIsLoadingDecks] = useState(true);
  const [deckToDelete, setDeckToDelete] = useState<Deck | null>(null);
  const [isDeleting, setIsDeleting] = useState(false);

  const form = useForm<DeckGenerationFormValues>({
    resolver: zodResolver(deckGenerationSchema),
    defaultValues: {
      title: "",
      cardCount: 10,
    },
  });

  // Sample study statistics - we can keep these for UI demonstration
  const studyStats = {
    cardsStudiedToday: 0,
    totalCards: 0,
    masteredCards: 0,
    retentionRate: 0,
    averageTime: 0,
    streakDays: 0,
  };

  // Fetch decks on component mount
  useEffect(() => {
    fetchDecks();
  }, []);

  const fetchDecks = async () => {
    setIsLoadingDecks(true);
    try {
      const fetchedDecks = await flashcardService.fetchDecks();
      setDecks(fetchedDecks);
    } catch (error) {
      console.error("Error fetching decks:", error);
      toast.error("Failed to load flashcard decks");
    } finally {
      setIsLoadingDecks(false);
    }
  };

  const handleFlip = () => {
    setIsFlipped(!isFlipped);
  };

  const handleConfidenceRating = (rating: string) => {
    console.log(`Card rated: ${rating}`);
    // Here we would update the SRS algorithm with the rating
    setIsFlipped(false);
    handleNextCard();
  };

  const handlePrevCard = () => {
    if (currentCardIndex > 0) {
      setCurrentCardIndex(currentCardIndex - 1);
      setIsFlipped(false);
    }
  };

  const handleNextCard = () => {
    if (currentDeck?.cards && currentCardIndex < currentDeck.cards.length - 1) {
      setCurrentCardIndex(currentCardIndex + 1);
      setIsFlipped(false);
    }
  };

  // Handle deleting a deck
  const handleDeleteDeck = async () => {
    if (!deckToDelete) return;
    
    setIsDeleting(true);
    try {
      await flashcardService.deleteDeck(deckToDelete.id);
      
      // Remove the deck from state
      setDecks(decks.filter(d => d.id !== deckToDelete.id));
      
      // If we're currently viewing or studying this deck, reset those states
      if (viewingDeck?.id === deckToDelete.id) {
        setViewingDeck(null);
        setOpenViewDialog(false);
      }
      
      if (currentDeck?.id === deckToDelete.id) {
        setCurrentDeck(null);
        setActiveTab("browse");
      }
      
      toast.success(`Successfully deleted "${deckToDelete.title}" deck`);
    } catch (error) {
      console.error("Error deleting deck:", error);
      toast.error(`Failed to delete deck: ${(error as Error).message}`);
    } finally {
      setDeckToDelete(null);
      setIsDeleting(false);
    }
  };

  const handleGenerateDeck = async (data: DeckGenerationFormValues) => {
    setIsGenerating(true);
    
    try {
      toast.info(`Generating ${data.cardCount} flashcards...`);
      
      // Call the service to generate flashcards
      const generatedFlashcards = await flashcardService.generateDeck({
        title: data.title,
        cardCount: data.cardCount
      });
      
      console.log(`Received ${generatedFlashcards.length} flashcards`);
      
      // First create the deck in the database
      const newDeck = await flashcardService.saveDeck({
        title: data.title,
        description: `AI-generated flashcards`,
        cardCount: generatedFlashcards.length,
        dueCards: generatedFlashcards.length,
        newCards: generatedFlashcards.length,
        color: getRandomDeckColor()
      });
      
      // Then save the flashcards
      await flashcardService.saveFlashcards(newDeck.id, generatedFlashcards);
      
      // Fetch the flashcards for the deck
      const savedFlashcards = await flashcardService.fetchFlashcards(newDeck.id);
      
      // Create a complete deck with cards
      const completeNewDeck = {
        ...newDeck,
        cards: savedFlashcards
      };
      
      // Add the new deck to our state
      setDecks(prevDecks => [completeNewDeck, ...prevDecks]);
      
      // Set this as the current deck for studying
      setCurrentDeck(completeNewDeck);
      
      // Reset for studying
      setCurrentCardIndex(0);
      setIsFlipped(false);
      
      toast.success(`Successfully generated ${savedFlashcards.length} flashcards!`);
      
      setOpenGenerateDialog(false);
      form.reset();
      
      // Switch to study tab automatically after generating
      setActiveTab("study");
      
    } catch (error) {
      console.error("Error generating deck:", error);
      toast.error(`Failed to generate flashcard deck: ${(error as Error).message}`);
    } finally {
      setIsGenerating(false);
    }
  };

  const startStudyingDeck = async (deckId: string) => {
    try {
      // Find the selected deck
      let selectedDeck = decks.find(deck => deck.id === deckId);
      
      // If the deck doesn't have cards yet, fetch them
      if (selectedDeck && (!selectedDeck.cards || selectedDeck.cards.length === 0)) {
        const fetchedCards = await flashcardService.fetchFlashcards(deckId);
        selectedDeck = { ...selectedDeck, cards: fetchedCards };
      }
      
      if (selectedDeck) {
        setCurrentDeck(selectedDeck);
        setCurrentCardIndex(0);
        setIsFlipped(false);
        setActiveTab("study");
      }
    } catch (error) {
      console.error("Error loading flashcards:", error);
      toast.error(`Failed to load flashcards: ${(error as Error).message}`);
    }
  };

  const viewDeck = async (deckId: string) => {
    try {
      // Find the selected deck
      let selectedDeck = decks.find(deck => deck.id === deckId);
      
      // If the deck doesn't have cards yet, fetch them
      if (selectedDeck && (!selectedDeck.cards || selectedDeck.cards.length === 0)) {
        const fetchedCards = await flashcardService.fetchFlashcards(deckId);
        selectedDeck = { ...selectedDeck, cards: fetchedCards };
      }
      
      if (selectedDeck) {
        setViewingDeck(selectedDeck);
        setOpenViewDialog(true);
      }
    } catch (error) {
      console.error("Error loading flashcards for viewing:", error);
      toast.error(`Failed to load flashcards: ${(error as Error).message}`);
    }
  };

  const getRandomDeckColor = () => {
    const colors = [
      "bg-purple-500", 
      "bg-blue-500", 
      "bg-teal-500", 
      "bg-green-500", 
      "bg-amber-500", 
      "bg-red-500"
    ];
    return colors[Math.floor(Math.random() * colors.length)];
  };

  // Effect for keyboard navigation - only for flashcards, not tabs
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // Only handle keys when in study mode and not during form inputs
      if (activeTab === "study" && currentDeck?.cards && 
          !['INPUT', 'TEXTAREA', 'SELECT'].includes(document.activeElement?.tagName || '')) {
        if (e.code === "Space") {
          e.preventDefault(); // Prevent scrolling
          handleFlip();
        } else if (e.code === "ArrowRight") {
          e.preventDefault();
          handleNextCard();
        } else if (e.code === "ArrowLeft") {
          e.preventDefault();
          handlePrevCard();
        }
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    
    // Clean up event listener
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, [currentCardIndex, isFlipped, activeTab, currentDeck]);

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <PageHeader 
          title="Flashcards"
          description="Enhance your learning with interactive flashcards"
        />
        <div className="flex gap-2">
          <Button variant="outline" size="sm">
            Import
          </Button>
        </div>
      </div>
      
      <Tabs value={activeTab} className="w-full" onValueChange={setActiveTab}>
        {/* Remove data-orientation so arrow keys won't control tab selection */}
        <TabsList className="grid grid-cols-3 mb-4" data-orientation="horizontal">
          <TabsTrigger value="study" disabled={!currentDeck}>
            <BookOpen className="mr-2 h-4 w-4" />
            Study
          </TabsTrigger>
          <TabsTrigger value="browse">
            <Clock className="mr-2 h-4 w-4" />
            Browse
          </TabsTrigger>
          <TabsTrigger value="stats">
            <BarChart3 className="mr-2 h-4 w-4" />
            Stats
          </TabsTrigger>
        </TabsList>
        
        {/* Study Tab */}
        <TabsContent value="study" className="space-y-8">
          {currentDeck && currentDeck.cards && currentDeck.cards.length > 0 ? (
            <div className="mx-auto max-w-2xl">
              <div className="mb-4 flex items-center justify-between">
                <Badge variant="outline" className="text-sm">
                  {currentDeck.title}
                </Badge>
                <div className="text-sm text-muted-foreground">
                  Card {currentCardIndex + 1} of {currentDeck.cards.length}
                </div>
              </div>
              
              {/* Flashcard display */}
              <div className="relative h-64 perspective-1000">
                <div 
                  className={`absolute w-full h-full transition-all duration-500 transform ${
                    isFlipped ? "rotate-x-180" : ""
                  } cursor-pointer border rounded-xl overflow-hidden`}
                  onClick={handleFlip}
                  style={{ 
                    transformStyle: 'preserve-3d',
                    backfaceVisibility: 'hidden',
                  }}
                >
                  {/* Front of card */}
                  <div 
                    className={`absolute w-full h-full bg-card p-6 flex items-center justify-center`}
                    style={{ 
                      backfaceVisibility: 'hidden',
                      transform: isFlipped ? 'rotateX(180deg)' : 'rotateX(0deg)',
                      opacity: isFlipped ? 0 : 1,
                      transition: 'transform 0.6s, opacity 0.6s'
                    }}
                  >
                    <p className="text-xl font-medium text-center">{currentDeck.cards[currentCardIndex].front}</p>
                  </div>
                  
                  {/* Back of card */}
                  <div 
                    className={`absolute w-full h-full bg-card p-6 flex items-center justify-center`}
                    style={{ 
                      backfaceVisibility: 'hidden',
                      transform: isFlipped ? 'rotateX(0deg)' : 'rotateX(-180deg)',
                      opacity: isFlipped ? 1 : 0,
                      transition: 'transform 0.6s, opacity 0.6s'
                    }}
                  >
                    <p className="text-lg">{currentDeck.cards[currentCardIndex].back}</p>
                  </div>
                </div>
              </div>
              
              {/* Card navigation and rating controls */}
              <div className="mt-6 text-center">
                <p className="text-sm text-muted-foreground mb-4">
                  {isFlipped ? "How well did you know this?" : "Click the card to reveal answer (or press Space)"}
                </p>
                
                {isFlipped && (
                  <div className="grid grid-cols-4 gap-2">
                    <Button 
                      variant="outline" 
                      onClick={() => handleConfidenceRating("again")} 
                      className="bg-red-100 hover:bg-red-200 border-red-200"
                    >
                      Again
                    </Button>
                    <Button 
                      variant="outline" 
                      onClick={() => handleConfidenceRating("hard")}
                      className="bg-orange-100 hover:bg-orange-200 border-orange-200"
                    >
                      Hard
                    </Button>
                    <Button 
                      variant="outline" 
                      onClick={() => handleConfidenceRating("good")}
                      className="bg-green-100 hover:bg-green-200 border-green-200"
                    >
                      Good
                    </Button>
                    <Button 
                      variant="outline" 
                      onClick={() => handleConfidenceRating("easy")}
                      className="bg-blue-100 hover:bg-blue-200 border-blue-200"
                    >
                      Easy
                    </Button>
                  </div>
                )}
                
                {!isFlipped && (
                  <div className="flex justify-center gap-4">
                    <Button 
                      variant="outline" 
                      size="sm" 
                      onClick={handlePrevCard}
                      disabled={currentCardIndex === 0}
                    >
                      <ArrowLeft className="mr-2 h-4 w-4" />
                      Previous
                    </Button>
                    <Button 
                      variant="outline" 
                      size="sm" 
                      onClick={() => setActiveTab("browse")}
                    >
                      Back to Browse
                    </Button>
                    <Button 
                      variant="outline" 
                      size="sm" 
                      onClick={handleNextCard}
                      disabled={currentCardIndex === currentDeck.cards.length - 1}
                    >
                      Next
                      <ArrowRight className="ml-2 h-4 w-4" />
                    </Button>
                  </div>
                )}
              </div>
            </div>
          ) : (
            <div className="flex flex-col items-center justify-center py-12">
              <p className="text-xl text-muted-foreground mb-4">No deck selected for study</p>
              <Button onClick={() => setActiveTab("browse")}>Browse Decks</Button>
            </div>
          )}
        </TabsContent>
        
        {/* Browse Tab */}
        <TabsContent value="browse" className="space-y-4">
          {/* Deck Browser */}
          {isLoadingDecks ? (
            <div className="flex justify-center items-center py-12">
              <Loader className="h-8 w-8 animate-spin text-muted-foreground" />
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {decks.map((deck) => (
                <Card key={deck.id} className="overflow-hidden">
                  <div className={`h-2 ${deck.color}`}></div>
                  <CardContent className="p-6">
                    <h3 className="font-semibold text-lg mb-1">{deck.title}</h3>
                    <p className="text-sm text-muted-foreground mb-3">{deck.description}</p>
                    
                    <div className="flex justify-between text-sm mb-2">
                      <span>{deck.cardCount} cards total</span>
                      <span>{deck.dueCards} cards due</span>
                    </div>
                    
                    <Progress value={(deck.cardCount - deck.dueCards) / deck.cardCount * 100} className="h-1 mb-4" />
                    
                    <div className="flex justify-between">
                      <div className="flex gap-2">
                        <Button 
                          variant="outline" 
                          size="sm"
                          onClick={() => viewDeck(deck.id)}
                        >
                          <Eye className="mr-2 h-4 w-4" />
                          View
                        </Button>
                        <Button 
                          variant="outline" 
                          size="sm"
                          onClick={() => setDeckToDelete(deck)}
                          className="text-destructive hover:text-destructive border-destructive/50 hover:border-destructive"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                      <Button 
                        size="sm"
                        onClick={() => startStudyingDeck(deck.id)}
                      >
                        Study Now
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
              
              {/* Create New Deck Card */}
              <Card 
                className="border-dashed flex items-center justify-center h-[180px] cursor-pointer hover:bg-accent/50 transition-colors"
                onClick={() => setOpenGenerateDialog(true)}
              >
                <div className="text-center">
                  <Plus className="mx-auto h-8 w-8 text-muted-foreground mb-2" />
                  <p className="font-medium">Generate New Deck</p>
                </div>
              </Card>
            </div>
          )}
        </TabsContent>
        
        {/* Stats Tab */}
        <TabsContent value="stats" className="space-y-6">
          {/* Study Statistics */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Card>
              <CardContent className="p-6">
                <h3 className="text-sm font-medium text-muted-foreground mb-1">Cards Studied Today</h3>
                <p className="text-3xl font-bold">{studyStats.cardsStudiedToday}</p>
              </CardContent>
            </Card>
            
            <Card>
              <CardContent className="p-6">
                <h3 className="text-sm font-medium text-muted-foreground mb-1">Mastered Cards</h3>
                <p className="text-3xl font-bold">{studyStats.masteredCards}/{studyStats.totalCards}</p>
              </CardContent>
            </Card>
            
            <Card>
              <CardContent className="p-6">
                <h3 className="text-sm font-medium text-muted-foreground mb-1">Current Streak</h3>
                <p className="text-3xl font-bold">{studyStats.streakDays} days</p>
              </CardContent>
            </Card>
          </div>
          
          <Card>
            <CardContent className="p-6">
              <h3 className="font-medium mb-4">Retention Rate Over Time</h3>
              <div className="h-[200px] bg-muted/20 rounded-md flex items-center justify-center">
                <p className="text-muted-foreground">Retention graph will appear here</p>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-6">
              <h3 className="font-medium mb-4">Study Activity Heatmap</h3>
              <div className="h-[100px] bg-muted/20 rounded-md flex items-center justify-center">
                <p className="text-muted-foreground">Activity heatmap will appear here</p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
      
      {/* Generate Deck Dialog */}
      <Dialog open={openGenerateDialog} onOpenChange={setOpenGenerateDialog}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>Generate New Flashcard Deck</DialogTitle>
            <DialogDescription>
              Create AI-generated flashcards from random content in your vector database
            </DialogDescription>
          </DialogHeader>
          
          <Form {...form}>
            <form onSubmit={form.handleSubmit(handleGenerateDeck)} className="space-y-4 pt-4">
              <FormField
                control={form.control}
                name="title"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Deck Title</FormLabel>
                    <FormControl>
                      <Input placeholder="Enter a title for your deck" {...field} />
                    </FormControl>
                    <FormDescription>
                      Give your flashcard deck a descriptive name
                    </FormDescription>
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="cardCount"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Number of Cards</FormLabel>
                    <FormControl>
                      <Input 
                        type="number" 
                        min={3}
                        max={50}
                        placeholder="10" 
                        {...field} 
                      />
                    </FormControl>
                    <FormDescription>
                      How many flashcards would you like to generate? (3-50)
                    </FormDescription>
                  </FormItem>
                )}
              />
              
              <div className="flex justify-end gap-3 pt-4">
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => setOpenGenerateDialog(false)}
                >
                  Cancel
                </Button>
                <Button 
                  type="submit"
                  disabled={isGenerating}
                >
                  {isGenerating ? (
                    <>
                      <Loader className="mr-2 h-4 w-4 animate-spin" /> 
                      Generating...
                    </>
                  ) : (
                    "Generate Deck"
                  )}
                </Button>
              </div>
            </form>
          </Form>
        </DialogContent>
      </Dialog>

      {/* View Deck Dialog with Flashcards Table */}
      <Dialog open={openViewDialog} onOpenChange={setOpenViewDialog}>
        <DialogContent className="sm:max-w-[800px] max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>{viewingDeck?.title}</DialogTitle>
            <DialogDescription>
              {viewingDeck?.description}
            </DialogDescription>
          </DialogHeader>
          
          <div className="mt-4">
            {viewingDeck?.cards?.length ? (
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead className="w-[50px]">#</TableHead>
                    <TableHead>Question</TableHead>
                    <TableHead>Answer</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {viewingDeck.cards.map((card, index) => (
                    <TableRow key={card.id}>
                      <TableCell className="font-medium">{index + 1}</TableCell>
                      <TableCell>{card.front}</TableCell>
                      <TableCell>{card.back}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            ) : (
              <div className="flex justify-center items-center py-8">
                <p className="text-muted-foreground">No flashcards in this deck</p>
              </div>
            )}
          </div>
          
          <div className="flex justify-end gap-3 mt-4">
            <Button 
              onClick={() => setOpenViewDialog(false)}
            >
              Close
            </Button>
            {viewingDeck && (
              <Button 
                onClick={() => {
                  setOpenViewDialog(false);
                  startStudyingDeck(viewingDeck.id);
                }}
              >
                Study Now
              </Button>
            )}
          </div>
        </DialogContent>
      </Dialog>

      {/* Delete Confirmation Dialog */}
      <AlertDialog open={!!deckToDelete} onOpenChange={(open) => !open && setDeckToDelete(null)}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Flashcard Deck</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete "{deckToDelete?.title}"? This action cannot be undone 
              and will permanently delete the deck and all its flashcards.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction 
              onClick={(e) => {
                e.preventDefault(); // Prevent the dialog from closing automatically
                handleDeleteDeck();
              }}
              disabled={isDeleting}
              className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
            >
              {isDeleting ? (
                <>
                  <Loader className="mr-2 h-4 w-4 animate-spin" />
                  Deleting...
                </>
              ) : (
                "Delete"
              )}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
};

export default FlashcardsPage;

================
File: src/pages/HomePage.tsx
================
import { useEffect, useState } from "react";
import { ArrowRight, BookPlus, PlusCircle, Search, Settings } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Link, useNavigate } from "react-router-dom";
import { PageHeader } from "@/components/layout/PageHeader";
import { supabase } from "@/integrations/supabase/client";
import { CreateClassDialog, ClassData } from "@/components/class/CreateClassDialog";
import { useToast } from "@/hooks/use-toast";
import { EditClassDialog } from "@/components/class/EditClassDialog";
import { classOpenAIConfigService, ClassConfig } from "@/services/classOpenAIConfig";
import { getEmojiForClass } from "@/utils/emojiUtils";

interface ClassOption {
  title: string;
  professor?: string;
  classTime?: string;
  classroom?: string;
  emoji: string;
  link: string;
  enabledWidgets: string[];
  openAIConfig?: {
    apiKey?: string;
    vectorStoreId?: string;
    assistantId?: string;
  };
}

const DEFAULT_CLASS_WIDGETS = ["supertutor", "database"];

const HomePage = () => {
  const [userName, setUserName] = useState<string>("Student");
  const [recentlyViewed, setRecentlyViewed] = useState<{title: string, path: string}[]>([]);
  const [isCreateClassOpen, setIsCreateClassOpen] = useState(false);
  const [isEditClassOpen, setIsEditClassOpen] = useState(false);
  const [selectedClassToEdit, setSelectedClassToEdit] = useState<ClassOption | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const { toast } = useToast();
  const navigate = useNavigate();
  
  const [classOptions, setClassOptions] = useState<ClassOption[]>([]);
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const [userAuthenticated, setUserAuthenticated] = useState<boolean>(false);

  // Function to fetch all user data
  const fetchUserData = async () => {
    try {
      setIsLoading(true);
      console.log("Fetching user profile and classes");
      
      const { data } = await supabase.auth.getUser();
      const user = data.user;
      setUserAuthenticated(!!user);
      
      if (user) {
        // Fetch user profile
        const { data: profile } = await supabase
          .from('profiles')
          .select('full_name')
          .eq('id', user.id)
          .maybeSingle();
          
        if (profile?.full_name) {
          // Get the first name from the full name
          const firstName = profile.full_name.split(' ')[0];
          setUserName(firstName);
        } else {
          // Fallback to email if no name is available
          const emailName = user.email?.split('@')[0] || "Student";
          setUserName(emailName);
        }
        
        try {
          // Force clean fetch of classes with no caching
          console.log('Calling classOpenAIConfigService.getAllClasses()');
          const userClasses = await classOpenAIConfigService.getAllClasses();
            
          console.log('Retrieved classes:', userClasses);
          
          if (userClasses && userClasses.length > 0) {
            console.log(`Found ${userClasses.length} classes for the user:`, userClasses);
            
            // Transform ClassConfig objects to ClassOption objects
            const classOptions = userClasses.map((config): ClassOption => {
              // Use stored emoji or generate one based on class title
              const classEmoji = config.emoji || getEmojiForClass(config.title);
              
              return {
                title: config.title,
                professor: config.professor || "",
                classTime: config.classTime || "",
                classroom: config.classroom || "",
                emoji: classEmoji,
                link: "/super-stu",
                enabledWidgets: config.enabledWidgets || DEFAULT_CLASS_WIDGETS,
                openAIConfig: config.openAIConfig
              };
            });
            
            console.log("Transformed class options:", classOptions);
            setClassOptions(classOptions);
          } else {
            console.log("No classes found for user");
            setClassOptions([]);
          }
        } catch (fetchError) {
          console.error("Error fetching class data:", fetchError);
          toast({
            title: "Warning",
            description: "Failed to load class data. Trying alternate method.",
            variant: "destructive"
          });
          
          setRefreshTrigger(prev => prev + 1);
        }
      } else {
        console.log("No authenticated user found");
      }
    } catch (error) {
      console.error("Error fetching user data:", error);
      toast({
        title: "Error",
        description: "Failed to load your profile data. Please try refreshing the page.",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchUserData();
    
    // Clear active class when on homepage
    sessionStorage.removeItem('activeClass');
    
    // Set up auth state listener
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
      if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {
        console.log('Auth state changed:', event);
        setUserAuthenticated(!!session);
        // Refresh user data when auth state changes
        fetchUserData();
      } else if (event === 'SIGNED_OUT') {
        setUserAuthenticated(false);
        // Reset to local storage values on logout
        fetchUserData();
      }
    });
    
    return () => {
      subscription.unsubscribe();
    };
  }, [refreshTrigger]); // Added refreshTrigger to dependencies

  const handleCreateClass = async (classData: ClassData) => {
    try {
      console.log("Creating class with data:", classData);
      
      // Get current user
      const { data } = await supabase.auth.getUser();
      const user = data.user;
      
      if (!user) {
        toast({
          title: "Error",
          description: "You must be signed in to create a class. Please sign in and try again.",
          variant: "destructive"
        });
        return;
      }
      
      // Ensure we have an emoji (either from form or generated)
      const classEmoji = classData.emoji || getEmojiForClass(classData.title);
      console.log("Using emoji:", classEmoji);
      
      // Ensure enabledWidgets is always an array
      const safeEnabledWidgets = Array.isArray(classData.enabledWidgets) ? classData.enabledWidgets : ["flashcards", "quizzes"];
      
      // Add the new class to the UI immediately for better user experience
      const newClass: ClassOption = {
        title: classData.title,
        professor: classData.professor,
        classTime: classData.classTime,
        classroom: classData.classroom,
        emoji: classEmoji,
        link: "/super-stu",
        enabledWidgets: safeEnabledWidgets,
        openAIConfig: classData.openAIConfig
      };
      
      setClassOptions(prev => [newClass, ...prev]);
      
      // Store OpenAI configuration and class info in Supabase
      if (classData.title) {
        try {
          console.log("Saving class data using classOpenAIConfigService");
          // Save class and OpenAI config data using our service
          await classOpenAIConfigService.saveConfigForClass(
            classData.title,
            classData.openAIConfig || {},
            classEmoji,
            classData.professor,
            classData.classTime,
            classData.classroom,
            safeEnabledWidgets
          );
          
          console.log('Class data saved successfully:', classData.title);
          
          // Force a refresh of data by incrementing the refreshTrigger
          setRefreshTrigger(prev => prev + 1);
          
          toast({
            title: "Class created!",
            description: `${classData.title} has been added to your dashboard.`
          });
          
          setIsCreateClassOpen(false);
        } catch (error) {
          console.error('Error storing class data:', error);
          toast({
            title: "Warning",
            description: "Failed to save class information to the server. Please try again.",
            variant: "destructive"
          });
        }
      }
    } catch (error) {
      console.error("Error creating class:", error);
      toast({
        title: "Error",
        description: "Failed to create class. Please try again.",
        variant: "destructive"
      });
    }
  };

  const handleUpdateClass = async (classData: ClassData) => {
    if (!selectedClassToEdit) return;
    
    try {
      // Get current user
      const { data } = await supabase.auth.getUser();
      const user = data.user;
      
      if (!user) {
        toast({
          title: "Error",
          description: "You must be signed in to update a class",
          variant: "destructive"
        });
        return;
      }
      
      // Ensure enabledWidgets is always an array
      const safeEnabledWidgets = Array.isArray(classData.enabledWidgets) ? classData.enabledWidgets : ["flashcards", "quizzes"];
      
      // Update the class in the UI immediately
      setClassOptions(prev => 
        prev.map(classItem => 
          classItem.title === selectedClassToEdit.title 
            ? {
                ...classItem,
                title: classData.title,
                professor: classData.professor,
                classTime: classData.classTime,
                classroom: classData.classroom,
                emoji: classData.emoji,
                enabledWidgets: safeEnabledWidgets,
                openAIConfig: classData.openAIConfig
              }
            : classItem
        )
      );
      
      // Update class data in Supabase using our service
      try {
        await classOpenAIConfigService.saveConfigForClass(
          classData.title,
          classData.openAIConfig || {},
          classData.emoji,
          classData.professor,
          classData.classTime,
          classData.classroom,
          safeEnabledWidgets
        );
        
        // If the title changed, delete the old class
        if (selectedClassToEdit.title !== classData.title) {
          await classOpenAIConfigService.deleteClass(selectedClassToEdit.title);
        }
        
        console.log('Class data updated for:', classData.title);
        
        // Force a refresh of data by incrementing the refreshTrigger
        setRefreshTrigger(prev => prev + 1);
      
        toast({
          title: "Class updated",
          description: `${classData.title} has been updated.`
        });
        
        // Reset state
        setSelectedClassToEdit(null);
        setIsEditClassOpen(false);
      } catch (error) {
        console.error('Error updating class data:', error);
        toast({
          title: "Warning",
          description: "Failed to update class information on the server. Please try again.",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error("Error updating class:", error);
      toast({
        title: "Error",
        description: "Failed to update class",
        variant: "destructive"
      });
    }
  };

  const handleDeleteClass = async () => {
    if (!selectedClassToEdit) return;
    
    try {
      // Delete using our service
      await classOpenAIConfigService.deleteClass(selectedClassToEdit.title);
      
      // Check if the deleted class is the active class
      const activeClass = sessionStorage.getItem('activeClass');
      if (activeClass) {
        try {
          const parsedClass = JSON.parse(activeClass);
          // If the active class is being deleted, remove it from session storage
          if (parsedClass.title === selectedClassToEdit.title) {
            sessionStorage.removeItem('activeClass');
          }
        } catch (error) {
          console.error("Error parsing active class:", error);
        }
      }
      
      // Remove the class from the UI
      setClassOptions(prev => 
        prev.filter(classItem => classItem.title !== selectedClassToEdit.title)
      );
      
      toast({
        title: "Class deleted",
        description: `${selectedClassToEdit.title} has been deleted.`
      });
      
      // Force a refresh of data by incrementing the refreshTrigger
      setRefreshTrigger(prev => prev + 1);
      
      // Reset state
      setSelectedClassToEdit(null);
      setIsEditClassOpen(false);
    } catch (error) {
      console.error("Error deleting class:", error);
      toast({
        title: "Error",
        description: "Failed to delete class. Please try again.",
        variant: "destructive"
      });
    }
  };

  const handleEditClass = (classOption: ClassOption) => {
    setSelectedClassToEdit(classOption);
    setIsEditClassOpen(true);
  };

  const handleClassClick = (classOption: ClassOption) => {
    // Set the selected class as active
    sessionStorage.setItem('activeClass', JSON.stringify(classOption));
    
    // Navigate to Super Tutor
    navigate("/super-stu");
  };

  // Function to reset all data (for troubleshooting)
  const handleResetAllData = async () => {
    try {
      await classOpenAIConfigService.clearAllData();
      toast({
        title: "Data reset",
        description: "All local class data has been reset. Refreshing..."
      });
      setRefreshTrigger(prev => prev + 1);
    } catch (error) {
      console.error("Error resetting data:", error);
    }
  };

  return (
    <div className="space-y-8 pb-8">
      {/* Hero Section with personalized greeting */}
      <div className="flex justify-between items-center">
        <PageHeader 
          title={`Hello, ${userName}!`}
          description="Which class would you like to study today?"
        />
        <Button 
          onClick={() => setIsCreateClassOpen(true)}
          className="flex items-center gap-2"
        >
          <PlusCircle className="h-4 w-4" />
          Add Class
        </Button>
      </div>

      {/* Class Options */}
      {isLoading ? (
        <div className="py-12 flex justify-center">
          <div className="animate-pulse space-y-4">
            <div className="h-12 w-64 bg-gray-200 rounded"></div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {[1, 2, 3].map((i) => (
                <div key={i} className="h-40 w-full bg-gray-200 rounded"></div>
              ))}
            </div>
          </div>
        </div>
      ) : classOptions.length > 0 ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {classOptions.map((option, index) => (
            <div
              key={`${option.title}-${index}`}
              className="cursor-pointer relative"
            >
              <Button 
                variant="ghost" 
                size="icon"
                className="absolute top-2 right-2 z-10"
                onClick={(e) => {
                  e.stopPropagation();
                  handleEditClass(option);
                }}
              >
                <Settings className="h-4 w-4" />
              </Button>
              <Card 
                className="h-full transition-all hover:shadow-md hover:border-primary"
                onClick={() => handleClassClick(option)}
              >
                <CardHeader>
                  <div className="mb-4 p-2 bg-primary/20 rounded-lg w-fit">
                    <span className="text-4xl">{option.emoji}</span>
                  </div>
                  <CardTitle>{option.title}</CardTitle>
                </CardHeader>
                <CardContent className="pt-0">
                  <div className="text-sm space-y-1">
                    {option.professor && (
                      <p className="text-muted-foreground"><span className="font-medium text-foreground">Professor:</span> {option.professor}</p>
                    )}
                    {option.classTime && (
                      <p className="text-muted-foreground"><span className="font-medium text-foreground">Time:</span> {option.classTime}</p>
                    )}
                    {option.classroom && (
                      <p className="text-muted-foreground"><span className="font-medium text-foreground">Location:</span> {option.classroom}</p>
                    )}
                  </div>
                </CardContent>
                <CardFooter>
                  <Button variant="ghost" className="group text-primary">
                    Enter class
                    <ArrowRight className="ml-2 h-4 w-4 transition-transform group-hover:translate-x-1" />
                  </Button>
                </CardFooter>
              </Card>
            </div>
          ))}
        </div>
      ) : (
        <div className="py-12 text-center border border-dashed rounded-lg p-6">
          <div className="text-4xl mb-4">👋</div>
          <h3 className="text-lg font-medium mb-2">Welcome to your personal dashboard</h3>
          <p className="text-muted-foreground mb-6">
            You don't have any classes yet. Click the "Add Class" button to create your first class.
          </p>
          <Button 
            onClick={() => setIsCreateClassOpen(true)}
            className="flex items-center gap-2"
          >
            <PlusCircle className="h-4 w-4" />
            Add Your First Class
          </Button>
        </div>
      )}

      {/* Quick Actions */}
      <div>
        <h2 className="text-xl font-semibold mb-4">Quick Actions</h2>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
          <Link to="/account">
            <Card className="hover:bg-gray-50 text-center p-6">
              <div className="flex flex-col items-center space-y-2">
                <div className="p-2 bg-blue-50 rounded-full">
                  <span className="text-2xl">📊</span>
                </div>
                <span className="font-medium">My Progress</span>
              </div>
            </Card>
          </Link>
          <Link to="/flashcards">
            <Card className="hover:bg-gray-50 text-center p-6">
              <div className="flex flex-col items-center space-y-2">
                <div className="p-2 bg-blue-50 rounded-full">
                  <span className="text-2xl">🔖</span>
                </div>
                <span className="font-medium">Create Flashcards</span>
              </div>
            </Card>
          </Link>
          <Link to="/quizzes">
            <Card className="hover:bg-gray-50 text-center p-6">
              <div className="flex flex-col items-center space-y-2">
                <div className="p-2 bg-blue-50 rounded-full">
                  <span className="text-2xl">📝</span>
                </div>
                <span className="font-medium">Take a Quiz</span>
              </div>
            </Card>
          </Link>
        </div>
      </div>

      {/* Troubleshooting option - only visible in dev mode */}
      {process.env.NODE_ENV === 'development' && (
        <div className="mt-8 pt-4 border-t">
          <Button 
            variant="outline" 
            size="sm" 
            onClick={handleResetAllData}
            className="text-red-500 border-red-200"
          >
            Reset All Class Data (Dev Only)
          </Button>
        </div>
      )}

      {/* Help CTA */}
      <div className="bg-cybercoach-blue-dark text-white p-6 rounded-xl text-center">
        <h2 className="text-2xl font-bold mb-2">Need help with your studies?</h2>
        <p className="mb-6 text-blue-100">
          Super Tutor's AI assistant can explain complex topics, help with assignments, and quiz you on key concepts.
        </p>
        <Link to="/super-stu">
          <Button size="lg" className="bg-cybercoach-blue-light hover:bg-cybercoach-blue text-white">
            Talk to Super Tutor Now
          </Button>
        </Link>
      </div>

      {/* Create Class Dialog */}
      <CreateClassDialog 
        open={isCreateClassOpen}
        onOpenChange={setIsCreateClassOpen}
        onClassCreate={handleCreateClass}
      />

      {/* Edit Class Dialog */}
      {selectedClassToEdit && (
        <EditClassDialog
          open={isEditClassOpen}
          onOpenChange={setIsEditClassOpen}
          initialData={{
            title: selectedClassToEdit.title,
            professor: selectedClassToEdit.professor,
            classTime: selectedClassToEdit.classTime,
            classroom: selectedClassToEdit.classroom,
            enabledWidgets: selectedClassToEdit.enabledWidgets,
            emoji: selectedClassToEdit.emoji,
            openAIConfig: selectedClassToEdit.openAIConfig
          }}
          onClassUpdate={handleUpdateClass}
          onClassDelete={handleDeleteClass}
        />
      )}
    </div>
  );
};

export default HomePage;

================
File: src/pages/NotFound.tsx
================
import { useLocation } from "react-router-dom";
import { useEffect } from "react";

const NotFound = () => {
  const location = useLocation();

  useEffect(() => {
    console.error(
      "404 Error: User attempted to access non-existent route:",
      location.pathname
    );
  }, [location.pathname]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">404</h1>
        <p className="text-xl text-gray-600 mb-4">Oops! Page not found</p>
        <a href="/" className="text-blue-500 hover:text-blue-700 underline">
          Return to Home
        </a>
      </div>
    </div>
  );
};

export default NotFound;

================
File: src/pages/PolicyCenter.tsx
================
import { useState } from "react";
import { 
  KeyRound, 
  Shield, 
  Smartphone, 
  Mail, 
  Cloud, 
  FileText,
  Users,
  Search
} from "lucide-react";
import { Input } from "@/components/ui/input";
import { PolicyCard } from "@/components/policy/PolicyCard";
import { PageHeader } from "@/components/layout/PageHeader";

const policyData = [
  {
    id: 1,
    title: "Password Policy",
    summary: "Guidelines for creating and managing secure passwords across all company systems.",
    details: "1. Minimum Length: All passwords must be at least 12 characters long.\n\n2. Complexity: Passwords must include uppercase letters, lowercase letters, numbers, and special characters.\n\n3. Rotation: Passwords must be changed every 90 days.\n\n4. History: New passwords cannot match any of your previous 10 passwords.\n\n5. Storage: Never store passwords in plain text or share them via email or messaging.\n\n6. Password Manager: Use the company-provided password manager for generating and storing passwords.\n\n7. Multi-Factor Authentication: Enable MFA on all accounts that support it.",
    icon: <KeyRound className="h-5 w-5" />,
    lastUpdated: "April 15, 2023",
    department: "All Departments"
  },
  {
    id: 2,
    title: "Data Security Policy",
    summary: "Protocols for protecting sensitive company and customer data from unauthorized access.",
    details: "1. Classification: All data must be classified as Public, Internal, Confidential, or Restricted.\n\n2. Access Control: Access to data should follow the principle of least privilege.\n\n3. Encryption: All confidential and restricted data must be encrypted both at rest and in transit.\n\n4. Data Sharing: Never share confidential data via unsecured channels or with unauthorized parties.\n\n5. Data Retention: Follow the data retention schedule and securely destroy data when it's no longer needed.\n\n6. Incident Reporting: Report any suspected data breach or loss immediately to the security team.",
    icon: <Shield className="h-5 w-5" />,
    lastUpdated: "June 2, 2023",
    department: "All Departments"
  },
  {
    id: 3,
    title: "Mobile Device Policy",
    summary: "Rules for using personal and company-issued mobile devices for work purposes.",
    details: "1. Device Registration: All devices used for work must be registered with IT.\n\n2. Security Controls: Devices must have PIN/password protection, encryption, and remote wipe capability.\n\n3. Company Data: Company data should only be accessed through approved applications.\n\n4. Updates: Keep devices updated with the latest OS and security patches.\n\n5. Lost Devices: Report lost or stolen devices immediately to IT security.\n\n6. Personal Use: Limited personal use of company devices is permitted but must comply with acceptable use policies.",
    icon: <Smartphone className="h-5 w-5" />,
    lastUpdated: "March 10, 2023",
    department: "All Departments"
  },
  {
    id: 4,
    title: "Email Security Policy",
    summary: "Procedures for safe email usage and preventing phishing and social engineering attacks.",
    details: "1. Phishing Awareness: Be vigilant about suspicious emails, especially those with unexpected attachments or links.\n\n2. External Email Marking: All emails from external sources are marked [EXTERNAL] - be extra cautious with these.\n\n3. Attachments: Do not open attachments from unknown sources or unexpected attachments from known sources.\n\n4. Personal Email: Do not use personal email accounts for company business.\n\n5. Sensitive Information: Never send sensitive or confidential information via unencrypted email.\n\n6. Reporting: Report suspicious emails to security@company.com or use the Phish Alert Button.",
    icon: <Mail className="h-5 w-5" />,
    lastUpdated: "May 22, 2023",
    department: "All Departments"
  },
  {
    id: 5,
    title: "Cloud Services Policy",
    summary: "Guidelines for using approved cloud services and securing cloud-based company data.",
    details: "1. Approved Services: Only use company-approved cloud services for storing or processing company data.\n\n2. Authentication: Use strong passwords and enable MFA for all cloud service accounts.\n\n3. Data Storage: Be mindful of what data you store in cloud services and follow data classification guidelines.\n\n4. Sharing: Use secure sharing options and limit access to only those who need it.\n\n5. Personal Accounts: Do not use personal cloud accounts for company business.\n\n6. Offboarding: When employees leave, ensure all company data is removed from their accounts.",
    icon: <Cloud className="h-5 w-5" />,
    lastUpdated: "April 3, 2023",
    department: "IT"
  },
  {
    id: 6,
    title: "Acceptable Use Policy",
    summary: "Rules governing appropriate use of company IT resources, networks, and systems.",
    details: "1. Business Use: Company IT resources are primarily for business purposes.\n\n2. Prohibited Activities: Illegal activities, accessing inappropriate content, and unauthorized software installation are prohibited.\n\n3. Software Installation: Only install software from approved sources and with proper licensing.\n\n4. Resource Conservation: Be mindful of bandwidth usage and storage space.\n\n5. Monitoring: Be aware that the company may monitor system usage for security purposes.\n\n6. Personal Use: Limited personal use is permitted provided it does not interfere with work duties or violate other policies.",
    icon: <FileText className="h-5 w-5" />,
    lastUpdated: "February 15, 2023",
    department: "All Departments"
  },
  {
    id: 7,
    title: "Remote Work Security Policy",
    summary: "Security requirements for employees working outside of company premises.",
    details: "1. VPN Usage: Always connect through the company VPN when accessing internal resources.\n\n2. Public WiFi: Avoid using unsecured public WiFi for company work.\n\n3. Physical Security: Keep company devices secure and never leave them unattended in public places.\n\n4. Screen Privacy: Use screen protectors and be aware of shoulder surfing in public spaces.\n\n5. Home Network: Secure your home network with strong passwords and WPA2/WPA3 encryption.\n\n6. Work Area: Maintain a private work area where sensitive calls or information cannot be overheard or seen by others.",
    icon: <Users className="h-5 w-5" />,
    lastUpdated: "July 8, 2023",
    department: "All Departments"
  }
];

const PolicyCenter = () => {
  const [searchQuery, setSearchQuery] = useState("");
  
  const filteredPolicies = policyData.filter(policy =>
    policy.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
    policy.summary.toLowerCase().includes(searchQuery.toLowerCase()) ||
    policy.details.toLowerCase().includes(searchQuery.toLowerCase()) ||
    policy.department?.toLowerCase().includes(searchQuery.toLowerCase())
  );

  return (
    <div className="space-y-6">
      <PageHeader 
        title="Policy Center"
        description="Here's a quick guide to our core cybersecurity policies. Use this as a reference to stay compliant and secure."
      />
      
      <div className="relative mb-6">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
        <Input 
          placeholder="Search policies by keyword or department..." 
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="pl-10"
        />
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {filteredPolicies.map((policy) => (
          <PolicyCard
            key={policy.id}
            title={policy.title}
            summary={policy.summary}
            details={policy.details}
            icon={policy.icon}
            lastUpdated={policy.lastUpdated}
            department={policy.department}
          />
        ))}
        
        {filteredPolicies.length === 0 && (
          <div className="col-span-2 text-center py-12">
            <p className="text-gray-500">No policies found matching your search query.</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default PolicyCenter;

================
File: src/pages/QuizSessionPage.tsx
================
import { useState, useEffect, useRef } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { quizService, Quiz, QuizQuestion } from "@/services/quiz";
import { Clock, CheckSquare, ArrowLeft, ArrowRight, AlertCircle, Check, Timer, Play, CircleStop } from "lucide-react";
import { toast } from "sonner";
import { PageHeader } from "@/components/layout/PageHeader";

interface QuizAnswer {
  questionIndex: number;
  selectedOptionIndex: number | null;
}

const QuizSessionPage = () => {
  const { quizId } = useParams();
  const navigate = useNavigate();
  const [quiz, setQuiz] = useState<Quiz | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [answers, setAnswers] = useState<QuizAnswer[]>([]);
  const [timeRemaining, setTimeRemaining] = useState(0);
  const [quizSubmitted, setQuizSubmitted] = useState(false);
  const [score, setScore] = useState({ correct: 0, total: 0 });
  const timerRef = useRef<NodeJS.Timeout | null>(null);
  
  // Load quiz data
  useEffect(() => {
    const loadQuiz = async () => {
      if (!quizId) {
        toast.error("Quiz ID is missing");
        navigate("/quizzes");
        return;
      }
      
      setIsLoading(true);
      
      try {
        const loadedQuiz = await quizService.fetchQuiz(quizId);
        if (!loadedQuiz) {
          toast.error("Quiz not found");
          navigate("/quizzes");
          return;
        }
        
        setQuiz(loadedQuiz);
        
        // Initialize answers array with null selections
        const initialAnswers = loadedQuiz.questions.map((_, index) => ({
          questionIndex: index,
          selectedOptionIndex: null
        }));
        
        setAnswers(initialAnswers);
        
        // Set up timer - convert minutes to seconds
        setTimeRemaining(loadedQuiz.timeEstimate * 60);
      } catch (error) {
        console.error("Error loading quiz:", error);
        toast.error("Failed to load quiz");
        navigate("/quizzes");
      } finally {
        setIsLoading(false);
      }
    };
    
    loadQuiz();
  }, [quizId, navigate]);
  
  // Timer logic
  useEffect(() => {
    if (isLoading || quizSubmitted || !quiz) return;
    
    timerRef.current = setInterval(() => {
      setTimeRemaining(prev => {
        if (prev <= 1) {
          // Time's up, submit the quiz automatically
          clearInterval(timerRef.current!);
          handleSubmitQuiz();
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
    
    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    };
  }, [isLoading, quizSubmitted, quiz]);
  
  // Handle selecting an answer option
  const handleSelectOption = (optionIndex: number) => {
    if (quizSubmitted) return;
    
    const updatedAnswers = [...answers];
    updatedAnswers[currentQuestionIndex].selectedOptionIndex = optionIndex;
    setAnswers(updatedAnswers);
  };
  
  // Submit the quiz
  const handleSubmitQuiz = () => {
    if (!quiz) return;
    
    // Calculate score
    let correctCount = 0;
    
    answers.forEach((answer, index) => {
      if (answer.selectedOptionIndex === quiz.questions[index].correctAnswerIndex) {
        correctCount++;
      }
    });
    
    setScore({
      correct: correctCount,
      total: quiz.questions.length
    });
    
    // Clear timer
    if (timerRef.current) {
      clearInterval(timerRef.current);
    }
    
    setQuizSubmitted(true);
    toast.success("Quiz submitted successfully");
  };
  
  // Navigate between questions
  const goToNextQuestion = () => {
    if (currentQuestionIndex < (quiz?.questions.length || 0) - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
    }
  };
  
  const goToPrevQuestion = () => {
    if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex(currentQuestionIndex - 1);
    }
  };
  
  // Format time as mm:ss
  const formatTime = (seconds: number): string => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  };
  
  // Calculate progress percentage
  const getProgressPercentage = (): number => {
    if (!quiz) return 0;
    
    const answeredCount = answers.filter(answer => answer.selectedOptionIndex !== null).length;
    return Math.floor((answeredCount / quiz.questions.length) * 100);
  };
  
  // Check if all questions are answered
  const allQuestionsAnswered = (): boolean => {
    return answers.every(answer => answer.selectedOptionIndex !== null);
  };
  
  // Get the current question
  const getCurrentQuestion = (): QuizQuestion | null => {
    if (!quiz || !quiz.questions.length) return null;
    return quiz.questions[currentQuestionIndex];
  };
  
  // Render question navigation buttons
  const renderQuestionNav = () => {
    if (!quiz) return null;
    
    return (
      <div className="flex flex-wrap gap-2 my-4">
        {quiz.questions.map((_, index) => (
          <Button
            key={index}
            variant={currentQuestionIndex === index ? "default" : "outline"}
            size="sm"
            className={`w-10 h-10 ${
              answers[index].selectedOptionIndex !== null ? "bg-muted-foreground/10" : ""
            }`}
            onClick={() => setCurrentQuestionIndex(index)}
          >
            {index + 1}
          </Button>
        ))}
      </div>
    );
  };
  
  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-[50vh]">
        <div className="text-center">
          <Timer className="h-10 w-10 animate-pulse mx-auto mb-4 text-muted-foreground" />
          <p className="text-muted-foreground">Loading quiz...</p>
        </div>
      </div>
    );
  }
  
  return (
    <div className="space-y-6">
      {!quizSubmitted ? (
        // Active Quiz UI
        <>
          <div className="flex items-center justify-between">
            <PageHeader 
              title={quiz?.title || "Quiz Session"}
              description={quiz?.description || ""}
            />
            
            <Card className="w-auto">
              <CardContent className="py-4 flex items-center">
                <Clock className="mr-2 h-5 w-5 text-muted-foreground" />
                <span className="text-xl font-mono">
                  {formatTime(timeRemaining)}
                </span>
              </CardContent>
            </Card>
          </div>
          
          <div className="mb-4">
            <div className="flex justify-between items-center mb-2">
              <span className="text-sm font-medium">Progress: {getProgressPercentage()}%</span>
              <span className="text-sm text-muted-foreground">
                Question {currentQuestionIndex + 1} of {quiz?.questions.length}
              </span>
            </div>
            <Progress value={getProgressPercentage()} />
          </div>
          
          <Card className="mb-6">
            <CardHeader>
              <div className="flex justify-between items-center">
                <CardTitle className="text-xl">Question {currentQuestionIndex + 1}</CardTitle>
                <div className="flex items-center text-sm text-muted-foreground">
                  <CheckSquare className="h-4 w-4 mr-1" />
                  <span>{quiz?.difficulty}</span>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                <p className="text-lg font-medium">{getCurrentQuestion()?.question}</p>
                <RadioGroup 
                  value={answers[currentQuestionIndex]?.selectedOptionIndex?.toString() || ""}
                  onValueChange={(value) => handleSelectOption(parseInt(value))}
                  className="space-y-3"
                >
                  {getCurrentQuestion()?.options.map((option, index) => (
                    <div key={index} className="flex items-start space-x-2 p-3 rounded-md border">
                      <RadioGroupItem id={`option-${index}`} value={index.toString()} />
                      <label htmlFor={`option-${index}`} className="flex-1 cursor-pointer">
                        {option}
                      </label>
                    </div>
                  ))}
                </RadioGroup>
              </div>
            </CardContent>
            <CardFooter className="flex justify-between pt-4 border-t">
              <Button
                variant="outline"
                onClick={goToPrevQuestion}
                disabled={currentQuestionIndex === 0}
              >
                <ArrowLeft className="mr-2 h-4 w-4" /> Previous
              </Button>
              {currentQuestionIndex < (quiz?.questions.length || 0) - 1 ? (
                <Button onClick={goToNextQuestion}>
                  Next <ArrowRight className="ml-2 h-4 w-4" />
                </Button>
              ) : (
                <Button 
                  onClick={handleSubmitQuiz}
                  disabled={!allQuestionsAnswered()}
                >
                  Submit Quiz
                </Button>
              )}
            </CardFooter>
          </Card>
          
          {renderQuestionNav()}
          
          <div className="flex justify-between items-center mt-6">
            <Button 
              variant="outline" 
              onClick={() => {
                const confirmed = window.confirm("Are you sure you want to quit? Your progress will be lost.");
                if (confirmed) {
                  navigate("/quizzes");
                }
              }}
            >
              Quit Quiz
            </Button>
            <Button 
              onClick={handleSubmitQuiz} 
              disabled={!allQuestionsAnswered()}
            >
              Submit Quiz
            </Button>
          </div>
        </>
      ) : (
        // Quiz Results UI
        <>
          <PageHeader 
            title="Quiz Results" 
            description={`You've completed "${quiz?.title}"`}
          />
          
          <Card className="mb-6">
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span>Your Score</span>
                <span className="text-2xl">{score.correct}/{score.total}</span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div>
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-sm font-medium">Score: {Math.round((score.correct / score.total) * 100)}%</span>
                  </div>
                  <Progress value={Math.round((score.correct / score.total) * 100)} className="h-3" />
                </div>
                
                <div className="pt-4 grid gap-4 grid-cols-2">
                  <div className="bg-green-50 p-3 rounded-md border border-green-100">
                    <div className="flex items-center">
                      <Check className="h-5 w-5 text-green-500 mr-2" />
                      <span className="text-green-800 font-medium">Correct</span>
                    </div>
                    <p className="text-2xl font-bold ml-7 text-green-700">{score.correct}</p>
                  </div>
                  <div className="bg-red-50 p-3 rounded-md border border-red-100">
                    <div className="flex items-center">
                      <AlertCircle className="h-5 w-5 text-red-500 mr-2" />
                      <span className="text-red-800 font-medium">Incorrect</span>
                    </div>
                    <p className="text-2xl font-bold ml-7 text-red-700">{score.total - score.correct}</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <div className="space-y-6">
            <h2 className="text-xl font-bold">Review Questions</h2>
            
            {quiz?.questions.map((question, qIndex) => {
              const userAnswer = answers[qIndex].selectedOptionIndex;
              const isCorrect = userAnswer === question.correctAnswerIndex;
              
              return (
                <Card 
                  key={qIndex} 
                  className={`${
                    isCorrect ? "border-green-200" : "border-red-200"
                  }`}
                >
                  <CardHeader className={`${
                    isCorrect ? "bg-green-50" : "bg-red-50"
                  } border-b ${
                    isCorrect ? "border-green-100" : "border-red-100"
                  }`}>
                    <CardTitle className="text-lg flex justify-between">
                      <span>Question {qIndex + 1}</span>
                      {isCorrect ? (
                        <span className="flex items-center text-green-600 text-sm font-medium">
                          <Check className="h-4 w-4 mr-1" /> Correct
                        </span>
                      ) : (
                        <span className="flex items-center text-red-600 text-sm font-medium">
                          <AlertCircle className="h-4 w-4 mr-1" /> Incorrect
                        </span>
                      )}
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="pt-4">
                    <p className="font-medium mb-4">{question.question}</p>
                    
                    <div className="space-y-2">
                      {question.options.map((option, oIndex) => (
                        <div
                          key={oIndex}
                          className={`p-3 rounded-md border ${
                            oIndex === question.correctAnswerIndex
                              ? "bg-green-50 border-green-300"
                              : oIndex === userAnswer
                                ? "bg-red-50 border-red-300"
                                : "bg-gray-50 border-gray-200"
                          }`}
                        >
                          <div className="flex items-center">
                            <span className="w-6 h-6 rounded-full bg-gray-200 flex items-center justify-center mr-2 text-xs">
                              {String.fromCharCode(65 + oIndex)}
                            </span>
                            <span>{option}</span>
                            {oIndex === question.correctAnswerIndex && (
                              <Check className="ml-auto h-5 w-5 text-green-500" />
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                    
                    <div className="mt-4 pt-3 border-t">
                      <p className="font-medium text-sm">Explanation:</p>
                      <p className="text-muted-foreground">{question.explanation}</p>
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>
          
          <div className="flex justify-between pt-4">
            <Button variant="outline" onClick={() => navigate("/quizzes")}>
              Back to Quizzes
            </Button>
            <Button onClick={() => {
              // Reset and retake the same quiz
              setAnswers(quiz?.questions.map((_, index) => ({
                questionIndex: index,
                selectedOptionIndex: null
              })) || []);
              setCurrentQuestionIndex(0);
              setQuizSubmitted(false);
              setTimeRemaining(quiz?.timeEstimate ? quiz.timeEstimate * 60 : 600);
            }}>
              <Play className="mr-2 h-4 w-4" />
              Retake Quiz
            </Button>
          </div>
        </>
      )}
    </div>
  );
};

export default QuizSessionPage;

================
File: src/pages/QuizzesPage.tsx
================
import { useState, useEffect } from "react";
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardFooter, 
  CardHeader, 
  CardTitle 
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { 
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { 
  Clock, 
  FileText, 
  Timer, 
  SquareCheck, 
  ChevronRight, 
  ChartBar,
  Plus,
  Loader,
  Eye,
  AlertCircle
} from "lucide-react";
import { useNavigate } from "react-router-dom";
import { PageHeader } from "@/components/layout/PageHeader";
import { Form, FormField, FormItem, FormLabel, FormControl, FormDescription } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { toast } from "sonner";
import { 
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { 
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Badge } from "@/components/ui/badge";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select";
import { quizService, Quiz, QuizQuestion } from "@/services/quiz";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";

// Form schema for quiz generation
const quizGenerationSchema = z.object({
  title: z.string().min(3, "Title must be at least 3 characters"),
  questionCount: z.coerce.number().min(5, "Minimum 5 questions").max(50, "Maximum 50 questions"),
  difficulty: z.string(),
  coverage: z.string(),
});

type QuizGenerationFormValues = z.infer<typeof quizGenerationSchema>;

const QuizzesPage = () => {
  const navigate = useNavigate();
  const [selectedQuiz, setSelectedQuiz] = useState<null | Quiz>(null);
  const [quizzes, setQuizzes] = useState<Quiz[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isGenerating, setIsGenerating] = useState(false);
  const [openGenerateDialog, setOpenGenerateDialog] = useState(false);
  const [openViewDialog, setOpenViewDialog] = useState(false);
  const [viewingQuiz, setViewingQuiz] = useState<Quiz | null>(null);
  const [openDeleteDialog, setOpenDeleteDialog] = useState(false);
  const [quizToDelete, setQuizToDelete] = useState<string | null>(null);

  const form = useForm<QuizGenerationFormValues>({
    resolver: zodResolver(quizGenerationSchema),
    defaultValues: {
      title: "",
      questionCount: 10,
      difficulty: "medium",
      coverage: "Chapters 1-5",
    },
  });

  // Function to determine difficulty badge color
  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty.toLowerCase()) {
      case 'easy':
        return 'bg-green-100 text-green-800';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800';
      case 'hard':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  // Load all quizzes on component mount
  useEffect(() => {
    fetchQuizzes();
  }, []);

  const fetchQuizzes = async () => {
    setIsLoading(true);
    try {
      const fetchedQuizzes = await quizService.fetchQuizzes();
      setQuizzes(fetchedQuizzes);
    } catch (error) {
      console.error("Error fetching quizzes:", error);
      toast.error("Failed to load quizzes");
    } finally {
      setIsLoading(false);
    }
  };

  const handleGenerateQuiz = async (data: QuizGenerationFormValues) => {
    setIsGenerating(true);
    
    try {
      toast.info(`Generating ${data.questionCount} ${data.difficulty} quiz questions...`);
      
      // Call the service to generate quiz questions
      const { questions, timeEstimate } = await quizService.generateQuiz({
        title: data.title,
        questionCount: data.questionCount,
        difficulty: data.difficulty,
        coverage: data.coverage
      });
      
      // Save the quiz to the database
      const newQuiz = await quizService.saveQuiz({
        title: data.title,
        description: `${data.difficulty} quiz covering ${data.coverage}`,
        questions,
        questionCount: questions.length,
        timeEstimate,
        difficulty: data.difficulty,
        coverage: data.coverage
      });
      
      // Add the new quiz to our state
      setQuizzes(prevQuizzes => [newQuiz, ...prevQuizzes]);
      
      toast.success(`Successfully generated ${questions.length} quiz questions!`);
      
      setOpenGenerateDialog(false);
      form.reset();
    } catch (error) {
      console.error("Error generating quiz:", error);
      toast.error(`Failed to generate quiz: ${(error as Error).message}`);
    } finally {
      setIsGenerating(false);
    }
  };

  const startQuiz = () => {
    if (selectedQuiz) {
      // Navigate to the quiz session page with the quiz ID
      navigate(`/quizzes/${selectedQuiz.id}`);
      setSelectedQuiz(null);
    }
  };

  const viewQuiz = async (quizId: string) => {
    try {
      const quiz = await quizService.fetchQuiz(quizId);
      if (quiz) {
        setViewingQuiz(quiz);
        setOpenViewDialog(true);
      }
    } catch (error) {
      console.error("Error loading quiz:", error);
      toast.error("Failed to load quiz details");
    }
  };

  const handleDeleteQuiz = async () => {
    if (!quizToDelete) return;
    
    try {
      await quizService.deleteQuiz(quizToDelete);
      setQuizzes(quizzes.filter(quiz => quiz.id !== quizToDelete));
      toast.success("Quiz deleted successfully");
    } catch (error) {
      console.error("Error deleting quiz:", error);
      toast.error("Failed to delete quiz");
    } finally {
      setOpenDeleteDialog(false);
      setQuizToDelete(null);
    }
  };

  return (
    <div className="space-y-6">
      <PageHeader 
        title="Quizzes"
        description="Test your knowledge with practice quizzes"
      />

      {/* Quiz Type Selection */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="flex items-center text-lg">
              <FileText className="mr-2 h-5 w-5 text-purple-500" />
              Chapter Quizzes
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground">
              Focus on specific chapters or units from your course material.
            </p>
          </CardContent>
          <CardFooter>
            <Button variant="outline" className="w-full">Browse</Button>
          </CardFooter>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="flex items-center text-lg">
              <Timer className="mr-2 h-5 w-5 text-purple-500" />
              Timed Exams
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground">
              Simulate real exam conditions with strict time limits.
            </p>
          </CardContent>
          <CardFooter>
            <Button variant="outline" className="w-full">Browse</Button>
          </CardFooter>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="flex items-center text-lg">
              <SquareCheck className="mr-2 h-5 w-5 text-purple-500" />
              Quick Review
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground">
              Short quizzes for rapid knowledge checks and concept reinforcement.
            </p>
          </CardContent>
          <CardFooter>
            <Button variant="outline" className="w-full">Browse</Button>
          </CardFooter>
        </Card>
      </div>

      {/* Available Quizzes Section */}
      <div className="mt-8">
        <h2 className="text-xl font-semibold mb-4">Available Quizzes</h2>
        
        {isLoading ? (
          <div className="flex justify-center items-center py-12">
            <Loader className="h-8 w-8 animate-spin text-muted-foreground" />
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {quizzes.map((quiz) => (
              <Card key={quiz.id} className="hover:shadow-md transition-shadow">
                <CardHeader>
                  <div className="flex justify-between items-start">
                    <CardTitle>{quiz.title}</CardTitle>
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getDifficultyColor(quiz.difficulty)}`}>
                      {quiz.difficulty}
                    </span>
                  </div>
                  <CardDescription>{quiz.description}</CardDescription>
                </CardHeader>
                <CardContent className="pb-2">
                  <div className="flex items-center justify-between text-sm text-muted-foreground">
                    <span className="flex items-center">
                      <FileText className="mr-1 h-4 w-4" /> {quiz.questionCount} questions
                    </span>
                    <span className="flex items-center">
                      <Clock className="mr-1 h-4 w-4" /> {quiz.timeEstimate} min
                    </span>
                    <span>{quiz.coverage}</span>
                  </div>
                </CardContent>
                <CardFooter className="pt-2">
                  <div className="flex w-full justify-between">
                    <Button 
                      variant="outline" 
                      size="sm" 
                      onClick={() => viewQuiz(quiz.id)}
                    >
                      <Eye className="mr-1 h-4 w-4" /> Preview
                    </Button>
                    <div className="flex gap-2">
                      <Popover>
                        <PopoverTrigger asChild>
                          <Button variant="outline" size="sm" className="px-2">
                            <AlertCircle className="h-4 w-4 text-muted-foreground" />
                          </Button>
                        </PopoverTrigger>
                        <PopoverContent className="w-80">
                          <div className="space-y-3">
                            <h4 className="font-medium">Quiz Details</h4>
                            <div className="space-y-1 text-sm">
                              <div className="flex justify-between">
                                <span className="text-muted-foreground">Created:</span>
                                <span className="font-medium">{new Date(quiz.createdAt).toLocaleDateString()}</span>
                              </div>
                              <div className="flex justify-between">
                                <span className="text-muted-foreground">Questions:</span>
                                <span className="font-medium">{quiz.questionCount}</span>
                              </div>
                              <div className="flex justify-between">
                                <span className="text-muted-foreground">Difficulty:</span>
                                <span className="font-medium">{quiz.difficulty}</span>
                              </div>
                              <div className="flex justify-between">
                                <span className="text-muted-foreground">Coverage:</span>
                                <span className="font-medium">{quiz.coverage}</span>
                              </div>
                            </div>
                            <Button 
                              variant="outline" 
                              size="sm" 
                              className="w-full" 
                              onClick={() => {
                                setQuizToDelete(quiz.id);
                                setOpenDeleteDialog(true);
                              }}
                            >
                              Delete Quiz
                            </Button>
                          </div>
                        </PopoverContent>
                      </Popover>
                      <Dialog>
                        <DialogTrigger asChild>
                          <Button size="sm" onClick={() => setSelectedQuiz(quiz)}>
                            Start Quiz <ChevronRight className="ml-1 h-4 w-4" />
                          </Button>
                        </DialogTrigger>
                        <DialogContent>
                          {selectedQuiz && (
                            <>
                              <DialogHeader>
                                <DialogTitle>Start "{selectedQuiz.title}"</DialogTitle>
                                <DialogDescription>
                                  You are about to start a {selectedQuiz.questionCount}-question quiz that takes approximately {selectedQuiz.timeEstimate} minutes.
                                </DialogDescription>
                              </DialogHeader>
                              
                              <div className="py-4">
                                <h4 className="font-medium mb-2">Quiz Settings:</h4>
                                <div className="space-y-2 text-sm">
                                  <div className="flex justify-between">
                                    <span className="text-muted-foreground">Difficulty:</span>
                                    <span className="font-medium">{selectedQuiz.difficulty}</span>
                                  </div>
                                  <div className="flex justify-between">
                                    <span className="text-muted-foreground">Coverage:</span>
                                    <span className="font-medium">{selectedQuiz.coverage}</span>
                                  </div>
                                  <div className="flex justify-between">
                                    <span className="text-muted-foreground">Time Limit:</span>
                                    <span className="font-medium">{selectedQuiz.timeEstimate} minutes</span>
                                  </div>
                                </div>
                              </div>
                              
                              <DialogFooter className="flex space-x-2">
                                <Button variant="outline" onClick={() => setSelectedQuiz(null)}>Cancel</Button>
                                <Button onClick={startQuiz}>Begin Quiz</Button>
                              </DialogFooter>
                            </>
                          )}
                        </DialogContent>
                      </Dialog>
                    </div>
                  </div>
                </CardFooter>
              </Card>
            ))}
            
            {/* Create New Quiz Card */}
            <Card 
              className="border-dashed flex items-center justify-center h-[180px] cursor-pointer hover:bg-accent/50 transition-colors"
              onClick={() => setOpenGenerateDialog(true)}
            >
              <div className="text-center">
                <Plus className="mx-auto h-8 w-8 text-muted-foreground mb-2" />
                <p className="font-medium">Generate New Quiz</p>
              </div>
            </Card>
          </div>
        )}
      </div>
      
      {/* Performance Analytics Card */}
      <Card className="mt-6">
        <CardHeader>
          <CardTitle className="flex items-center">
            <ChartBar className="mr-2 h-5 w-5 text-purple-500" /> Performance Analytics
          </CardTitle>
          <CardDescription>Track your quiz performance over time</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="h-[200px] flex items-center justify-center bg-muted/30 rounded-md">
            <p className="text-muted-foreground">Take quizzes to view your performance analytics</p>
          </div>
        </CardContent>
        <CardFooter>
          <Button variant="outline" className="w-full">View Detailed Statistics</Button>
        </CardFooter>
      </Card>

      {/* Generate Quiz Dialog */}
      <Dialog open={openGenerateDialog} onOpenChange={setOpenGenerateDialog}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>Generate New Quiz</DialogTitle>
            <DialogDescription>
              Create AI-generated quiz questions from your course material
            </DialogDescription>
          </DialogHeader>
          
          <Form {...form}>
            <form onSubmit={form.handleSubmit(handleGenerateQuiz)} className="space-y-4 pt-4">
              <FormField
                control={form.control}
                name="title"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Quiz Title</FormLabel>
                    <FormControl>
                      <Input placeholder="Enter a title for your quiz" {...field} />
                    </FormControl>
                    <FormDescription>
                      Give your quiz a descriptive name (e.g., "Network Security Basics")
                    </FormDescription>
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="questionCount"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Number of Questions</FormLabel>
                    <FormControl>
                      <Input 
                        type="number" 
                        min={5}
                        max={50}
                        placeholder="10" 
                        {...field} 
                      />
                    </FormControl>
                    <FormDescription>
                      How many quiz questions would you like to generate? (5-50)
                    </FormDescription>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="difficulty"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Difficulty Level</FormLabel>
                    <Select 
                      onValueChange={field.onChange} 
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select difficulty" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="easy">Easy</SelectItem>
                        <SelectItem value="medium">Medium</SelectItem>
                        <SelectItem value="hard">Hard</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormDescription>
                      Choose the difficulty level for your quiz questions
                    </FormDescription>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="coverage"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Content Coverage</FormLabel>
                    <Select 
                      onValueChange={field.onChange} 
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select coverage" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="Chapters 1-5">Chapters 1-5</SelectItem>
                        <SelectItem value="Chapters 6-10">Chapters 6-10</SelectItem>
                        <SelectItem value="All Chapters">All Chapters</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormDescription>
                      Specify what content the quiz should cover
                    </FormDescription>
                  </FormItem>
                )}
              />
              
              <div className="flex justify-end gap-3 pt-4">
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => setOpenGenerateDialog(false)}
                  disabled={isGenerating}
                >
                  Cancel
                </Button>
                <Button 
                  type="submit"
                  disabled={isGenerating}
                >
                  {isGenerating ? (
                    <>
                      <Loader className="mr-2 h-4 w-4 animate-spin" /> 
                      Generating...
                    </>
                  ) : (
                    "Generate Quiz"
                  )}
                </Button>
              </div>
            </form>
          </Form>
        </DialogContent>
      </Dialog>

      {/* View Quiz Dialog with Questions Preview */}
      <Dialog open={openViewDialog} onOpenChange={setOpenViewDialog}>
        <DialogContent className="sm:max-w-[800px] max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>{viewingQuiz?.title}</DialogTitle>
            <DialogDescription>
              {viewingQuiz?.description}
            </DialogDescription>
          </DialogHeader>
          
          <div className="mt-4">
            {viewingQuiz?.questions?.length ? (
              <div className="space-y-6">
                {viewingQuiz.questions.map((question, index) => (
                  <div key={index} className="border rounded-lg p-4">
                    <div className="mb-2 flex justify-between items-center">
                      <Badge variant="outline" className="mb-2">Question {index + 1}</Badge>
                    </div>
                    <p className="font-medium mb-3">{question.question}</p>
                    
                    <div className="space-y-2 mb-3">
                      {question.options.map((option, optIndex) => (
                        <div 
                          key={optIndex} 
                          className={`flex items-center p-2 rounded-md ${
                            optIndex === question.correctAnswerIndex 
                              ? "bg-green-100 border border-green-300" 
                              : "bg-gray-50 border border-gray-200"
                          }`}
                        >
                          <div className="flex-shrink-0 mr-2">
                            <div className={`w-6 h-6 flex items-center justify-center rounded-full ${
                              optIndex === question.correctAnswerIndex 
                                ? "bg-green-500 text-white" 
                                : "bg-gray-200"
                            }`}>
                              {String.fromCharCode(65 + optIndex)}
                            </div>
                          </div>
                          <div>{option}</div>
                        </div>
                      ))}
                    </div>
                    
                    <div className="mt-4 text-sm">
                      <p className="font-medium mb-1">Explanation:</p>
                      <p className="text-muted-foreground">{question.explanation}</p>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="flex justify-center items-center py-8">
                <p className="text-muted-foreground">No questions available in this quiz</p>
              </div>
            )}
          </div>
          
          <DialogFooter className="flex justify-end gap-3 mt-4">
            <Button 
              onClick={() => setOpenViewDialog(false)}
            >
              Close
            </Button>
            {viewingQuiz && (
              <Button 
                onClick={() => {
                  setOpenViewDialog(false);
                  setSelectedQuiz(viewingQuiz);
                }}
              >
                Start Quiz
              </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Delete Confirmation Dialog */}
      <AlertDialog open={openDeleteDialog} onOpenChange={setOpenDeleteDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This action cannot be undone. This will permanently delete the quiz
              and all its questions.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel onClick={() => setQuizToDelete(null)}>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={handleDeleteQuiz}>Delete</AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
};

export default QuizzesPage;

================
File: src/pages/SuperTutor.tsx
================
import { useState, useEffect } from "react";
import { ChatBot } from "@/components/chat/ChatBot";
import { PageHeader } from "@/components/layout/PageHeader";
import { Button } from "@/components/ui/button";
import { useNavigate } from "react-router-dom";
import { classOpenAIConfigService, OpenAIConfig } from "@/services/classOpenAIConfig";
import { AlertCircle, KeyRound, Settings, Bot, ExternalLink, Database } from "lucide-react";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { useToast } from "@/hooks/use-toast";
import { Badge } from "@/components/ui/badge";

const SuperTutor = () => {
  const navigate = useNavigate();
  const [openAIConfig, setOpenAIConfig] = useState<OpenAIConfig | undefined>(undefined);
  const [activeClass, setActiveClass] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isGeneratingResponse, setIsGeneratingResponse] = useState(false);
  const [connectError, setConnectError] = useState<string | null>(null);
  const { toast } = useToast();
  
  // Generate generic suggestions based on active class or default ones if no class
  const [suggestions, setSuggestions] = useState<string[]>([
    "Explain the main concepts we've covered so far",
    "Help me understand this topic better",
    "What are the key points to remember?",
    "Can you provide some practice examples?"
  ]);

  // When component mounts, make sure we're at the top of the page
  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);

  // Load the active class and its OpenAI configuration
  useEffect(() => {
    async function loadClassConfig() {
      try {
        setIsLoading(true);
        setConnectError(null);
        
        const activeClassData = sessionStorage.getItem('activeClass');
        if (activeClassData) {
          const parsedClass = JSON.parse(activeClassData);
          setActiveClass(parsedClass.title || null);
          
          // Get the OpenAI configuration for the active class
          const config = await classOpenAIConfigService.getActiveClassConfig();
          setOpenAIConfig(config);
          
          if (config) {
            console.log(`Loaded OpenAI config for class: ${parsedClass.title}`);
            if (config.vectorStoreId) {
              console.log(`Using Vector Store ID: ${config.vectorStoreId}`);
            }
            if (config.assistantId) {
              console.log(`Using Assistant ID: ${config.assistantId}`);
            }
            
            // Validate API key format
            if (config.apiKey && !config.apiKey.startsWith('sk-')) {
              toast({
                title: "Invalid API Key Format",
                description: "Your OpenAI API key appears to be invalid. API keys should start with 'sk-'. Please update it in your class settings.",
                variant: "destructive"
              });
            }
            
            // Test assistant connectivity if available
            if (config.assistantId && config.apiKey) {
              try {
                const assistantResponse = await fetch(`https://api.openai.com/v1/assistants/${config.assistantId}`, {
                  method: 'GET',
                  headers: {
                    'Authorization': `Bearer ${config.apiKey}`,
                    'Content-Type': 'application/json',
                    'OpenAI-Beta': 'assistants=v2'  // Using the updated beta header
                  }
                });
                
                if (!assistantResponse.ok) {
                  const assistantError = await assistantResponse.json();
                  setConnectError(`Assistant connectivity issue: ${assistantError.error?.message || "Unknown error"}`);
                  console.error("Assistant test failed:", assistantError);
                } else {
                  console.log("Successfully connected to OpenAI Assistant API");
                  const assistantData = await assistantResponse.json();
                  console.log(`Assistant name: ${assistantData.name || "Unnamed"}`);
                }
              } catch (error) {
                console.error("Assistant connectivity test error:", error);
                setConnectError(`Failed to connect to assistant: ${error instanceof Error ? error.message : "Unknown error"}`);
              }
            }
            // Test vector store connectivity only if no assistant but vector store is available
            else if (config.vectorStoreId && config.apiKey && !config.assistantId) {
              try {
                // Test with the files endpoint instead
                const testResponse = await fetch(`https://api.openai.com/v1/files?purpose=assistants`, {
                  method: 'GET',
                  headers: {
                    'Authorization': `Bearer ${config.apiKey}`,
                    'Content-Type': 'application/json'
                  }
                });
                
                if (!testResponse.ok) {
                  const errorData = await testResponse.json();
                  setConnectError(`API connectivity issue: ${errorData.error?.message || "Unknown error"}`);
                  console.error("API test failed:", errorData);
                } else {
                  console.log("Successfully connected to OpenAI API");
                }
              } catch (error) {
                console.error("API connectivity test error:", error);
                setConnectError(`Failed to connect to OpenAI API: ${error instanceof Error ? error.message : "Unknown error"}`);
              }
            }
          }
        }
      } catch (error) {
        console.error("Error loading active class:", error);
        toast({
          title: "Error Loading Configuration",
          description: "Failed to load your class configuration. Please refresh or check your settings.",
          variant: "destructive"
        });
      } finally {
        setIsLoading(false);
      }
    }
    
    loadClassConfig();
  }, [toast]);

  // Function to be passed to ChatBot for tracking response generation state
  const handleResponseGenerationState = (isGenerating: boolean) => {
    setIsGeneratingResponse(isGenerating);
  };

  const handleGoToFlashcards = () => {
    navigate("/flashcards");
  };

  const handleSetupAPIKey = () => {
    navigate("/settings");
  };

  const openOpenAIDocs = () => {
    window.open("https://platform.openai.com/docs/api-reference/assistants", "_blank");
  };

  return (
    <div className="space-y-6">
      <PageHeader 
        title="Super Tutor"
        description={activeClass 
          ? `AI-powered learning assistant for ${activeClass}` 
          : "Upload your class materials and use AI-powered tools to help you understand complex concepts and answer your questions."
        }
      />

      {isLoading ? (
        <div className="h-8 w-full bg-gray-100 animate-pulse rounded"></div>
      ) : (
        <>
          {(openAIConfig?.assistantId || openAIConfig?.vectorStoreId) && (
            <div className={`${connectError ? 'bg-amber-50 border-amber-200' : 'bg-blue-50 border-blue-200'} border rounded-md p-4 text-sm`}>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  {openAIConfig?.assistantId ? (
                    <Bot className={`h-4 w-4 ${connectError ? 'text-amber-600' : 'text-blue-600'}`} />
                  ) : (
                    <Database className={`h-4 w-4 ${connectError ? 'text-amber-600' : 'text-blue-600'}`} />
                  )}
                  <p className="font-medium">
                    {connectError 
                      ? 'Connectivity issue' 
                      : `Using ${openAIConfig?.assistantId ? 'custom assistant' : 'custom knowledge base'} for ${activeClass}`}
                  </p>
                </div>
                <Badge 
                  variant={connectError ? "outline" : "default"} 
                  className={connectError ? "" : "bg-blue-500"}
                >
                  {(openAIConfig?.assistantId || openAIConfig?.vectorStoreId || "").substring(0, 8)}...
                </Badge>
              </div>
              {connectError ? (
                <div className="mt-2">
                  <p className="text-xs text-amber-700">{connectError}</p>
                  <Button 
                    variant="link" 
                    size="sm" 
                    className="px-0 h-auto text-xs flex items-center gap-1 text-amber-700" 
                    onClick={openOpenAIDocs}
                  >
                    View OpenAI Assistant docs <ExternalLink className="h-3 w-3" />
                  </Button>
                </div>
              ) : (
                <p className="text-xs text-blue-600 mt-1">
                  Responses will be based on your class materials
                </p>
              )}
            </div>
          )}
          
          {activeClass && !openAIConfig?.assistantId && !openAIConfig?.vectorStoreId && (
            <Alert variant="default" className="bg-amber-50 border-amber-200">
              <AlertCircle className="h-4 w-4" />
              <AlertTitle>No custom knowledge base</AlertTitle>
              <AlertDescription>
                This class isn't connected to an assistant. Responses will use OpenAI's general knowledge, not your class materials.
              </AlertDescription>
            </Alert>
          )}
        </>
      )}

      {!openAIConfig?.apiKey && (
        <Alert variant="destructive" className="bg-red-50 border-red-200">
          <KeyRound className="h-4 w-4" />
          <AlertTitle>OpenAI API Key Required</AlertTitle>
          <AlertDescription className="flex flex-col gap-2">
            <p>An OpenAI API key is required to use Super Tutor. Please set up your API key in the class settings.</p>
            <Button size="sm" variant="outline" className="w-fit flex items-center gap-2" onClick={handleSetupAPIKey}>
              <Settings className="h-4 w-4" />
              Set up API Key
            </Button>
          </AlertDescription>
        </Alert>
      )}

      {openAIConfig?.apiKey && !openAIConfig.apiKey.startsWith('sk-') && (
        <Alert variant="destructive" className="bg-red-50 border-red-200">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Invalid API Key Format</AlertTitle>
          <AlertDescription className="flex flex-col gap-2">
            <p>Your OpenAI API key appears to be invalid. OpenAI API keys typically start with "sk-". Please update it in settings.</p>
            <Button size="sm" variant="outline" className="w-fit flex items-center gap-2" onClick={handleSetupAPIKey}>
              <Settings className="h-4 w-4" />
              Update API Key
            </Button>
          </AlertDescription>
        </Alert>
      )}

      <div className="flex flex-col gap-4 mb-6">
        <Button 
          onClick={handleGoToFlashcards} 
          className="w-fit"
          disabled={!openAIConfig?.apiKey || (openAIConfig.apiKey && !openAIConfig.apiKey.startsWith('sk-'))}
        >
          Generate Flashcards
        </Button>
      </div>

      <div className="bg-white p-6 rounded-xl shadow-sm border">
        <ChatBot 
          disableToasts={true}
          suggestions={suggestions}
          title={activeClass ? `${activeClass} Assistant` : "Class Assistant"}
          knowledgeBase={activeClass || "General Knowledge"}
          openAIConfig={openAIConfig}
          onResponseGenerationStateChange={handleResponseGenerationState}
          loadingIndicator={
            isGeneratingResponse && (
              <div className="flex items-center justify-center py-4">
                <div className="animate-pulse flex items-center space-x-2">
                  <div className="h-2 w-2 bg-blue-500 rounded-full"></div>
                  <div className="h-2 w-2 bg-blue-500 rounded-full"></div>
                  <div className="h-2 w-2 bg-blue-500 rounded-full"></div>
                  <span className="text-sm text-gray-500 ml-2">AI is thinking...</span>
                </div>
              </div>
            )
          }
        />
      </div>
    </div>
  );
};

export default SuperTutor;

================
File: src/services/quiz/index.ts
================
import { quizGenerator } from './quizGenerator';
import { quizRepository } from './quizRepository';
export * from './types';

/**
 * Combined quiz service that includes all quiz-related functionality
 */
export const quizService = {
  // Quiz generation methods
  generateQuiz: quizGenerator.generateQuiz,
  
  // Quiz database operations
  saveQuiz: quizRepository.saveQuiz,
  fetchQuizzes: quizRepository.fetchQuizzes,
  fetchQuiz: quizRepository.fetchQuiz,
  deleteQuiz: quizRepository.deleteQuiz
};

================
File: src/services/quiz/quizGenerator.ts
================
import { supabase } from "@/integrations/supabase/client";
import { QuizQuestion, QuizGenerationParams } from "./types";
import { classOpenAIConfigService } from "../classOpenAIConfig";

/**
 * Service for generating quiz questions using OpenAI
 */
export const quizGenerator = {
  /**
   * Generate a quiz using OpenAI through Supabase Edge Function
   */
  generateQuiz: async (params: QuizGenerationParams): Promise<{questions: QuizQuestion[], timeEstimate: number}> => {
    try {
      // Get class-specific OpenAI configuration if available
      const classConfig = await classOpenAIConfigService.getActiveClassConfig();
      console.log("Using class config for quiz generation:", classConfig ? "YES" : "NO");
      
      // Log helpful information for debugging
      if (classConfig?.apiKey) {
        console.log("API key is configured for quiz generation");
      }
      if (classConfig?.vectorStoreId) {
        console.log(`Using vector store ID for quiz: ${classConfig.vectorStoreId}`);
      }
      if (classConfig?.assistantId) {
        console.log(`Using assistant ID for quiz: ${classConfig.assistantId}`);
      }

      // Call the edge function with enhanced params
      const { data, error } = await supabase.functions.invoke('generate-quiz', {
        body: {
          topic: params.title, // Topic is the quiz title
          questionCount: params.questionCount,
          difficulty: params.difficulty,
          coverage: params.coverage,
          openAIConfig: classConfig, // Pass the class-specific configuration
          useRAG: true, // Explicitly request to use RAG
          citeSources: true // Request source citations in explanations
        }
      });

      if (error) throw new Error(error.message || 'Failed to generate quiz');
      
      // Validate the response data structure
      if (!data || !data.questions || !Array.isArray(data.questions)) {
        console.error("Invalid quiz data received:", data);
        throw new Error("Received invalid quiz data format from API");
      }
      
      // Transform the data to match our expected format
      const formattedQuestions: QuizQuestion[] = data.questions.map(q => ({
        question: q.question_text || q.question,
        options: q.options || [],
        correctAnswerIndex: q.correct_answer_index !== undefined ? q.correct_answer_index : 0,
        explanation: q.explanation || "No explanation provided"
      }));
      
      return {
        questions: formattedQuestions,
        timeEstimate: data.timeEstimate || 5 * params.questionCount
      };
    } catch (error) {
      console.error('Error generating quiz:', error);
      throw error;
    }
  }
};

================
File: src/services/quiz/quizRepository.ts
================
import { supabase } from "@/integrations/supabase/client";
import { toast } from "sonner";
import { Quiz, QuizQuestion } from "./types";

/**
 * Service for quiz database operations
 */
export const quizRepository = {
  /**
   * Save a quiz to the database
   */
  saveQuiz: async (quiz: Omit<Quiz, 'id' | 'createdAt' | 'updatedAt'>): Promise<Quiz> => {
    try {
      // Get the current authenticated user to set user_id
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        throw new Error("You must be logged in to save a quiz");
      }
      
      // Get the active class
      const activeClass = sessionStorage.getItem('activeClass');
      const classTitle = activeClass ? JSON.parse(activeClass).title : null;
      
      // Insert the quiz into the quizzes table
      const { data, error } = await supabase
        .from('quizzes')
        .insert({
          title: quiz.title,
          description: quiz.description,
          question_count: quiz.questionCount,
          time_estimate: quiz.timeEstimate,
          difficulty: quiz.difficulty,
          coverage: quiz.coverage,
          user_id: session.user.id, // Set the user_id to the current user's ID
          class_title: classTitle // Associate with the current class
        } as any)
        .select()
        .single();

      if (error) throw error;

      // Now that we have the quiz ID, save the questions
      for (const question of quiz.questions) {
        // Make sure question text isn't null before saving
        if (!question.question) {
          console.error("Skipping question with null text:", question);
          continue;
        }

        const { error: questionError } = await supabase
          .from('quiz_questions')
          .insert({
            quiz_id: data.id,
            question_text: question.question,
            options: question.options || ["No option provided"],
            correct_answer_index: question.correctAnswerIndex ?? 0,
            explanation: question.explanation || "No explanation provided"
          } as any);

        if (questionError) throw questionError;
      }

      return {
        id: data.id,
        title: data.title,
        description: data.description,
        questions: quiz.questions,
        questionCount: data.question_count,
        timeEstimate: data.time_estimate,
        difficulty: data.difficulty,
        coverage: data.coverage,
        createdAt: data.created_at,
        updatedAt: data.updated_at,
        userId: data.user_id,
        classTitle: data.class_title
      };
    } catch (error) {
      console.error('Error saving quiz:', error);
      throw error;
    }
  },
  
  /**
   * Fetch all quizzes for the current user and active class
   */
  fetchQuizzes: async (): Promise<Quiz[]> => {
    try {
      // Get the current authenticated user
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        console.log("No active session found when fetching quizzes");
        return [];
      }

      // Get the active class
      const activeClass = sessionStorage.getItem('activeClass');
      const classTitle = activeClass ? JSON.parse(activeClass).title : null;
      
      // If no active class, return an empty array
      if (!classTitle) {
        console.log("No active class found, returning empty quizzes array");
        return [];
      }

      const { data: quizzes, error } = await supabase
        .from('quizzes')
        .select('*')
        .eq('user_id', session.user.id) // Only fetch quizzes for the current user
        .eq('class_title', classTitle) // Only fetch quizzes for the current class
        .order('created_at', { ascending: false });

      if (error) throw error;

      // For each quiz, fetch its questions
      const quizzesWithQuestions = await Promise.all(
        quizzes.map(async (quiz) => {
          const { data: questions, error: questionsError } = await supabase
            .from('quiz_questions')
            .select('*')
            .eq('quiz_id', quiz.id);

          if (questionsError) throw questionsError;

          const formattedQuestions: QuizQuestion[] = questions.map(q => ({
            question: q.question_text,
            options: q.options,
            correctAnswerIndex: q.correct_answer_index,
            explanation: q.explanation
          }));

          return {
            id: quiz.id,
            title: quiz.title,
            description: quiz.description,
            questions: formattedQuestions,
            questionCount: quiz.question_count,
            timeEstimate: quiz.time_estimate,
            difficulty: quiz.difficulty,
            coverage: quiz.coverage,
            createdAt: quiz.created_at,
            updatedAt: quiz.updated_at,
            userId: quiz.user_id,
            classTitle: quiz.class_title
          };
        })
      );

      return quizzesWithQuestions;
    } catch (error) {
      console.error('Error fetching quizzes:', error);
      toast.error('Failed to load quizzes');
      return [];
    }
  },
  
  /**
   * Fetch a single quiz by ID with questions
   */
  fetchQuiz: async (quizId: string): Promise<Quiz | null> => {
    try {
      // Fetch the quiz
      const { data: quiz, error } = await supabase
        .from('quizzes')
        .select('*')
        .eq('id', quizId)
        .single();

      if (error) throw error;
      if (!quiz) return null;

      // Fetch the questions for this quiz
      const { data: questions, error: questionsError } = await supabase
        .from('quiz_questions')
        .select('*')
        .eq('quiz_id', quizId);

      if (questionsError) throw questionsError;

      const formattedQuestions: QuizQuestion[] = questions.map(q => ({
        question: q.question_text,
        options: q.options,
        correctAnswerIndex: q.correct_answer_index,
        explanation: q.explanation
      }));

      return {
        id: quiz.id,
        title: quiz.title,
        description: quiz.description,
        questions: formattedQuestions,
        questionCount: quiz.question_count,
        timeEstimate: quiz.time_estimate,
        difficulty: quiz.difficulty,
        coverage: quiz.coverage,
        createdAt: quiz.created_at,
        updatedAt: quiz.updated_at,
        userId: quiz.user_id,
        classTitle: quiz.class_title
      };
    } catch (error) {
      console.error('Error fetching quiz:', error);
      toast.error('Failed to load quiz');
      return null;
    }
  },
  
  /**
   * Delete a quiz
   */
  deleteQuiz: async (quizId: string): Promise<void> => {
    try {
      // Delete the questions first (due to foreign key constraint)
      const { error: questionsError } = await supabase
        .from('quiz_questions')
        .delete()
        .eq('quiz_id', quizId);

      if (questionsError) throw questionsError;

      // Then delete the quiz
      const { error } = await supabase
        .from('quizzes')
        .delete()
        .eq('id', quizId);

      if (error) throw error;
    } catch (error) {
      console.error('Error deleting quiz:', error);
      throw error;
    }
  }
};

================
File: src/services/quiz/types.ts
================
// Quiz service type definitions

export interface QuizQuestion {
  question: string;
  options: string[];
  correctAnswerIndex: number;
  explanation: string;
}

export interface Quiz {
  id: string;
  title: string;
  description: string;
  questions: QuizQuestion[];
  questionCount: number;
  timeEstimate: number; // in minutes
  difficulty: string;
  coverage: string;
  createdAt: string;
  updatedAt: string;
  userId?: string;
  classTitle?: string; // Add class title to the Quiz interface
}

export interface QuizGenerationParams {
  title: string;
  questionCount: number;
  difficulty: string; 
  coverage: string;
}

================
File: src/services/classOpenAIConfig.ts
================
import { supabase } from "@/integrations/supabase/client";

export interface OpenAIConfig {
  apiKey?: string;
  vectorStoreId?: string;
  assistantId?: string;
}

export interface ClassConfig {
  id: string;
  title: string;
  professor?: string;
  classTime?: string;
  classroom?: string;
  emoji?: string;
  enabledWidgets?: string[];
  openAIConfig: OpenAIConfig;
}

// Interface that explicitly matches the database schema
interface ClassConfigDBRow {
  id: string;
  class_title: string;
  professor?: string;
  class_time?: string;
  classroom?: string;
  api_key?: string;
  vector_store_id?: string;
  assistant_id?: string;
  user_id?: string;
  emoji?: string;
  enabled_widgets?: string[];
  created_at?: string;
  updated_at?: string;
}

/**
 * Service to manage OpenAI configurations per class
 */
export const classOpenAIConfigService = {
  /**
   * Get the OpenAI configuration for a specific class
   * 
   * @param classTitle The title of the class
   * @returns The OpenAI configuration for the class, or undefined if not found
   */
  getConfigForClass: async (classTitle: string): Promise<OpenAIConfig | undefined> => {
    if (!classTitle) {
      console.error("Cannot get config for class with empty title");
      return undefined;
    }
    
    try {
      console.log(`Attempting to fetch OpenAI config for class: ${classTitle}`);
      
      // Always try to get from Supabase first
      const { data: { session } } = await supabase.auth.getSession();
      
      if (!session?.user) {
        console.error('No authenticated user found when getting class config');
        throw new Error('Authentication required to access class configuration');
      }
      
      console.log('User authenticated, fetching from Supabase with user ID:', session.user.id);
      const { data, error } = await supabase
        .from('class_openai_configs')
        .select('*') 
        .eq('class_title', classTitle)
        .eq('user_id', session.user.id)
        .maybeSingle();
      
      if (error) {
        console.error('Error retrieving OpenAI configuration from Supabase:', error);
        throw error;
      } else if (data) {
        console.log(`Found OpenAI config for class '${classTitle}' in Supabase:`, data);
        return {
          apiKey: data.api_key,
          vectorStoreId: data.vector_store_id,
          assistantId: data.assistant_id
        };
      }
      
      console.log(`No OpenAI config found for class '${classTitle}'`);
      return undefined;
    } catch (error) {
      console.error('Error retrieving OpenAI configuration:', error);
      throw error;
    }
  },

  /**
   * Save OpenAI configuration for a class
   * 
   * @param classTitle The title of the class
   * @param config The OpenAI configuration
   */
  saveConfigForClass: async (
    classTitle: string, 
    config: OpenAIConfig, 
    emoji?: string, 
    professor?: string, 
    classTime?: string, 
    classroom?: string, 
    enabledWidgets?: string[]
  ): Promise<void> => {
    if (!classTitle) {
      console.error("Cannot save class with empty title");
      throw new Error("Class title is required");
    }
    
    try {
      console.log(`Saving OpenAI config for class: ${classTitle}`, { 
        config, 
        emoji, 
        professor, 
        classTime, 
        classroom, 
        enabledWidgets 
      });
      
      // Get the user data properly from the session
      const { data: { session } } = await supabase.auth.getSession();
      
      if (!session?.user) {
        console.error('No authenticated user found when saving class config');
        throw new Error('Authentication required to save class configuration');
      }
      
      // Ensure enabled_widgets is always an array
      const safeEnabledWidgets = Array.isArray(enabledWidgets) ? enabledWidgets : ["flashcards", "quizzes"];
      
      // Ensure all the data is correctly formatted
      const classData = {
        class_title: classTitle,
        api_key: config.apiKey || null,
        vector_store_id: config.vectorStoreId || null,
        assistant_id: config.assistantId || null,
        emoji: emoji || null,
        professor: professor || null,
        class_time: classTime || null,
        classroom: classroom || null,
        enabled_widgets: safeEnabledWidgets,
        user_id: session.user.id,
        updated_at: new Date().toISOString()
      };
      
      console.log('Saving class data to Supabase:', classData);
      
      // First check if the record already exists
      const { data, error: fetchError } = await supabase
        .from('class_openai_configs')
        .select('id')
        .eq('class_title', classTitle)
        .eq('user_id', session.user.id)
        .maybeSingle();
        
      if (fetchError) {
        console.error('Error checking if class exists:', fetchError);
        throw fetchError;
      }
        
      let result;
      if (data) {
        // If the record exists, update it
        console.log(`Updating existing class with ID ${data.id}`);
        result = await supabase
          .from('class_openai_configs')
          .update(classData)
          .eq('id', data.id)
          .eq('user_id', session.user.id);
      } else {
        // If the record doesn't exist, insert it
        console.log('Inserting new class record');
        // For new records, we use the same classData but don't manually set created_at
        // Supabase will automatically set it with the default now() value
        result = await supabase
          .from('class_openai_configs')
          .insert(classData);
      }
      
      if (result.error) {
        console.error('Error saving OpenAI configuration to Supabase:', result.error);
        throw result.error;
      }
      
      console.log(`Successfully saved OpenAI config for class '${classTitle}' to Supabase`);
    } catch (error) {
      console.error('Error saving OpenAI configuration:', error);
      throw error;
    }
  },

  /**
   * Get the OpenAI configuration for the active class
   * 
   * @returns The OpenAI configuration for the active class, or undefined if not found
   */
  getActiveClassConfig: async (): Promise<OpenAIConfig | undefined> => {
    try {
      const activeClass = sessionStorage.getItem('activeClass');
      if (!activeClass) {
        console.log('No active class found in session storage');
        return undefined;
      }
      
      try {
        const parsedClass = JSON.parse(activeClass);
        if (parsedClass.title && parsedClass.openAIConfig) {
          console.log(`Using OpenAI config from active class '${parsedClass.title}'`);
          return parsedClass.openAIConfig;
        }
        
        // If the active class doesn't have an inline config, try to find it by title
        if (parsedClass.title) {
          return await classOpenAIConfigService.getConfigForClass(parsedClass.title);
        }
      } catch (parseError) {
        console.error('Error parsing active class from session storage:', parseError);
        // Clear invalid session storage data
        sessionStorage.removeItem('activeClass');
        return undefined;
      }
      
      console.log('No active class OpenAI config found');
      return undefined;
    } catch (error) {
      console.error('Error retrieving active class OpenAI configuration:', error);
      return undefined;
    }
  },
  
  /**
   * Get all classes for the current user
   * 
   * @returns Array of class configurations
   */
  getAllClasses: async (): Promise<ClassConfig[]> => {
    try {
      // Get the user data from the session
      const { data: { session } } = await supabase.auth.getSession();
      
      // Always try Supabase first if user is authenticated
      if (session?.user) {
        console.log('User authenticated, fetching classes from Supabase for user:', session.user.id);
        
        // Fetch from Supabase with explicit type for database rows
        const { data, error } = await supabase
          .from('class_openai_configs')
          .select('*')
          .eq('user_id', session.user.id);
          
        if (error) {
          console.error('Error fetching classes from Supabase:', error);
          throw error;
        } else if (data && data.length > 0) {
          console.log(`Found ${data.length} classes in Supabase:`, data);
          
          // Transform the database objects into ClassConfig objects with explicit typing
          const classConfigs = data.map((item: ClassConfigDBRow) => ({
            id: item.id,
            title: item.class_title,
            professor: item.professor || undefined,
            classTime: item.class_time || undefined,
            classroom: item.classroom || undefined,
            emoji: item.emoji || undefined,
            enabledWidgets: item.enabled_widgets || [],
            openAIConfig: {
              apiKey: item.api_key || undefined,
              vectorStoreId: item.vector_store_id || undefined,
              assistantId: item.assistant_id || undefined
            }
          }));
          
          console.log('Transformed class configs:', classConfigs);
          return classConfigs;
        }
        
        console.log('No classes found in Supabase');
        return [];
      }
      
      console.log('User not authenticated, cannot fetch classes');
      return [];
    } catch (error) {
      console.error('Error retrieving all classes:', error);
      throw error;
    }
  },
  
  /**
   * Delete a class configuration
   * 
   * @param classTitle The title of the class to delete
   */
  deleteClass: async (classTitle: string): Promise<void> => {
    if (!classTitle || typeof classTitle !== 'string') {
      console.error('Invalid class title provided for deletion:', classTitle);
      throw new Error('Valid class title is required for deletion');
    }
    
    try {
      console.log(`Attempting to delete class: ${classTitle}`);
      
      // Get the user data from the session
      const { data: { session } } = await supabase.auth.getSession();
      
      if (!session?.user) {
        console.error('No authenticated user found when deleting class');
        throw new Error('Authentication required to delete class configuration');
      }
      
      console.log(`User authenticated, deleting class for user: ${session.user.id}`);
      
      // Delete from Supabase with better error handling
      const { error, count } = await supabase
        .from('class_openai_configs')
        .delete({ count: 'exact' }) // Get count of affected rows
        .eq('class_title', classTitle)
        .eq('user_id', session.user.id);
        
      if (error) {
        console.error('Error deleting class from Supabase:', error);
        throw new Error(`Failed to delete class: ${error.message}`);
      } 
      
      console.log(`Successfully deleted ${count} class record(s) with title '${classTitle}' from Supabase`);
      
      // Also clean up session storage if this was the active class
      try {
        const activeClass = sessionStorage.getItem('activeClass');
        if (activeClass) {
          const parsedClass = JSON.parse(activeClass);
          if (parsedClass.title === classTitle) {
            sessionStorage.removeItem('activeClass');
            console.log('Removed deleted class from session storage');
          }
        }
      } catch (e) {
        console.error('Error cleaning up session storage:', e);
      }
      
    } catch (error: any) {
      console.error('Error deleting class:', error);
      throw new Error(error.message || 'Error deleting class');
    }
  },

  /**
   * Clear all stored data about classes
   * This is useful for troubleshooting
   */
  clearAllData: async (): Promise<void> => {
    try {
      // Clear session storage
      sessionStorage.removeItem('activeClass');
      
      console.log('Cleared all local class data');
      
      // If user is authenticated, also clear database data
      const { data: { session } } = await supabase.auth.getSession();
      
      if (session?.user) {
        // Delete all classes for this user
        const { error } = await supabase
          .from('class_openai_configs')
          .delete()
          .eq('user_id', session.user.id);
          
        if (error) {
          console.error('Error clearing class data from database:', error);
          throw error;
        }
        
        console.log('Cleared all database class data for user:', session.user.id);
      }
    } catch (error) {
      console.error('Error clearing class data:', error);
      throw error;
    }
  }
};

================
File: src/services/flashcardService.ts
================
import { supabase } from "@/integrations/supabase/client";
import { Deck, FlashcardContent, GenerateDeckParams } from "@/types/flashcard";
import { classOpenAIConfigService } from "./classOpenAIConfig";

/**
 * Service to handle flashcard-related operations
 */
export const flashcardService = {
  /**
   * Generate a deck of flashcards using OpenAI and the vector database
   */
  generateDeck: async (params: GenerateDeckParams): Promise<FlashcardContent[]> => {
    console.log("Attempting to generate flashcards with params:", params);
    
    try {
      // Get class-specific OpenAI configuration if available
      const classConfig = await classOpenAIConfigService.getActiveClassConfig();
      console.log("Using class config:", classConfig ? "YES" : "NO");
      if (classConfig?.apiKey) {
        console.log("API key is configured");
      }
      if (classConfig?.vectorStoreId) {
        console.log(`Using vector store ID: ${classConfig.vectorStoreId}`);
      }
      if (classConfig?.assistantId) {
        console.log(`Using assistant ID: ${classConfig.assistantId}`);
      }
      
      // Call the Supabase Edge Function to generate flashcards with the class config
      const { data, error } = await supabase.functions.invoke('generate-flashcards', {
        body: {
          title: params.title,
          cardCount: params.cardCount,
          openAIConfig: classConfig // Pass the class-specific configuration
        }
      });

      if (error) {
        console.error("Error calling generate-flashcards function:", error);
        throw new Error(`Failed to generate flashcards: ${error.message}`);
      }

      if (!data || !data.flashcards || data.flashcards.length === 0) {
        throw new Error("No flashcards were generated. Please try again.");
      }

      // Verify we got exactly the right number of flashcards
      if (data.flashcards.length !== params.cardCount) {
        console.log(`Expected ${params.cardCount} flashcards but received ${data.flashcards.length}. Adjusting...`);
      }
      
      console.log(`Received ${data.flashcards.length} flashcards from the API`);
      return data.flashcards;
    } catch (error: any) {
      console.error("Error generating flashcards:", error);
      
      // Check specifically for connection issues
      if (error.message?.includes("Failed to send a request") || 
          error.message?.includes("Failed to fetch")) {
        throw new Error("Unable to connect to the flashcard generation service. Please check your connection and try again.");
      }
      
      throw error;
    }
  },

  /**
   * Save a new deck to the database
   */
  saveDeck: async (deck: Omit<Deck, 'id' | 'updatedAt'>): Promise<Deck> => {
    // Get the active class from session storage
    const activeClass = sessionStorage.getItem('activeClass');
    const classTitle = activeClass ? JSON.parse(activeClass).title : null;
    
    // Create an object with snake_case properties for the database
    const dbDeck = {
      title: deck.title,
      description: deck.description,
      color: deck.color,
      card_count: deck.cardCount,
      due_cards: deck.dueCards,
      new_cards: deck.newCards,
      user_id: deck.userId,
      class_title: classTitle // Add class_title to associate with specific class
    };

    // Insert the deck into the database with explicit type assertion
    const { data, error } = await supabase
      .from('decks')
      .insert(dbDeck as any) // Use type assertion to bypass TypeScript's type checking
      .select()
      .single();

    if (error) {
      console.error("Error saving deck:", error);
      throw new Error(`Failed to save deck: ${error.message}`);
    }

    // Convert from snake_case database fields to camelCase for app use
    const savedDeck: Deck = {
      id: data.id,
      title: data.title,
      description: data.description,
      color: data.color,
      cardCount: data.card_count,
      dueCards: data.due_cards,
      newCards: data.new_cards,
      updatedAt: new Date(data.updated_at),
      userId: data.user_id,
      classTitle: data.class_title
    };

    return savedDeck;
  },

  /**
   * Save flashcards to the database for a deck
   */
  saveFlashcards: async (deckId: string, flashcards: FlashcardContent[]): Promise<void> => {
    // Convert from application model to database model (camelCase to snake_case)
    const flashcardsToInsert = flashcards.map(card => ({
      deck_id: deckId,
      front: card.front,
      back: card.back,
      difficulty: 'medium',
      next_review: new Date().toISOString(),
      review_count: 0
    }));

    const { error } = await supabase
      .from('flashcards')
      .insert(flashcardsToInsert as any[]) // Use type assertion to avoid TypeScript errors
      .select();

    if (error) {
      console.error("Error saving flashcards:", error);
      throw new Error(`Failed to save flashcards: ${error.message}`);
    }
  },

  /**
   * Fetch all decks from the database for the current active class
   */
  fetchDecks: async (): Promise<Deck[]> => {
    // Get the active class from session storage
    const activeClass = sessionStorage.getItem('activeClass');
    const classTitle = activeClass ? JSON.parse(activeClass).title : null;
    
    // If no active class, return an empty array
    if (!classTitle) {
      console.log("No active class found, returning empty decks array");
      return [];
    }
    
    // Fetch decks filtered by class_title
    const { data, error } = await supabase
      .from('decks')
      .select('*')
      .eq('class_title', classTitle)
      .order('updated_at', { ascending: false });

    if (error) {
      console.error("Error fetching decks:", error);
      throw new Error(`Failed to fetch decks: ${error.message}`);
    }

    return data.map(deck => ({
      id: deck.id,
      title: deck.title,
      description: deck.description,
      color: deck.color,
      cardCount: deck.card_count,
      dueCards: deck.due_cards,
      newCards: deck.new_cards,
      updatedAt: new Date(deck.updated_at),
      userId: deck.user_id,
      classTitle: deck.class_title
    }));
  },
  
  /**
   * Fetch flashcards for a specific deck
   */
  fetchFlashcards: async (deckId: string) => {
    const { data, error } = await supabase
      .from('flashcards')
      .select('*')
      .eq('deck_id', deckId)
      .order('created_at', { ascending: true });
      
    if (error) {
      console.error("Error fetching flashcards:", error);
      throw new Error(`Failed to fetch flashcards: ${error.message}`);
    }
    
    return data.map(card => ({
      id: card.id,
      front: card.front,
      back: card.back,
      deckId: card.deck_id,
      difficulty: card.difficulty,
      nextReview: new Date(card.next_review),
      lastReviewed: card.last_reviewed ? new Date(card.last_reviewed) : undefined,
      reviewCount: card.review_count
    }));
  },
  
  /**
   * Delete a deck and its associated flashcards
   */
  deleteDeck: async (deckId: string): Promise<void> => {
    try {
      // First delete all flashcards associated with this deck (cascade delete isn't automatic)
      const { error: flashcardsError } = await supabase
        .from('flashcards')
        .delete()
        .eq('deck_id', deckId);
      
      if (flashcardsError) {
        console.error("Error deleting flashcards:", flashcardsError);
        throw new Error(`Failed to delete flashcards: ${flashcardsError.message}`);
      }
      
      // Then delete the deck itself
      const { error: deckError } = await supabase
        .from('decks')
        .delete()
        .eq('id', deckId);
      
      if (deckError) {
        console.error("Error deleting deck:", deckError);
        throw new Error(`Failed to delete deck: ${deckError.message}`);
      }
      
      console.log(`Successfully deleted deck ${deckId} and its flashcards`);
    } catch (error: any) {
      console.error("Error in deleteDeck:", error);
      throw error;
    }
  }
};

================
File: src/types/flashcard.ts
================
/**
 * Single flashcard content (front and back)
 */
export interface FlashcardContent {
  front: string;
  back: string;
}

/**
 * Flashcard schema for database and application use
 */
export interface Flashcard {
  id: string;
  front: string;
  back: string;
  deckId: string;
  difficulty: string;
  nextReview: Date;
  lastReviewed?: Date;
  reviewCount?: number;
}

/**
 * Deck schema for database and application use
 */
export interface Deck {
  id: string;
  title: string;
  description: string;
  userId?: string;
  updatedAt: Date;
  color: string;
  cardCount: number;
  dueCards: number;
  newCards: number;
  cards?: Flashcard[];
  classTitle?: string; // Add class title to the Deck interface
}

/**
 * Parameters for generating a new deck
 */
export interface GenerateDeckParams {
  title: string;
  cardCount: number;
}

================
File: src/utils/emojiUtils.ts
================
/**
 * Generates an appropriate emoji for a class based on its title
 * @param classTitle The title of the class
 * @returns An appropriate emoji
 */
export const getEmojiForClass = (classTitle: string): string => {
  const title = classTitle.toLowerCase();

  // STEM subjects
  if (title.includes('math') || title.includes('calculus') || title.includes('algebra') || title.includes('geometry')) {
    return '🧮';
  }
  if (title.includes('computer') || title.includes('programming') || title.includes('code') || title.includes('software')) {
    return '💻';
  }
  if (title.includes('physics') || title.includes('astronomy') || title.includes('space')) {
    return '🔭';
  }
  if (title.includes('chemistry') || title.includes('organic')) {
    return '🧪';
  }
  if (title.includes('biology') || title.includes('life science')) {
    return '🧬';
  }
  if (title.includes('engineering') || title.includes('mechanical')) {
    return '⚙️';
  }
  if (title.includes('statistics') || title.includes('data science')) {
    return '📊';

  // Humanities
  } else if (title.includes('history') || title.includes('ancient') || title.includes('medieval')) {
    return '📜';
  } else if (title.includes('literature') || title.includes('english') || title.includes('writing')) {
    return '📚';
  } else if (title.includes('philosophy') || title.includes('ethics')) {
    return '🧠';
  } else if (title.includes('psychology') || title.includes('behavior')) {
    return '🧠';
  } else if (title.includes('sociology') || title.includes('cultural')) {
    return '👥';

  // Languages
  } else if (title.includes('spanish') || title.includes('español')) {
    return '🇪🇸';
  } else if (title.includes('french') || title.includes('français')) {
    return '🇫🇷';
  } else if (title.includes('german') || title.includes('deutsch')) {
    return '🇩🇪';
  } else if (title.includes('chinese') || title.includes('mandarin')) {
    return '🇨🇳';
  } else if (title.includes('japanese') || title.includes('nihongo')) {
    return '🇯🇵';

  // Business & Economics
  } else if (title.includes('economics') || title.includes('econ')) {
    return '📈';
  } else if (title.includes('business') || title.includes('management')) {
    return '💼';
  } else if (title.includes('marketing') || title.includes('advertis')) {
    return '📣';
  } else if (title.includes('finance') || title.includes('accounting')) {
    return '💰';

  // Arts
  } else if (title.includes('art') || title.includes('painting') || title.includes('drawing')) {
    return '🎨';
  } else if (title.includes('music') || title.includes('instrument')) {
    return '🎵';
  } else if (title.includes('theater') || title.includes('drama')) {
    return '🎭';
  } else if (title.includes('film') || title.includes('cinema')) {
    return '🎬';
  } else if (title.includes('photography')) {
    return '📷';

  // Sciences
  } else if (title.includes('medicine') || title.includes('medical') || title.includes('health')) {
    return '⚕️';
  } else if (title.includes('earth') || title.includes('geography') || title.includes('geology')) {
    return '🌎';
  } else if (title.includes('environment') || title.includes('ecology')) {
    return '🌱';

  // Other common subjects
  } else if (title.includes('law') || title.includes('legal')) {
    return '⚖️';
  } else if (title.includes('physical') || title.includes('gym') || title.includes('sport')) {
    return '🏃';
  } else if (title.includes('nutrition') || title.includes('food')) {
    return '🍎';
  } else if (title.includes('religion') || title.includes('theology')) {
    return '🙏';
  }

  // Default educational emoji if no specific match
  const defaultEmojis = ['📚', '📝', '✏️', '🎓', '🧠', '📊', '📈', '🔬', '📓', '🔍'];
  return defaultEmojis[Math.floor(Math.random() * defaultEmojis.length)];
};

================
File: src/App.css
================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

================
File: src/App.tsx
================
import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";
import { AppLayout } from "./components/layout/AppLayout";
import { AuthGuard } from "./components/auth/AuthGuard";
import { WidgetsProvider } from "./hooks/use-widgets";
import HomePage from "./pages/HomePage";
import SuperTutor from "./pages/SuperTutor";
import AuthPage from "./pages/AuthPage";
import AccountPage from "./pages/AccountPage";
import NotFound from "./pages/NotFound";
import DatabasePage from "./pages/DatabasePage";
import FlashcardsPage from "./pages/FlashcardsPage";
import QuizzesPage from "./pages/QuizzesPage";
import QuizSessionPage from "./pages/QuizSessionPage";

const queryClient = new QueryClient();

const App = () => (
  <QueryClientProvider client={queryClient}>
    <TooltipProvider>
      <Toaster />
      <Sonner />
      <WidgetsProvider>
        <BrowserRouter>
          <Routes>
            {/* Public routes */}
            <Route path="/auth" element={<AuthPage />} />
            
            {/* Protected routes */}
            <Route element={<AuthGuard />}>
              <Route element={<AppLayout />}>
                <Route path="/" element={<HomePage key="home-main" />} />
                <Route path="/super-stu" element={<SuperTutor />} />
                <Route path="/database" element={<DatabasePage />} />
                <Route path="/flashcards" element={<FlashcardsPage />} />
                <Route path="/quizzes" element={<QuizzesPage />} />
                <Route path="/quizzes/:quizId" element={<QuizSessionPage />} />
                <Route path="/account" element={<AccountPage />} />
              </Route>
            </Route>
            
            <Route path="*" element={<NotFound />} />
          </Routes>
        </BrowserRouter>
      </WidgetsProvider>
    </TooltipProvider>
  </QueryClientProvider>
);

export default App;

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 195 33% 97%;
    --foreground: 220 10% 22%;

    --card: 0 0% 100%;
    --card-foreground: 220 10% 22%;

    --popover: 0 0% 100%;
    --popover-foreground: 220 10% 22%;

    --primary: 185 72% 36%;
    --primary-foreground: 210 40% 98%;

    --secondary: 200 40% 25%;
    --secondary-foreground: 210 40% 98%;

    --muted: 220 15% 94%;
    --muted-foreground: 220 10% 40%;

    --accent: 185 72% 36%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 220 13% 91%;
    --input: 220 13% 91%;
    --ring: 185 72% 36%;

    --radius: 0.75rem;

    --sidebar-background: 220 30% 18%;
    --sidebar-foreground: 210 40% 98%;
    --sidebar-primary: 185 72% 36%;
    --sidebar-primary-foreground: 210 40% 98%;
    --sidebar-accent: 220 20% 25%;
    --sidebar-accent-foreground: 210 40% 98%;
    --sidebar-border: 220 20% 25%;
    --sidebar-ring: 185 72% 36%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
  }
}

@layer components {
  .gradient-background {
    @apply bg-gradient-to-br from-cybercoach-blue-light/10 to-cybercoach-teal-light/10;
  }
  
  .cyber-card {
    @apply bg-white rounded-lg shadow-md p-6 border border-slate-200 hover:border-slate-300 transition-all;
  }

  .chat-message {
    @apply p-4 rounded-lg my-2 max-w-[85%];
  }

  .user-message {
    @apply chat-message bg-cybercoach-blue-light/20 ml-auto;
  }

  .ai-message {
    @apply chat-message bg-gray-100 mr-auto;
  }

  .policy-card {
    @apply bg-white rounded-lg shadow-md p-6 border border-slate-200 hover:shadow-lg transition-all duration-300;
  }

  .section-header {
    @apply text-2xl font-semibold text-cybercoach-blue-dark mb-4;
  }
}

================
File: src/main.tsx
================
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'

createRoot(document.getElementById("root")!).render(<App />);

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

interface ImportMetaEnv {
  readonly VITE_SUPABASE_URL: string
  readonly VITE_SUPABASE_ANON_KEY: string
}

interface ImportMeta {
  readonly env: ImportMetaEnv
}

================
File: supabase/.temp/cli-latest
================
v2.22.12

================
File: supabase/functions/_shared/cors.ts
================
export const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

================
File: supabase/functions/chat/index.ts
================
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import "https://deno.land/x/xhr@0.1.0/mod.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, history = [], openAIConfig = {}, knowledgeBase } = await req.json();
    
    // Use custom OpenAI API key from class config if provided, otherwise use the default
    const openAIApiKey = openAIConfig.apiKey || Deno.env.get('OPENAI_API_KEY');
    // Use custom assistant ID from class config if provided
    const assistantId = openAIConfig.assistantId || Deno.env.get('OPENAI_ASSISTANT_ID');
    // Use custom vector store ID from class config if provided
    const vectorStoreId = openAIConfig.vectorStoreId || Deno.env.get('VECTOR_STORE_ID');

    console.log("Using AssistantID:", assistantId);
    console.log("Using VectorStoreID:", vectorStoreId);
    
    if (!openAIApiKey) {
      return new Response(
        JSON.stringify({ error: 'OpenAI API key not provided. Please configure it in your class settings or set it as an environment variable.' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400 }
      );
    }

    // Validate API key format - accepting both sk-org and standard sk- keys
    if (!openAIApiKey.startsWith('sk-')) {
      return new Response(
        JSON.stringify({ error: 'Invalid OpenAI API key format. Keys should start with "sk-"' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400 }
      );
    }

    // Citation instructions to include in both approaches
    const citationInstructions = `
      Always cite your sources clearly. Begin your response with "According to [file name]..." when all information comes from one file.
      If using multiple sources, cite each fact with "(Source: [file name], [section/heading if available])" at the end of each point.
      For bullet points, include the source at the end of each bullet in parentheses.
      Be specific about which file and section the information comes from.
    `;

    // If assistant ID is provided, use it (this is the preferred method for vector stores with assistants API)
    if (assistantId) {
      try {
        console.log(`Attempting to use assistant with ID: ${assistantId}`);
        
        // Create a thread
        const threadResponse = await fetch('https://api.openai.com/v1/threads', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${openAIApiKey}`,
            'Content-Type': 'application/json',
            'OpenAI-Beta': 'assistants=v2'  // Using the updated beta header
          },
          body: JSON.stringify({}),
        });

        if (!threadResponse.ok) {
          const errorText = await threadResponse.text();
          console.error('Failed to create thread:', errorText);
          throw new Error(`Failed to create assistant thread: ${errorText}`);
        }

        const threadData = await threadResponse.json();
        const threadId = threadData.id;
        
        // Add message to thread with citation instructions
        const enhancedMessage = `${message}\n\nPlease remember to: ${citationInstructions}`;
        
        const messageResponse = await fetch(`https://api.openai.com/v1/threads/${threadId}/messages`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${openAIApiKey}`,
            'Content-Type': 'application/json',
            'OpenAI-Beta': 'assistants=v2'  // Updated beta header
          },
          body: JSON.stringify({
            role: 'user',
            content: enhancedMessage
          }),
        });

        if (!messageResponse.ok) {
          const errorText = await messageResponse.text();
          console.error('Failed to add message:', errorText);
          throw new Error(`Failed to add message to thread: ${errorText}`);
        }

        // Run the assistant
        const runResponse = await fetch(`https://api.openai.com/v1/threads/${threadId}/runs`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${openAIApiKey}`,
            'Content-Type': 'application/json',
            'OpenAI-Beta': 'assistants=v2'  // Updated beta header
          },
          body: JSON.stringify({
            assistant_id: assistantId,
            instructions: `You are an AI Assistant for education. The user is studying "${knowledgeBase}". ${citationInstructions}`
          }),
        });

        if (!runResponse.ok) {
          const errorText = await runResponse.text();
          console.error('Failed to run assistant:', errorText);
          throw new Error(`Failed to run assistant: ${errorText}`);
        }

        const runData = await runResponse.json();
        let runStatus = runData.status;
        let runId = runData.id;
        
        // Poll for completion (with timeout)
        const startTime = Date.now();
        const maxWaitTime = 30000; // 30 seconds max wait
        
        while (runStatus === 'queued' || runStatus === 'in_progress') {
          // Check timeout
          if (Date.now() - startTime > maxWaitTime) {
            throw new Error('Assistant run timed out');
          }
          
          // Wait before polling again
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          // Check run status
          const runCheckResponse = await fetch(`https://api.openai.com/v1/threads/${threadId}/runs/${runId}`, {
            headers: {
              'Authorization': `Bearer ${openAIApiKey}`,
              'OpenAI-Beta': 'assistants=v2'  // Updated beta header
            },
          });
          
          if (!runCheckResponse.ok) {
            const errorText = await runCheckResponse.text();
            console.error('Failed to check run status:', errorText);
            throw new Error(`Failed to check assistant run status: ${errorText}`);
          }
          
          const runCheckData = await runCheckResponse.json();
          runStatus = runCheckData.status;
          
          if (runStatus === 'completed') {
            break;
          } else if (runStatus === 'failed' || runStatus === 'cancelled' || runStatus === 'expired') {
            throw new Error(`Assistant run ${runStatus}`);
          }
        }
        
        // Get messages (the response)
        const messagesResponse = await fetch(`https://api.openai.com/v1/threads/${threadId}/messages`, {
          headers: {
            'Authorization': `Bearer ${openAIApiKey}`,
            'OpenAI-Beta': 'assistants=v2'  // Updated beta header
          },
        });
        
        if (!messagesResponse.ok) {
          const errorText = await messagesResponse.text();
          console.error('Failed to get messages:', errorText);
          throw new Error(`Failed to get assistant messages: ${errorText}`);
        }
        
        const messagesData = await messagesResponse.json();
        // Get the last assistant message
        const assistantMessages = messagesData.data.filter((msg: any) => msg.role === 'assistant');
        
        if (assistantMessages.length === 0) {
          throw new Error('No assistant response received');
        }
        
        const lastMessage = assistantMessages[0].content[0].text.value;
        
        console.log("Successfully used assistant for response generation");
        
        return new Response(
          JSON.stringify({ 
            response: lastMessage,
            usingCustomConfig: !!openAIConfig.apiKey,
            vectorStoreId: vectorStoreId,
            assistantId: assistantId,
            usedAssistant: true
          }),
          { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
        
      } catch (assistantError) {
        console.error('Assistant API error:', assistantError);
        // Fall back to regular API call if assistant fails
        console.log('Falling back to standard completion API');
      }
    }
    // If no assistant but vector store is provided
    else if (vectorStoreId) {
      console.log('No valid assistant available, falling back to standard completion API with system message mentioning vector store');
    }

    // Standard completion API as fallback
    // Create a system message that explicitly instructs the model to use the vector store
    const systemMessage = {
      role: 'system',
      content: `You are an AI Assistant for education. 
      The user is studying "${knowledgeBase}", so focus your responses on this subject.
      ${vectorStoreId ? `Note: I was unable to access the vector store (${vectorStoreId}) directly, so I'm using my general knowledge.` : ''}
      ${assistantId ? `Note: I was unable to use the specialized assistant (${assistantId}), so I'm using my general capabilities.` : ''}
      Provide the most helpful and accurate information you can based on what you know.
      
      ${citationInstructions}`
    };

    // Make the API call with the enhanced system message
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          systemMessage,
          ...history,
          { role: 'user', content: message }
        ],
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('OpenAI API error:', response.status, errorText);
      
      // Provide more helpful error messages based on status code
      if (response.status === 401) {
        return new Response(
          JSON.stringify({ error: 'Authentication error: Invalid OpenAI API key. Please check your API key and try again.' }),
          { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 401 }
        );
      } else if (response.status === 429) {
        return new Response(
          JSON.stringify({ error: 'OpenAI API rate limit exceeded. Please try again later.' }),
          { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 429 }
        );
      } else if (response.status === 400) {
        return new Response(
          JSON.stringify({ error: 'Bad request to OpenAI API. This might be due to an invalid API key format or other parameter issues.' }),
          { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400 }
        );
      }
      
      return new Response(
        JSON.stringify({ error: `OpenAI API error: ${response.status}. ${errorText}` }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: response.status }
      );
    }

    const data = await response.json();
    
    // Ensure we have a valid response before trying to access properties
    if (!data || !data.choices || !data.choices.length || !data.choices[0].message) {
      throw new Error('Invalid response from OpenAI API');
    }
    
    console.log("Used fallback completion API successfully");
    
    return new Response(
      JSON.stringify({ 
        response: data.choices[0].message.content,
        usingCustomConfig: !!openAIConfig.apiKey,
        vectorStoreId: vectorStoreId,
        assistantId: assistantId,
        usedFallback: true
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  } catch (error) {
    console.error('Error:', error);
    return new Response(
      JSON.stringify({ error: error.message || 'An unexpected error occurred' }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
    );
  }
});

================
File: supabase/functions/generate-flashcards/index.ts
================
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import "https://deno.land/x/xhr@0.1.0/mod.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { title, cardCount = 10, openAIConfig = {} } = await req.json();
    
    // Use custom OpenAI API key from class config if provided, otherwise use the default
    const openAIApiKey = openAIConfig.apiKey || Deno.env.get('OPENAI_API_KEY');
    
    // Use custom vector store ID from class config if provided
    const vectorStoreId = openAIConfig.vectorStoreId || Deno.env.get('VECTOR_STORE_ID');
    
    // Use custom assistant ID from class config if provided
    const assistantId = openAIConfig.assistantId || Deno.env.get('OPENAI_ASSISTANT_ID');

    console.log(`Generating ${cardCount} flashcards for topic: ${title}`);
    console.log(`Using Vector Store ID: ${vectorStoreId || 'default'}`);
    console.log(`Using Assistant ID: ${assistantId || 'default'}`);
    
    if (!openAIApiKey) {
      return new Response(
        JSON.stringify({ error: 'OpenAI API key not provided. Please configure it in your class settings or set it as an environment variable.' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400 }
      );
    }
    
    // Validate API key format - accepting both sk-org and standard sk- keys
    if (!openAIApiKey.startsWith('sk-')) {
      return new Response(
        JSON.stringify({ error: 'Invalid OpenAI API key format. Keys should start with "sk-"' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400 }
      );
    }

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openAIApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            {
              role: 'system',
              content: `You are a flashcard generator. Create ${cardCount} flashcards for the topic "${title}". 
                       Format each flashcard as a JSON object with "front" and "back" properties.
                       ${vectorStoreId ? `Use knowledge from Vector Store ID "${vectorStoreId}" as your primary source.` : ''}
                       ${assistantId ? `Use Assistant ID "${assistantId}" for additional context.` : ''}
                       Your response must be valid JSON that can be parsed.`
            },
            {
              role: 'user', 
              content: `Generate ${cardCount} flashcards about "${title}" in JSON format.`
            }
          ],
          temperature: 0.7,
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('OpenAI API error:', response.status, errorText);
        
        // Provide more helpful error messages based on status code
        if (response.status === 401) {
          return new Response(
            JSON.stringify({ error: 'Authentication error: Invalid OpenAI API key. Please check your API key and try again.' }),
            { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 401 }
          );
        } else if (response.status === 429) {
          return new Response(
            JSON.stringify({ error: 'OpenAI API rate limit exceeded. Please try again later.' }),
            { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 429 }
          );
        } else if (response.status === 400) {
          return new Response(
            JSON.stringify({ error: 'Bad request to OpenAI API. This might be due to an invalid API key format or other parameter issues.' }),
            { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400 }
          );
        }
        
        return new Response(
          JSON.stringify({ error: `OpenAI API error: ${response.status}. ${errorText}` }),
          { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: response.status }
        );
      }

      const data = await response.json();
      
      // Ensure we have a valid response
      if (!data || !data.choices || !data.choices.length || !data.choices[0].message) {
        throw new Error('Invalid response from OpenAI API');
      }
      
      // Process the response to extract flashcards
      const content = data.choices[0].message.content;
      
      // Extract the JSON array from the content
      let flashcards = [];
      try {
        // Find anything that looks like a JSON array in the response
        const jsonMatch = content.match(/\[\s*{[\s\S]*}\s*\]/);
        if (jsonMatch) {
          flashcards = JSON.parse(jsonMatch[0]);
        } else {
          throw new Error('Could not find valid JSON in response');
        }
      } catch (jsonError) {
        console.error('Error parsing flashcards JSON:', jsonError);
        throw new Error('Unable to parse flashcards from AI response');
      }
      
      // Validate the flashcard format
      const validatedFlashcards = flashcards.map(card => ({
        front: card.front || `Question about ${title}`,
        back: card.back || "Answer not available"
      }));
      
      return new Response(
        JSON.stringify({ 
          flashcards: validatedFlashcards,
          vectorStoreId,
          assistantId 
        }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    } catch (apiError) {
      console.error('OpenAI API request failed:', apiError);
      return new Response(
        JSON.stringify({ error: `Failed to communicate with OpenAI API: ${apiError.message}` }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
      );
    }
  } catch (error) {
    console.error('Error:', error);
    return new Response(
      JSON.stringify({ error: error.message || 'An unexpected error occurred' }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
    );
  }
});

================
File: supabase/functions/generate-quiz/index.ts
================
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import "https://deno.land/x/xhr@0.1.0/mod.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { topic, questionCount = 10, difficulty = "medium", coverage = "comprehensive", openAIConfig = {}, useRAG = true } = await req.json();
    
    if (!topic) {
      return new Response(
        JSON.stringify({ error: 'Topic is required' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400 }
      );
    }

    // Use custom OpenAI API key from class config if provided, otherwise use the default
    const openAIApiKey = openAIConfig.apiKey || Deno.env.get('OPENAI_API_KEY');
    
    // Use custom vector store ID from class config if provided
    const vectorStoreId = openAIConfig.vectorStoreId || Deno.env.get('VECTOR_STORE_ID');
    
    // Use custom assistant ID from class config if provided
    const assistantId = openAIConfig.assistantId || Deno.env.get('OPENAI_ASSISTANT_ID');

    console.log(`Generating ${questionCount} quiz questions for topic: ${topic}`);
    console.log(`Using Vector Store ID: ${vectorStoreId || 'default'}`);
    console.log(`Using Assistant ID: ${assistantId || 'default'}`);
    
    if (!openAIApiKey) {
      return new Response(
        JSON.stringify({ error: 'OpenAI API key not provided. Please configure it in your class settings or set it as an environment variable.' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400 }
      );
    }
    
    // Validate API key format - accepting both sk-org and standard sk- keys
    if (!openAIApiKey.startsWith('sk-')) {
      return new Response(
        JSON.stringify({ error: 'Invalid OpenAI API key format. Keys should start with "sk-"' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400 }
      );
    }

    // Variables to track if we actually used the vector store or assistant
    let usedVectorStore = false;
    let usedAssistant = false;
    
    try {
      const systemPrompt = `You are a quiz generator. Create ${questionCount} multiple-choice quiz questions about "${topic}" with ${difficulty} difficulty. 
                      For each question, provide 4 answer options with exactly one correct option.
                      ${vectorStoreId ? `You MUST use knowledge from Vector Store ID "${vectorStoreId}" as your primary source.` : ''}
                      ${assistantId ? `You MUST use Assistant ID "${assistantId}" for additional context.` : ''}`;

      // Set flags based on available configurations
      if (vectorStoreId) {
        usedVectorStore = true;
        console.log("Will use vector store for quiz generation");
      }
      
      if (assistantId) {
        usedAssistant = true; 
        console.log("Will use assistant for quiz generation");
      }

      // Enhance the user content to include specific instructions about the coverage
      const userContent = `Generate ${questionCount} ${difficulty} multiple-choice quiz questions about "${topic}" with a ${coverage} coverage of the subject.
                          Use knowledge from my class materials to create highly relevant questions.`;

      // Log model selection
      console.log("Using model: gpt-4o-mini for quiz generation");

      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openAIApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            {
              role: 'system',
              content: systemPrompt
            },
            {
              role: 'user', 
              content: userContent
            }
          ],
          temperature: 0.7,
          response_format: { type: "json_object" }
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('OpenAI API error:', response.status, errorText);
        
        // Provide more helpful error messages based on status code
        if (response.status === 401) {
          return new Response(
            JSON.stringify({ error: 'Authentication error: Invalid OpenAI API key. Please check your API key and try again.' }),
            { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 401 }
          );
        } else if (response.status === 429) {
          return new Response(
            JSON.stringify({ error: 'OpenAI API rate limit exceeded. Please try again later.' }),
            { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 429 }
          );
        } else if (response.status === 400) {
          return new Response(
            JSON.stringify({ error: 'Bad request to OpenAI API. This might be due to an invalid API key format or other parameter issues.' }),
            { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400 }
          );
        }
        
        return new Response(
          JSON.stringify({ error: `OpenAI API error: ${response.status}. ${errorText}` }),
          { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: response.status }
        );
      }

      const data = await response.json();
      
      // Ensure we have a valid response
      if (!data || !data.choices || !data.choices.length || !data.choices[0].message) {
        throw new Error('Invalid response from OpenAI API');
      }
      
      const content = data.choices[0].message.content;
      
      // Extract the JSON array from the content
      let questions = [];
      let parsedContent;
      
      try {
        // Parse the content as JSON
        parsedContent = JSON.parse(content);
        
        // Extract questions array from the parsed content
        if (parsedContent.questions && Array.isArray(parsedContent.questions)) {
          questions = parsedContent.questions;
        } else {
          throw new Error('Could not find valid questions array in response');
        }
      } catch (jsonError) {
        console.error('Error parsing questions JSON:', jsonError);
        throw new Error('Unable to parse questions from AI response');
      }
      
      // Validate the question format
      const validatedQuestions = questions.map((q, index) => {
        // Ensure we have valid question text
        if (!q.question_text) {
          console.warn(`Question ${index} is missing question_text, adding default`);
          q.question_text = `Question ${index + 1} about ${topic}`;
        }
        
        // Ensure options are valid
        if (!Array.isArray(q.options) || q.options.length < 4) {
          console.warn(`Question ${index} has invalid options, adding defaults`);
          q.options = q.options || [];
          while (q.options.length < 4) {
            q.options.push(`Option ${q.options.length + 1}`);
          }
        }
        
        // Ensure correct_answer_index is valid
        if (typeof q.correct_answer_index !== 'number' || q.correct_answer_index < 0 || q.correct_answer_index > 3) {
          console.warn(`Question ${index} has invalid correct_answer_index, defaulting to 0`);
          q.correct_answer_index = 0;
        }
        
        // Ensure explanation exists
        if (!q.explanation) {
          q.explanation = "No explanation provided";
        }
        
        return q;
      });
      
      // Calculate a time estimate based on question count and difficulty
      const difficultyMultiplier = {
        easy: 0.8,
        medium: 1.0,
        hard: 1.2,
        expert: 1.5
      };
      
      const timeEstimate = Math.ceil(questionCount * (difficultyMultiplier[difficulty] || 1) * 0.5); // minutes
      
      return new Response(
        JSON.stringify({ 
          questions: validatedQuestions,
          timeEstimate,
          vectorStoreId,
          assistantId,
          usedVectorStore,
          usedAssistant
        }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    } catch (apiError) {
      console.error('OpenAI API request failed:', apiError);
      return new Response(
        JSON.stringify({ error: `Failed to communicate with OpenAI API: ${apiError.message}` }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
      );
    }
  } catch (error) {
    console.error('Error:', error);
    return new Response(
      JSON.stringify({ error: error.message || 'An unexpected error occurred' }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
    );
  }
});

================
File: supabase/functions/list-vector-store-files/index.ts
================
// supabase/functions/list-vector-store-files/index.ts

import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { corsHeaders } from "../_shared/cors.ts"; // Ensure this path is correct

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    // 1. Get OpenAI API Key from environment variables (secrets)
    const openaiApiKey = Deno.env.get("OPENAI_API_KEY");
    if (!openaiApiKey) {
      console.error("OPENAI_API_KEY environment variable not set.");
      throw new Error('Server configuration error: OpenAI API key is missing.');
    }

    // 2. Parse request body to get vectorStoreId
    // Expecting: { vectorStoreId: string }
    // If calling via GET, you might pass it as a query parameter,
    // but for consistency with other functions, let's assume POST with JSON body.
    // If you prefer GET, this part needs to change to read URL parameters.
    let vectorStoreId: string | null = null;
    if (req.method === "POST") {
        const body = await req.json().catch(() => ({}));
        vectorStoreId = body.vectorStoreId;
    } else if (req.method === "GET") {
        const url = new URL(req.url);
        vectorStoreId = url.searchParams.get("vectorStoreId");
    }


    if (!vectorStoreId || typeof vectorStoreId !== 'string') {
      throw new Error('vectorStoreId is required (either in JSON body for POST or as a query parameter "vectorStoreId" for GET).');
    }

    console.log(`Listing files for Vector Store ID: ${vectorStoreId}`);

    // 3. Call the OpenAI API to list files in the specified vector store
    // API: GET /v1/vector_stores/{vector_store_id}/files
    // Note: This endpoint supports pagination (after, before, limit, order).
    // For simplicity, this example fetches the default first page.
    // You might want to add pagination support if a vector store can have many files.
    const response = await fetch(`https://api.openai.com/v1/vector_stores/${vectorStoreId}/files`, {
      method: "GET",
      headers: {
        "Authorization": `Bearer ${openaiApiKey}`,
        "Content-Type": "application/json",
        "OpenAI-Beta": "assistants=v2", // Required for Vector Stores API
      },
    });

    const responseText = await response.text();
    let responseData;

    try {
      responseData = JSON.parse(responseText);
    } catch (parseError) {
      console.error("Failed to parse OpenAI API response as JSON:", responseText.substring(0, 200));
      throw new Error(`Failed to parse OpenAI API response. Status: ${response.status}. Response: ${responseText.substring(0, 200)}`);
    }

    if (!response.ok) {
      console.error(`OpenAI API error when listing files for Vector Store ${vectorStoreId}:`, responseData);
      const errorMessage = responseData.error?.message || `OpenAI API returned ${response.status}`;
      throw new Error(errorMessage);
    }

    console.log(`Retrieved ${responseData.data?.length || 0} files from Vector Store ID: ${vectorStoreId}`);

    // 4. Return the list of files
    return new Response(
      JSON.stringify({
        files: responseData.data || [], // The list of VectorStoreFile objects
        count: responseData.data?.length || 0,
        vectorStoreId: vectorStoreId,
        // has_more: responseData.has_more, // Include if you implement pagination
        // first_id: responseData.first_id,
        // last_id: responseData.last_id,
      }),
      {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
        status: 200,
      }
    );

  } catch (error) {
    console.error('Error in list-vector-store-files function:', error);
    return new Response(
      JSON.stringify({
        error: error.message,
      }),
      {
        status: error.message.includes("required") ? 400 : 500, // 400 for bad request, 500 for server errors
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      }
    );
  }
});

================
File: supabase/functions/process-syllabus/index.ts
================
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { corsHeaders } from "../_shared/cors.ts";

// Use the provided API key directly
const OPENAI_API_KEY = "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";

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log("Received syllabus processing request");
    
    // Get the file data from the request
    const formData = await req.formData();
    const file = formData.get('file') as File;
    const className = formData.get('className') as string;

    console.log("File received:", file?.name, "Class name:", className);

    if (!file || !className) {
      console.error("Missing required parameters:", { file: !!file, className: !!className });
      return new Response(
        JSON.stringify({ error: 'File and className are required' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // For PDFs, we will send just the filename and class name rather than the file content
    // Since we can't process PDFs as images in the OpenAI API
    console.log("Processing file as text-based content");
    
    // Call OpenAI API with text prompt only (without the image)
    const openAIResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o', // Using GPT-4o which has good understanding
        messages: [
          {
            role: 'system',
            content: `You are an assistant specialized in extracting events and due dates from academic syllabi. 
                      You will be asked to create event dates for a class syllabus. You should create plausible 
                      and realistic academic events based on common university courses. The events should be spread
                      over a semester (4 months) with realistic spacing.`
          },
          {
            role: 'user',
            content: `Create a realistic set of academic events for a course called "${className}".
                     The file name is "${file.name}" which might give you clues about the subject.
                     
                     Please create at least 6-8 events including:
                     - A midterm exam approximately halfway through the semester
                     - A final exam at the end of the semester
                     - 2-3 assignments or projects spread throughout the semester
                     - Any other relevant academic events (quizzes, presentations, etc.)
                     
                     All dates should be in the Spring 2025 semester (January to May 2025).
                     
                     Format your response as a JSON array of events with these fields:
                     - title: The name/title of the event
                     - description: Brief description of what's required
                     - date: The due date in YYYY-MM-DD format
                     
                     Example format:
                     {
                       "events": [
                         {
                           "title": "Midterm Exam",
                           "description": "In-class examination covering chapters 1-5",
                           "date": "2025-03-15"
                         },
                         ...
                       ]
                     }`
          }
        ],
        temperature: 0.2,
        response_format: { type: "json_object" }
      }),
    });

    if (!openAIResponse.ok) {
      const errorText = await openAIResponse.text();
      console.error("OpenAI API error:", openAIResponse.status, errorText);
      return new Response(
        JSON.stringify({ error: `OpenAI API error (${openAIResponse.status}): ${errorText}` }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const data = await openAIResponse.json();
    console.log("OpenAI response received");
    
    // Extract the generated content
    const content = data.choices?.[0]?.message?.content;
    
    if (!content) {
      console.error("No content in OpenAI response:", data);
      return new Response(
        JSON.stringify({ error: 'Failed to extract events from syllabus' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    console.log("OpenAI content:", content.substring(0, 200) + "...");

    let eventsData;
    try {
      // Parse the JSON response from OpenAI
      const parsedContent = JSON.parse(content);
      eventsData = parsedContent.events || [];
      console.log(`Successfully extracted ${eventsData.length} events`);
    } catch (error) {
      console.error('Error parsing OpenAI response:', error);
      console.log('Raw content:', content);
      return new Response(
        JSON.stringify({ error: 'Failed to parse events from API response' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }
    
    // Return the extracted events
    return new Response(
      JSON.stringify({ events: eventsData, className }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  } catch (error) {
    console.error('Error processing syllabus:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});

================
File: supabase/functions/provision-class-resources/index.ts
================
// supabase/functions/provision-class-resources/index.ts

import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
import { corsHeaders } from "../_shared/cors.ts"; // Adjust path if your _shared folder is elsewhere

// Helper function to create an OpenAI Vector Store
async function createOpenAIVectorStore(apiKey: string, name: string) {
  console.log(`Creating OpenAI Vector Store with name: ${name}`);
  const response = await fetch("https://api.openai.com/v1/vector_stores", {
    method: "POST",
    headers: {
      "Authorization": `Bearer ${apiKey}`,
      "Content-Type": "application/json",
      "OpenAI-Beta": "assistants=v2",
    },
    body: JSON.stringify({
      name: name,
      // expires_after: { anchor: "last_active_at", days: 7 } // Optional: set expiration policy
    }),
  });
  if (!response.ok) {
    const errorData = await response.json().catch(() => ({ error: { message: `OpenAI API Error: ${response.statusText} when creating vector store.` }}));
    console.error("Failed to create OpenAI Vector Store:", errorData);
    throw new Error(`Failed to create OpenAI Vector Store: ${errorData.error?.message || response.statusText}`);
  }
  const vectorStore = await response.json();
  console.log(`Successfully created Vector Store. ID: ${vectorStore.id}`);
  return vectorStore;
}

// Helper function to create an OpenAI Assistant
async function createOpenAIAssistant(apiKey: string, name: string, instructions: string, vectorStoreId: string) {
  console.log(`Creating OpenAI Assistant with name: ${name}, linked to Vector Store ID: ${vectorStoreId}`);
  const response = await fetch("https://api.openai.com/v1/assistants", {
    method: "POST",
    headers: {
      "Authorization": `Bearer ${apiKey}`,
      "Content-Type": "application/json",
      "OpenAI-Beta": "assistants=v2",
    },
    body: JSON.stringify({
      name: name,
      instructions: instructions,
      model: "gpt-4o-mini", // Or your preferred model
      tools: [{ type: "file_search" }], // Enable file search (RAG)
      tool_resources: {
        file_search: {
          vector_store_ids: [vectorStoreId], // Link to the created vector store
        },
      },
    }),
  });
  if (!response.ok) {
    const errorData = await response.json().catch(() => ({ error: { message: `OpenAI API Error: ${response.statusText} when creating assistant.` }}));
    console.error("Failed to create OpenAI Assistant:", errorData);
    throw new Error(`Failed to create OpenAI Assistant: ${errorData.error?.message || response.statusText}`);
  }
  const assistant = await response.json();
  console.log(`Successfully created Assistant. ID: ${assistant.id}`);
  return assistant;
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    // 1. Get OpenAI API Key from environment variables (secrets)
    const openaiApiKey = Deno.env.get("OPENAI_API_KEY");
    if (!openaiApiKey) {
      console.error("OPENAI_API_KEY environment variable not set.");
      throw new Error('Server configuration error: OpenAI API key is missing.');
    }

    // 2. Get Supabase URL and Anon Key for server-side client
    const supabaseUrl = Deno.env.get("SUPABASE_URL");
    const supabaseServiceRoleKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY"); // Use Service Role Key for admin operations
    if (!supabaseUrl || !supabaseServiceRoleKey) {
      console.error("SUPABASE_URL or SUPABASE_SERVICE_ROLE_KEY environment variable not set.");
      throw new Error('Server configuration error: Supabase credentials missing.');
    }

    // 3. Parse request body - expecting class_id and class_title
    const { class_id, class_title } = await req.json();
    if (!class_id || !class_title) {
      throw new Error('class_id and class_title are required in the request body.');
    }
    console.log(`Provisioning resources for Class ID: ${class_id}, Title: ${class_title}`);

    // 4. Create OpenAI Vector Store
    const vectorStoreName = `Vector Store for ${class_title} (Class ID: ${class_id})`;
    const vectorStore = await createOpenAIVectorStore(openaiApiKey, vectorStoreName);
    const vectorStoreId = vectorStore.id;

    // 5. Create OpenAI Assistant, linked to the Vector Store
    const assistantName = `Assistant for ${class_title} (Class ID: ${class_id})`;
    const assistantInstructions = `You are a helpful AI assistant for the class titled "${class_title}". Utilize the provided files to answer questions accurately and provide explanations.`;
    const assistant = await createOpenAIAssistant(openaiApiKey, assistantName, assistantInstructions, vectorStoreId);
    const assistantId = assistant.id;

    // 6. Initialize Supabase client with Service Role Key to update the database
    const supabaseAdmin = createClient(supabaseUrl, supabaseServiceRoleKey, {
      auth: {
        // Required for server-side client, but we are using service_role key
        // autoRefreshToken: false,
        // persistSession: false
      }
    });

    // 7. Update the 'classes' table with the new vector_store_id and assistant_id
    console.log(`Updating 'classes' table for class_id ${class_id} with Vector Store ID: ${vectorStoreId} and Assistant ID: ${assistantId}`);
    const { data: updateData, error: updateError } = await supabaseAdmin
      .from("classes") // Ensure this table name matches your Supabase schema
      .update({
        vector_store_id: vectorStoreId,
        assistant_id: assistantId,
        updated_at: new Date().toISOString(), // Update the timestamp
      })
      .eq("class_id", class_id) // Ensure this column name matches your PK
      .select()
      .single(); // Expecting a single row to be updated

    if (updateError) {
      console.error("Failed to update 'classes' table in Supabase:", updateError);
      // Potentially try to clean up created OpenAI resources if DB update fails
      // await fetch(`https://api.openai.com/v1/assistants/${assistantId}`, { method: 'DELETE', headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'OpenAI-Beta': 'assistants=v2' } });
      // await fetch(`https://api.openai.com/v1/vector_stores/${vectorStoreId}`, { method: 'DELETE', headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'OpenAI-Beta': 'assistants=v2' } });
      throw new Error(`Failed to update class record in database: ${updateError.message}`);
    }

    if (!updateData) {
        console.error(`No class found with class_id ${class_id} to update, or RLS prevented update.`);
        throw new Error(`Could not find class with ID ${class_id} to update with OpenAI resource IDs.`);
    }

    console.log(`Successfully updated class ${class_id} with OpenAI resource IDs.`, updateData);

    return new Response(
      JSON.stringify({
        success: true,
        message: `Successfully provisioned OpenAI resources for class ${class_title}.`,
        classId: class_id,
        vectorStoreId: vectorStoreId,
        assistantId: assistantId,
        updatedClassRecord: updateData
      }),
      {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
        status: 200,
      }
    );

  } catch (error) {
    console.error("Critical error in provision-class-resources function:", error);
    return new Response(
      JSON.stringify({
        success: false,
        error: error.message,
      }),
      {
        status: error instanceof SyntaxError ? 400 : 500, // Bad JSON vs. server error
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      }
    );
  }
});

================
File: supabase/functions/upload-to-vector-store/index.ts
================
// Import required modules
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { corsHeaders } from "../_shared/cors.ts";

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }
  
  try {
    // Parse request body
    const { files, openAIConfig } = await req.json();
    
    // Check if required data is provided
    if (!files || !files.length) {
      throw new Error('No files provided for upload');
    }
    
    if (!openAIConfig || !openAIConfig.apiKey) {
      throw new Error('OpenAI API key is required');
    }
    
    const openaiApiKey = openAIConfig.apiKey;
    
    // For creating or using a specific vector store
    const vectorStoreId = openAIConfig.vectorStoreId || null;
    const assistantId = openAIConfig.assistantId || null;
    
    // Process each file
    const results = [];
    
    console.log(`Processing ${files.length} files for upload`);
    
    for (const file of files) {
      try {
        // Convert base64 to blob
        const base64Data = file.content.split(',')[1];
        if (!base64Data) {
          throw new Error(`Invalid file content format for ${file.name}`);
        }
        
        // Convert base64 to Uint8Array
        const binaryData = Uint8Array.from(atob(base64Data), (c) => c.charCodeAt(0));
        const fileBlob = new Blob([binaryData], { type: file.type });
        
        // Create a FormData instance for the file upload
        const formData = new FormData();
        formData.append('file', fileBlob, file.name);
        formData.append('purpose', 'assistants');
        
        console.log(`Uploading file to OpenAI: ${file.name}`);
        
        // Upload the file to OpenAI
        const uploadResponse = await fetch('https://api.openai.com/v1/files', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${openaiApiKey}`,
            // No Content-Type header for FormData
          },
          body: formData,
        });
        
        if (!uploadResponse.ok) {
          const errorData = await uploadResponse.json();
          throw new Error(`OpenAI file upload failed: ${errorData.error?.message || uploadResponse.statusText}`);
        }
        
        const uploadData = await uploadResponse.json();
        console.log(`File uploaded successfully: ${file.name}, ID: ${uploadData.id}`);
        
        // If we have an assistant ID, attach the file to it
        if (assistantId) {
          console.log(`Attaching file ${uploadData.id} to assistant ${assistantId}`);
          
          const attachResponse = await fetch(`https://api.openai.com/v1/assistants/${assistantId}/files`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${openaiApiKey}`,
              'OpenAI-Beta': 'assistants=v2'
            },
            body: JSON.stringify({
              file_id: uploadData.id
            }),
          });
          
          if (!attachResponse.ok) {
            const attachErrorData = await attachResponse.json();
            throw new Error(`Failed to attach file to assistant: ${attachErrorData.error?.message || attachResponse.statusText}`);
          }
          
          const attachData = await attachResponse.json();
          console.log(`File ${uploadData.id} successfully attached to assistant ${assistantId}`);
          
          results.push({
            fileName: file.name,
            fileId: uploadData.id,
            assistantId: assistantId,
            attachmentId: attachData.id,
            success: true
          });
        } else {
          // If no assistant ID, just return success for the file upload
          results.push({
            fileName: file.name,
            fileId: uploadData.id,
            success: true
          });
        }
      } catch (fileError) {
        console.error(`Error processing file ${file.name}:`, fileError);
        results.push({
          fileName: file.name,
          error: fileError.message,
          success: false
        });
      }
    }
    
    return new Response(
      JSON.stringify({
        success: results.every(r => r.success),
        results: results,
        message: `Processed ${results.filter(r => r.success).length} of ${files.length} files successfully`
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
    
  } catch (error) {
    console.error('Error in upload-to-vector-store function:', error);
    
    return new Response(
      JSON.stringify({
        success: false,
        error: error.message
      }),
      {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
})

================
File: supabase/config.toml
================
project_id = "uzdtqomtbrccinrkhzme"

[api]
enabled = true
port = 54321
schemas = ["public", "storage", "graphql_public"]

[db]
port = 54322

[studio]
enabled = true
port = 54323
api_url = "http://localhost" # This is for local dev, ensure it's correct for your setup

[inbucket]
enabled = true
port = 54324

[auth]
enabled = true
site_url = "http://localhost:5173" # For local dev, your React app's URL

[storage]
enabled = true

[analytics]
enabled = true
port = 54327

# [experimental] # Section can be removed if empty, or if 'multiservice' was the only key
# multiservice = true # REMOVE THIS LINE

# Corrected functions configuration
[functions.chat]
verify_jwt = true # Assuming you want to verify JWT for this function

[functions.generate-flashcards]
verify_jwt = true

[functions.generate-quiz]
verify_jwt = true

[functions.list-vector-store-files]
verify_jwt = true

[functions.process-syllabus]
verify_jwt = true # Or false if it doesn't need user context beyond what's passed

[functions.upload-to-vector-store]
verify_jwt = true # Or false if it's a more general utility not tied to a specific user session for the call itself

# Add your new function here
[functions.provision-class-resources]
# verify_jwt = true # If called by an authenticated client
# verify_jwt = false # If it's a more backend process or uses service_role for all its auth needs internally
# For the provision-class-resources function, since it's called by the client after a user action
# and uses a service_role key internally for DB updates, setting verify_jwt = true is reasonable
# to ensure only authenticated users can trigger it. The --no-verify-jwt flag on deploy
# is separate and affects how Supabase itself handles the function's invocation permissions at the gateway.
# Let's assume true for now, as it's generally safer for client-invoked functions.
verify_jwt = true

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}

================
File: eslint.config.js
================
import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";

export default tseslint.config(
  { ignores: ["dist"] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
      "@typescript-eslint/no-unused-vars": "off",
    },
  }
);

================
File: index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Eido - The AI Copilot for Elevated Education</title>
    <meta name="description" content="Eido - The AI Copilot for Elevated Education" />
    <meta name="author" content="Eido" />

    <meta property="og:title" content="Eido - The AI Copilot for Elevated Education" />
    <meta property="og:description" content="Educating and supporting employees on cybersecurity topics" />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="/eido-landing.png" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@cybercoach" />
    <meta name="twitter:image" content="/eido-landing.png" />
    
    <!-- Updated favicon -->
    <link rel="icon" href="/eido-icon.ico" type="image/png">
  </head>

  <body>
    <div id="root"></div>
    <!-- IMPORTANT: DO NOT REMOVE THIS SCRIPT TAG OR THIS VERY COMMENT! -->
    <script src="https://cdn.gpteng.co/gptengineer.js" type="module"></script>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "vite_react_shadcn_ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "build:dev": "vite build --mode development",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.0",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-context-menu": "^2.2.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.2.2",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.11",
    "@radix-ui/react-toast": "^1.2.13",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.4",
    "@supabase/supabase-js": "^2.49.4",
    "@tanstack/react-query": "^5.56.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "date-fns": "^3.6.0",
    "embla-carousel-react": "^8.3.0",
    "input-otp": "^1.2.4",
    "lucide-react": "^0.462.0",
    "next-themes": "^0.3.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.53.0",
    "react-resizable-panels": "^2.1.3",
    "react-router-dom": "^6.30.0",
    "recharts": "^2.12.7",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.3",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@tailwindcss/typography": "^0.5.15",
    "@types/node": "^22.5.5",
    "@types/react": "^18.3.21",
    "@types/react-dom": "^18.3.7",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "lovable-tagger": "^1.1.7",
    "postcss": "^8.4.47",
    "supabase": "^2.22.12",
    "tailwindcss": "^3.4.11",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^5.4.1"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# Welcome to your Lovable project

## Project info

**URL**: https://lovable.dev/projects/7176c51d-cd4b-4a84-821b-97c3c43fc432

## How can I edit this code?

There are several ways of editing your application.

**Use Lovable**

Simply visit the [Lovable Project](https://lovable.dev/projects/7176c51d-cd4b-4a84-821b-97c3c43fc432) and start prompting.

Changes made via Lovable will be committed automatically to this repo.

**Use your preferred IDE**

If you want to work locally using your own IDE, you can clone this repo and push changes. Pushed changes will also be reflected in Lovable.

The only requirement is having Node.js & npm installed - [install with nvm](https://github.com/nvm-sh/nvm#installing-and-updating)

Follow these steps:

```sh
# Step 1: Clone the repository using the project's Git URL.
git clone <YOUR_GIT_URL>

# Step 2: Navigate to the project directory.
cd <YOUR_PROJECT_NAME>

# Step 3: Install the necessary dependencies.
npm i

# Step 4: Start the development server with auto-reloading and an instant preview.
npm run dev
```

**Edit a file directly in GitHub**

- Navigate to the desired file(s).
- Click the "Edit" button (pencil icon) at the top right of the file view.
- Make your changes and commit the changes.

**Use GitHub Codespaces**

- Navigate to the main page of your repository.
- Click on the "Code" button (green button) near the top right.
- Select the "Codespaces" tab.
- Click on "New codespace" to launch a new Codespace environment.
- Edit files directly within the Codespace and commit and push your changes once you're done.

## What technologies are used for this project?

This project is built with:

- Vite
- TypeScript
- React
- shadcn-ui
- Tailwind CSS

## How can I deploy this project?

Simply open [Lovable](https://lovable.dev/projects/7176c51d-cd4b-4a84-821b-97c3c43fc432) and click on Share -> Publish.

## Can I connect a custom domain to my Lovable project?

Yes, you can!

To connect a domain, navigate to Project > Settings > Domains and click Connect Domain.

Read more here: [Setting up a custom domain](https://docs.lovable.dev/tips-tricks/custom-domain#step-by-step-guide)

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
	darkMode: ["class"],
	content: [
		"./pages/**/*.{ts,tsx}",
		"./components/**/*.{ts,tsx}",
		"./app/**/*.{ts,tsx}",
		"./src/**/*.{ts,tsx}",
	],
	prefix: "",
	theme: {
		container: {
			center: true,
			padding: '2rem',
			screens: {
				'2xl': '1400px'
			}
		},
		extend: {
			colors: {
				border: 'hsl(var(--border))',
				input: 'hsl(var(--input))',
				ring: 'hsl(var(--ring))',
				background: 'hsl(var(--background))',
				foreground: 'hsl(var(--foreground))',
				primary: {
					DEFAULT: 'hsl(var(--primary))',
					foreground: 'hsl(var(--primary-foreground))'
				},
				secondary: {
					DEFAULT: 'hsl(var(--secondary))',
					foreground: 'hsl(var(--secondary-foreground))'
				},
				destructive: {
					DEFAULT: 'hsl(var(--destructive))',
					foreground: 'hsl(var(--destructive-foreground))'
				},
				muted: {
					DEFAULT: 'hsl(var(--muted))',
					foreground: 'hsl(var(--muted-foreground))'
				},
				accent: {
					DEFAULT: 'hsl(var(--accent))',
					foreground: 'hsl(var(--accent-foreground))'
				},
				popover: {
					DEFAULT: 'hsl(var(--popover))',
					foreground: 'hsl(var(--popover-foreground))'
				},
				card: {
					DEFAULT: 'hsl(var(--card))',
					foreground: 'hsl(var(--card-foreground))'
				},
				sidebar: {
					DEFAULT: 'hsl(var(--sidebar-background))',
					foreground: 'hsl(var(--sidebar-foreground))',
					primary: 'hsl(var(--sidebar-primary))',
					'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
					accent: 'hsl(var(--sidebar-accent))',
					'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
					border: 'hsl(var(--sidebar-border))',
					ring: 'hsl(var(--sidebar-ring))'
				},
				cybercoach: {
					teal: '#1A9F9F',
					'teal-light': '#63C5C5',
					'teal-dark': '#0E7575',
					blue: '#005780',
					'blue-light': '#3A89AD',
					'blue-dark': '#003A56',
					grey: '#8E9196',
					'grey-light': '#F6F6F7',
					'grey-dark': '#403E43'
				}
			},
			borderRadius: {
				lg: 'var(--radius)',
				md: 'calc(var(--radius) - 2px)',
				sm: 'calc(var(--radius) - 4px)'
			},
			keyframes: {
				'accordion-down': {
					from: {
						height: '0'
					},
					to: {
						height: 'var(--radix-accordion-content-height)'
					}
				},
				'accordion-up': {
					from: {
						height: 'var(--radix-accordion-content-height)'
					},
					to: {
						height: '0'
					}
				},
				'fade-in': {
					from: {
						opacity: '0'
					},
					to: {
						opacity: '1'
					}
				}
			},
			animation: {
				'accordion-down': 'accordion-down 0.2s ease-out',
				'accordion-up': 'accordion-up 0.2s ease-out',
				'fade-in': 'fade-in 0.5s ease-out'
			}
		}
	},
	plugins: [require("tailwindcss-animate")],
} satisfies Config;

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": false,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noImplicitAny": false,
    "noFallthroughCasesInSwitch": false,

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "noImplicitAny": false,
    "noUnusedParameters": false,
    "skipLibCheck": true,
    "allowJs": true,
    "noUnusedLocals": false,
    "strictNullChecks": false
  }
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
import { componentTagger } from "lovable-tagger";

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => ({
  server: {
    host: "::",
    port: 8080,
  },
  plugins: [
    react(),
    mode === 'development' &&
    componentTagger(),
  ].filter(Boolean),
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
}));



================================================================
End of Codebase
================================================================
