This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
dist-extension/
  assets/
    background.js
    browser.js
    content.js
    popup.js
  extension/
    popup.html
  manifest.json
extension/
  components/
    AuthComponent.tsx
    ChatComponent.tsx
  public/
    manifest.json
  background.js
  content.js
  popup.html
  popup.tsx
  styles.css
public/
  placeholder.svg
  robots.txt
src/
  components/
    auth/
      Auth.tsx
      AuthGuard.tsx
      PasswordChangeForm.tsx
      UserProfile.tsx
    calendar/
      views/
        DayView.tsx
        MonthView.tsx
        TimeAxis.tsx
        WeekView.tsx
      AddEventDialog.tsx
      AddEventForm.tsx
      CalendarHeader.tsx
      CalendarSidebar.tsx
      CalendarViews.tsx
      DeleteRecurringEventDialog.tsx
      EventConfirmationDialog.tsx
      EventCreatorPopover.tsx
      MiniCalendar.tsx
      ProcessingLoader.tsx
      SyllabusUploadDialog.tsx
      types.ts
      ViewEventPopover.tsx
    chat/
      AttachedFilePill.tsx
      ChatMessage.tsx
      HighlightedText.tsx
      MarkdownRenderer.tsx
    classes/
      ClassCard.tsx
      ClassesHeader.tsx
      ClassesPageDialogs.tsx
      ClassesPageToasts.tsx
      ClassesView.tsx
      CreateClassDialog.tsx
      DeletionProgressToast.tsx
      FileGridCard.tsx
      FilePreview.tsx
      FilesView.tsx
      FolderCard.tsx
      NewFolderDialog.tsx
      UploadDialog.tsx
      UploadProgressToast.tsx
    dashboard/
      AssignmentsCard.tsx
      CommandBar.tsx
      DashboardCalendar.tsx
      DashboardSidebar.tsx
      OracleCard.tsx
      WelcomeBanner.tsx
    layout/
      sidebar/
        SidebarAccount.tsx
        SidebarHeader.tsx
        SidebarNavigation.tsx
        SidebarWidgets.tsx
      AppLayout.tsx
      AppSidebar.tsx
      Header.tsx
      MainAppLayout.tsx
      MainLayout.tsx
      OracleLayout.tsx
      PageHeader.tsx
    oracle/
      upload-panel/
        index.tsx
        MiniClassCard.tsx
        MiniFileCard.tsx
        MiniFolderCard.tsx
      ChatInput.tsx
      DocumentPreview.tsx
      DocumentViewer.tsx
      HistorySidebar.tsx
      PagePreview.tsx
      SourcesPanel.tsx
    ui/
      accordion.tsx
      alert-dialog.tsx
      alert.tsx
      aspect-ratio.tsx
      avatar.tsx
      badge.tsx
      breadcrumb.tsx
      button.tsx
      card.tsx
      carousel.tsx
      chart.tsx
      checkbox.tsx
      collapsible.tsx
      command.tsx
      ConfirmationDialog.tsx
      context-menu.tsx
      dialog.tsx
      drawer.tsx
      dropdown-menu.tsx
      form.tsx
      hover-card.tsx
      index.ts
      input-otp.tsx
      input.tsx
      label.tsx
      menubar.tsx
      navigation-menu.tsx
      pagination.tsx
      popover.tsx
      progress.tsx
      radio-group.tsx
      resizable.tsx
      scroll-area.tsx
      select.tsx
      separator.tsx
      sheet.tsx
      sidebar.tsx
      skeleton.tsx
      slider.tsx
      sonner.tsx
      switch.tsx
      table.tsx
      tabs.tsx
      textarea.tsx
      time-input.tsx
      toast.tsx
      toaster.tsx
      toggle-group.tsx
      toggle.tsx
      tooltip.tsx
      use-toast.ts
  context/
    AuthContext.tsx
    LoaderContext.tsx
  features/
    files/
      types.ts
  hooks/
    use-Debounce.ts
    use-mobile.tsx
    use-sidebar-state.ts
    use-toast.ts
    useCalendarData.ts
    useClassesPage.ts
    useOracle.ts
  integrations/
    supabase/
      client.ts
      types.ts
  lib/
    utils.ts
  pages/
    AuthPage.tsx
    CalendarPage.tsx
    ClassesPage.tsx
    DashboardPage.tsx
    NotFound.tsx
    OraclePage.tsx
    PlaceholderPage.tsx
    PrivacyPolicyPage.tsx
    ProfilePage.tsx
    TermsOfServicePage.tsx
  services/
    calendarEventService.ts
    chatMessageService.ts
    classOpenAIConfig.ts
    conversationService.ts
    fileService.ts
  types/
    oracle.ts
  App.css
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
supabase/
  .branches/
    _current_branch
  .temp/
    cli-latest
    gotrue-version
    pooler-url
    postgres-version
    project-ref
    rest-version
    storage-version
  functions/
    _shared/
      cors.ts
    check-env-vars/
      index.ts
    create-recurring-event/
      index.ts
    debug-weaviate-chunks/
      index.ts
    delete-from-cloudinary/
      index.ts
    delete-recurring-event/
      index.ts
    delete-user-account/
      index.ts
    delete-weaviate-chunks-by-file/
      index.ts
    generate-flashcards/
      index.ts
    generate-previews/
      index.ts
    generate-quiz/
      index.ts
    generate-title/
      index.ts
    hard-reset-weaviate-schema/
      index.ts
    inspect-weaviate-schema/
      index.ts
    oracle-chat/
      index.ts
    parse-syllabus/
      index.ts
    request-previews/
      index.ts
    semantic-search/
      index.ts
    serve-file/
      index.ts
    upload-file/
      index.ts
    upload-to-vector-store/
      index.ts
    import_map.json
  config.toml
.gitignore
components.json
eslint.config.js
index.html
package.json
postcss.config.js
README.md
tailwind.config.ts
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vercel.json
vite.config.extension.ts
vite.config.ts

================================================================
Files
================================================================

================
File: dist-extension/assets/background.js
================
chrome.runtime.onInstalled.addListener(()=>{console.log("Eido AI Oracle extension installed/updated.")});

================
File: dist-extension/assets/browser.js
================
import{g as e}from"./popup.js";var o=function(){throw new Error("ws does not work in the browser. Browser clients must use the native WebSocket object")};const r=e(o),s=Object.freeze(Object.defineProperty({__proto__:null,default:r},Symbol.toStringTag,{value:"Module"}));export{s as b};

================
File: dist-extension/assets/content.js
================
const o=document.createElement("div");o.id="eido-ai-container";o.style.position="fixed";o.style.zIndex="9998";document.body.appendChild(o);o.style.bottom="30px";o.style.right="30px";const e=document.createElement("button");e.id="eido-ai-fab";e.style.width="60px";e.style.height="60px";e.style.borderRadius="8px";e.style.backgroundColor="#75909C";e.style.border="none";e.style.boxShadow="0 4px 12px rgba(0,0,0,0.2)";e.style.cursor="pointer";e.style.zIndex="10000";e.style.display="flex";e.style.alignItems="center";e.style.justifyContent="center";e.style.transition="transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out, opacity 0.2s ease-in-out";e.setAttribute("aria-label","Open Eido AI Oracle");o.appendChild(e);const n=document.createElement("img");n.src=chrome.runtime.getURL("images/icon128.png");n.style.width="36px";n.style.height="36px";e.appendChild(n);const t=document.createElement("iframe");t.id="eido-ai-popup-frame";t.src=chrome.runtime.getURL("extension/popup.html");t.style.backgroundColor="#fff";t.style.width="400px";t.style.height="600px";t.style.border="1px solid #e5e7eb";t.style.borderRadius="8px";t.style.boxShadow="0 8px 24px rgba(0,0,0,0.2)";t.style.position="absolute";t.style.bottom="0px";t.style.right="0px";t.style.display="none";t.style.zIndex="9999";o.appendChild(t);function i(s){t.style.display=s?"block":"none",e.style.display=s?"none":"flex"}window.addEventListener("message",s=>{s.source===t.contentWindow&&s.data.type==="closeEidoPopup"&&i(!1)});e.addEventListener("click",s=>{s.stopPropagation(),i(!0)});

================
File: dist-extension/assets/popup.js
================
(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))r(i);new MutationObserver(i=>{for(const s of i)if(s.type==="childList")for(const o of s.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&r(o)}).observe(document,{childList:!0,subtree:!0});function n(i){const s={};return i.integrity&&(s.integrity=i.integrity),i.referrerPolicy&&(s.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?s.credentials="include":i.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function r(i){if(i.ep)return;i.ep=!0;const s=n(i);fetch(i.href,s)}})();var $e=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function nm(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function nf(e){if(e.__esModule)return e;var t=e.default;if(typeof t=="function"){var n=function r(){return this instanceof r?Reflect.construct(t,arguments,this.constructor):t.apply(this,arguments)};n.prototype=t.prototype}else n={};return Object.defineProperty(n,"__esModule",{value:!0}),Object.keys(e).forEach(function(r){var i=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(n,r,i.get?i:{enumerable:!0,get:function(){return e[r]}})}),n}var wu={exports:{}},Hi={},_u={exports:{}},L={};/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Or=Symbol.for("react.element"),rf=Symbol.for("react.portal"),sf=Symbol.for("react.fragment"),of=Symbol.for("react.strict_mode"),lf=Symbol.for("react.profiler"),af=Symbol.for("react.provider"),uf=Symbol.for("react.context"),cf=Symbol.for("react.forward_ref"),df=Symbol.for("react.suspense"),ff=Symbol.for("react.memo"),hf=Symbol.for("react.lazy"),Gl=Symbol.iterator;function pf(e){return e===null||typeof e!="object"?null:(e=Gl&&e[Gl]||e["@@iterator"],typeof e=="function"?e:null)}var ku={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},Su=Object.assign,Eu={};function Ln(e,t,n){this.props=e,this.context=t,this.refs=Eu,this.updater=n||ku}Ln.prototype.isReactComponent={};Ln.prototype.setState=function(e,t){if(typeof e!="object"&&typeof e!="function"&&e!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")};Ln.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};function xu(){}xu.prototype=Ln.prototype;function Go(e,t,n){this.props=e,this.context=t,this.refs=Eu,this.updater=n||ku}var Jo=Go.prototype=new xu;Jo.constructor=Go;Su(Jo,Ln.prototype);Jo.isPureReactComponent=!0;var Jl=Array.isArray,Cu=Object.prototype.hasOwnProperty,Yo={current:null},Pu={key:!0,ref:!0,__self:!0,__source:!0};function Tu(e,t,n){var r,i={},s=null,o=null;if(t!=null)for(r in t.ref!==void 0&&(o=t.ref),t.key!==void 0&&(s=""+t.key),t)Cu.call(t,r)&&!Pu.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(l===1)i.children=n;else if(1<l){for(var a=Array(l),u=0;u<l;u++)a[u]=arguments[u+2];i.children=a}if(e&&e.defaultProps)for(r in l=e.defaultProps,l)i[r]===void 0&&(i[r]=l[r]);return{$$typeof:Or,type:e,key:s,ref:o,props:i,_owner:Yo.current}}function gf(e,t){return{$$typeof:Or,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}function Xo(e){return typeof e=="object"&&e!==null&&e.$$typeof===Or}function vf(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,function(n){return t[n]})}var Yl=/\/+/g;function gs(e,t){return typeof e=="object"&&e!==null&&e.key!=null?vf(""+e.key):t.toString(36)}function si(e,t,n,r,i){var s=typeof e;(s==="undefined"||s==="boolean")&&(e=null);var o=!1;if(e===null)o=!0;else switch(s){case"string":case"number":o=!0;break;case"object":switch(e.$$typeof){case Or:case rf:o=!0}}if(o)return o=e,i=i(o),e=r===""?"."+gs(o,0):r,Jl(i)?(n="",e!=null&&(n=e.replace(Yl,"$&/")+"/"),si(i,t,n,"",function(u){return u})):i!=null&&(Xo(i)&&(i=gf(i,n+(!i.key||o&&o.key===i.key?"":(""+i.key).replace(Yl,"$&/")+"/")+e)),t.push(i)),1;if(o=0,r=r===""?".":r+":",Jl(e))for(var l=0;l<e.length;l++){s=e[l];var a=r+gs(s,l);o+=si(s,t,n,a,i)}else if(a=pf(e),typeof a=="function")for(e=a.call(e),l=0;!(s=e.next()).done;)s=s.value,a=r+gs(s,l++),o+=si(s,t,n,a,i);else if(s==="object")throw t=String(e),Error("Objects are not valid as a React child (found: "+(t==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return o}function Ur(e,t,n){if(e==null)return e;var r=[],i=0;return si(e,r,"","",function(s){return t.call(n,s,i++)}),r}function mf(e){if(e._status===-1){var t=e._result;t=t(),t.then(function(n){(e._status===0||e._status===-1)&&(e._status=1,e._result=n)},function(n){(e._status===0||e._status===-1)&&(e._status=2,e._result=n)}),e._status===-1&&(e._status=0,e._result=t)}if(e._status===1)return e._result.default;throw e._result}var de={current:null},oi={transition:null},yf={ReactCurrentDispatcher:de,ReactCurrentBatchConfig:oi,ReactCurrentOwner:Yo};function ju(){throw Error("act(...) is not supported in production builds of React.")}L.Children={map:Ur,forEach:function(e,t,n){Ur(e,function(){t.apply(this,arguments)},n)},count:function(e){var t=0;return Ur(e,function(){t++}),t},toArray:function(e){return Ur(e,function(t){return t})||[]},only:function(e){if(!Xo(e))throw Error("React.Children.only expected to receive a single React element child.");return e}};L.Component=Ln;L.Fragment=sf;L.Profiler=lf;L.PureComponent=Go;L.StrictMode=of;L.Suspense=df;L.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=yf;L.act=ju;L.cloneElement=function(e,t,n){if(e==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var r=Su({},e.props),i=e.key,s=e.ref,o=e._owner;if(t!=null){if(t.ref!==void 0&&(s=t.ref,o=Yo.current),t.key!==void 0&&(i=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(a in t)Cu.call(t,a)&&!Pu.hasOwnProperty(a)&&(r[a]=t[a]===void 0&&l!==void 0?l[a]:t[a])}var a=arguments.length-2;if(a===1)r.children=n;else if(1<a){l=Array(a);for(var u=0;u<a;u++)l[u]=arguments[u+2];r.children=l}return{$$typeof:Or,type:e.type,key:i,ref:s,props:r,_owner:o}};L.createContext=function(e){return e={$$typeof:uf,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},e.Provider={$$typeof:af,_context:e},e.Consumer=e};L.createElement=Tu;L.createFactory=function(e){var t=Tu.bind(null,e);return t.type=e,t};L.createRef=function(){return{current:null}};L.forwardRef=function(e){return{$$typeof:cf,render:e}};L.isValidElement=Xo;L.lazy=function(e){return{$$typeof:hf,_payload:{_status:-1,_result:e},_init:mf}};L.memo=function(e,t){return{$$typeof:ff,type:e,compare:t===void 0?null:t}};L.startTransition=function(e){var t=oi.transition;oi.transition={};try{e()}finally{oi.transition=t}};L.unstable_act=ju;L.useCallback=function(e,t){return de.current.useCallback(e,t)};L.useContext=function(e){return de.current.useContext(e)};L.useDebugValue=function(){};L.useDeferredValue=function(e){return de.current.useDeferredValue(e)};L.useEffect=function(e,t){return de.current.useEffect(e,t)};L.useId=function(){return de.current.useId()};L.useImperativeHandle=function(e,t,n){return de.current.useImperativeHandle(e,t,n)};L.useInsertionEffect=function(e,t){return de.current.useInsertionEffect(e,t)};L.useLayoutEffect=function(e,t){return de.current.useLayoutEffect(e,t)};L.useMemo=function(e,t){return de.current.useMemo(e,t)};L.useReducer=function(e,t,n){return de.current.useReducer(e,t,n)};L.useRef=function(e){return de.current.useRef(e)};L.useState=function(e){return de.current.useState(e)};L.useSyncExternalStore=function(e,t,n){return de.current.useSyncExternalStore(e,t,n)};L.useTransition=function(){return de.current.useTransition()};L.version="18.3.1";_u.exports=L;var be=_u.exports;/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var wf=be,_f=Symbol.for("react.element"),kf=Symbol.for("react.fragment"),Sf=Object.prototype.hasOwnProperty,Ef=wf.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,xf={key:!0,ref:!0,__self:!0,__source:!0};function Ou(e,t,n){var r,i={},s=null,o=null;n!==void 0&&(s=""+n),t.key!==void 0&&(s=""+t.key),t.ref!==void 0&&(o=t.ref);for(r in t)Sf.call(t,r)&&!xf.hasOwnProperty(r)&&(i[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps,t)i[r]===void 0&&(i[r]=t[r]);return{$$typeof:_f,type:e,key:s,ref:o,props:i,_owner:Ef.current}}Hi.Fragment=kf;Hi.jsx=Ou;Hi.jsxs=Ou;wu.exports=Hi;var T=wu.exports,Qs={},Ru={exports:{}},Ce={},$u={exports:{}},Lu={};/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(e){function t(E,O){var $=E.length;E.push(O);e:for(;0<$;){var Q=$-1>>>1,X=E[Q];if(0<i(X,O))E[Q]=O,E[$]=X,$=Q;else break e}}function n(E){return E.length===0?null:E[0]}function r(E){if(E.length===0)return null;var O=E[0],$=E.pop();if($!==O){E[0]=$;e:for(var Q=0,X=E.length,Dr=X>>>1;Q<Dr;){var Lt=2*(Q+1)-1,ps=E[Lt],At=Lt+1,zr=E[At];if(0>i(ps,$))At<X&&0>i(zr,ps)?(E[Q]=zr,E[At]=$,Q=At):(E[Q]=ps,E[Lt]=$,Q=Lt);else if(At<X&&0>i(zr,$))E[Q]=zr,E[At]=$,Q=At;else break e}}return O}function i(E,O){var $=E.sortIndex-O.sortIndex;return $!==0?$:E.id-O.id}if(typeof performance=="object"&&typeof performance.now=="function"){var s=performance;e.unstable_now=function(){return s.now()}}else{var o=Date,l=o.now();e.unstable_now=function(){return o.now()-l}}var a=[],u=[],c=1,d=null,h=3,v=!1,m=!1,w=!1,x=typeof setTimeout=="function"?setTimeout:null,p=typeof clearTimeout=="function"?clearTimeout:null,f=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function g(E){for(var O=n(u);O!==null;){if(O.callback===null)r(u);else if(O.startTime<=E)r(u),O.sortIndex=O.expirationTime,t(a,O);else break;O=n(u)}}function y(E){if(w=!1,g(E),!m)if(n(a)!==null)m=!0,fs(k);else{var O=n(u);O!==null&&hs(y,O.startTime-E)}}function k(E,O){m=!1,w&&(w=!1,p(j),j=-1),v=!0;var $=h;try{for(g(O),d=n(a);d!==null&&(!(d.expirationTime>O)||E&&!Ie());){var Q=d.callback;if(typeof Q=="function"){d.callback=null,h=d.priorityLevel;var X=Q(d.expirationTime<=O);O=e.unstable_now(),typeof X=="function"?d.callback=X:d===n(a)&&r(a),g(O)}else r(a);d=n(a)}if(d!==null)var Dr=!0;else{var Lt=n(u);Lt!==null&&hs(y,Lt.startTime-O),Dr=!1}return Dr}finally{d=null,h=$,v=!1}}var C=!1,P=null,j=-1,K=5,I=-1;function Ie(){return!(e.unstable_now()-I<K)}function zn(){if(P!==null){var E=e.unstable_now();I=E;var O=!0;try{O=P(!0,E)}finally{O?Un():(C=!1,P=null)}}else C=!1}var Un;if(typeof f=="function")Un=function(){f(zn)};else if(typeof MessageChannel<"u"){var ql=new MessageChannel,tf=ql.port2;ql.port1.onmessage=zn,Un=function(){tf.postMessage(null)}}else Un=function(){x(zn,0)};function fs(E){P=E,C||(C=!0,Un())}function hs(E,O){j=x(function(){E(e.unstable_now())},O)}e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(E){E.callback=null},e.unstable_continueExecution=function(){m||v||(m=!0,fs(k))},e.unstable_forceFrameRate=function(E){0>E||125<E?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):K=0<E?Math.floor(1e3/E):5},e.unstable_getCurrentPriorityLevel=function(){return h},e.unstable_getFirstCallbackNode=function(){return n(a)},e.unstable_next=function(E){switch(h){case 1:case 2:case 3:var O=3;break;default:O=h}var $=h;h=O;try{return E()}finally{h=$}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=function(){},e.unstable_runWithPriority=function(E,O){switch(E){case 1:case 2:case 3:case 4:case 5:break;default:E=3}var $=h;h=E;try{return O()}finally{h=$}},e.unstable_scheduleCallback=function(E,O,$){var Q=e.unstable_now();switch(typeof $=="object"&&$!==null?($=$.delay,$=typeof $=="number"&&0<$?Q+$:Q):$=Q,E){case 1:var X=-1;break;case 2:X=250;break;case 5:X=1073741823;break;case 4:X=1e4;break;default:X=5e3}return X=$+X,E={id:c++,callback:O,priorityLevel:E,startTime:$,expirationTime:X,sortIndex:-1},$>Q?(E.sortIndex=$,t(u,E),n(a)===null&&E===n(u)&&(w?(p(j),j=-1):w=!0,hs(y,$-Q))):(E.sortIndex=X,t(a,E),m||v||(m=!0,fs(k))),E},e.unstable_shouldYield=Ie,e.unstable_wrapCallback=function(E){var O=h;return function(){var $=h;h=O;try{return E.apply(this,arguments)}finally{h=$}}}})(Lu);$u.exports=Lu;var Cf=$u.exports;/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Pf=be,xe=Cf;function _(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var Au=new Set,dr={};function Gt(e,t){En(e,t),En(e+"Capture",t)}function En(e,t){for(dr[e]=t,e=0;e<t.length;e++)Au.add(t[e])}var nt=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),qs=Object.prototype.hasOwnProperty,Tf=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Xl={},Zl={};function jf(e){return qs.call(Zl,e)?!0:qs.call(Xl,e)?!1:Tf.test(e)?Zl[e]=!0:(Xl[e]=!0,!1)}function Of(e,t,n,r){if(n!==null&&n.type===0)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return r?!1:n!==null?!n.acceptsBooleans:(e=e.toLowerCase().slice(0,5),e!=="data-"&&e!=="aria-");default:return!1}}function Rf(e,t,n,r){if(t===null||typeof t>"u"||Of(e,t,n,r))return!0;if(r)return!1;if(n!==null)switch(n.type){case 3:return!t;case 4:return t===!1;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function fe(e,t,n,r,i,s,o){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=s,this.removeEmptyString=o}var ie={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ie[e]=new fe(e,0,!1,e,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ie[t]=new fe(t,1,!1,e[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(e){ie[e]=new fe(e,2,!1,e.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){ie[e]=new fe(e,2,!1,e,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ie[e]=new fe(e,3,!1,e.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(function(e){ie[e]=new fe(e,3,!0,e,null,!1,!1)});["capture","download"].forEach(function(e){ie[e]=new fe(e,4,!1,e,null,!1,!1)});["cols","rows","size","span"].forEach(function(e){ie[e]=new fe(e,6,!1,e,null,!1,!1)});["rowSpan","start"].forEach(function(e){ie[e]=new fe(e,5,!1,e.toLowerCase(),null,!1,!1)});var Zo=/[\-:]([a-z])/g;function el(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(Zo,el);ie[t]=new fe(t,1,!1,e,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(Zo,el);ie[t]=new fe(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(Zo,el);ie[t]=new fe(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(e){ie[e]=new fe(e,1,!1,e.toLowerCase(),null,!1,!1)});ie.xlinkHref=new fe("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(e){ie[e]=new fe(e,1,!1,e.toLowerCase(),null,!0,!0)});function tl(e,t,n,r){var i=ie.hasOwnProperty(t)?ie[t]:null;(i!==null?i.type!==0:r||!(2<t.length)||t[0]!=="o"&&t[0]!=="O"||t[1]!=="n"&&t[1]!=="N")&&(Rf(t,n,i,r)&&(n=null),r||i===null?jf(t)&&(n===null?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=n===null?i.type===3?!1:"":n:(t=i.attributeName,r=i.attributeNamespace,n===null?e.removeAttribute(t):(i=i.type,n=i===3||i===4&&n===!0?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}var ot=Pf.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,br=Symbol.for("react.element"),rn=Symbol.for("react.portal"),sn=Symbol.for("react.fragment"),nl=Symbol.for("react.strict_mode"),Gs=Symbol.for("react.profiler"),Iu=Symbol.for("react.provider"),Nu=Symbol.for("react.context"),rl=Symbol.for("react.forward_ref"),Js=Symbol.for("react.suspense"),Ys=Symbol.for("react.suspense_list"),il=Symbol.for("react.memo"),ct=Symbol.for("react.lazy"),Du=Symbol.for("react.offscreen"),ea=Symbol.iterator;function bn(e){return e===null||typeof e!="object"?null:(e=ea&&e[ea]||e["@@iterator"],typeof e=="function"?e:null)}var V=Object.assign,vs;function qn(e){if(vs===void 0)try{throw Error()}catch(n){var t=n.stack.trim().match(/\n( *(at )?)/);vs=t&&t[1]||""}return`
`+vs+e}var ms=!1;function ys(e,t){if(!e||ms)return"";ms=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(t,[])}catch(u){var r=u}Reflect.construct(e,[],t)}else{try{t.call()}catch(u){r=u}e.call(t.prototype)}else{try{throw Error()}catch(u){r=u}e()}}catch(u){if(u&&r&&typeof u.stack=="string"){for(var i=u.stack.split(`
`),s=r.stack.split(`
`),o=i.length-1,l=s.length-1;1<=o&&0<=l&&i[o]!==s[l];)l--;for(;1<=o&&0<=l;o--,l--)if(i[o]!==s[l]){if(o!==1||l!==1)do if(o--,l--,0>l||i[o]!==s[l]){var a=`
`+i[o].replace(" at new "," at ");return e.displayName&&a.includes("<anonymous>")&&(a=a.replace("<anonymous>",e.displayName)),a}while(1<=o&&0<=l);break}}}finally{ms=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?qn(e):""}function $f(e){switch(e.tag){case 5:return qn(e.type);case 16:return qn("Lazy");case 13:return qn("Suspense");case 19:return qn("SuspenseList");case 0:case 2:case 15:return e=ys(e.type,!1),e;case 11:return e=ys(e.type.render,!1),e;case 1:return e=ys(e.type,!0),e;default:return""}}function Xs(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case sn:return"Fragment";case rn:return"Portal";case Gs:return"Profiler";case nl:return"StrictMode";case Js:return"Suspense";case Ys:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case Nu:return(e.displayName||"Context")+".Consumer";case Iu:return(e._context.displayName||"Context")+".Provider";case rl:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case il:return t=e.displayName||null,t!==null?t:Xs(e.type)||"Memo";case ct:t=e._payload,e=e._init;try{return Xs(e(t))}catch{}}return null}function Lf(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=t.render,e=e.displayName||e.name||"",t.displayName||(e!==""?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return Xs(t);case 8:return t===nl?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t}return null}function Pt(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":return e;case"object":return e;default:return""}}function zu(e){var t=e.type;return(e=e.nodeName)&&e.toLowerCase()==="input"&&(t==="checkbox"||t==="radio")}function Af(e){var t=zu(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&typeof n<"u"&&typeof n.get=="function"&&typeof n.set=="function"){var i=n.get,s=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(o){r=""+o,s.call(this,o)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(o){r=""+o},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}function Fr(e){e._valueTracker||(e._valueTracker=Af(e))}function Uu(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=zu(e)?e.checked?"true":"false":e.value),e=r,e!==n?(t.setValue(e),!0):!1}function mi(e){if(e=e||(typeof document<"u"?document:void 0),typeof e>"u")return null;try{return e.activeElement||e.body}catch{return e.body}}function Zs(e,t){var n=t.checked;return V({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:n??e._wrapperState.initialChecked})}function ta(e,t){var n=t.defaultValue==null?"":t.defaultValue,r=t.checked!=null?t.checked:t.defaultChecked;n=Pt(t.value!=null?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:t.type==="checkbox"||t.type==="radio"?t.checked!=null:t.value!=null}}function bu(e,t){t=t.checked,t!=null&&tl(e,"checked",t,!1)}function eo(e,t){bu(e,t);var n=Pt(t.value),r=t.type;if(n!=null)r==="number"?(n===0&&e.value===""||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if(r==="submit"||r==="reset"){e.removeAttribute("value");return}t.hasOwnProperty("value")?to(e,t.type,n):t.hasOwnProperty("defaultValue")&&to(e,t.type,Pt(t.defaultValue)),t.checked==null&&t.defaultChecked!=null&&(e.defaultChecked=!!t.defaultChecked)}function na(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!(r!=="submit"&&r!=="reset"||t.value!==void 0&&t.value!==null))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}n=e.name,n!==""&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,n!==""&&(e.name=n)}function to(e,t,n){(t!=="number"||mi(e.ownerDocument)!==e)&&(n==null?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var Gn=Array.isArray;function vn(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Pt(n),t=null,i=0;i<e.length;i++){if(e[i].value===n){e[i].selected=!0,r&&(e[i].defaultSelected=!0);return}t!==null||e[i].disabled||(t=e[i])}t!==null&&(t.selected=!0)}}function no(e,t){if(t.dangerouslySetInnerHTML!=null)throw Error(_(91));return V({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ra(e,t){var n=t.value;if(n==null){if(n=t.children,t=t.defaultValue,n!=null){if(t!=null)throw Error(_(92));if(Gn(n)){if(1<n.length)throw Error(_(93));n=n[0]}t=n}t==null&&(t=""),n=t}e._wrapperState={initialValue:Pt(n)}}function Fu(e,t){var n=Pt(t.value),r=Pt(t.defaultValue);n!=null&&(n=""+n,n!==e.value&&(e.value=n),t.defaultValue==null&&e.defaultValue!==n&&(e.defaultValue=n)),r!=null&&(e.defaultValue=""+r)}function ia(e){var t=e.textContent;t===e._wrapperState.initialValue&&t!==""&&t!==null&&(e.value=t)}function Mu(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ro(e,t){return e==null||e==="http://www.w3.org/1999/xhtml"?Mu(t):e==="http://www.w3.org/2000/svg"&&t==="foreignObject"?"http://www.w3.org/1999/xhtml":e}var Mr,Bu=function(e){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(t,n,r,i){MSApp.execUnsafeLocalFunction(function(){return e(t,n,r,i)})}:e}(function(e,t){if(e.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in e)e.innerHTML=t;else{for(Mr=Mr||document.createElement("div"),Mr.innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Mr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function fr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&n.nodeType===3){n.nodeValue=t;return}}e.textContent=t}var Zn={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},If=["Webkit","ms","Moz","O"];Object.keys(Zn).forEach(function(e){If.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Zn[t]=Zn[e]})});function Hu(e,t,n){return t==null||typeof t=="boolean"||t===""?"":n||typeof t!="number"||t===0||Zn.hasOwnProperty(e)&&Zn[e]?(""+t).trim():t+"px"}function Vu(e,t){e=e.style;for(var n in t)if(t.hasOwnProperty(n)){var r=n.indexOf("--")===0,i=Hu(n,t[n],r);n==="float"&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}var Nf=V({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function io(e,t){if(t){if(Nf[e]&&(t.children!=null||t.dangerouslySetInnerHTML!=null))throw Error(_(137,e));if(t.dangerouslySetInnerHTML!=null){if(t.children!=null)throw Error(_(60));if(typeof t.dangerouslySetInnerHTML!="object"||!("__html"in t.dangerouslySetInnerHTML))throw Error(_(61))}if(t.style!=null&&typeof t.style!="object")throw Error(_(62))}}function so(e,t){if(e.indexOf("-")===-1)return typeof t.is=="string";switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var oo=null;function sl(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===3?e.parentNode:e}var lo=null,mn=null,yn=null;function sa(e){if(e=Lr(e)){if(typeof lo!="function")throw Error(_(280));var t=e.stateNode;t&&(t=qi(t),lo(e.stateNode,e.type,t))}}function Wu(e){mn?yn?yn.push(e):yn=[e]:mn=e}function Ku(){if(mn){var e=mn,t=yn;if(yn=mn=null,sa(e),t)for(e=0;e<t.length;e++)sa(t[e])}}function Qu(e,t){return e(t)}function qu(){}var ws=!1;function Gu(e,t,n){if(ws)return e(t,n);ws=!0;try{return Qu(e,t,n)}finally{ws=!1,(mn!==null||yn!==null)&&(qu(),Ku())}}function hr(e,t){var n=e.stateNode;if(n===null)return null;var r=qi(n);if(r===null)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(e=e.type,r=!(e==="button"||e==="input"||e==="select"||e==="textarea")),e=!r;break e;default:e=!1}if(e)return null;if(n&&typeof n!="function")throw Error(_(231,t,typeof n));return n}var ao=!1;if(nt)try{var Fn={};Object.defineProperty(Fn,"passive",{get:function(){ao=!0}}),window.addEventListener("test",Fn,Fn),window.removeEventListener("test",Fn,Fn)}catch{ao=!1}function Df(e,t,n,r,i,s,o,l,a){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(c){this.onError(c)}}var er=!1,yi=null,wi=!1,uo=null,zf={onError:function(e){er=!0,yi=e}};function Uf(e,t,n,r,i,s,o,l,a){er=!1,yi=null,Df.apply(zf,arguments)}function bf(e,t,n,r,i,s,o,l,a){if(Uf.apply(this,arguments),er){if(er){var u=yi;er=!1,yi=null}else throw Error(_(198));wi||(wi=!0,uo=u)}}function Jt(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do t=e,t.flags&4098&&(n=t.return),e=t.return;while(e)}return t.tag===3?n:null}function Ju(e){if(e.tag===13){var t=e.memoizedState;if(t===null&&(e=e.alternate,e!==null&&(t=e.memoizedState)),t!==null)return t.dehydrated}return null}function oa(e){if(Jt(e)!==e)throw Error(_(188))}function Ff(e){var t=e.alternate;if(!t){if(t=Jt(e),t===null)throw Error(_(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(i===null)break;var s=i.alternate;if(s===null){if(r=i.return,r!==null){n=r;continue}break}if(i.child===s.child){for(s=i.child;s;){if(s===n)return oa(i),e;if(s===r)return oa(i),t;s=s.sibling}throw Error(_(188))}if(n.return!==r.return)n=i,r=s;else{for(var o=!1,l=i.child;l;){if(l===n){o=!0,n=i,r=s;break}if(l===r){o=!0,r=i,n=s;break}l=l.sibling}if(!o){for(l=s.child;l;){if(l===n){o=!0,n=s,r=i;break}if(l===r){o=!0,r=s,n=i;break}l=l.sibling}if(!o)throw Error(_(189))}}if(n.alternate!==r)throw Error(_(190))}if(n.tag!==3)throw Error(_(188));return n.stateNode.current===n?e:t}function Yu(e){return e=Ff(e),e!==null?Xu(e):null}function Xu(e){if(e.tag===5||e.tag===6)return e;for(e=e.child;e!==null;){var t=Xu(e);if(t!==null)return t;e=e.sibling}return null}var Zu=xe.unstable_scheduleCallback,la=xe.unstable_cancelCallback,Mf=xe.unstable_shouldYield,Bf=xe.unstable_requestPaint,q=xe.unstable_now,Hf=xe.unstable_getCurrentPriorityLevel,ol=xe.unstable_ImmediatePriority,ec=xe.unstable_UserBlockingPriority,_i=xe.unstable_NormalPriority,Vf=xe.unstable_LowPriority,tc=xe.unstable_IdlePriority,Vi=null,qe=null;function Wf(e){if(qe&&typeof qe.onCommitFiberRoot=="function")try{qe.onCommitFiberRoot(Vi,e,void 0,(e.current.flags&128)===128)}catch{}}var Me=Math.clz32?Math.clz32:qf,Kf=Math.log,Qf=Math.LN2;function qf(e){return e>>>=0,e===0?32:31-(Kf(e)/Qf|0)|0}var Br=64,Hr=4194304;function Jn(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return e&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ki(e,t){var n=e.pendingLanes;if(n===0)return 0;var r=0,i=e.suspendedLanes,s=e.pingedLanes,o=n&268435455;if(o!==0){var l=o&~i;l!==0?r=Jn(l):(s&=o,s!==0&&(r=Jn(s)))}else o=n&~i,o!==0?r=Jn(o):s!==0&&(r=Jn(s));if(r===0)return 0;if(t!==0&&t!==r&&!(t&i)&&(i=r&-r,s=t&-t,i>=s||i===16&&(s&4194240)!==0))return t;if(r&4&&(r|=n&16),t=e.entangledLanes,t!==0)for(e=e.entanglements,t&=r;0<t;)n=31-Me(t),i=1<<n,r|=e[n],t&=~i;return r}function Gf(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function Jf(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,i=e.expirationTimes,s=e.pendingLanes;0<s;){var o=31-Me(s),l=1<<o,a=i[o];a===-1?(!(l&n)||l&r)&&(i[o]=Gf(l,t)):a<=t&&(e.expiredLanes|=l),s&=~l}}function co(e){return e=e.pendingLanes&-1073741825,e!==0?e:e&1073741824?1073741824:0}function nc(){var e=Br;return Br<<=1,!(Br&4194240)&&(Br=64),e}function _s(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Rr(e,t,n){e.pendingLanes|=t,t!==536870912&&(e.suspendedLanes=0,e.pingedLanes=0),e=e.eventTimes,t=31-Me(t),e[t]=n}function Yf(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var i=31-Me(n),s=1<<i;t[i]=0,r[i]=-1,e[i]=-1,n&=~s}}function ll(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-Me(n),i=1<<r;i&t|e[r]&t&&(e[r]|=t),n&=~i}}var D=0;function rc(e){return e&=-e,1<e?4<e?e&268435455?16:536870912:4:1}var ic,al,sc,oc,lc,fo=!1,Vr=[],yt=null,wt=null,_t=null,pr=new Map,gr=new Map,ht=[],Xf="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function aa(e,t){switch(e){case"focusin":case"focusout":yt=null;break;case"dragenter":case"dragleave":wt=null;break;case"mouseover":case"mouseout":_t=null;break;case"pointerover":case"pointerout":pr.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":gr.delete(t.pointerId)}}function Mn(e,t,n,r,i,s){return e===null||e.nativeEvent!==s?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:s,targetContainers:[i]},t!==null&&(t=Lr(t),t!==null&&al(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,i!==null&&t.indexOf(i)===-1&&t.push(i),e)}function Zf(e,t,n,r,i){switch(t){case"focusin":return yt=Mn(yt,e,t,n,r,i),!0;case"dragenter":return wt=Mn(wt,e,t,n,r,i),!0;case"mouseover":return _t=Mn(_t,e,t,n,r,i),!0;case"pointerover":var s=i.pointerId;return pr.set(s,Mn(pr.get(s)||null,e,t,n,r,i)),!0;case"gotpointercapture":return s=i.pointerId,gr.set(s,Mn(gr.get(s)||null,e,t,n,r,i)),!0}return!1}function ac(e){var t=bt(e.target);if(t!==null){var n=Jt(t);if(n!==null){if(t=n.tag,t===13){if(t=Ju(n),t!==null){e.blockedOn=t,lc(e.priority,function(){sc(n)});return}}else if(t===3&&n.stateNode.current.memoizedState.isDehydrated){e.blockedOn=n.tag===3?n.stateNode.containerInfo:null;return}}}e.blockedOn=null}function li(e){if(e.blockedOn!==null)return!1;for(var t=e.targetContainers;0<t.length;){var n=ho(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(n===null){n=e.nativeEvent;var r=new n.constructor(n.type,n);oo=r,n.target.dispatchEvent(r),oo=null}else return t=Lr(n),t!==null&&al(t),e.blockedOn=n,!1;t.shift()}return!0}function ua(e,t,n){li(e)&&n.delete(t)}function eh(){fo=!1,yt!==null&&li(yt)&&(yt=null),wt!==null&&li(wt)&&(wt=null),_t!==null&&li(_t)&&(_t=null),pr.forEach(ua),gr.forEach(ua)}function Bn(e,t){e.blockedOn===t&&(e.blockedOn=null,fo||(fo=!0,xe.unstable_scheduleCallback(xe.unstable_NormalPriority,eh)))}function vr(e){function t(i){return Bn(i,e)}if(0<Vr.length){Bn(Vr[0],e);for(var n=1;n<Vr.length;n++){var r=Vr[n];r.blockedOn===e&&(r.blockedOn=null)}}for(yt!==null&&Bn(yt,e),wt!==null&&Bn(wt,e),_t!==null&&Bn(_t,e),pr.forEach(t),gr.forEach(t),n=0;n<ht.length;n++)r=ht[n],r.blockedOn===e&&(r.blockedOn=null);for(;0<ht.length&&(n=ht[0],n.blockedOn===null);)ac(n),n.blockedOn===null&&ht.shift()}var wn=ot.ReactCurrentBatchConfig,Si=!0;function th(e,t,n,r){var i=D,s=wn.transition;wn.transition=null;try{D=1,ul(e,t,n,r)}finally{D=i,wn.transition=s}}function nh(e,t,n,r){var i=D,s=wn.transition;wn.transition=null;try{D=4,ul(e,t,n,r)}finally{D=i,wn.transition=s}}function ul(e,t,n,r){if(Si){var i=ho(e,t,n,r);if(i===null)Rs(e,t,r,Ei,n),aa(e,r);else if(Zf(i,e,t,n,r))r.stopPropagation();else if(aa(e,r),t&4&&-1<Xf.indexOf(e)){for(;i!==null;){var s=Lr(i);if(s!==null&&ic(s),s=ho(e,t,n,r),s===null&&Rs(e,t,r,Ei,n),s===i)break;i=s}i!==null&&r.stopPropagation()}else Rs(e,t,r,null,n)}}var Ei=null;function ho(e,t,n,r){if(Ei=null,e=sl(r),e=bt(e),e!==null)if(t=Jt(e),t===null)e=null;else if(n=t.tag,n===13){if(e=Ju(t),e!==null)return e;e=null}else if(n===3){if(t.stateNode.current.memoizedState.isDehydrated)return t.tag===3?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Ei=e,null}function uc(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Hf()){case ol:return 1;case ec:return 4;case _i:case Vf:return 16;case tc:return 536870912;default:return 16}default:return 16}}var vt=null,cl=null,ai=null;function cc(){if(ai)return ai;var e,t=cl,n=t.length,r,i="value"in vt?vt.value:vt.textContent,s=i.length;for(e=0;e<n&&t[e]===i[e];e++);var o=n-e;for(r=1;r<=o&&t[n-r]===i[s-r];r++);return ai=i.slice(e,1<r?1-r:void 0)}function ui(e){var t=e.keyCode;return"charCode"in e?(e=e.charCode,e===0&&t===13&&(e=13)):e=t,e===10&&(e=13),32<=e||e===13?e:0}function Wr(){return!0}function ca(){return!1}function Pe(e){function t(n,r,i,s,o){this._reactName=n,this._targetInst=i,this.type=r,this.nativeEvent=s,this.target=o,this.currentTarget=null;for(var l in e)e.hasOwnProperty(l)&&(n=e[l],this[l]=n?n(s):s[l]);return this.isDefaultPrevented=(s.defaultPrevented!=null?s.defaultPrevented:s.returnValue===!1)?Wr:ca,this.isPropagationStopped=ca,this}return V(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var n=this.nativeEvent;n&&(n.preventDefault?n.preventDefault():typeof n.returnValue!="unknown"&&(n.returnValue=!1),this.isDefaultPrevented=Wr)},stopPropagation:function(){var n=this.nativeEvent;n&&(n.stopPropagation?n.stopPropagation():typeof n.cancelBubble!="unknown"&&(n.cancelBubble=!0),this.isPropagationStopped=Wr)},persist:function(){},isPersistent:Wr}),t}var An={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dl=Pe(An),$r=V({},An,{view:0,detail:0}),rh=Pe($r),ks,Ss,Hn,Wi=V({},$r,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:fl,button:0,buttons:0,relatedTarget:function(e){return e.relatedTarget===void 0?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Hn&&(Hn&&e.type==="mousemove"?(ks=e.screenX-Hn.screenX,Ss=e.screenY-Hn.screenY):Ss=ks=0,Hn=e),ks)},movementY:function(e){return"movementY"in e?e.movementY:Ss}}),da=Pe(Wi),ih=V({},Wi,{dataTransfer:0}),sh=Pe(ih),oh=V({},$r,{relatedTarget:0}),Es=Pe(oh),lh=V({},An,{animationName:0,elapsedTime:0,pseudoElement:0}),ah=Pe(lh),uh=V({},An,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),ch=Pe(uh),dh=V({},An,{data:0}),fa=Pe(dh),fh={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},hh={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ph={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function gh(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):(e=ph[e])?!!t[e]:!1}function fl(){return gh}var vh=V({},$r,{key:function(e){if(e.key){var t=fh[e.key]||e.key;if(t!=="Unidentified")return t}return e.type==="keypress"?(e=ui(e),e===13?"Enter":String.fromCharCode(e)):e.type==="keydown"||e.type==="keyup"?hh[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:fl,charCode:function(e){return e.type==="keypress"?ui(e):0},keyCode:function(e){return e.type==="keydown"||e.type==="keyup"?e.keyCode:0},which:function(e){return e.type==="keypress"?ui(e):e.type==="keydown"||e.type==="keyup"?e.keyCode:0}}),mh=Pe(vh),yh=V({},Wi,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),ha=Pe(yh),wh=V({},$r,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:fl}),_h=Pe(wh),kh=V({},An,{propertyName:0,elapsedTime:0,pseudoElement:0}),Sh=Pe(kh),Eh=V({},Wi,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),xh=Pe(Eh),Ch=[9,13,27,32],hl=nt&&"CompositionEvent"in window,tr=null;nt&&"documentMode"in document&&(tr=document.documentMode);var Ph=nt&&"TextEvent"in window&&!tr,dc=nt&&(!hl||tr&&8<tr&&11>=tr),pa=" ",ga=!1;function fc(e,t){switch(e){case"keyup":return Ch.indexOf(t.keyCode)!==-1;case"keydown":return t.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function hc(e){return e=e.detail,typeof e=="object"&&"data"in e?e.data:null}var on=!1;function Th(e,t){switch(e){case"compositionend":return hc(t);case"keypress":return t.which!==32?null:(ga=!0,pa);case"textInput":return e=t.data,e===pa&&ga?null:e;default:return null}}function jh(e,t){if(on)return e==="compositionend"||!hl&&fc(e,t)?(e=cc(),ai=cl=vt=null,on=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return dc&&t.locale!=="ko"?null:t.data;default:return null}}var Oh={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function va(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t==="input"?!!Oh[e.type]:t==="textarea"}function pc(e,t,n,r){Wu(r),t=xi(t,"onChange"),0<t.length&&(n=new dl("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var nr=null,mr=null;function Rh(e){Cc(e,0)}function Ki(e){var t=un(e);if(Uu(t))return e}function $h(e,t){if(e==="change")return t}var gc=!1;if(nt){var xs;if(nt){var Cs="oninput"in document;if(!Cs){var ma=document.createElement("div");ma.setAttribute("oninput","return;"),Cs=typeof ma.oninput=="function"}xs=Cs}else xs=!1;gc=xs&&(!document.documentMode||9<document.documentMode)}function ya(){nr&&(nr.detachEvent("onpropertychange",vc),mr=nr=null)}function vc(e){if(e.propertyName==="value"&&Ki(mr)){var t=[];pc(t,mr,e,sl(e)),Gu(Rh,t)}}function Lh(e,t,n){e==="focusin"?(ya(),nr=t,mr=n,nr.attachEvent("onpropertychange",vc)):e==="focusout"&&ya()}function Ah(e){if(e==="selectionchange"||e==="keyup"||e==="keydown")return Ki(mr)}function Ih(e,t){if(e==="click")return Ki(t)}function Nh(e,t){if(e==="input"||e==="change")return Ki(t)}function Dh(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var He=typeof Object.is=="function"?Object.is:Dh;function yr(e,t){if(He(e,t))return!0;if(typeof e!="object"||e===null||typeof t!="object"||t===null)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var i=n[r];if(!qs.call(t,i)||!He(e[i],t[i]))return!1}return!0}function wa(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function _a(e,t){var n=wa(e);e=0;for(var r;n;){if(n.nodeType===3){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=wa(n)}}function mc(e,t){return e&&t?e===t?!0:e&&e.nodeType===3?!1:t&&t.nodeType===3?mc(e,t.parentNode):"contains"in e?e.contains(t):e.compareDocumentPosition?!!(e.compareDocumentPosition(t)&16):!1:!1}function yc(){for(var e=window,t=mi();t instanceof e.HTMLIFrameElement;){try{var n=typeof t.contentWindow.location.href=="string"}catch{n=!1}if(n)e=t.contentWindow;else break;t=mi(e.document)}return t}function pl(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&(t==="input"&&(e.type==="text"||e.type==="search"||e.type==="tel"||e.type==="url"||e.type==="password")||t==="textarea"||e.contentEditable==="true")}function zh(e){var t=yc(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&mc(n.ownerDocument.documentElement,n)){if(r!==null&&pl(n)){if(t=r.start,e=r.end,e===void 0&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(e=(t=n.ownerDocument||document)&&t.defaultView||window,e.getSelection){e=e.getSelection();var i=n.textContent.length,s=Math.min(r.start,i);r=r.end===void 0?s:Math.min(r.end,i),!e.extend&&s>r&&(i=r,r=s,s=i),i=_a(n,s);var o=_a(n,r);i&&o&&(e.rangeCount!==1||e.anchorNode!==i.node||e.anchorOffset!==i.offset||e.focusNode!==o.node||e.focusOffset!==o.offset)&&(t=t.createRange(),t.setStart(i.node,i.offset),e.removeAllRanges(),s>r?(e.addRange(t),e.extend(o.node,o.offset)):(t.setEnd(o.node,o.offset),e.addRange(t)))}}for(t=[],e=n;e=e.parentNode;)e.nodeType===1&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(typeof n.focus=="function"&&n.focus(),n=0;n<t.length;n++)e=t[n],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}}var Uh=nt&&"documentMode"in document&&11>=document.documentMode,ln=null,po=null,rr=null,go=!1;function ka(e,t,n){var r=n.window===n?n.document:n.nodeType===9?n:n.ownerDocument;go||ln==null||ln!==mi(r)||(r=ln,"selectionStart"in r&&pl(r)?r={start:r.selectionStart,end:r.selectionEnd}:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection(),r={anchorNode:r.anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset}),rr&&yr(rr,r)||(rr=r,r=xi(po,"onSelect"),0<r.length&&(t=new dl("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=ln)))}function Kr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var an={animationend:Kr("Animation","AnimationEnd"),animationiteration:Kr("Animation","AnimationIteration"),animationstart:Kr("Animation","AnimationStart"),transitionend:Kr("Transition","TransitionEnd")},Ps={},wc={};nt&&(wc=document.createElement("div").style,"AnimationEvent"in window||(delete an.animationend.animation,delete an.animationiteration.animation,delete an.animationstart.animation),"TransitionEvent"in window||delete an.transitionend.transition);function Qi(e){if(Ps[e])return Ps[e];if(!an[e])return e;var t=an[e],n;for(n in t)if(t.hasOwnProperty(n)&&n in wc)return Ps[e]=t[n];return e}var _c=Qi("animationend"),kc=Qi("animationiteration"),Sc=Qi("animationstart"),Ec=Qi("transitionend"),xc=new Map,Sa="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function jt(e,t){xc.set(e,t),Gt(t,[e])}for(var Ts=0;Ts<Sa.length;Ts++){var js=Sa[Ts],bh=js.toLowerCase(),Fh=js[0].toUpperCase()+js.slice(1);jt(bh,"on"+Fh)}jt(_c,"onAnimationEnd");jt(kc,"onAnimationIteration");jt(Sc,"onAnimationStart");jt("dblclick","onDoubleClick");jt("focusin","onFocus");jt("focusout","onBlur");jt(Ec,"onTransitionEnd");En("onMouseEnter",["mouseout","mouseover"]);En("onMouseLeave",["mouseout","mouseover"]);En("onPointerEnter",["pointerout","pointerover"]);En("onPointerLeave",["pointerout","pointerover"]);Gt("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));Gt("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));Gt("onBeforeInput",["compositionend","keypress","textInput","paste"]);Gt("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));Gt("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));Gt("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Yn="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Mh=new Set("cancel close invalid load scroll toggle".split(" ").concat(Yn));function Ea(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,bf(r,t,void 0,e),e.currentTarget=null}function Cc(e,t){t=(t&4)!==0;for(var n=0;n<e.length;n++){var r=e[n],i=r.event;r=r.listeners;e:{var s=void 0;if(t)for(var o=r.length-1;0<=o;o--){var l=r[o],a=l.instance,u=l.currentTarget;if(l=l.listener,a!==s&&i.isPropagationStopped())break e;Ea(i,l,u),s=a}else for(o=0;o<r.length;o++){if(l=r[o],a=l.instance,u=l.currentTarget,l=l.listener,a!==s&&i.isPropagationStopped())break e;Ea(i,l,u),s=a}}}if(wi)throw e=uo,wi=!1,uo=null,e}function b(e,t){var n=t[_o];n===void 0&&(n=t[_o]=new Set);var r=e+"__bubble";n.has(r)||(Pc(t,e,2,!1),n.add(r))}function Os(e,t,n){var r=0;t&&(r|=4),Pc(n,e,r,t)}var Qr="_reactListening"+Math.random().toString(36).slice(2);function wr(e){if(!e[Qr]){e[Qr]=!0,Au.forEach(function(n){n!=="selectionchange"&&(Mh.has(n)||Os(n,!1,e),Os(n,!0,e))});var t=e.nodeType===9?e:e.ownerDocument;t===null||t[Qr]||(t[Qr]=!0,Os("selectionchange",!1,t))}}function Pc(e,t,n,r){switch(uc(t)){case 1:var i=th;break;case 4:i=nh;break;default:i=ul}n=i.bind(null,t,n,e),i=void 0,!ao||t!=="touchstart"&&t!=="touchmove"&&t!=="wheel"||(i=!0),r?i!==void 0?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):i!==void 0?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function Rs(e,t,n,r,i){var s=r;if(!(t&1)&&!(t&2)&&r!==null)e:for(;;){if(r===null)return;var o=r.tag;if(o===3||o===4){var l=r.stateNode.containerInfo;if(l===i||l.nodeType===8&&l.parentNode===i)break;if(o===4)for(o=r.return;o!==null;){var a=o.tag;if((a===3||a===4)&&(a=o.stateNode.containerInfo,a===i||a.nodeType===8&&a.parentNode===i))return;o=o.return}for(;l!==null;){if(o=bt(l),o===null)return;if(a=o.tag,a===5||a===6){r=s=o;continue e}l=l.parentNode}}r=r.return}Gu(function(){var u=s,c=sl(n),d=[];e:{var h=xc.get(e);if(h!==void 0){var v=dl,m=e;switch(e){case"keypress":if(ui(n)===0)break e;case"keydown":case"keyup":v=mh;break;case"focusin":m="focus",v=Es;break;case"focusout":m="blur",v=Es;break;case"beforeblur":case"afterblur":v=Es;break;case"click":if(n.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":v=da;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":v=sh;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":v=_h;break;case _c:case kc:case Sc:v=ah;break;case Ec:v=Sh;break;case"scroll":v=rh;break;case"wheel":v=xh;break;case"copy":case"cut":case"paste":v=ch;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":v=ha}var w=(t&4)!==0,x=!w&&e==="scroll",p=w?h!==null?h+"Capture":null:h;w=[];for(var f=u,g;f!==null;){g=f;var y=g.stateNode;if(g.tag===5&&y!==null&&(g=y,p!==null&&(y=hr(f,p),y!=null&&w.push(_r(f,y,g)))),x)break;f=f.return}0<w.length&&(h=new v(h,m,null,n,c),d.push({event:h,listeners:w}))}}if(!(t&7)){e:{if(h=e==="mouseover"||e==="pointerover",v=e==="mouseout"||e==="pointerout",h&&n!==oo&&(m=n.relatedTarget||n.fromElement)&&(bt(m)||m[rt]))break e;if((v||h)&&(h=c.window===c?c:(h=c.ownerDocument)?h.defaultView||h.parentWindow:window,v?(m=n.relatedTarget||n.toElement,v=u,m=m?bt(m):null,m!==null&&(x=Jt(m),m!==x||m.tag!==5&&m.tag!==6)&&(m=null)):(v=null,m=u),v!==m)){if(w=da,y="onMouseLeave",p="onMouseEnter",f="mouse",(e==="pointerout"||e==="pointerover")&&(w=ha,y="onPointerLeave",p="onPointerEnter",f="pointer"),x=v==null?h:un(v),g=m==null?h:un(m),h=new w(y,f+"leave",v,n,c),h.target=x,h.relatedTarget=g,y=null,bt(c)===u&&(w=new w(p,f+"enter",m,n,c),w.target=g,w.relatedTarget=x,y=w),x=y,v&&m)t:{for(w=v,p=m,f=0,g=w;g;g=Xt(g))f++;for(g=0,y=p;y;y=Xt(y))g++;for(;0<f-g;)w=Xt(w),f--;for(;0<g-f;)p=Xt(p),g--;for(;f--;){if(w===p||p!==null&&w===p.alternate)break t;w=Xt(w),p=Xt(p)}w=null}else w=null;v!==null&&xa(d,h,v,w,!1),m!==null&&x!==null&&xa(d,x,m,w,!0)}}e:{if(h=u?un(u):window,v=h.nodeName&&h.nodeName.toLowerCase(),v==="select"||v==="input"&&h.type==="file")var k=$h;else if(va(h))if(gc)k=Nh;else{k=Ah;var C=Lh}else(v=h.nodeName)&&v.toLowerCase()==="input"&&(h.type==="checkbox"||h.type==="radio")&&(k=Ih);if(k&&(k=k(e,u))){pc(d,k,n,c);break e}C&&C(e,h,u),e==="focusout"&&(C=h._wrapperState)&&C.controlled&&h.type==="number"&&to(h,"number",h.value)}switch(C=u?un(u):window,e){case"focusin":(va(C)||C.contentEditable==="true")&&(ln=C,po=u,rr=null);break;case"focusout":rr=po=ln=null;break;case"mousedown":go=!0;break;case"contextmenu":case"mouseup":case"dragend":go=!1,ka(d,n,c);break;case"selectionchange":if(Uh)break;case"keydown":case"keyup":ka(d,n,c)}var P;if(hl)e:{switch(e){case"compositionstart":var j="onCompositionStart";break e;case"compositionend":j="onCompositionEnd";break e;case"compositionupdate":j="onCompositionUpdate";break e}j=void 0}else on?fc(e,n)&&(j="onCompositionEnd"):e==="keydown"&&n.keyCode===229&&(j="onCompositionStart");j&&(dc&&n.locale!=="ko"&&(on||j!=="onCompositionStart"?j==="onCompositionEnd"&&on&&(P=cc()):(vt=c,cl="value"in vt?vt.value:vt.textContent,on=!0)),C=xi(u,j),0<C.length&&(j=new fa(j,e,null,n,c),d.push({event:j,listeners:C}),P?j.data=P:(P=hc(n),P!==null&&(j.data=P)))),(P=Ph?Th(e,n):jh(e,n))&&(u=xi(u,"onBeforeInput"),0<u.length&&(c=new fa("onBeforeInput","beforeinput",null,n,c),d.push({event:c,listeners:u}),c.data=P))}Cc(d,t)})}function _r(e,t,n){return{instance:e,listener:t,currentTarget:n}}function xi(e,t){for(var n=t+"Capture",r=[];e!==null;){var i=e,s=i.stateNode;i.tag===5&&s!==null&&(i=s,s=hr(e,n),s!=null&&r.unshift(_r(e,s,i)),s=hr(e,t),s!=null&&r.push(_r(e,s,i))),e=e.return}return r}function Xt(e){if(e===null)return null;do e=e.return;while(e&&e.tag!==5);return e||null}function xa(e,t,n,r,i){for(var s=t._reactName,o=[];n!==null&&n!==r;){var l=n,a=l.alternate,u=l.stateNode;if(a!==null&&a===r)break;l.tag===5&&u!==null&&(l=u,i?(a=hr(n,s),a!=null&&o.unshift(_r(n,a,l))):i||(a=hr(n,s),a!=null&&o.push(_r(n,a,l)))),n=n.return}o.length!==0&&e.push({event:t,listeners:o})}var Bh=/\r\n?/g,Hh=/\u0000|\uFFFD/g;function Ca(e){return(typeof e=="string"?e:""+e).replace(Bh,`
`).replace(Hh,"")}function qr(e,t,n){if(t=Ca(t),Ca(e)!==t&&n)throw Error(_(425))}function Ci(){}var vo=null,mo=null;function yo(e,t){return e==="textarea"||e==="noscript"||typeof t.children=="string"||typeof t.children=="number"||typeof t.dangerouslySetInnerHTML=="object"&&t.dangerouslySetInnerHTML!==null&&t.dangerouslySetInnerHTML.__html!=null}var wo=typeof setTimeout=="function"?setTimeout:void 0,Vh=typeof clearTimeout=="function"?clearTimeout:void 0,Pa=typeof Promise=="function"?Promise:void 0,Wh=typeof queueMicrotask=="function"?queueMicrotask:typeof Pa<"u"?function(e){return Pa.resolve(null).then(e).catch(Kh)}:wo;function Kh(e){setTimeout(function(){throw e})}function $s(e,t){var n=t,r=0;do{var i=n.nextSibling;if(e.removeChild(n),i&&i.nodeType===8)if(n=i.data,n==="/$"){if(r===0){e.removeChild(i),vr(t);return}r--}else n!=="$"&&n!=="$?"&&n!=="$!"||r++;n=i}while(n);vr(t)}function kt(e){for(;e!=null;e=e.nextSibling){var t=e.nodeType;if(t===1||t===3)break;if(t===8){if(t=e.data,t==="$"||t==="$!"||t==="$?")break;if(t==="/$")return null}}return e}function Ta(e){e=e.previousSibling;for(var t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="$"||n==="$!"||n==="$?"){if(t===0)return e;t--}else n==="/$"&&t++}e=e.previousSibling}return null}var In=Math.random().toString(36).slice(2),Qe="__reactFiber$"+In,kr="__reactProps$"+In,rt="__reactContainer$"+In,_o="__reactEvents$"+In,Qh="__reactListeners$"+In,qh="__reactHandles$"+In;function bt(e){var t=e[Qe];if(t)return t;for(var n=e.parentNode;n;){if(t=n[rt]||n[Qe]){if(n=t.alternate,t.child!==null||n!==null&&n.child!==null)for(e=Ta(e);e!==null;){if(n=e[Qe])return n;e=Ta(e)}return t}e=n,n=e.parentNode}return null}function Lr(e){return e=e[Qe]||e[rt],!e||e.tag!==5&&e.tag!==6&&e.tag!==13&&e.tag!==3?null:e}function un(e){if(e.tag===5||e.tag===6)return e.stateNode;throw Error(_(33))}function qi(e){return e[kr]||null}var ko=[],cn=-1;function Ot(e){return{current:e}}function F(e){0>cn||(e.current=ko[cn],ko[cn]=null,cn--)}function U(e,t){cn++,ko[cn]=e.current,e.current=t}var Tt={},ae=Ot(Tt),me=Ot(!1),Vt=Tt;function xn(e,t){var n=e.type.contextTypes;if(!n)return Tt;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i={},s;for(s in n)i[s]=t[s];return r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function ye(e){return e=e.childContextTypes,e!=null}function Pi(){F(me),F(ae)}function ja(e,t,n){if(ae.current!==Tt)throw Error(_(168));U(ae,t),U(me,n)}function Tc(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,typeof r.getChildContext!="function")return n;r=r.getChildContext();for(var i in r)if(!(i in t))throw Error(_(108,Lf(e)||"Unknown",i));return V({},n,r)}function Ti(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Tt,Vt=ae.current,U(ae,e),U(me,me.current),!0}function Oa(e,t,n){var r=e.stateNode;if(!r)throw Error(_(169));n?(e=Tc(e,t,Vt),r.__reactInternalMemoizedMergedChildContext=e,F(me),F(ae),U(ae,e)):F(me),U(me,n)}var Xe=null,Gi=!1,Ls=!1;function jc(e){Xe===null?Xe=[e]:Xe.push(e)}function Gh(e){Gi=!0,jc(e)}function Rt(){if(!Ls&&Xe!==null){Ls=!0;var e=0,t=D;try{var n=Xe;for(D=1;e<n.length;e++){var r=n[e];do r=r(!0);while(r!==null)}Xe=null,Gi=!1}catch(i){throw Xe!==null&&(Xe=Xe.slice(e+1)),Zu(ol,Rt),i}finally{D=t,Ls=!1}}return null}var dn=[],fn=0,ji=null,Oi=0,Te=[],je=0,Wt=null,Ze=1,et="";function Nt(e,t){dn[fn++]=Oi,dn[fn++]=ji,ji=e,Oi=t}function Oc(e,t,n){Te[je++]=Ze,Te[je++]=et,Te[je++]=Wt,Wt=e;var r=Ze;e=et;var i=32-Me(r)-1;r&=~(1<<i),n+=1;var s=32-Me(t)+i;if(30<s){var o=i-i%5;s=(r&(1<<o)-1).toString(32),r>>=o,i-=o,Ze=1<<32-Me(t)+i|n<<i|r,et=s+e}else Ze=1<<s|n<<i|r,et=e}function gl(e){e.return!==null&&(Nt(e,1),Oc(e,1,0))}function vl(e){for(;e===ji;)ji=dn[--fn],dn[fn]=null,Oi=dn[--fn],dn[fn]=null;for(;e===Wt;)Wt=Te[--je],Te[je]=null,et=Te[--je],Te[je]=null,Ze=Te[--je],Te[je]=null}var Ee=null,Se=null,M=!1,Fe=null;function Rc(e,t){var n=Oe(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,t=e.deletions,t===null?(e.deletions=[n],e.flags|=16):t.push(n)}function Ra(e,t){switch(e.tag){case 5:var n=e.type;return t=t.nodeType!==1||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t,t!==null?(e.stateNode=t,Ee=e,Se=kt(t.firstChild),!0):!1;case 6:return t=e.pendingProps===""||t.nodeType!==3?null:t,t!==null?(e.stateNode=t,Ee=e,Se=null,!0):!1;case 13:return t=t.nodeType!==8?null:t,t!==null?(n=Wt!==null?{id:Ze,overflow:et}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},n=Oe(18,null,null,0),n.stateNode=t,n.return=e,e.child=n,Ee=e,Se=null,!0):!1;default:return!1}}function So(e){return(e.mode&1)!==0&&(e.flags&128)===0}function Eo(e){if(M){var t=Se;if(t){var n=t;if(!Ra(e,t)){if(So(e))throw Error(_(418));t=kt(n.nextSibling);var r=Ee;t&&Ra(e,t)?Rc(r,n):(e.flags=e.flags&-4097|2,M=!1,Ee=e)}}else{if(So(e))throw Error(_(418));e.flags=e.flags&-4097|2,M=!1,Ee=e}}}function $a(e){for(e=e.return;e!==null&&e.tag!==5&&e.tag!==3&&e.tag!==13;)e=e.return;Ee=e}function Gr(e){if(e!==Ee)return!1;if(!M)return $a(e),M=!0,!1;var t;if((t=e.tag!==3)&&!(t=e.tag!==5)&&(t=e.type,t=t!=="head"&&t!=="body"&&!yo(e.type,e.memoizedProps)),t&&(t=Se)){if(So(e))throw $c(),Error(_(418));for(;t;)Rc(e,t),t=kt(t.nextSibling)}if($a(e),e.tag===13){if(e=e.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(_(317));e:{for(e=e.nextSibling,t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="/$"){if(t===0){Se=kt(e.nextSibling);break e}t--}else n!=="$"&&n!=="$!"&&n!=="$?"||t++}e=e.nextSibling}Se=null}}else Se=Ee?kt(e.stateNode.nextSibling):null;return!0}function $c(){for(var e=Se;e;)e=kt(e.nextSibling)}function Cn(){Se=Ee=null,M=!1}function ml(e){Fe===null?Fe=[e]:Fe.push(e)}var Jh=ot.ReactCurrentBatchConfig;function Vn(e,t,n){if(e=n.ref,e!==null&&typeof e!="function"&&typeof e!="object"){if(n._owner){if(n=n._owner,n){if(n.tag!==1)throw Error(_(309));var r=n.stateNode}if(!r)throw Error(_(147,e));var i=r,s=""+e;return t!==null&&t.ref!==null&&typeof t.ref=="function"&&t.ref._stringRef===s?t.ref:(t=function(o){var l=i.refs;o===null?delete l[s]:l[s]=o},t._stringRef=s,t)}if(typeof e!="string")throw Error(_(284));if(!n._owner)throw Error(_(290,e))}return e}function Jr(e,t){throw e=Object.prototype.toString.call(t),Error(_(31,e==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function La(e){var t=e._init;return t(e._payload)}function Lc(e){function t(p,f){if(e){var g=p.deletions;g===null?(p.deletions=[f],p.flags|=16):g.push(f)}}function n(p,f){if(!e)return null;for(;f!==null;)t(p,f),f=f.sibling;return null}function r(p,f){for(p=new Map;f!==null;)f.key!==null?p.set(f.key,f):p.set(f.index,f),f=f.sibling;return p}function i(p,f){return p=Ct(p,f),p.index=0,p.sibling=null,p}function s(p,f,g){return p.index=g,e?(g=p.alternate,g!==null?(g=g.index,g<f?(p.flags|=2,f):g):(p.flags|=2,f)):(p.flags|=1048576,f)}function o(p){return e&&p.alternate===null&&(p.flags|=2),p}function l(p,f,g,y){return f===null||f.tag!==6?(f=bs(g,p.mode,y),f.return=p,f):(f=i(f,g),f.return=p,f)}function a(p,f,g,y){var k=g.type;return k===sn?c(p,f,g.props.children,y,g.key):f!==null&&(f.elementType===k||typeof k=="object"&&k!==null&&k.$$typeof===ct&&La(k)===f.type)?(y=i(f,g.props),y.ref=Vn(p,f,g),y.return=p,y):(y=vi(g.type,g.key,g.props,null,p.mode,y),y.ref=Vn(p,f,g),y.return=p,y)}function u(p,f,g,y){return f===null||f.tag!==4||f.stateNode.containerInfo!==g.containerInfo||f.stateNode.implementation!==g.implementation?(f=Fs(g,p.mode,y),f.return=p,f):(f=i(f,g.children||[]),f.return=p,f)}function c(p,f,g,y,k){return f===null||f.tag!==7?(f=Ht(g,p.mode,y,k),f.return=p,f):(f=i(f,g),f.return=p,f)}function d(p,f,g){if(typeof f=="string"&&f!==""||typeof f=="number")return f=bs(""+f,p.mode,g),f.return=p,f;if(typeof f=="object"&&f!==null){switch(f.$$typeof){case br:return g=vi(f.type,f.key,f.props,null,p.mode,g),g.ref=Vn(p,null,f),g.return=p,g;case rn:return f=Fs(f,p.mode,g),f.return=p,f;case ct:var y=f._init;return d(p,y(f._payload),g)}if(Gn(f)||bn(f))return f=Ht(f,p.mode,g,null),f.return=p,f;Jr(p,f)}return null}function h(p,f,g,y){var k=f!==null?f.key:null;if(typeof g=="string"&&g!==""||typeof g=="number")return k!==null?null:l(p,f,""+g,y);if(typeof g=="object"&&g!==null){switch(g.$$typeof){case br:return g.key===k?a(p,f,g,y):null;case rn:return g.key===k?u(p,f,g,y):null;case ct:return k=g._init,h(p,f,k(g._payload),y)}if(Gn(g)||bn(g))return k!==null?null:c(p,f,g,y,null);Jr(p,g)}return null}function v(p,f,g,y,k){if(typeof y=="string"&&y!==""||typeof y=="number")return p=p.get(g)||null,l(f,p,""+y,k);if(typeof y=="object"&&y!==null){switch(y.$$typeof){case br:return p=p.get(y.key===null?g:y.key)||null,a(f,p,y,k);case rn:return p=p.get(y.key===null?g:y.key)||null,u(f,p,y,k);case ct:var C=y._init;return v(p,f,g,C(y._payload),k)}if(Gn(y)||bn(y))return p=p.get(g)||null,c(f,p,y,k,null);Jr(f,y)}return null}function m(p,f,g,y){for(var k=null,C=null,P=f,j=f=0,K=null;P!==null&&j<g.length;j++){P.index>j?(K=P,P=null):K=P.sibling;var I=h(p,P,g[j],y);if(I===null){P===null&&(P=K);break}e&&P&&I.alternate===null&&t(p,P),f=s(I,f,j),C===null?k=I:C.sibling=I,C=I,P=K}if(j===g.length)return n(p,P),M&&Nt(p,j),k;if(P===null){for(;j<g.length;j++)P=d(p,g[j],y),P!==null&&(f=s(P,f,j),C===null?k=P:C.sibling=P,C=P);return M&&Nt(p,j),k}for(P=r(p,P);j<g.length;j++)K=v(P,p,j,g[j],y),K!==null&&(e&&K.alternate!==null&&P.delete(K.key===null?j:K.key),f=s(K,f,j),C===null?k=K:C.sibling=K,C=K);return e&&P.forEach(function(Ie){return t(p,Ie)}),M&&Nt(p,j),k}function w(p,f,g,y){var k=bn(g);if(typeof k!="function")throw Error(_(150));if(g=k.call(g),g==null)throw Error(_(151));for(var C=k=null,P=f,j=f=0,K=null,I=g.next();P!==null&&!I.done;j++,I=g.next()){P.index>j?(K=P,P=null):K=P.sibling;var Ie=h(p,P,I.value,y);if(Ie===null){P===null&&(P=K);break}e&&P&&Ie.alternate===null&&t(p,P),f=s(Ie,f,j),C===null?k=Ie:C.sibling=Ie,C=Ie,P=K}if(I.done)return n(p,P),M&&Nt(p,j),k;if(P===null){for(;!I.done;j++,I=g.next())I=d(p,I.value,y),I!==null&&(f=s(I,f,j),C===null?k=I:C.sibling=I,C=I);return M&&Nt(p,j),k}for(P=r(p,P);!I.done;j++,I=g.next())I=v(P,p,j,I.value,y),I!==null&&(e&&I.alternate!==null&&P.delete(I.key===null?j:I.key),f=s(I,f,j),C===null?k=I:C.sibling=I,C=I);return e&&P.forEach(function(zn){return t(p,zn)}),M&&Nt(p,j),k}function x(p,f,g,y){if(typeof g=="object"&&g!==null&&g.type===sn&&g.key===null&&(g=g.props.children),typeof g=="object"&&g!==null){switch(g.$$typeof){case br:e:{for(var k=g.key,C=f;C!==null;){if(C.key===k){if(k=g.type,k===sn){if(C.tag===7){n(p,C.sibling),f=i(C,g.props.children),f.return=p,p=f;break e}}else if(C.elementType===k||typeof k=="object"&&k!==null&&k.$$typeof===ct&&La(k)===C.type){n(p,C.sibling),f=i(C,g.props),f.ref=Vn(p,C,g),f.return=p,p=f;break e}n(p,C);break}else t(p,C);C=C.sibling}g.type===sn?(f=Ht(g.props.children,p.mode,y,g.key),f.return=p,p=f):(y=vi(g.type,g.key,g.props,null,p.mode,y),y.ref=Vn(p,f,g),y.return=p,p=y)}return o(p);case rn:e:{for(C=g.key;f!==null;){if(f.key===C)if(f.tag===4&&f.stateNode.containerInfo===g.containerInfo&&f.stateNode.implementation===g.implementation){n(p,f.sibling),f=i(f,g.children||[]),f.return=p,p=f;break e}else{n(p,f);break}else t(p,f);f=f.sibling}f=Fs(g,p.mode,y),f.return=p,p=f}return o(p);case ct:return C=g._init,x(p,f,C(g._payload),y)}if(Gn(g))return m(p,f,g,y);if(bn(g))return w(p,f,g,y);Jr(p,g)}return typeof g=="string"&&g!==""||typeof g=="number"?(g=""+g,f!==null&&f.tag===6?(n(p,f.sibling),f=i(f,g),f.return=p,p=f):(n(p,f),f=bs(g,p.mode,y),f.return=p,p=f),o(p)):n(p,f)}return x}var Pn=Lc(!0),Ac=Lc(!1),Ri=Ot(null),$i=null,hn=null,yl=null;function wl(){yl=hn=$i=null}function _l(e){var t=Ri.current;F(Ri),e._currentValue=t}function xo(e,t,n){for(;e!==null;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,r!==null&&(r.childLanes|=t)):r!==null&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function _n(e,t){$i=e,yl=hn=null,e=e.dependencies,e!==null&&e.firstContext!==null&&(e.lanes&t&&(ve=!0),e.firstContext=null)}function Le(e){var t=e._currentValue;if(yl!==e)if(e={context:e,memoizedValue:t,next:null},hn===null){if($i===null)throw Error(_(308));hn=e,$i.dependencies={lanes:0,firstContext:e}}else hn=hn.next=e;return t}var Ft=null;function kl(e){Ft===null?Ft=[e]:Ft.push(e)}function Ic(e,t,n,r){var i=t.interleaved;return i===null?(n.next=n,kl(t)):(n.next=i.next,i.next=n),t.interleaved=n,it(e,r)}function it(e,t){e.lanes|=t;var n=e.alternate;for(n!==null&&(n.lanes|=t),n=e,e=e.return;e!==null;)e.childLanes|=t,n=e.alternate,n!==null&&(n.childLanes|=t),n=e,e=e.return;return n.tag===3?n.stateNode:null}var dt=!1;function Sl(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Nc(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function tt(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function St(e,t,n){var r=e.updateQueue;if(r===null)return null;if(r=r.shared,N&2){var i=r.pending;return i===null?t.next=t:(t.next=i.next,i.next=t),r.pending=t,it(e,n)}return i=r.interleaved,i===null?(t.next=t,kl(r)):(t.next=i.next,i.next=t),r.interleaved=t,it(e,n)}function ci(e,t,n){if(t=t.updateQueue,t!==null&&(t=t.shared,(n&4194240)!==0)){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,ll(e,n)}}function Aa(e,t){var n=e.updateQueue,r=e.alternate;if(r!==null&&(r=r.updateQueue,n===r)){var i=null,s=null;if(n=n.firstBaseUpdate,n!==null){do{var o={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};s===null?i=s=o:s=s.next=o,n=n.next}while(n!==null);s===null?i=s=t:s=s.next=t}else i=s=t;n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:s,shared:r.shared,effects:r.effects},e.updateQueue=n;return}e=n.lastBaseUpdate,e===null?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Li(e,t,n,r){var i=e.updateQueue;dt=!1;var s=i.firstBaseUpdate,o=i.lastBaseUpdate,l=i.shared.pending;if(l!==null){i.shared.pending=null;var a=l,u=a.next;a.next=null,o===null?s=u:o.next=u,o=a;var c=e.alternate;c!==null&&(c=c.updateQueue,l=c.lastBaseUpdate,l!==o&&(l===null?c.firstBaseUpdate=u:l.next=u,c.lastBaseUpdate=a))}if(s!==null){var d=i.baseState;o=0,c=u=a=null,l=s;do{var h=l.lane,v=l.eventTime;if((r&h)===h){c!==null&&(c=c.next={eventTime:v,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var m=e,w=l;switch(h=t,v=n,w.tag){case 1:if(m=w.payload,typeof m=="function"){d=m.call(v,d,h);break e}d=m;break e;case 3:m.flags=m.flags&-65537|128;case 0:if(m=w.payload,h=typeof m=="function"?m.call(v,d,h):m,h==null)break e;d=V({},d,h);break e;case 2:dt=!0}}l.callback!==null&&l.lane!==0&&(e.flags|=64,h=i.effects,h===null?i.effects=[l]:h.push(l))}else v={eventTime:v,lane:h,tag:l.tag,payload:l.payload,callback:l.callback,next:null},c===null?(u=c=v,a=d):c=c.next=v,o|=h;if(l=l.next,l===null){if(l=i.shared.pending,l===null)break;h=l,l=h.next,h.next=null,i.lastBaseUpdate=h,i.shared.pending=null}}while(!0);if(c===null&&(a=d),i.baseState=a,i.firstBaseUpdate=u,i.lastBaseUpdate=c,t=i.shared.interleaved,t!==null){i=t;do o|=i.lane,i=i.next;while(i!==t)}else s===null&&(i.shared.lanes=0);Qt|=o,e.lanes=o,e.memoizedState=d}}function Ia(e,t,n){if(e=t.effects,t.effects=null,e!==null)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(i!==null){if(r.callback=null,r=n,typeof i!="function")throw Error(_(191,i));i.call(r)}}}var Ar={},Ge=Ot(Ar),Sr=Ot(Ar),Er=Ot(Ar);function Mt(e){if(e===Ar)throw Error(_(174));return e}function El(e,t){switch(U(Er,t),U(Sr,e),U(Ge,Ar),e=t.nodeType,e){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ro(null,"");break;default:e=e===8?t.parentNode:t,t=e.namespaceURI||null,e=e.tagName,t=ro(t,e)}F(Ge),U(Ge,t)}function Tn(){F(Ge),F(Sr),F(Er)}function Dc(e){Mt(Er.current);var t=Mt(Ge.current),n=ro(t,e.type);t!==n&&(U(Sr,e),U(Ge,n))}function xl(e){Sr.current===e&&(F(Ge),F(Sr))}var B=Ot(0);function Ai(e){for(var t=e;t!==null;){if(t.tag===13){var n=t.memoizedState;if(n!==null&&(n=n.dehydrated,n===null||n.data==="$?"||n.data==="$!"))return t}else if(t.tag===19&&t.memoizedProps.revealOrder!==void 0){if(t.flags&128)return t}else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var As=[];function Cl(){for(var e=0;e<As.length;e++)As[e]._workInProgressVersionPrimary=null;As.length=0}var di=ot.ReactCurrentDispatcher,Is=ot.ReactCurrentBatchConfig,Kt=0,H=null,J=null,ee=null,Ii=!1,ir=!1,xr=0,Yh=0;function se(){throw Error(_(321))}function Pl(e,t){if(t===null)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!He(e[n],t[n]))return!1;return!0}function Tl(e,t,n,r,i,s){if(Kt=s,H=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,di.current=e===null||e.memoizedState===null?tp:np,e=n(r,i),ir){s=0;do{if(ir=!1,xr=0,25<=s)throw Error(_(301));s+=1,ee=J=null,t.updateQueue=null,di.current=rp,e=n(r,i)}while(ir)}if(di.current=Ni,t=J!==null&&J.next!==null,Kt=0,ee=J=H=null,Ii=!1,t)throw Error(_(300));return e}function jl(){var e=xr!==0;return xr=0,e}function Ke(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return ee===null?H.memoizedState=ee=e:ee=ee.next=e,ee}function Ae(){if(J===null){var e=H.alternate;e=e!==null?e.memoizedState:null}else e=J.next;var t=ee===null?H.memoizedState:ee.next;if(t!==null)ee=t,J=e;else{if(e===null)throw Error(_(310));J=e,e={memoizedState:J.memoizedState,baseState:J.baseState,baseQueue:J.baseQueue,queue:J.queue,next:null},ee===null?H.memoizedState=ee=e:ee=ee.next=e}return ee}function Cr(e,t){return typeof t=="function"?t(e):t}function Ns(e){var t=Ae(),n=t.queue;if(n===null)throw Error(_(311));n.lastRenderedReducer=e;var r=J,i=r.baseQueue,s=n.pending;if(s!==null){if(i!==null){var o=i.next;i.next=s.next,s.next=o}r.baseQueue=i=s,n.pending=null}if(i!==null){s=i.next,r=r.baseState;var l=o=null,a=null,u=s;do{var c=u.lane;if((Kt&c)===c)a!==null&&(a=a.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:e(r,u.action);else{var d={lane:c,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};a===null?(l=a=d,o=r):a=a.next=d,H.lanes|=c,Qt|=c}u=u.next}while(u!==null&&u!==s);a===null?o=r:a.next=l,He(r,t.memoizedState)||(ve=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=a,n.lastRenderedState=r}if(e=n.interleaved,e!==null){i=e;do s=i.lane,H.lanes|=s,Qt|=s,i=i.next;while(i!==e)}else i===null&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ds(e){var t=Ae(),n=t.queue;if(n===null)throw Error(_(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,s=t.memoizedState;if(i!==null){n.pending=null;var o=i=i.next;do s=e(s,o.action),o=o.next;while(o!==i);He(s,t.memoizedState)||(ve=!0),t.memoizedState=s,t.baseQueue===null&&(t.baseState=s),n.lastRenderedState=s}return[s,r]}function zc(){}function Uc(e,t){var n=H,r=Ae(),i=t(),s=!He(r.memoizedState,i);if(s&&(r.memoizedState=i,ve=!0),r=r.queue,Ol(Mc.bind(null,n,r,e),[e]),r.getSnapshot!==t||s||ee!==null&&ee.memoizedState.tag&1){if(n.flags|=2048,Pr(9,Fc.bind(null,n,r,i,t),void 0,null),te===null)throw Error(_(349));Kt&30||bc(n,t,i)}return i}function bc(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},t=H.updateQueue,t===null?(t={lastEffect:null,stores:null},H.updateQueue=t,t.stores=[e]):(n=t.stores,n===null?t.stores=[e]:n.push(e))}function Fc(e,t,n,r){t.value=n,t.getSnapshot=r,Bc(t)&&Hc(e)}function Mc(e,t,n){return n(function(){Bc(t)&&Hc(e)})}function Bc(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!He(e,n)}catch{return!0}}function Hc(e){var t=it(e,1);t!==null&&Be(t,e,1,-1)}function Na(e){var t=Ke();return typeof e=="function"&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Cr,lastRenderedState:e},t.queue=e,e=e.dispatch=ep.bind(null,H,e),[t.memoizedState,e]}function Pr(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},t=H.updateQueue,t===null?(t={lastEffect:null,stores:null},H.updateQueue=t,t.lastEffect=e.next=e):(n=t.lastEffect,n===null?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e)),e}function Vc(){return Ae().memoizedState}function fi(e,t,n,r){var i=Ke();H.flags|=e,i.memoizedState=Pr(1|t,n,void 0,r===void 0?null:r)}function Ji(e,t,n,r){var i=Ae();r=r===void 0?null:r;var s=void 0;if(J!==null){var o=J.memoizedState;if(s=o.destroy,r!==null&&Pl(r,o.deps)){i.memoizedState=Pr(t,n,s,r);return}}H.flags|=e,i.memoizedState=Pr(1|t,n,s,r)}function Da(e,t){return fi(8390656,8,e,t)}function Ol(e,t){return Ji(2048,8,e,t)}function Wc(e,t){return Ji(4,2,e,t)}function Kc(e,t){return Ji(4,4,e,t)}function Qc(e,t){if(typeof t=="function")return e=e(),t(e),function(){t(null)};if(t!=null)return e=e(),t.current=e,function(){t.current=null}}function qc(e,t,n){return n=n!=null?n.concat([e]):null,Ji(4,4,Qc.bind(null,t,e),n)}function Rl(){}function Gc(e,t){var n=Ae();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&Pl(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Jc(e,t){var n=Ae();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&Pl(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Yc(e,t,n){return Kt&21?(He(n,t)||(n=nc(),H.lanes|=n,Qt|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,ve=!0),e.memoizedState=n)}function Xh(e,t){var n=D;D=n!==0&&4>n?n:4,e(!0);var r=Is.transition;Is.transition={};try{e(!1),t()}finally{D=n,Is.transition=r}}function Xc(){return Ae().memoizedState}function Zh(e,t,n){var r=xt(e);if(n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Zc(e))ed(t,n);else if(n=Ic(e,t,n,r),n!==null){var i=ce();Be(n,e,r,i),td(n,t,r)}}function ep(e,t,n){var r=xt(e),i={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Zc(e))ed(t,i);else{var s=e.alternate;if(e.lanes===0&&(s===null||s.lanes===0)&&(s=t.lastRenderedReducer,s!==null))try{var o=t.lastRenderedState,l=s(o,n);if(i.hasEagerState=!0,i.eagerState=l,He(l,o)){var a=t.interleaved;a===null?(i.next=i,kl(t)):(i.next=a.next,a.next=i),t.interleaved=i;return}}catch{}finally{}n=Ic(e,t,i,r),n!==null&&(i=ce(),Be(n,e,r,i),td(n,t,r))}}function Zc(e){var t=e.alternate;return e===H||t!==null&&t===H}function ed(e,t){ir=Ii=!0;var n=e.pending;n===null?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function td(e,t,n){if(n&4194240){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,ll(e,n)}}var Ni={readContext:Le,useCallback:se,useContext:se,useEffect:se,useImperativeHandle:se,useInsertionEffect:se,useLayoutEffect:se,useMemo:se,useReducer:se,useRef:se,useState:se,useDebugValue:se,useDeferredValue:se,useTransition:se,useMutableSource:se,useSyncExternalStore:se,useId:se,unstable_isNewReconciler:!1},tp={readContext:Le,useCallback:function(e,t){return Ke().memoizedState=[e,t===void 0?null:t],e},useContext:Le,useEffect:Da,useImperativeHandle:function(e,t,n){return n=n!=null?n.concat([e]):null,fi(4194308,4,Qc.bind(null,t,e),n)},useLayoutEffect:function(e,t){return fi(4194308,4,e,t)},useInsertionEffect:function(e,t){return fi(4,2,e,t)},useMemo:function(e,t){var n=Ke();return t=t===void 0?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Ke();return t=n!==void 0?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Zh.bind(null,H,e),[r.memoizedState,e]},useRef:function(e){var t=Ke();return e={current:e},t.memoizedState=e},useState:Na,useDebugValue:Rl,useDeferredValue:function(e){return Ke().memoizedState=e},useTransition:function(){var e=Na(!1),t=e[0];return e=Xh.bind(null,e[1]),Ke().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=H,i=Ke();if(M){if(n===void 0)throw Error(_(407));n=n()}else{if(n=t(),te===null)throw Error(_(349));Kt&30||bc(r,t,n)}i.memoizedState=n;var s={value:n,getSnapshot:t};return i.queue=s,Da(Mc.bind(null,r,s,e),[e]),r.flags|=2048,Pr(9,Fc.bind(null,r,s,n,t),void 0,null),n},useId:function(){var e=Ke(),t=te.identifierPrefix;if(M){var n=et,r=Ze;n=(r&~(1<<32-Me(r)-1)).toString(32)+n,t=":"+t+"R"+n,n=xr++,0<n&&(t+="H"+n.toString(32)),t+=":"}else n=Yh++,t=":"+t+"r"+n.toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},np={readContext:Le,useCallback:Gc,useContext:Le,useEffect:Ol,useImperativeHandle:qc,useInsertionEffect:Wc,useLayoutEffect:Kc,useMemo:Jc,useReducer:Ns,useRef:Vc,useState:function(){return Ns(Cr)},useDebugValue:Rl,useDeferredValue:function(e){var t=Ae();return Yc(t,J.memoizedState,e)},useTransition:function(){var e=Ns(Cr)[0],t=Ae().memoizedState;return[e,t]},useMutableSource:zc,useSyncExternalStore:Uc,useId:Xc,unstable_isNewReconciler:!1},rp={readContext:Le,useCallback:Gc,useContext:Le,useEffect:Ol,useImperativeHandle:qc,useInsertionEffect:Wc,useLayoutEffect:Kc,useMemo:Jc,useReducer:Ds,useRef:Vc,useState:function(){return Ds(Cr)},useDebugValue:Rl,useDeferredValue:function(e){var t=Ae();return J===null?t.memoizedState=e:Yc(t,J.memoizedState,e)},useTransition:function(){var e=Ds(Cr)[0],t=Ae().memoizedState;return[e,t]},useMutableSource:zc,useSyncExternalStore:Uc,useId:Xc,unstable_isNewReconciler:!1};function De(e,t){if(e&&e.defaultProps){t=V({},t),e=e.defaultProps;for(var n in e)t[n]===void 0&&(t[n]=e[n]);return t}return t}function Co(e,t,n,r){t=e.memoizedState,n=n(r,t),n=n==null?t:V({},t,n),e.memoizedState=n,e.lanes===0&&(e.updateQueue.baseState=n)}var Yi={isMounted:function(e){return(e=e._reactInternals)?Jt(e)===e:!1},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ce(),i=xt(e),s=tt(r,i);s.payload=t,n!=null&&(s.callback=n),t=St(e,s,i),t!==null&&(Be(t,e,i,r),ci(t,e,i))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ce(),i=xt(e),s=tt(r,i);s.tag=1,s.payload=t,n!=null&&(s.callback=n),t=St(e,s,i),t!==null&&(Be(t,e,i,r),ci(t,e,i))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ce(),r=xt(e),i=tt(n,r);i.tag=2,t!=null&&(i.callback=t),t=St(e,i,r),t!==null&&(Be(t,e,r,n),ci(t,e,r))}};function za(e,t,n,r,i,s,o){return e=e.stateNode,typeof e.shouldComponentUpdate=="function"?e.shouldComponentUpdate(r,s,o):t.prototype&&t.prototype.isPureReactComponent?!yr(n,r)||!yr(i,s):!0}function nd(e,t,n){var r=!1,i=Tt,s=t.contextType;return typeof s=="object"&&s!==null?s=Le(s):(i=ye(t)?Vt:ae.current,r=t.contextTypes,s=(r=r!=null)?xn(e,i):Tt),t=new t(n,s),e.memoizedState=t.state!==null&&t.state!==void 0?t.state:null,t.updater=Yi,e.stateNode=t,t._reactInternals=e,r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=s),t}function Ua(e,t,n,r){e=t.state,typeof t.componentWillReceiveProps=="function"&&t.componentWillReceiveProps(n,r),typeof t.UNSAFE_componentWillReceiveProps=="function"&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Yi.enqueueReplaceState(t,t.state,null)}function Po(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs={},Sl(e);var s=t.contextType;typeof s=="object"&&s!==null?i.context=Le(s):(s=ye(t)?Vt:ae.current,i.context=xn(e,s)),i.state=e.memoizedState,s=t.getDerivedStateFromProps,typeof s=="function"&&(Co(e,t,s,n),i.state=e.memoizedState),typeof t.getDerivedStateFromProps=="function"||typeof i.getSnapshotBeforeUpdate=="function"||typeof i.UNSAFE_componentWillMount!="function"&&typeof i.componentWillMount!="function"||(t=i.state,typeof i.componentWillMount=="function"&&i.componentWillMount(),typeof i.UNSAFE_componentWillMount=="function"&&i.UNSAFE_componentWillMount(),t!==i.state&&Yi.enqueueReplaceState(i,i.state,null),Li(e,n,i,r),i.state=e.memoizedState),typeof i.componentDidMount=="function"&&(e.flags|=4194308)}function jn(e,t){try{var n="",r=t;do n+=$f(r),r=r.return;while(r);var i=n}catch(s){i=`
Error generating stack: `+s.message+`
`+s.stack}return{value:e,source:t,stack:i,digest:null}}function zs(e,t,n){return{value:e,source:null,stack:n??null,digest:t??null}}function To(e,t){try{console.error(t.value)}catch(n){setTimeout(function(){throw n})}}var ip=typeof WeakMap=="function"?WeakMap:Map;function rd(e,t,n){n=tt(-1,n),n.tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){zi||(zi=!0,zo=r),To(e,t)},n}function id(e,t,n){n=tt(-1,n),n.tag=3;var r=e.type.getDerivedStateFromError;if(typeof r=="function"){var i=t.value;n.payload=function(){return r(i)},n.callback=function(){To(e,t)}}var s=e.stateNode;return s!==null&&typeof s.componentDidCatch=="function"&&(n.callback=function(){To(e,t),typeof r!="function"&&(Et===null?Et=new Set([this]):Et.add(this));var o=t.stack;this.componentDidCatch(t.value,{componentStack:o!==null?o:""})}),n}function ba(e,t,n){var r=e.pingCache;if(r===null){r=e.pingCache=new ip;var i=new Set;r.set(t,i)}else i=r.get(t),i===void 0&&(i=new Set,r.set(t,i));i.has(n)||(i.add(n),e=yp.bind(null,e,t,n),t.then(e,e))}function Fa(e){do{var t;if((t=e.tag===13)&&(t=e.memoizedState,t=t!==null?t.dehydrated!==null:!0),t)return e;e=e.return}while(e!==null);return null}function Ma(e,t,n,r,i){return e.mode&1?(e.flags|=65536,e.lanes=i,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,n.tag===1&&(n.alternate===null?n.tag=17:(t=tt(-1,1),t.tag=2,St(n,t,1))),n.lanes|=1),e)}var sp=ot.ReactCurrentOwner,ve=!1;function ue(e,t,n,r){t.child=e===null?Ac(t,null,n,r):Pn(t,e.child,n,r)}function Ba(e,t,n,r,i){n=n.render;var s=t.ref;return _n(t,i),r=Tl(e,t,n,r,s,i),n=jl(),e!==null&&!ve?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,st(e,t,i)):(M&&n&&gl(t),t.flags|=1,ue(e,t,r,i),t.child)}function Ha(e,t,n,r,i){if(e===null){var s=n.type;return typeof s=="function"&&!Ul(s)&&s.defaultProps===void 0&&n.compare===null&&n.defaultProps===void 0?(t.tag=15,t.type=s,sd(e,t,s,r,i)):(e=vi(n.type,null,r,t,t.mode,i),e.ref=t.ref,e.return=t,t.child=e)}if(s=e.child,!(e.lanes&i)){var o=s.memoizedProps;if(n=n.compare,n=n!==null?n:yr,n(o,r)&&e.ref===t.ref)return st(e,t,i)}return t.flags|=1,e=Ct(s,r),e.ref=t.ref,e.return=t,t.child=e}function sd(e,t,n,r,i){if(e!==null){var s=e.memoizedProps;if(yr(s,r)&&e.ref===t.ref)if(ve=!1,t.pendingProps=r=s,(e.lanes&i)!==0)e.flags&131072&&(ve=!0);else return t.lanes=e.lanes,st(e,t,i)}return jo(e,t,n,r,i)}function od(e,t,n){var r=t.pendingProps,i=r.children,s=e!==null?e.memoizedState:null;if(r.mode==="hidden")if(!(t.mode&1))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},U(gn,ke),ke|=n;else{if(!(n&1073741824))return e=s!==null?s.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,U(gn,ke),ke|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=s!==null?s.baseLanes:n,U(gn,ke),ke|=r}else s!==null?(r=s.baseLanes|n,t.memoizedState=null):r=n,U(gn,ke),ke|=r;return ue(e,t,i,n),t.child}function ld(e,t){var n=t.ref;(e===null&&n!==null||e!==null&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function jo(e,t,n,r,i){var s=ye(n)?Vt:ae.current;return s=xn(t,s),_n(t,i),n=Tl(e,t,n,r,s,i),r=jl(),e!==null&&!ve?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,st(e,t,i)):(M&&r&&gl(t),t.flags|=1,ue(e,t,n,i),t.child)}function Va(e,t,n,r,i){if(ye(n)){var s=!0;Ti(t)}else s=!1;if(_n(t,i),t.stateNode===null)hi(e,t),nd(t,n,r),Po(t,n,r,i),r=!0;else if(e===null){var o=t.stateNode,l=t.memoizedProps;o.props=l;var a=o.context,u=n.contextType;typeof u=="object"&&u!==null?u=Le(u):(u=ye(n)?Vt:ae.current,u=xn(t,u));var c=n.getDerivedStateFromProps,d=typeof c=="function"||typeof o.getSnapshotBeforeUpdate=="function";d||typeof o.UNSAFE_componentWillReceiveProps!="function"&&typeof o.componentWillReceiveProps!="function"||(l!==r||a!==u)&&Ua(t,o,r,u),dt=!1;var h=t.memoizedState;o.state=h,Li(t,r,o,i),a=t.memoizedState,l!==r||h!==a||me.current||dt?(typeof c=="function"&&(Co(t,n,c,r),a=t.memoizedState),(l=dt||za(t,n,l,r,h,a,u))?(d||typeof o.UNSAFE_componentWillMount!="function"&&typeof o.componentWillMount!="function"||(typeof o.componentWillMount=="function"&&o.componentWillMount(),typeof o.UNSAFE_componentWillMount=="function"&&o.UNSAFE_componentWillMount()),typeof o.componentDidMount=="function"&&(t.flags|=4194308)):(typeof o.componentDidMount=="function"&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=a),o.props=r,o.state=a,o.context=u,r=l):(typeof o.componentDidMount=="function"&&(t.flags|=4194308),r=!1)}else{o=t.stateNode,Nc(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:De(t.type,l),o.props=u,d=t.pendingProps,h=o.context,a=n.contextType,typeof a=="object"&&a!==null?a=Le(a):(a=ye(n)?Vt:ae.current,a=xn(t,a));var v=n.getDerivedStateFromProps;(c=typeof v=="function"||typeof o.getSnapshotBeforeUpdate=="function")||typeof o.UNSAFE_componentWillReceiveProps!="function"&&typeof o.componentWillReceiveProps!="function"||(l!==d||h!==a)&&Ua(t,o,r,a),dt=!1,h=t.memoizedState,o.state=h,Li(t,r,o,i);var m=t.memoizedState;l!==d||h!==m||me.current||dt?(typeof v=="function"&&(Co(t,n,v,r),m=t.memoizedState),(u=dt||za(t,n,u,r,h,m,a)||!1)?(c||typeof o.UNSAFE_componentWillUpdate!="function"&&typeof o.componentWillUpdate!="function"||(typeof o.componentWillUpdate=="function"&&o.componentWillUpdate(r,m,a),typeof o.UNSAFE_componentWillUpdate=="function"&&o.UNSAFE_componentWillUpdate(r,m,a)),typeof o.componentDidUpdate=="function"&&(t.flags|=4),typeof o.getSnapshotBeforeUpdate=="function"&&(t.flags|=1024)):(typeof o.componentDidUpdate!="function"||l===e.memoizedProps&&h===e.memoizedState||(t.flags|=4),typeof o.getSnapshotBeforeUpdate!="function"||l===e.memoizedProps&&h===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=m),o.props=r,o.state=m,o.context=a,r=u):(typeof o.componentDidUpdate!="function"||l===e.memoizedProps&&h===e.memoizedState||(t.flags|=4),typeof o.getSnapshotBeforeUpdate!="function"||l===e.memoizedProps&&h===e.memoizedState||(t.flags|=1024),r=!1)}return Oo(e,t,n,r,s,i)}function Oo(e,t,n,r,i,s){ld(e,t);var o=(t.flags&128)!==0;if(!r&&!o)return i&&Oa(t,n,!1),st(e,t,s);r=t.stateNode,sp.current=t;var l=o&&typeof n.getDerivedStateFromError!="function"?null:r.render();return t.flags|=1,e!==null&&o?(t.child=Pn(t,e.child,null,s),t.child=Pn(t,null,l,s)):ue(e,t,l,s),t.memoizedState=r.state,i&&Oa(t,n,!0),t.child}function ad(e){var t=e.stateNode;t.pendingContext?ja(e,t.pendingContext,t.pendingContext!==t.context):t.context&&ja(e,t.context,!1),El(e,t.containerInfo)}function Wa(e,t,n,r,i){return Cn(),ml(i),t.flags|=256,ue(e,t,n,r),t.child}var Ro={dehydrated:null,treeContext:null,retryLane:0};function $o(e){return{baseLanes:e,cachePool:null,transitions:null}}function ud(e,t,n){var r=t.pendingProps,i=B.current,s=!1,o=(t.flags&128)!==0,l;if((l=o)||(l=e!==null&&e.memoizedState===null?!1:(i&2)!==0),l?(s=!0,t.flags&=-129):(e===null||e.memoizedState!==null)&&(i|=1),U(B,i&1),e===null)return Eo(t),e=t.memoizedState,e!==null&&(e=e.dehydrated,e!==null)?(t.mode&1?e.data==="$!"?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(o=r.children,e=r.fallback,s?(r=t.mode,s=t.child,o={mode:"hidden",children:o},!(r&1)&&s!==null?(s.childLanes=0,s.pendingProps=o):s=es(o,r,0,null),e=Ht(e,r,n,null),s.return=t,e.return=t,s.sibling=e,t.child=s,t.child.memoizedState=$o(n),t.memoizedState=Ro,e):$l(t,o));if(i=e.memoizedState,i!==null&&(l=i.dehydrated,l!==null))return op(e,t,o,r,l,i,n);if(s){s=r.fallback,o=t.mode,i=e.child,l=i.sibling;var a={mode:"hidden",children:r.children};return!(o&1)&&t.child!==i?(r=t.child,r.childLanes=0,r.pendingProps=a,t.deletions=null):(r=Ct(i,a),r.subtreeFlags=i.subtreeFlags&14680064),l!==null?s=Ct(l,s):(s=Ht(s,o,n,null),s.flags|=2),s.return=t,r.return=t,r.sibling=s,t.child=r,r=s,s=t.child,o=e.child.memoizedState,o=o===null?$o(n):{baseLanes:o.baseLanes|n,cachePool:null,transitions:o.transitions},s.memoizedState=o,s.childLanes=e.childLanes&~n,t.memoizedState=Ro,r}return s=e.child,e=s.sibling,r=Ct(s,{mode:"visible",children:r.children}),!(t.mode&1)&&(r.lanes=n),r.return=t,r.sibling=null,e!==null&&(n=t.deletions,n===null?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=r,t.memoizedState=null,r}function $l(e,t){return t=es({mode:"visible",children:t},e.mode,0,null),t.return=e,e.child=t}function Yr(e,t,n,r){return r!==null&&ml(r),Pn(t,e.child,null,n),e=$l(t,t.pendingProps.children),e.flags|=2,t.memoizedState=null,e}function op(e,t,n,r,i,s,o){if(n)return t.flags&256?(t.flags&=-257,r=zs(Error(_(422))),Yr(e,t,o,r)):t.memoizedState!==null?(t.child=e.child,t.flags|=128,null):(s=r.fallback,i=t.mode,r=es({mode:"visible",children:r.children},i,0,null),s=Ht(s,i,o,null),s.flags|=2,r.return=t,s.return=t,r.sibling=s,t.child=r,t.mode&1&&Pn(t,e.child,null,o),t.child.memoizedState=$o(o),t.memoizedState=Ro,s);if(!(t.mode&1))return Yr(e,t,o,null);if(i.data==="$!"){if(r=i.nextSibling&&i.nextSibling.dataset,r)var l=r.dgst;return r=l,s=Error(_(419)),r=zs(s,r,void 0),Yr(e,t,o,r)}if(l=(o&e.childLanes)!==0,ve||l){if(r=te,r!==null){switch(o&-o){case 4:i=2;break;case 16:i=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:i=32;break;case 536870912:i=268435456;break;default:i=0}i=i&(r.suspendedLanes|o)?0:i,i!==0&&i!==s.retryLane&&(s.retryLane=i,it(e,i),Be(r,e,i,-1))}return zl(),r=zs(Error(_(421))),Yr(e,t,o,r)}return i.data==="$?"?(t.flags|=128,t.child=e.child,t=wp.bind(null,e),i._reactRetry=t,null):(e=s.treeContext,Se=kt(i.nextSibling),Ee=t,M=!0,Fe=null,e!==null&&(Te[je++]=Ze,Te[je++]=et,Te[je++]=Wt,Ze=e.id,et=e.overflow,Wt=t),t=$l(t,r.children),t.flags|=4096,t)}function Ka(e,t,n){e.lanes|=t;var r=e.alternate;r!==null&&(r.lanes|=t),xo(e.return,t,n)}function Us(e,t,n,r,i){var s=e.memoizedState;s===null?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i}:(s.isBackwards=t,s.rendering=null,s.renderingStartTime=0,s.last=r,s.tail=n,s.tailMode=i)}function cd(e,t,n){var r=t.pendingProps,i=r.revealOrder,s=r.tail;if(ue(e,t,r.children,n),r=B.current,r&2)r=r&1|2,t.flags|=128;else{if(e!==null&&e.flags&128)e:for(e=t.child;e!==null;){if(e.tag===13)e.memoizedState!==null&&Ka(e,n,t);else if(e.tag===19)Ka(e,n,t);else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;e.sibling===null;){if(e.return===null||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(U(B,r),!(t.mode&1))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;n!==null;)e=n.alternate,e!==null&&Ai(e)===null&&(i=n),n=n.sibling;n=i,n===null?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),Us(t,!1,i,n,s);break;case"backwards":for(n=null,i=t.child,t.child=null;i!==null;){if(e=i.alternate,e!==null&&Ai(e)===null){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}Us(t,!0,n,null,s);break;case"together":Us(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function hi(e,t){!(t.mode&1)&&e!==null&&(e.alternate=null,t.alternate=null,t.flags|=2)}function st(e,t,n){if(e!==null&&(t.dependencies=e.dependencies),Qt|=t.lanes,!(n&t.childLanes))return null;if(e!==null&&t.child!==e.child)throw Error(_(153));if(t.child!==null){for(e=t.child,n=Ct(e,e.pendingProps),t.child=n,n.return=t;e.sibling!==null;)e=e.sibling,n=n.sibling=Ct(e,e.pendingProps),n.return=t;n.sibling=null}return t.child}function lp(e,t,n){switch(t.tag){case 3:ad(t),Cn();break;case 5:Dc(t);break;case 1:ye(t.type)&&Ti(t);break;case 4:El(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,i=t.memoizedProps.value;U(Ri,r._currentValue),r._currentValue=i;break;case 13:if(r=t.memoizedState,r!==null)return r.dehydrated!==null?(U(B,B.current&1),t.flags|=128,null):n&t.child.childLanes?ud(e,t,n):(U(B,B.current&1),e=st(e,t,n),e!==null?e.sibling:null);U(B,B.current&1);break;case 19:if(r=(n&t.childLanes)!==0,e.flags&128){if(r)return cd(e,t,n);t.flags|=128}if(i=t.memoizedState,i!==null&&(i.rendering=null,i.tail=null,i.lastEffect=null),U(B,B.current),r)break;return null;case 22:case 23:return t.lanes=0,od(e,t,n)}return st(e,t,n)}var dd,Lo,fd,hd;dd=function(e,t){for(var n=t.child;n!==null;){if(n.tag===5||n.tag===6)e.appendChild(n.stateNode);else if(n.tag!==4&&n.child!==null){n.child.return=n,n=n.child;continue}if(n===t)break;for(;n.sibling===null;){if(n.return===null||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}};Lo=function(){};fd=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,Mt(Ge.current);var s=null;switch(n){case"input":i=Zs(e,i),r=Zs(e,r),s=[];break;case"select":i=V({},i,{value:void 0}),r=V({},r,{value:void 0}),s=[];break;case"textarea":i=no(e,i),r=no(e,r),s=[];break;default:typeof i.onClick!="function"&&typeof r.onClick=="function"&&(e.onclick=Ci)}io(n,r);var o;n=null;for(u in i)if(!r.hasOwnProperty(u)&&i.hasOwnProperty(u)&&i[u]!=null)if(u==="style"){var l=i[u];for(o in l)l.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else u!=="dangerouslySetInnerHTML"&&u!=="children"&&u!=="suppressContentEditableWarning"&&u!=="suppressHydrationWarning"&&u!=="autoFocus"&&(dr.hasOwnProperty(u)?s||(s=[]):(s=s||[]).push(u,null));for(u in r){var a=r[u];if(l=i!=null?i[u]:void 0,r.hasOwnProperty(u)&&a!==l&&(a!=null||l!=null))if(u==="style")if(l){for(o in l)!l.hasOwnProperty(o)||a&&a.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in a)a.hasOwnProperty(o)&&l[o]!==a[o]&&(n||(n={}),n[o]=a[o])}else n||(s||(s=[]),s.push(u,n)),n=a;else u==="dangerouslySetInnerHTML"?(a=a?a.__html:void 0,l=l?l.__html:void 0,a!=null&&l!==a&&(s=s||[]).push(u,a)):u==="children"?typeof a!="string"&&typeof a!="number"||(s=s||[]).push(u,""+a):u!=="suppressContentEditableWarning"&&u!=="suppressHydrationWarning"&&(dr.hasOwnProperty(u)?(a!=null&&u==="onScroll"&&b("scroll",e),s||l===a||(s=[])):(s=s||[]).push(u,a))}n&&(s=s||[]).push("style",n);var u=s;(t.updateQueue=u)&&(t.flags|=4)}};hd=function(e,t,n,r){n!==r&&(t.flags|=4)};function Wn(e,t){if(!M)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;t!==null;)t.alternate!==null&&(n=t),t=t.sibling;n===null?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;n!==null;)n.alternate!==null&&(r=n),n=n.sibling;r===null?t||e.tail===null?e.tail=null:e.tail.sibling=null:r.sibling=null}}function oe(e){var t=e.alternate!==null&&e.alternate.child===e.child,n=0,r=0;if(t)for(var i=e.child;i!==null;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags&14680064,r|=i.flags&14680064,i.return=e,i=i.sibling;else for(i=e.child;i!==null;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags,r|=i.flags,i.return=e,i=i.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function ap(e,t,n){var r=t.pendingProps;switch(vl(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return oe(t),null;case 1:return ye(t.type)&&Pi(),oe(t),null;case 3:return r=t.stateNode,Tn(),F(me),F(ae),Cl(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),(e===null||e.child===null)&&(Gr(t)?t.flags|=4:e===null||e.memoizedState.isDehydrated&&!(t.flags&256)||(t.flags|=1024,Fe!==null&&(Fo(Fe),Fe=null))),Lo(e,t),oe(t),null;case 5:xl(t);var i=Mt(Er.current);if(n=t.type,e!==null&&t.stateNode!=null)fd(e,t,n,r,i),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(t.stateNode===null)throw Error(_(166));return oe(t),null}if(e=Mt(Ge.current),Gr(t)){r=t.stateNode,n=t.type;var s=t.memoizedProps;switch(r[Qe]=t,r[kr]=s,e=(t.mode&1)!==0,n){case"dialog":b("cancel",r),b("close",r);break;case"iframe":case"object":case"embed":b("load",r);break;case"video":case"audio":for(i=0;i<Yn.length;i++)b(Yn[i],r);break;case"source":b("error",r);break;case"img":case"image":case"link":b("error",r),b("load",r);break;case"details":b("toggle",r);break;case"input":ta(r,s),b("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!s.multiple},b("invalid",r);break;case"textarea":ra(r,s),b("invalid",r)}io(n,s),i=null;for(var o in s)if(s.hasOwnProperty(o)){var l=s[o];o==="children"?typeof l=="string"?r.textContent!==l&&(s.suppressHydrationWarning!==!0&&qr(r.textContent,l,e),i=["children",l]):typeof l=="number"&&r.textContent!==""+l&&(s.suppressHydrationWarning!==!0&&qr(r.textContent,l,e),i=["children",""+l]):dr.hasOwnProperty(o)&&l!=null&&o==="onScroll"&&b("scroll",r)}switch(n){case"input":Fr(r),na(r,s,!0);break;case"textarea":Fr(r),ia(r);break;case"select":case"option":break;default:typeof s.onClick=="function"&&(r.onclick=Ci)}r=i,t.updateQueue=r,r!==null&&(t.flags|=4)}else{o=i.nodeType===9?i:i.ownerDocument,e==="http://www.w3.org/1999/xhtml"&&(e=Mu(n)),e==="http://www.w3.org/1999/xhtml"?n==="script"?(e=o.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):typeof r.is=="string"?e=o.createElement(n,{is:r.is}):(e=o.createElement(n),n==="select"&&(o=e,r.multiple?o.multiple=!0:r.size&&(o.size=r.size))):e=o.createElementNS(e,n),e[Qe]=t,e[kr]=r,dd(e,t,!1,!1),t.stateNode=e;e:{switch(o=so(n,r),n){case"dialog":b("cancel",e),b("close",e),i=r;break;case"iframe":case"object":case"embed":b("load",e),i=r;break;case"video":case"audio":for(i=0;i<Yn.length;i++)b(Yn[i],e);i=r;break;case"source":b("error",e),i=r;break;case"img":case"image":case"link":b("error",e),b("load",e),i=r;break;case"details":b("toggle",e),i=r;break;case"input":ta(e,r),i=Zs(e,r),b("invalid",e);break;case"option":i=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=V({},r,{value:void 0}),b("invalid",e);break;case"textarea":ra(e,r),i=no(e,r),b("invalid",e);break;default:i=r}io(n,i),l=i;for(s in l)if(l.hasOwnProperty(s)){var a=l[s];s==="style"?Vu(e,a):s==="dangerouslySetInnerHTML"?(a=a?a.__html:void 0,a!=null&&Bu(e,a)):s==="children"?typeof a=="string"?(n!=="textarea"||a!=="")&&fr(e,a):typeof a=="number"&&fr(e,""+a):s!=="suppressContentEditableWarning"&&s!=="suppressHydrationWarning"&&s!=="autoFocus"&&(dr.hasOwnProperty(s)?a!=null&&s==="onScroll"&&b("scroll",e):a!=null&&tl(e,s,a,o))}switch(n){case"input":Fr(e),na(e,r,!1);break;case"textarea":Fr(e),ia(e);break;case"option":r.value!=null&&e.setAttribute("value",""+Pt(r.value));break;case"select":e.multiple=!!r.multiple,s=r.value,s!=null?vn(e,!!r.multiple,s,!1):r.defaultValue!=null&&vn(e,!!r.multiple,r.defaultValue,!0);break;default:typeof i.onClick=="function"&&(e.onclick=Ci)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}t.ref!==null&&(t.flags|=512,t.flags|=2097152)}return oe(t),null;case 6:if(e&&t.stateNode!=null)hd(e,t,e.memoizedProps,r);else{if(typeof r!="string"&&t.stateNode===null)throw Error(_(166));if(n=Mt(Er.current),Mt(Ge.current),Gr(t)){if(r=t.stateNode,n=t.memoizedProps,r[Qe]=t,(s=r.nodeValue!==n)&&(e=Ee,e!==null))switch(e.tag){case 3:qr(r.nodeValue,n,(e.mode&1)!==0);break;case 5:e.memoizedProps.suppressHydrationWarning!==!0&&qr(r.nodeValue,n,(e.mode&1)!==0)}s&&(t.flags|=4)}else r=(n.nodeType===9?n:n.ownerDocument).createTextNode(r),r[Qe]=t,t.stateNode=r}return oe(t),null;case 13:if(F(B),r=t.memoizedState,e===null||e.memoizedState!==null&&e.memoizedState.dehydrated!==null){if(M&&Se!==null&&t.mode&1&&!(t.flags&128))$c(),Cn(),t.flags|=98560,s=!1;else if(s=Gr(t),r!==null&&r.dehydrated!==null){if(e===null){if(!s)throw Error(_(318));if(s=t.memoizedState,s=s!==null?s.dehydrated:null,!s)throw Error(_(317));s[Qe]=t}else Cn(),!(t.flags&128)&&(t.memoizedState=null),t.flags|=4;oe(t),s=!1}else Fe!==null&&(Fo(Fe),Fe=null),s=!0;if(!s)return t.flags&65536?t:null}return t.flags&128?(t.lanes=n,t):(r=r!==null,r!==(e!==null&&e.memoizedState!==null)&&r&&(t.child.flags|=8192,t.mode&1&&(e===null||B.current&1?Y===0&&(Y=3):zl())),t.updateQueue!==null&&(t.flags|=4),oe(t),null);case 4:return Tn(),Lo(e,t),e===null&&wr(t.stateNode.containerInfo),oe(t),null;case 10:return _l(t.type._context),oe(t),null;case 17:return ye(t.type)&&Pi(),oe(t),null;case 19:if(F(B),s=t.memoizedState,s===null)return oe(t),null;if(r=(t.flags&128)!==0,o=s.rendering,o===null)if(r)Wn(s,!1);else{if(Y!==0||e!==null&&e.flags&128)for(e=t.child;e!==null;){if(o=Ai(e),o!==null){for(t.flags|=128,Wn(s,!1),r=o.updateQueue,r!==null&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;n!==null;)s=n,e=r,s.flags&=14680066,o=s.alternate,o===null?(s.childLanes=0,s.lanes=e,s.child=null,s.subtreeFlags=0,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=o.childLanes,s.lanes=o.lanes,s.child=o.child,s.subtreeFlags=0,s.deletions=null,s.memoizedProps=o.memoizedProps,s.memoizedState=o.memoizedState,s.updateQueue=o.updateQueue,s.type=o.type,e=o.dependencies,s.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return U(B,B.current&1|2),t.child}e=e.sibling}s.tail!==null&&q()>On&&(t.flags|=128,r=!0,Wn(s,!1),t.lanes=4194304)}else{if(!r)if(e=Ai(o),e!==null){if(t.flags|=128,r=!0,n=e.updateQueue,n!==null&&(t.updateQueue=n,t.flags|=4),Wn(s,!0),s.tail===null&&s.tailMode==="hidden"&&!o.alternate&&!M)return oe(t),null}else 2*q()-s.renderingStartTime>On&&n!==1073741824&&(t.flags|=128,r=!0,Wn(s,!1),t.lanes=4194304);s.isBackwards?(o.sibling=t.child,t.child=o):(n=s.last,n!==null?n.sibling=o:t.child=o,s.last=o)}return s.tail!==null?(t=s.tail,s.rendering=t,s.tail=t.sibling,s.renderingStartTime=q(),t.sibling=null,n=B.current,U(B,r?n&1|2:n&1),t):(oe(t),null);case 22:case 23:return Dl(),r=t.memoizedState!==null,e!==null&&e.memoizedState!==null!==r&&(t.flags|=8192),r&&t.mode&1?ke&1073741824&&(oe(t),t.subtreeFlags&6&&(t.flags|=8192)):oe(t),null;case 24:return null;case 25:return null}throw Error(_(156,t.tag))}function up(e,t){switch(vl(t),t.tag){case 1:return ye(t.type)&&Pi(),e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 3:return Tn(),F(me),F(ae),Cl(),e=t.flags,e&65536&&!(e&128)?(t.flags=e&-65537|128,t):null;case 5:return xl(t),null;case 13:if(F(B),e=t.memoizedState,e!==null&&e.dehydrated!==null){if(t.alternate===null)throw Error(_(340));Cn()}return e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 19:return F(B),null;case 4:return Tn(),null;case 10:return _l(t.type._context),null;case 22:case 23:return Dl(),null;case 24:return null;default:return null}}var Xr=!1,le=!1,cp=typeof WeakSet=="function"?WeakSet:Set,S=null;function pn(e,t){var n=e.ref;if(n!==null)if(typeof n=="function")try{n(null)}catch(r){W(e,t,r)}else n.current=null}function Ao(e,t,n){try{n()}catch(r){W(e,t,r)}}var Qa=!1;function dp(e,t){if(vo=Si,e=yc(),pl(e)){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{n=(n=e.ownerDocument)&&n.defaultView||window;var r=n.getSelection&&n.getSelection();if(r&&r.rangeCount!==0){n=r.anchorNode;var i=r.anchorOffset,s=r.focusNode;r=r.focusOffset;try{n.nodeType,s.nodeType}catch{n=null;break e}var o=0,l=-1,a=-1,u=0,c=0,d=e,h=null;t:for(;;){for(var v;d!==n||i!==0&&d.nodeType!==3||(l=o+i),d!==s||r!==0&&d.nodeType!==3||(a=o+r),d.nodeType===3&&(o+=d.nodeValue.length),(v=d.firstChild)!==null;)h=d,d=v;for(;;){if(d===e)break t;if(h===n&&++u===i&&(l=o),h===s&&++c===r&&(a=o),(v=d.nextSibling)!==null)break;d=h,h=d.parentNode}d=v}n=l===-1||a===-1?null:{start:l,end:a}}else n=null}n=n||{start:0,end:0}}else n=null;for(mo={focusedElem:e,selectionRange:n},Si=!1,S=t;S!==null;)if(t=S,e=t.child,(t.subtreeFlags&1028)!==0&&e!==null)e.return=t,S=e;else for(;S!==null;){t=S;try{var m=t.alternate;if(t.flags&1024)switch(t.tag){case 0:case 11:case 15:break;case 1:if(m!==null){var w=m.memoizedProps,x=m.memoizedState,p=t.stateNode,f=p.getSnapshotBeforeUpdate(t.elementType===t.type?w:De(t.type,w),x);p.__reactInternalSnapshotBeforeUpdate=f}break;case 3:var g=t.stateNode.containerInfo;g.nodeType===1?g.textContent="":g.nodeType===9&&g.documentElement&&g.removeChild(g.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(_(163))}}catch(y){W(t,t.return,y)}if(e=t.sibling,e!==null){e.return=t.return,S=e;break}S=t.return}return m=Qa,Qa=!1,m}function sr(e,t,n){var r=t.updateQueue;if(r=r!==null?r.lastEffect:null,r!==null){var i=r=r.next;do{if((i.tag&e)===e){var s=i.destroy;i.destroy=void 0,s!==void 0&&Ao(t,n,s)}i=i.next}while(i!==r)}}function Xi(e,t){if(t=t.updateQueue,t=t!==null?t.lastEffect:null,t!==null){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function Io(e){var t=e.ref;if(t!==null){var n=e.stateNode;switch(e.tag){case 5:e=n;break;default:e=n}typeof t=="function"?t(e):t.current=e}}function pd(e){var t=e.alternate;t!==null&&(e.alternate=null,pd(t)),e.child=null,e.deletions=null,e.sibling=null,e.tag===5&&(t=e.stateNode,t!==null&&(delete t[Qe],delete t[kr],delete t[_o],delete t[Qh],delete t[qh])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function gd(e){return e.tag===5||e.tag===3||e.tag===4}function qa(e){e:for(;;){for(;e.sibling===null;){if(e.return===null||gd(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;e.tag!==5&&e.tag!==6&&e.tag!==18;){if(e.flags&2||e.child===null||e.tag===4)continue e;e.child.return=e,e=e.child}if(!(e.flags&2))return e.stateNode}}function No(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.nodeType===8?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(n.nodeType===8?(t=n.parentNode,t.insertBefore(e,n)):(t=n,t.appendChild(e)),n=n._reactRootContainer,n!=null||t.onclick!==null||(t.onclick=Ci));else if(r!==4&&(e=e.child,e!==null))for(No(e,t,n),e=e.sibling;e!==null;)No(e,t,n),e=e.sibling}function Do(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(r!==4&&(e=e.child,e!==null))for(Do(e,t,n),e=e.sibling;e!==null;)Do(e,t,n),e=e.sibling}var ne=null,ze=!1;function lt(e,t,n){for(n=n.child;n!==null;)vd(e,t,n),n=n.sibling}function vd(e,t,n){if(qe&&typeof qe.onCommitFiberUnmount=="function")try{qe.onCommitFiberUnmount(Vi,n)}catch{}switch(n.tag){case 5:le||pn(n,t);case 6:var r=ne,i=ze;ne=null,lt(e,t,n),ne=r,ze=i,ne!==null&&(ze?(e=ne,n=n.stateNode,e.nodeType===8?e.parentNode.removeChild(n):e.removeChild(n)):ne.removeChild(n.stateNode));break;case 18:ne!==null&&(ze?(e=ne,n=n.stateNode,e.nodeType===8?$s(e.parentNode,n):e.nodeType===1&&$s(e,n),vr(e)):$s(ne,n.stateNode));break;case 4:r=ne,i=ze,ne=n.stateNode.containerInfo,ze=!0,lt(e,t,n),ne=r,ze=i;break;case 0:case 11:case 14:case 15:if(!le&&(r=n.updateQueue,r!==null&&(r=r.lastEffect,r!==null))){i=r=r.next;do{var s=i,o=s.destroy;s=s.tag,o!==void 0&&(s&2||s&4)&&Ao(n,t,o),i=i.next}while(i!==r)}lt(e,t,n);break;case 1:if(!le&&(pn(n,t),r=n.stateNode,typeof r.componentWillUnmount=="function"))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(l){W(n,t,l)}lt(e,t,n);break;case 21:lt(e,t,n);break;case 22:n.mode&1?(le=(r=le)||n.memoizedState!==null,lt(e,t,n),le=r):lt(e,t,n);break;default:lt(e,t,n)}}function Ga(e){var t=e.updateQueue;if(t!==null){e.updateQueue=null;var n=e.stateNode;n===null&&(n=e.stateNode=new cp),t.forEach(function(r){var i=_p.bind(null,e,r);n.has(r)||(n.add(r),r.then(i,i))})}}function Ne(e,t){var n=t.deletions;if(n!==null)for(var r=0;r<n.length;r++){var i=n[r];try{var s=e,o=t,l=o;e:for(;l!==null;){switch(l.tag){case 5:ne=l.stateNode,ze=!1;break e;case 3:ne=l.stateNode.containerInfo,ze=!0;break e;case 4:ne=l.stateNode.containerInfo,ze=!0;break e}l=l.return}if(ne===null)throw Error(_(160));vd(s,o,i),ne=null,ze=!1;var a=i.alternate;a!==null&&(a.return=null),i.return=null}catch(u){W(i,t,u)}}if(t.subtreeFlags&12854)for(t=t.child;t!==null;)md(t,e),t=t.sibling}function md(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(Ne(t,e),Ve(e),r&4){try{sr(3,e,e.return),Xi(3,e)}catch(w){W(e,e.return,w)}try{sr(5,e,e.return)}catch(w){W(e,e.return,w)}}break;case 1:Ne(t,e),Ve(e),r&512&&n!==null&&pn(n,n.return);break;case 5:if(Ne(t,e),Ve(e),r&512&&n!==null&&pn(n,n.return),e.flags&32){var i=e.stateNode;try{fr(i,"")}catch(w){W(e,e.return,w)}}if(r&4&&(i=e.stateNode,i!=null)){var s=e.memoizedProps,o=n!==null?n.memoizedProps:s,l=e.type,a=e.updateQueue;if(e.updateQueue=null,a!==null)try{l==="input"&&s.type==="radio"&&s.name!=null&&bu(i,s),so(l,o);var u=so(l,s);for(o=0;o<a.length;o+=2){var c=a[o],d=a[o+1];c==="style"?Vu(i,d):c==="dangerouslySetInnerHTML"?Bu(i,d):c==="children"?fr(i,d):tl(i,c,d,u)}switch(l){case"input":eo(i,s);break;case"textarea":Fu(i,s);break;case"select":var h=i._wrapperState.wasMultiple;i._wrapperState.wasMultiple=!!s.multiple;var v=s.value;v!=null?vn(i,!!s.multiple,v,!1):h!==!!s.multiple&&(s.defaultValue!=null?vn(i,!!s.multiple,s.defaultValue,!0):vn(i,!!s.multiple,s.multiple?[]:"",!1))}i[kr]=s}catch(w){W(e,e.return,w)}}break;case 6:if(Ne(t,e),Ve(e),r&4){if(e.stateNode===null)throw Error(_(162));i=e.stateNode,s=e.memoizedProps;try{i.nodeValue=s}catch(w){W(e,e.return,w)}}break;case 3:if(Ne(t,e),Ve(e),r&4&&n!==null&&n.memoizedState.isDehydrated)try{vr(t.containerInfo)}catch(w){W(e,e.return,w)}break;case 4:Ne(t,e),Ve(e);break;case 13:Ne(t,e),Ve(e),i=e.child,i.flags&8192&&(s=i.memoizedState!==null,i.stateNode.isHidden=s,!s||i.alternate!==null&&i.alternate.memoizedState!==null||(Il=q())),r&4&&Ga(e);break;case 22:if(c=n!==null&&n.memoizedState!==null,e.mode&1?(le=(u=le)||c,Ne(t,e),le=u):Ne(t,e),Ve(e),r&8192){if(u=e.memoizedState!==null,(e.stateNode.isHidden=u)&&!c&&e.mode&1)for(S=e,c=e.child;c!==null;){for(d=S=c;S!==null;){switch(h=S,v=h.child,h.tag){case 0:case 11:case 14:case 15:sr(4,h,h.return);break;case 1:pn(h,h.return);var m=h.stateNode;if(typeof m.componentWillUnmount=="function"){r=h,n=h.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(w){W(r,n,w)}}break;case 5:pn(h,h.return);break;case 22:if(h.memoizedState!==null){Ya(d);continue}}v!==null?(v.return=h,S=v):Ya(d)}c=c.sibling}e:for(c=null,d=e;;){if(d.tag===5){if(c===null){c=d;try{i=d.stateNode,u?(s=i.style,typeof s.setProperty=="function"?s.setProperty("display","none","important"):s.display="none"):(l=d.stateNode,a=d.memoizedProps.style,o=a!=null&&a.hasOwnProperty("display")?a.display:null,l.style.display=Hu("display",o))}catch(w){W(e,e.return,w)}}}else if(d.tag===6){if(c===null)try{d.stateNode.nodeValue=u?"":d.memoizedProps}catch(w){W(e,e.return,w)}}else if((d.tag!==22&&d.tag!==23||d.memoizedState===null||d===e)&&d.child!==null){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;d.sibling===null;){if(d.return===null||d.return===e)break e;c===d&&(c=null),d=d.return}c===d&&(c=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:Ne(t,e),Ve(e),r&4&&Ga(e);break;case 21:break;default:Ne(t,e),Ve(e)}}function Ve(e){var t=e.flags;if(t&2){try{e:{for(var n=e.return;n!==null;){if(gd(n)){var r=n;break e}n=n.return}throw Error(_(160))}switch(r.tag){case 5:var i=r.stateNode;r.flags&32&&(fr(i,""),r.flags&=-33);var s=qa(e);Do(e,s,i);break;case 3:case 4:var o=r.stateNode.containerInfo,l=qa(e);No(e,l,o);break;default:throw Error(_(161))}}catch(a){W(e,e.return,a)}e.flags&=-3}t&4096&&(e.flags&=-4097)}function fp(e,t,n){S=e,yd(e)}function yd(e,t,n){for(var r=(e.mode&1)!==0;S!==null;){var i=S,s=i.child;if(i.tag===22&&r){var o=i.memoizedState!==null||Xr;if(!o){var l=i.alternate,a=l!==null&&l.memoizedState!==null||le;l=Xr;var u=le;if(Xr=o,(le=a)&&!u)for(S=i;S!==null;)o=S,a=o.child,o.tag===22&&o.memoizedState!==null?Xa(i):a!==null?(a.return=o,S=a):Xa(i);for(;s!==null;)S=s,yd(s),s=s.sibling;S=i,Xr=l,le=u}Ja(e)}else i.subtreeFlags&8772&&s!==null?(s.return=i,S=s):Ja(e)}}function Ja(e){for(;S!==null;){var t=S;if(t.flags&8772){var n=t.alternate;try{if(t.flags&8772)switch(t.tag){case 0:case 11:case 15:le||Xi(5,t);break;case 1:var r=t.stateNode;if(t.flags&4&&!le)if(n===null)r.componentDidMount();else{var i=t.elementType===t.type?n.memoizedProps:De(t.type,n.memoizedProps);r.componentDidUpdate(i,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var s=t.updateQueue;s!==null&&Ia(t,s,r);break;case 3:var o=t.updateQueue;if(o!==null){if(n=null,t.child!==null)switch(t.child.tag){case 5:n=t.child.stateNode;break;case 1:n=t.child.stateNode}Ia(t,o,n)}break;case 5:var l=t.stateNode;if(n===null&&t.flags&4){n=l;var a=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":a.autoFocus&&n.focus();break;case"img":a.src&&(n.src=a.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(t.memoizedState===null){var u=t.alternate;if(u!==null){var c=u.memoizedState;if(c!==null){var d=c.dehydrated;d!==null&&vr(d)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(_(163))}le||t.flags&512&&Io(t)}catch(h){W(t,t.return,h)}}if(t===e){S=null;break}if(n=t.sibling,n!==null){n.return=t.return,S=n;break}S=t.return}}function Ya(e){for(;S!==null;){var t=S;if(t===e){S=null;break}var n=t.sibling;if(n!==null){n.return=t.return,S=n;break}S=t.return}}function Xa(e){for(;S!==null;){var t=S;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{Xi(4,t)}catch(a){W(t,n,a)}break;case 1:var r=t.stateNode;if(typeof r.componentDidMount=="function"){var i=t.return;try{r.componentDidMount()}catch(a){W(t,i,a)}}var s=t.return;try{Io(t)}catch(a){W(t,s,a)}break;case 5:var o=t.return;try{Io(t)}catch(a){W(t,o,a)}}}catch(a){W(t,t.return,a)}if(t===e){S=null;break}var l=t.sibling;if(l!==null){l.return=t.return,S=l;break}S=t.return}}var hp=Math.ceil,Di=ot.ReactCurrentDispatcher,Ll=ot.ReactCurrentOwner,Re=ot.ReactCurrentBatchConfig,N=0,te=null,G=null,re=0,ke=0,gn=Ot(0),Y=0,Tr=null,Qt=0,Zi=0,Al=0,or=null,pe=null,Il=0,On=1/0,Je=null,zi=!1,zo=null,Et=null,Zr=!1,mt=null,Ui=0,lr=0,Uo=null,pi=-1,gi=0;function ce(){return N&6?q():pi!==-1?pi:pi=q()}function xt(e){return e.mode&1?N&2&&re!==0?re&-re:Jh.transition!==null?(gi===0&&(gi=nc()),gi):(e=D,e!==0||(e=window.event,e=e===void 0?16:uc(e.type)),e):1}function Be(e,t,n,r){if(50<lr)throw lr=0,Uo=null,Error(_(185));Rr(e,n,r),(!(N&2)||e!==te)&&(e===te&&(!(N&2)&&(Zi|=n),Y===4&&pt(e,re)),we(e,r),n===1&&N===0&&!(t.mode&1)&&(On=q()+500,Gi&&Rt()))}function we(e,t){var n=e.callbackNode;Jf(e,t);var r=ki(e,e===te?re:0);if(r===0)n!==null&&la(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(n!=null&&la(n),t===1)e.tag===0?Gh(Za.bind(null,e)):jc(Za.bind(null,e)),Wh(function(){!(N&6)&&Rt()}),n=null;else{switch(rc(r)){case 1:n=ol;break;case 4:n=ec;break;case 16:n=_i;break;case 536870912:n=tc;break;default:n=_i}n=Pd(n,wd.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function wd(e,t){if(pi=-1,gi=0,N&6)throw Error(_(327));var n=e.callbackNode;if(kn()&&e.callbackNode!==n)return null;var r=ki(e,e===te?re:0);if(r===0)return null;if(r&30||r&e.expiredLanes||t)t=bi(e,r);else{t=r;var i=N;N|=2;var s=kd();(te!==e||re!==t)&&(Je=null,On=q()+500,Bt(e,t));do try{vp();break}catch(l){_d(e,l)}while(!0);wl(),Di.current=s,N=i,G!==null?t=0:(te=null,re=0,t=Y)}if(t!==0){if(t===2&&(i=co(e),i!==0&&(r=i,t=bo(e,i))),t===1)throw n=Tr,Bt(e,0),pt(e,r),we(e,q()),n;if(t===6)pt(e,r);else{if(i=e.current.alternate,!(r&30)&&!pp(i)&&(t=bi(e,r),t===2&&(s=co(e),s!==0&&(r=s,t=bo(e,s))),t===1))throw n=Tr,Bt(e,0),pt(e,r),we(e,q()),n;switch(e.finishedWork=i,e.finishedLanes=r,t){case 0:case 1:throw Error(_(345));case 2:Dt(e,pe,Je);break;case 3:if(pt(e,r),(r&130023424)===r&&(t=Il+500-q(),10<t)){if(ki(e,0)!==0)break;if(i=e.suspendedLanes,(i&r)!==r){ce(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=wo(Dt.bind(null,e,pe,Je),t);break}Dt(e,pe,Je);break;case 4:if(pt(e,r),(r&4194240)===r)break;for(t=e.eventTimes,i=-1;0<r;){var o=31-Me(r);s=1<<o,o=t[o],o>i&&(i=o),r&=~s}if(r=i,r=q()-r,r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*hp(r/1960))-r,10<r){e.timeoutHandle=wo(Dt.bind(null,e,pe,Je),r);break}Dt(e,pe,Je);break;case 5:Dt(e,pe,Je);break;default:throw Error(_(329))}}}return we(e,q()),e.callbackNode===n?wd.bind(null,e):null}function bo(e,t){var n=or;return e.current.memoizedState.isDehydrated&&(Bt(e,t).flags|=256),e=bi(e,t),e!==2&&(t=pe,pe=n,t!==null&&Fo(t)),e}function Fo(e){pe===null?pe=e:pe.push.apply(pe,e)}function pp(e){for(var t=e;;){if(t.flags&16384){var n=t.updateQueue;if(n!==null&&(n=n.stores,n!==null))for(var r=0;r<n.length;r++){var i=n[r],s=i.getSnapshot;i=i.value;try{if(!He(s(),i))return!1}catch{return!1}}}if(n=t.child,t.subtreeFlags&16384&&n!==null)n.return=t,t=n;else{if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function pt(e,t){for(t&=~Al,t&=~Zi,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Me(t),r=1<<n;e[n]=-1,t&=~r}}function Za(e){if(N&6)throw Error(_(327));kn();var t=ki(e,0);if(!(t&1))return we(e,q()),null;var n=bi(e,t);if(e.tag!==0&&n===2){var r=co(e);r!==0&&(t=r,n=bo(e,r))}if(n===1)throw n=Tr,Bt(e,0),pt(e,t),we(e,q()),n;if(n===6)throw Error(_(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Dt(e,pe,Je),we(e,q()),null}function Nl(e,t){var n=N;N|=1;try{return e(t)}finally{N=n,N===0&&(On=q()+500,Gi&&Rt())}}function qt(e){mt!==null&&mt.tag===0&&!(N&6)&&kn();var t=N;N|=1;var n=Re.transition,r=D;try{if(Re.transition=null,D=1,e)return e()}finally{D=r,Re.transition=n,N=t,!(N&6)&&Rt()}}function Dl(){ke=gn.current,F(gn)}function Bt(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(n!==-1&&(e.timeoutHandle=-1,Vh(n)),G!==null)for(n=G.return;n!==null;){var r=n;switch(vl(r),r.tag){case 1:r=r.type.childContextTypes,r!=null&&Pi();break;case 3:Tn(),F(me),F(ae),Cl();break;case 5:xl(r);break;case 4:Tn();break;case 13:F(B);break;case 19:F(B);break;case 10:_l(r.type._context);break;case 22:case 23:Dl()}n=n.return}if(te=e,G=e=Ct(e.current,null),re=ke=t,Y=0,Tr=null,Al=Zi=Qt=0,pe=or=null,Ft!==null){for(t=0;t<Ft.length;t++)if(n=Ft[t],r=n.interleaved,r!==null){n.interleaved=null;var i=r.next,s=n.pending;if(s!==null){var o=s.next;s.next=i,r.next=o}n.pending=r}Ft=null}return e}function _d(e,t){do{var n=G;try{if(wl(),di.current=Ni,Ii){for(var r=H.memoizedState;r!==null;){var i=r.queue;i!==null&&(i.pending=null),r=r.next}Ii=!1}if(Kt=0,ee=J=H=null,ir=!1,xr=0,Ll.current=null,n===null||n.return===null){Y=1,Tr=t,G=null;break}e:{var s=e,o=n.return,l=n,a=t;if(t=re,l.flags|=32768,a!==null&&typeof a=="object"&&typeof a.then=="function"){var u=a,c=l,d=c.tag;if(!(c.mode&1)&&(d===0||d===11||d===15)){var h=c.alternate;h?(c.updateQueue=h.updateQueue,c.memoizedState=h.memoizedState,c.lanes=h.lanes):(c.updateQueue=null,c.memoizedState=null)}var v=Fa(o);if(v!==null){v.flags&=-257,Ma(v,o,l,s,t),v.mode&1&&ba(s,u,t),t=v,a=u;var m=t.updateQueue;if(m===null){var w=new Set;w.add(a),t.updateQueue=w}else m.add(a);break e}else{if(!(t&1)){ba(s,u,t),zl();break e}a=Error(_(426))}}else if(M&&l.mode&1){var x=Fa(o);if(x!==null){!(x.flags&65536)&&(x.flags|=256),Ma(x,o,l,s,t),ml(jn(a,l));break e}}s=a=jn(a,l),Y!==4&&(Y=2),or===null?or=[s]:or.push(s),s=o;do{switch(s.tag){case 3:s.flags|=65536,t&=-t,s.lanes|=t;var p=rd(s,a,t);Aa(s,p);break e;case 1:l=a;var f=s.type,g=s.stateNode;if(!(s.flags&128)&&(typeof f.getDerivedStateFromError=="function"||g!==null&&typeof g.componentDidCatch=="function"&&(Et===null||!Et.has(g)))){s.flags|=65536,t&=-t,s.lanes|=t;var y=id(s,l,t);Aa(s,y);break e}}s=s.return}while(s!==null)}Ed(n)}catch(k){t=k,G===n&&n!==null&&(G=n=n.return);continue}break}while(!0)}function kd(){var e=Di.current;return Di.current=Ni,e===null?Ni:e}function zl(){(Y===0||Y===3||Y===2)&&(Y=4),te===null||!(Qt&268435455)&&!(Zi&268435455)||pt(te,re)}function bi(e,t){var n=N;N|=2;var r=kd();(te!==e||re!==t)&&(Je=null,Bt(e,t));do try{gp();break}catch(i){_d(e,i)}while(!0);if(wl(),N=n,Di.current=r,G!==null)throw Error(_(261));return te=null,re=0,Y}function gp(){for(;G!==null;)Sd(G)}function vp(){for(;G!==null&&!Mf();)Sd(G)}function Sd(e){var t=Cd(e.alternate,e,ke);e.memoizedProps=e.pendingProps,t===null?Ed(e):G=t,Ll.current=null}function Ed(e){var t=e;do{var n=t.alternate;if(e=t.return,t.flags&32768){if(n=up(n,t),n!==null){n.flags&=32767,G=n;return}if(e!==null)e.flags|=32768,e.subtreeFlags=0,e.deletions=null;else{Y=6,G=null;return}}else if(n=ap(n,t,ke),n!==null){G=n;return}if(t=t.sibling,t!==null){G=t;return}G=t=e}while(t!==null);Y===0&&(Y=5)}function Dt(e,t,n){var r=D,i=Re.transition;try{Re.transition=null,D=1,mp(e,t,n,r)}finally{Re.transition=i,D=r}return null}function mp(e,t,n,r){do kn();while(mt!==null);if(N&6)throw Error(_(327));n=e.finishedWork;var i=e.finishedLanes;if(n===null)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(_(177));e.callbackNode=null,e.callbackPriority=0;var s=n.lanes|n.childLanes;if(Yf(e,s),e===te&&(G=te=null,re=0),!(n.subtreeFlags&2064)&&!(n.flags&2064)||Zr||(Zr=!0,Pd(_i,function(){return kn(),null})),s=(n.flags&15990)!==0,n.subtreeFlags&15990||s){s=Re.transition,Re.transition=null;var o=D;D=1;var l=N;N|=4,Ll.current=null,dp(e,n),md(n,e),zh(mo),Si=!!vo,mo=vo=null,e.current=n,fp(n),Bf(),N=l,D=o,Re.transition=s}else e.current=n;if(Zr&&(Zr=!1,mt=e,Ui=i),s=e.pendingLanes,s===0&&(Et=null),Wf(n.stateNode),we(e,q()),t!==null)for(r=e.onRecoverableError,n=0;n<t.length;n++)i=t[n],r(i.value,{componentStack:i.stack,digest:i.digest});if(zi)throw zi=!1,e=zo,zo=null,e;return Ui&1&&e.tag!==0&&kn(),s=e.pendingLanes,s&1?e===Uo?lr++:(lr=0,Uo=e):lr=0,Rt(),null}function kn(){if(mt!==null){var e=rc(Ui),t=Re.transition,n=D;try{if(Re.transition=null,D=16>e?16:e,mt===null)var r=!1;else{if(e=mt,mt=null,Ui=0,N&6)throw Error(_(331));var i=N;for(N|=4,S=e.current;S!==null;){var s=S,o=s.child;if(S.flags&16){var l=s.deletions;if(l!==null){for(var a=0;a<l.length;a++){var u=l[a];for(S=u;S!==null;){var c=S;switch(c.tag){case 0:case 11:case 15:sr(8,c,s)}var d=c.child;if(d!==null)d.return=c,S=d;else for(;S!==null;){c=S;var h=c.sibling,v=c.return;if(pd(c),c===u){S=null;break}if(h!==null){h.return=v,S=h;break}S=v}}}var m=s.alternate;if(m!==null){var w=m.child;if(w!==null){m.child=null;do{var x=w.sibling;w.sibling=null,w=x}while(w!==null)}}S=s}}if(s.subtreeFlags&2064&&o!==null)o.return=s,S=o;else e:for(;S!==null;){if(s=S,s.flags&2048)switch(s.tag){case 0:case 11:case 15:sr(9,s,s.return)}var p=s.sibling;if(p!==null){p.return=s.return,S=p;break e}S=s.return}}var f=e.current;for(S=f;S!==null;){o=S;var g=o.child;if(o.subtreeFlags&2064&&g!==null)g.return=o,S=g;else e:for(o=f;S!==null;){if(l=S,l.flags&2048)try{switch(l.tag){case 0:case 11:case 15:Xi(9,l)}}catch(k){W(l,l.return,k)}if(l===o){S=null;break e}var y=l.sibling;if(y!==null){y.return=l.return,S=y;break e}S=l.return}}if(N=i,Rt(),qe&&typeof qe.onPostCommitFiberRoot=="function")try{qe.onPostCommitFiberRoot(Vi,e)}catch{}r=!0}return r}finally{D=n,Re.transition=t}}return!1}function eu(e,t,n){t=jn(n,t),t=rd(e,t,1),e=St(e,t,1),t=ce(),e!==null&&(Rr(e,1,t),we(e,t))}function W(e,t,n){if(e.tag===3)eu(e,e,n);else for(;t!==null;){if(t.tag===3){eu(t,e,n);break}else if(t.tag===1){var r=t.stateNode;if(typeof t.type.getDerivedStateFromError=="function"||typeof r.componentDidCatch=="function"&&(Et===null||!Et.has(r))){e=jn(n,e),e=id(t,e,1),t=St(t,e,1),e=ce(),t!==null&&(Rr(t,1,e),we(t,e));break}}t=t.return}}function yp(e,t,n){var r=e.pingCache;r!==null&&r.delete(t),t=ce(),e.pingedLanes|=e.suspendedLanes&n,te===e&&(re&n)===n&&(Y===4||Y===3&&(re&130023424)===re&&500>q()-Il?Bt(e,0):Al|=n),we(e,t)}function xd(e,t){t===0&&(e.mode&1?(t=Hr,Hr<<=1,!(Hr&130023424)&&(Hr=4194304)):t=1);var n=ce();e=it(e,t),e!==null&&(Rr(e,t,n),we(e,n))}function wp(e){var t=e.memoizedState,n=0;t!==null&&(n=t.retryLane),xd(e,n)}function _p(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,i=e.memoizedState;i!==null&&(n=i.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(_(314))}r!==null&&r.delete(t),xd(e,n)}var Cd;Cd=function(e,t,n){if(e!==null)if(e.memoizedProps!==t.pendingProps||me.current)ve=!0;else{if(!(e.lanes&n)&&!(t.flags&128))return ve=!1,lp(e,t,n);ve=!!(e.flags&131072)}else ve=!1,M&&t.flags&1048576&&Oc(t,Oi,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;hi(e,t),e=t.pendingProps;var i=xn(t,ae.current);_n(t,n),i=Tl(null,t,r,e,i,n);var s=jl();return t.flags|=1,typeof i=="object"&&i!==null&&typeof i.render=="function"&&i.$$typeof===void 0?(t.tag=1,t.memoizedState=null,t.updateQueue=null,ye(r)?(s=!0,Ti(t)):s=!1,t.memoizedState=i.state!==null&&i.state!==void 0?i.state:null,Sl(t),i.updater=Yi,t.stateNode=i,i._reactInternals=t,Po(t,r,e,n),t=Oo(null,t,r,!0,s,n)):(t.tag=0,M&&s&&gl(t),ue(null,t,i,n),t=t.child),t;case 16:r=t.elementType;e:{switch(hi(e,t),e=t.pendingProps,i=r._init,r=i(r._payload),t.type=r,i=t.tag=Sp(r),e=De(r,e),i){case 0:t=jo(null,t,r,e,n);break e;case 1:t=Va(null,t,r,e,n);break e;case 11:t=Ba(null,t,r,e,n);break e;case 14:t=Ha(null,t,r,De(r.type,e),n);break e}throw Error(_(306,r,""))}return t;case 0:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:De(r,i),jo(e,t,r,i,n);case 1:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:De(r,i),Va(e,t,r,i,n);case 3:e:{if(ad(t),e===null)throw Error(_(387));r=t.pendingProps,s=t.memoizedState,i=s.element,Nc(e,t),Li(t,r,null,n);var o=t.memoizedState;if(r=o.element,s.isDehydrated)if(s={element:r,isDehydrated:!1,cache:o.cache,pendingSuspenseBoundaries:o.pendingSuspenseBoundaries,transitions:o.transitions},t.updateQueue.baseState=s,t.memoizedState=s,t.flags&256){i=jn(Error(_(423)),t),t=Wa(e,t,r,n,i);break e}else if(r!==i){i=jn(Error(_(424)),t),t=Wa(e,t,r,n,i);break e}else for(Se=kt(t.stateNode.containerInfo.firstChild),Ee=t,M=!0,Fe=null,n=Ac(t,null,r,n),t.child=n;n;)n.flags=n.flags&-3|4096,n=n.sibling;else{if(Cn(),r===i){t=st(e,t,n);break e}ue(e,t,r,n)}t=t.child}return t;case 5:return Dc(t),e===null&&Eo(t),r=t.type,i=t.pendingProps,s=e!==null?e.memoizedProps:null,o=i.children,yo(r,i)?o=null:s!==null&&yo(r,s)&&(t.flags|=32),ld(e,t),ue(e,t,o,n),t.child;case 6:return e===null&&Eo(t),null;case 13:return ud(e,t,n);case 4:return El(t,t.stateNode.containerInfo),r=t.pendingProps,e===null?t.child=Pn(t,null,r,n):ue(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:De(r,i),Ba(e,t,r,i,n);case 7:return ue(e,t,t.pendingProps,n),t.child;case 8:return ue(e,t,t.pendingProps.children,n),t.child;case 12:return ue(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,s=t.memoizedProps,o=i.value,U(Ri,r._currentValue),r._currentValue=o,s!==null)if(He(s.value,o)){if(s.children===i.children&&!me.current){t=st(e,t,n);break e}}else for(s=t.child,s!==null&&(s.return=t);s!==null;){var l=s.dependencies;if(l!==null){o=s.child;for(var a=l.firstContext;a!==null;){if(a.context===r){if(s.tag===1){a=tt(-1,n&-n),a.tag=2;var u=s.updateQueue;if(u!==null){u=u.shared;var c=u.pending;c===null?a.next=a:(a.next=c.next,c.next=a),u.pending=a}}s.lanes|=n,a=s.alternate,a!==null&&(a.lanes|=n),xo(s.return,n,t),l.lanes|=n;break}a=a.next}}else if(s.tag===10)o=s.type===t.type?null:s.child;else if(s.tag===18){if(o=s.return,o===null)throw Error(_(341));o.lanes|=n,l=o.alternate,l!==null&&(l.lanes|=n),xo(o,n,t),o=s.sibling}else o=s.child;if(o!==null)o.return=s;else for(o=s;o!==null;){if(o===t){o=null;break}if(s=o.sibling,s!==null){s.return=o.return,o=s;break}o=o.return}s=o}ue(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=t.pendingProps.children,_n(t,n),i=Le(i),r=r(i),t.flags|=1,ue(e,t,r,n),t.child;case 14:return r=t.type,i=De(r,t.pendingProps),i=De(r.type,i),Ha(e,t,r,i,n);case 15:return sd(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:De(r,i),hi(e,t),t.tag=1,ye(r)?(e=!0,Ti(t)):e=!1,_n(t,n),nd(t,r,i),Po(t,r,i,n),Oo(null,t,r,!0,e,n);case 19:return cd(e,t,n);case 22:return od(e,t,n)}throw Error(_(156,t.tag))};function Pd(e,t){return Zu(e,t)}function kp(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Oe(e,t,n,r){return new kp(e,t,n,r)}function Ul(e){return e=e.prototype,!(!e||!e.isReactComponent)}function Sp(e){if(typeof e=="function")return Ul(e)?1:0;if(e!=null){if(e=e.$$typeof,e===rl)return 11;if(e===il)return 14}return 2}function Ct(e,t){var n=e.alternate;return n===null?(n=Oe(e.tag,t,e.key,e.mode),n.elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=e.flags&14680064,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function vi(e,t,n,r,i,s){var o=2;if(r=e,typeof e=="function")Ul(e)&&(o=1);else if(typeof e=="string")o=5;else e:switch(e){case sn:return Ht(n.children,i,s,t);case nl:o=8,i|=8;break;case Gs:return e=Oe(12,n,t,i|2),e.elementType=Gs,e.lanes=s,e;case Js:return e=Oe(13,n,t,i),e.elementType=Js,e.lanes=s,e;case Ys:return e=Oe(19,n,t,i),e.elementType=Ys,e.lanes=s,e;case Du:return es(n,i,s,t);default:if(typeof e=="object"&&e!==null)switch(e.$$typeof){case Iu:o=10;break e;case Nu:o=9;break e;case rl:o=11;break e;case il:o=14;break e;case ct:o=16,r=null;break e}throw Error(_(130,e==null?e:typeof e,""))}return t=Oe(o,n,t,i),t.elementType=e,t.type=r,t.lanes=s,t}function Ht(e,t,n,r){return e=Oe(7,e,r,t),e.lanes=n,e}function es(e,t,n,r){return e=Oe(22,e,r,t),e.elementType=Du,e.lanes=n,e.stateNode={isHidden:!1},e}function bs(e,t,n){return e=Oe(6,e,null,t),e.lanes=n,e}function Fs(e,t,n){return t=Oe(4,e.children!==null?e.children:[],e.key,t),t.lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ep(e,t,n,r,i){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=_s(0),this.expirationTimes=_s(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=_s(0),this.identifierPrefix=r,this.onRecoverableError=i,this.mutableSourceEagerHydrationData=null}function bl(e,t,n,r,i,s,o,l,a){return e=new Ep(e,t,n,l,a),t===1?(t=1,s===!0&&(t|=8)):t=0,s=Oe(3,null,null,t),e.current=s,s.stateNode=e,s.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Sl(s),e}function xp(e,t,n){var r=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:rn,key:r==null?null:""+r,children:e,containerInfo:t,implementation:n}}function Td(e){if(!e)return Tt;e=e._reactInternals;e:{if(Jt(e)!==e||e.tag!==1)throw Error(_(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(ye(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(t!==null);throw Error(_(171))}if(e.tag===1){var n=e.type;if(ye(n))return Tc(e,n,t)}return t}function jd(e,t,n,r,i,s,o,l,a){return e=bl(n,r,!0,e,i,s,o,l,a),e.context=Td(null),n=e.current,r=ce(),i=xt(n),s=tt(r,i),s.callback=t??null,St(n,s,i),e.current.lanes=i,Rr(e,i,r),we(e,r),e}function ts(e,t,n,r){var i=t.current,s=ce(),o=xt(i);return n=Td(n),t.context===null?t.context=n:t.pendingContext=n,t=tt(s,o),t.payload={element:e},r=r===void 0?null:r,r!==null&&(t.callback=r),e=St(i,t,o),e!==null&&(Be(e,i,o,s),ci(e,i,o)),o}function Fi(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return e.child.stateNode;default:return e.child.stateNode}}function tu(e,t){if(e=e.memoizedState,e!==null&&e.dehydrated!==null){var n=e.retryLane;e.retryLane=n!==0&&n<t?n:t}}function Fl(e,t){tu(e,t),(e=e.alternate)&&tu(e,t)}function Cp(){return null}var Od=typeof reportError=="function"?reportError:function(e){console.error(e)};function Ml(e){this._internalRoot=e}ns.prototype.render=Ml.prototype.render=function(e){var t=this._internalRoot;if(t===null)throw Error(_(409));ts(e,t,null,null)};ns.prototype.unmount=Ml.prototype.unmount=function(){var e=this._internalRoot;if(e!==null){this._internalRoot=null;var t=e.containerInfo;qt(function(){ts(null,e,null,null)}),t[rt]=null}};function ns(e){this._internalRoot=e}ns.prototype.unstable_scheduleHydration=function(e){if(e){var t=oc();e={blockedOn:null,target:e,priority:t};for(var n=0;n<ht.length&&t!==0&&t<ht[n].priority;n++);ht.splice(n,0,e),n===0&&ac(e)}};function Bl(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11)}function rs(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11&&(e.nodeType!==8||e.nodeValue!==" react-mount-point-unstable "))}function nu(){}function Pp(e,t,n,r,i){if(i){if(typeof r=="function"){var s=r;r=function(){var u=Fi(o);s.call(u)}}var o=jd(t,r,e,0,null,!1,!1,"",nu);return e._reactRootContainer=o,e[rt]=o.current,wr(e.nodeType===8?e.parentNode:e),qt(),o}for(;i=e.lastChild;)e.removeChild(i);if(typeof r=="function"){var l=r;r=function(){var u=Fi(a);l.call(u)}}var a=bl(e,0,!1,null,null,!1,!1,"",nu);return e._reactRootContainer=a,e[rt]=a.current,wr(e.nodeType===8?e.parentNode:e),qt(function(){ts(t,a,n,r)}),a}function is(e,t,n,r,i){var s=n._reactRootContainer;if(s){var o=s;if(typeof i=="function"){var l=i;i=function(){var a=Fi(o);l.call(a)}}ts(t,o,e,i)}else o=Pp(n,t,e,i,r);return Fi(o)}ic=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=Jn(t.pendingLanes);n!==0&&(ll(t,n|1),we(t,q()),!(N&6)&&(On=q()+500,Rt()))}break;case 13:qt(function(){var r=it(e,1);if(r!==null){var i=ce();Be(r,e,1,i)}}),Fl(e,1)}};al=function(e){if(e.tag===13){var t=it(e,134217728);if(t!==null){var n=ce();Be(t,e,134217728,n)}Fl(e,134217728)}};sc=function(e){if(e.tag===13){var t=xt(e),n=it(e,t);if(n!==null){var r=ce();Be(n,e,t,r)}Fl(e,t)}};oc=function(){return D};lc=function(e,t){var n=D;try{return D=e,t()}finally{D=n}};lo=function(e,t,n){switch(t){case"input":if(eo(e,n),t=n.name,n.type==="radio"&&t!=null){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=qi(r);if(!i)throw Error(_(90));Uu(r),eo(r,i)}}}break;case"textarea":Fu(e,n);break;case"select":t=n.value,t!=null&&vn(e,!!n.multiple,t,!1)}};Qu=Nl;qu=qt;var Tp={usingClientEntryPoint:!1,Events:[Lr,un,qi,Wu,Ku,Nl]},Kn={findFiberByHostInstance:bt,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},jp={bundleType:Kn.bundleType,version:Kn.version,rendererPackageName:Kn.rendererPackageName,rendererConfig:Kn.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ot.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return e=Yu(e),e===null?null:e.stateNode},findFiberByHostInstance:Kn.findFiberByHostInstance||Cp,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var ei=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ei.isDisabled&&ei.supportsFiber)try{Vi=ei.inject(jp),qe=ei}catch{}}Ce.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Tp;Ce.createPortal=function(e,t){var n=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!Bl(t))throw Error(_(200));return xp(e,t,null,n)};Ce.createRoot=function(e,t){if(!Bl(e))throw Error(_(299));var n=!1,r="",i=Od;return t!=null&&(t.unstable_strictMode===!0&&(n=!0),t.identifierPrefix!==void 0&&(r=t.identifierPrefix),t.onRecoverableError!==void 0&&(i=t.onRecoverableError)),t=bl(e,1,!1,null,null,n,!1,r,i),e[rt]=t.current,wr(e.nodeType===8?e.parentNode:e),new Ml(t)};Ce.findDOMNode=function(e){if(e==null)return null;if(e.nodeType===1)return e;var t=e._reactInternals;if(t===void 0)throw typeof e.render=="function"?Error(_(188)):(e=Object.keys(e).join(","),Error(_(268,e)));return e=Yu(t),e=e===null?null:e.stateNode,e};Ce.flushSync=function(e){return qt(e)};Ce.hydrate=function(e,t,n){if(!rs(t))throw Error(_(200));return is(null,e,t,!0,n)};Ce.hydrateRoot=function(e,t,n){if(!Bl(e))throw Error(_(405));var r=n!=null&&n.hydratedSources||null,i=!1,s="",o=Od;if(n!=null&&(n.unstable_strictMode===!0&&(i=!0),n.identifierPrefix!==void 0&&(s=n.identifierPrefix),n.onRecoverableError!==void 0&&(o=n.onRecoverableError)),t=jd(t,null,e,1,n??null,i,!1,s,o),e[rt]=t.current,wr(e),r)for(e=0;e<r.length;e++)n=r[e],i=n._getVersion,i=i(n._source),t.mutableSourceEagerHydrationData==null?t.mutableSourceEagerHydrationData=[n,i]:t.mutableSourceEagerHydrationData.push(n,i);return new ns(t)};Ce.render=function(e,t,n){if(!rs(t))throw Error(_(200));return is(null,e,t,!1,n)};Ce.unmountComponentAtNode=function(e){if(!rs(e))throw Error(_(40));return e._reactRootContainer?(qt(function(){is(null,null,e,!1,function(){e._reactRootContainer=null,e[rt]=null})}),!0):!1};Ce.unstable_batchedUpdates=Nl;Ce.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!rs(n))throw Error(_(200));if(e==null||e._reactInternals===void 0)throw Error(_(38));return is(e,t,n,!1,r)};Ce.version="18.3.1-next-f1338f8080-20240426";function Rd(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(Rd)}catch(e){console.error(e)}}Rd(),Ru.exports=Ce;var Op=Ru.exports,ru=Op;Qs.createRoot=ru.createRoot,Qs.hydrateRoot=ru.hydrateRoot;const Rp="modulepreload",$p=function(e){return"/"+e},iu={},Rn=function(t,n,r){let i=Promise.resolve();if(n&&n.length>0){document.getElementsByTagName("link");const o=document.querySelector("meta[property=csp-nonce]"),l=(o==null?void 0:o.nonce)||(o==null?void 0:o.getAttribute("nonce"));i=Promise.allSettled(n.map(a=>{if(a=$p(a),a in iu)return;iu[a]=!0;const u=a.endsWith(".css"),c=u?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${a}"]${c}`))return;const d=document.createElement("link");if(d.rel=u?"stylesheet":Rp,u||(d.as="script"),d.crossOrigin="",d.href=a,l&&d.setAttribute("nonce",l),document.head.appendChild(d),u)return new Promise((h,v)=>{d.addEventListener("load",h),d.addEventListener("error",()=>v(new Error(`Unable to preload CSS for ${a}`)))})}))}function s(o){const l=new Event("vite:preloadError",{cancelable:!0});if(l.payload=o,window.dispatchEvent(l),!l.defaultPrevented)throw o}return i.then(o=>{for(const l of o||[])l.status==="rejected"&&s(l.reason);return t().catch(s)})},Lp=e=>{let t;return e?t=e:typeof fetch>"u"?t=(...n)=>Rn(async()=>{const{default:r}=await Promise.resolve().then(()=>Nn);return{default:r}},void 0).then(({default:r})=>r(...n)):t=fetch,(...n)=>t(...n)};class Hl extends Error{constructor(t,n="FunctionsError",r){super(t),this.name=n,this.context=r}}class Ap extends Hl{constructor(t){super("Failed to send a request to the Edge Function","FunctionsFetchError",t)}}class Ip extends Hl{constructor(t){super("Relay Error invoking the Edge Function","FunctionsRelayError",t)}}class Np extends Hl{constructor(t){super("Edge Function returned a non-2xx status code","FunctionsHttpError",t)}}var Mo;(function(e){e.Any="any",e.ApNortheast1="ap-northeast-1",e.ApNortheast2="ap-northeast-2",e.ApSouth1="ap-south-1",e.ApSoutheast1="ap-southeast-1",e.ApSoutheast2="ap-southeast-2",e.CaCentral1="ca-central-1",e.EuCentral1="eu-central-1",e.EuWest1="eu-west-1",e.EuWest2="eu-west-2",e.EuWest3="eu-west-3",e.SaEast1="sa-east-1",e.UsEast1="us-east-1",e.UsWest1="us-west-1",e.UsWest2="us-west-2"})(Mo||(Mo={}));var Dp=function(e,t,n,r){function i(s){return s instanceof n?s:new n(function(o){o(s)})}return new(n||(n=Promise))(function(s,o){function l(c){try{u(r.next(c))}catch(d){o(d)}}function a(c){try{u(r.throw(c))}catch(d){o(d)}}function u(c){c.done?s(c.value):i(c.value).then(l,a)}u((r=r.apply(e,t||[])).next())})};class zp{constructor(t,{headers:n={},customFetch:r,region:i=Mo.Any}={}){this.url=t,this.headers=n,this.region=i,this.fetch=Lp(r)}setAuth(t){this.headers.Authorization=`Bearer ${t}`}invoke(t,n={}){var r;return Dp(this,void 0,void 0,function*(){try{const{headers:i,method:s,body:o}=n;let l={},{region:a}=n;a||(a=this.region),a&&a!=="any"&&(l["x-region"]=a);let u;o&&(i&&!Object.prototype.hasOwnProperty.call(i,"Content-Type")||!i)&&(typeof Blob<"u"&&o instanceof Blob||o instanceof ArrayBuffer?(l["Content-Type"]="application/octet-stream",u=o):typeof o=="string"?(l["Content-Type"]="text/plain",u=o):typeof FormData<"u"&&o instanceof FormData?u=o:(l["Content-Type"]="application/json",u=JSON.stringify(o)));const c=yield this.fetch(`${this.url}/${t}`,{method:s||"POST",headers:Object.assign(Object.assign(Object.assign({},l),this.headers),i),body:u}).catch(m=>{throw new Ap(m)}),d=c.headers.get("x-relay-error");if(d&&d==="true")throw new Ip(c);if(!c.ok)throw new Np(c);let h=((r=c.headers.get("Content-Type"))!==null&&r!==void 0?r:"text/plain").split(";")[0].trim(),v;return h==="application/json"?v=yield c.json():h==="application/octet-stream"?v=yield c.blob():h==="text/event-stream"?v=c:h==="multipart/form-data"?v=yield c.formData():v=yield c.text(),{data:v,error:null}}catch(i){return{data:null,error:i}}})}}var ge={},Vl={},ss={},Ir={},os={},ls={},Up=function(){if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw new Error("unable to locate global object")},$n=Up();const bp=$n.fetch,$d=$n.fetch.bind($n),Ld=$n.Headers,Fp=$n.Request,Mp=$n.Response,Nn=Object.freeze(Object.defineProperty({__proto__:null,Headers:Ld,Request:Fp,Response:Mp,default:$d,fetch:bp},Symbol.toStringTag,{value:"Module"})),Bp=nf(Nn);var as={};Object.defineProperty(as,"__esModule",{value:!0});let Hp=class extends Error{constructor(t){super(t.message),this.name="PostgrestError",this.details=t.details,this.hint=t.hint,this.code=t.code}};as.default=Hp;var Ad=$e&&$e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(ls,"__esModule",{value:!0});const Vp=Ad(Bp),Wp=Ad(as);let Kp=class{constructor(t){this.shouldThrowOnError=!1,this.method=t.method,this.url=t.url,this.headers=t.headers,this.schema=t.schema,this.body=t.body,this.shouldThrowOnError=t.shouldThrowOnError,this.signal=t.signal,this.isMaybeSingle=t.isMaybeSingle,t.fetch?this.fetch=t.fetch:typeof fetch>"u"?this.fetch=Vp.default:this.fetch=fetch}throwOnError(){return this.shouldThrowOnError=!0,this}setHeader(t,n){return this.headers=Object.assign({},this.headers),this.headers[t]=n,this}then(t,n){this.schema===void 0||(["GET","HEAD"].includes(this.method)?this.headers["Accept-Profile"]=this.schema:this.headers["Content-Profile"]=this.schema),this.method!=="GET"&&this.method!=="HEAD"&&(this.headers["Content-Type"]="application/json");const r=this.fetch;let i=r(this.url.toString(),{method:this.method,headers:this.headers,body:JSON.stringify(this.body),signal:this.signal}).then(async s=>{var o,l,a;let u=null,c=null,d=null,h=s.status,v=s.statusText;if(s.ok){if(this.method!=="HEAD"){const p=await s.text();p===""||(this.headers.Accept==="text/csv"||this.headers.Accept&&this.headers.Accept.includes("application/vnd.pgrst.plan+text")?c=p:c=JSON.parse(p))}const w=(o=this.headers.Prefer)===null||o===void 0?void 0:o.match(/count=(exact|planned|estimated)/),x=(l=s.headers.get("content-range"))===null||l===void 0?void 0:l.split("/");w&&x&&x.length>1&&(d=parseInt(x[1])),this.isMaybeSingle&&this.method==="GET"&&Array.isArray(c)&&(c.length>1?(u={code:"PGRST116",details:`Results contain ${c.length} rows, application/vnd.pgrst.object+json requires 1 row`,hint:null,message:"JSON object requested, multiple (or no) rows returned"},c=null,d=null,h=406,v="Not Acceptable"):c.length===1?c=c[0]:c=null)}else{const w=await s.text();try{u=JSON.parse(w),Array.isArray(u)&&s.status===404&&(c=[],u=null,h=200,v="OK")}catch{s.status===404&&w===""?(h=204,v="No Content"):u={message:w}}if(u&&this.isMaybeSingle&&(!((a=u==null?void 0:u.details)===null||a===void 0)&&a.includes("0 rows"))&&(u=null,h=200,v="OK"),u&&this.shouldThrowOnError)throw new Wp.default(u)}return{error:u,data:c,count:d,status:h,statusText:v}});return this.shouldThrowOnError||(i=i.catch(s=>{var o,l,a;return{error:{message:`${(o=s==null?void 0:s.name)!==null&&o!==void 0?o:"FetchError"}: ${s==null?void 0:s.message}`,details:`${(l=s==null?void 0:s.stack)!==null&&l!==void 0?l:""}`,hint:"",code:`${(a=s==null?void 0:s.code)!==null&&a!==void 0?a:""}`},data:null,count:null,status:0,statusText:""}})),i.then(t,n)}returns(){return this}overrideTypes(){return this}};ls.default=Kp;var Qp=$e&&$e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(os,"__esModule",{value:!0});const qp=Qp(ls);let Gp=class extends qp.default{select(t){let n=!1;const r=(t??"*").split("").map(i=>/\s/.test(i)&&!n?"":(i==='"'&&(n=!n),i)).join("");return this.url.searchParams.set("select",r),this.headers.Prefer&&(this.headers.Prefer+=","),this.headers.Prefer+="return=representation",this}order(t,{ascending:n=!0,nullsFirst:r,foreignTable:i,referencedTable:s=i}={}){const o=s?`${s}.order`:"order",l=this.url.searchParams.get(o);return this.url.searchParams.set(o,`${l?`${l},`:""}${t}.${n?"asc":"desc"}${r===void 0?"":r?".nullsfirst":".nullslast"}`),this}limit(t,{foreignTable:n,referencedTable:r=n}={}){const i=typeof r>"u"?"limit":`${r}.limit`;return this.url.searchParams.set(i,`${t}`),this}range(t,n,{foreignTable:r,referencedTable:i=r}={}){const s=typeof i>"u"?"offset":`${i}.offset`,o=typeof i>"u"?"limit":`${i}.limit`;return this.url.searchParams.set(s,`${t}`),this.url.searchParams.set(o,`${n-t+1}`),this}abortSignal(t){return this.signal=t,this}single(){return this.headers.Accept="application/vnd.pgrst.object+json",this}maybeSingle(){return this.method==="GET"?this.headers.Accept="application/json":this.headers.Accept="application/vnd.pgrst.object+json",this.isMaybeSingle=!0,this}csv(){return this.headers.Accept="text/csv",this}geojson(){return this.headers.Accept="application/geo+json",this}explain({analyze:t=!1,verbose:n=!1,settings:r=!1,buffers:i=!1,wal:s=!1,format:o="text"}={}){var l;const a=[t?"analyze":null,n?"verbose":null,r?"settings":null,i?"buffers":null,s?"wal":null].filter(Boolean).join("|"),u=(l=this.headers.Accept)!==null&&l!==void 0?l:"application/json";return this.headers.Accept=`application/vnd.pgrst.plan+${o}; for="${u}"; options=${a};`,o==="json"?this:this}rollback(){var t;return((t=this.headers.Prefer)!==null&&t!==void 0?t:"").trim().length>0?this.headers.Prefer+=",tx=rollback":this.headers.Prefer="tx=rollback",this}returns(){return this}};os.default=Gp;var Jp=$e&&$e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Ir,"__esModule",{value:!0});const Yp=Jp(os);let Xp=class extends Yp.default{eq(t,n){return this.url.searchParams.append(t,`eq.${n}`),this}neq(t,n){return this.url.searchParams.append(t,`neq.${n}`),this}gt(t,n){return this.url.searchParams.append(t,`gt.${n}`),this}gte(t,n){return this.url.searchParams.append(t,`gte.${n}`),this}lt(t,n){return this.url.searchParams.append(t,`lt.${n}`),this}lte(t,n){return this.url.searchParams.append(t,`lte.${n}`),this}like(t,n){return this.url.searchParams.append(t,`like.${n}`),this}likeAllOf(t,n){return this.url.searchParams.append(t,`like(all).{${n.join(",")}}`),this}likeAnyOf(t,n){return this.url.searchParams.append(t,`like(any).{${n.join(",")}}`),this}ilike(t,n){return this.url.searchParams.append(t,`ilike.${n}`),this}ilikeAllOf(t,n){return this.url.searchParams.append(t,`ilike(all).{${n.join(",")}}`),this}ilikeAnyOf(t,n){return this.url.searchParams.append(t,`ilike(any).{${n.join(",")}}`),this}is(t,n){return this.url.searchParams.append(t,`is.${n}`),this}in(t,n){const r=Array.from(new Set(n)).map(i=>typeof i=="string"&&new RegExp("[,()]").test(i)?`"${i}"`:`${i}`).join(",");return this.url.searchParams.append(t,`in.(${r})`),this}contains(t,n){return typeof n=="string"?this.url.searchParams.append(t,`cs.${n}`):Array.isArray(n)?this.url.searchParams.append(t,`cs.{${n.join(",")}}`):this.url.searchParams.append(t,`cs.${JSON.stringify(n)}`),this}containedBy(t,n){return typeof n=="string"?this.url.searchParams.append(t,`cd.${n}`):Array.isArray(n)?this.url.searchParams.append(t,`cd.{${n.join(",")}}`):this.url.searchParams.append(t,`cd.${JSON.stringify(n)}`),this}rangeGt(t,n){return this.url.searchParams.append(t,`sr.${n}`),this}rangeGte(t,n){return this.url.searchParams.append(t,`nxl.${n}`),this}rangeLt(t,n){return this.url.searchParams.append(t,`sl.${n}`),this}rangeLte(t,n){return this.url.searchParams.append(t,`nxr.${n}`),this}rangeAdjacent(t,n){return this.url.searchParams.append(t,`adj.${n}`),this}overlaps(t,n){return typeof n=="string"?this.url.searchParams.append(t,`ov.${n}`):this.url.searchParams.append(t,`ov.{${n.join(",")}}`),this}textSearch(t,n,{config:r,type:i}={}){let s="";i==="plain"?s="pl":i==="phrase"?s="ph":i==="websearch"&&(s="w");const o=r===void 0?"":`(${r})`;return this.url.searchParams.append(t,`${s}fts${o}.${n}`),this}match(t){return Object.entries(t).forEach(([n,r])=>{this.url.searchParams.append(n,`eq.${r}`)}),this}not(t,n,r){return this.url.searchParams.append(t,`not.${n}.${r}`),this}or(t,{foreignTable:n,referencedTable:r=n}={}){const i=r?`${r}.or`:"or";return this.url.searchParams.append(i,`(${t})`),this}filter(t,n,r){return this.url.searchParams.append(t,`${n}.${r}`),this}};Ir.default=Xp;var Zp=$e&&$e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(ss,"__esModule",{value:!0});const Qn=Zp(Ir);let eg=class{constructor(t,{headers:n={},schema:r,fetch:i}){this.url=t,this.headers=n,this.schema=r,this.fetch=i}select(t,{head:n=!1,count:r}={}){const i=n?"HEAD":"GET";let s=!1;const o=(t??"*").split("").map(l=>/\s/.test(l)&&!s?"":(l==='"'&&(s=!s),l)).join("");return this.url.searchParams.set("select",o),r&&(this.headers.Prefer=`count=${r}`),new Qn.default({method:i,url:this.url,headers:this.headers,schema:this.schema,fetch:this.fetch,allowEmpty:!1})}insert(t,{count:n,defaultToNull:r=!0}={}){const i="POST",s=[];if(this.headers.Prefer&&s.push(this.headers.Prefer),n&&s.push(`count=${n}`),r||s.push("missing=default"),this.headers.Prefer=s.join(","),Array.isArray(t)){const o=t.reduce((l,a)=>l.concat(Object.keys(a)),[]);if(o.length>0){const l=[...new Set(o)].map(a=>`"${a}"`);this.url.searchParams.set("columns",l.join(","))}}return new Qn.default({method:i,url:this.url,headers:this.headers,schema:this.schema,body:t,fetch:this.fetch,allowEmpty:!1})}upsert(t,{onConflict:n,ignoreDuplicates:r=!1,count:i,defaultToNull:s=!0}={}){const o="POST",l=[`resolution=${r?"ignore":"merge"}-duplicates`];if(n!==void 0&&this.url.searchParams.set("on_conflict",n),this.headers.Prefer&&l.push(this.headers.Prefer),i&&l.push(`count=${i}`),s||l.push("missing=default"),this.headers.Prefer=l.join(","),Array.isArray(t)){const a=t.reduce((u,c)=>u.concat(Object.keys(c)),[]);if(a.length>0){const u=[...new Set(a)].map(c=>`"${c}"`);this.url.searchParams.set("columns",u.join(","))}}return new Qn.default({method:o,url:this.url,headers:this.headers,schema:this.schema,body:t,fetch:this.fetch,allowEmpty:!1})}update(t,{count:n}={}){const r="PATCH",i=[];return this.headers.Prefer&&i.push(this.headers.Prefer),n&&i.push(`count=${n}`),this.headers.Prefer=i.join(","),new Qn.default({method:r,url:this.url,headers:this.headers,schema:this.schema,body:t,fetch:this.fetch,allowEmpty:!1})}delete({count:t}={}){const n="DELETE",r=[];return t&&r.push(`count=${t}`),this.headers.Prefer&&r.unshift(this.headers.Prefer),this.headers.Prefer=r.join(","),new Qn.default({method:n,url:this.url,headers:this.headers,schema:this.schema,fetch:this.fetch,allowEmpty:!1})}};ss.default=eg;var us={},cs={};Object.defineProperty(cs,"__esModule",{value:!0});cs.version=void 0;cs.version="0.0.0-automated";Object.defineProperty(us,"__esModule",{value:!0});us.DEFAULT_HEADERS=void 0;const tg=cs;us.DEFAULT_HEADERS={"X-Client-Info":`postgrest-js/${tg.version}`};var Id=$e&&$e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Vl,"__esModule",{value:!0});const ng=Id(ss),rg=Id(Ir),ig=us;let sg=class Nd{constructor(t,{headers:n={},schema:r,fetch:i}={}){this.url=t,this.headers=Object.assign(Object.assign({},ig.DEFAULT_HEADERS),n),this.schemaName=r,this.fetch=i}from(t){const n=new URL(`${this.url}/${t}`);return new ng.default(n,{headers:Object.assign({},this.headers),schema:this.schemaName,fetch:this.fetch})}schema(t){return new Nd(this.url,{headers:this.headers,schema:t,fetch:this.fetch})}rpc(t,n={},{head:r=!1,get:i=!1,count:s}={}){let o;const l=new URL(`${this.url}/rpc/${t}`);let a;r||i?(o=r?"HEAD":"GET",Object.entries(n).filter(([c,d])=>d!==void 0).map(([c,d])=>[c,Array.isArray(d)?`{${d.join(",")}}`:`${d}`]).forEach(([c,d])=>{l.searchParams.append(c,d)})):(o="POST",a=n);const u=Object.assign({},this.headers);return s&&(u.Prefer=`count=${s}`),new rg.default({method:o,url:l,headers:u,schema:this.schemaName,body:a,fetch:this.fetch,allowEmpty:!1})}};Vl.default=sg;var Dn=$e&&$e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(ge,"__esModule",{value:!0});ge.PostgrestError=ge.PostgrestBuilder=ge.PostgrestTransformBuilder=ge.PostgrestFilterBuilder=ge.PostgrestQueryBuilder=ge.PostgrestClient=void 0;const Dd=Dn(Vl);ge.PostgrestClient=Dd.default;const zd=Dn(ss);ge.PostgrestQueryBuilder=zd.default;const Ud=Dn(Ir);ge.PostgrestFilterBuilder=Ud.default;const bd=Dn(os);ge.PostgrestTransformBuilder=bd.default;const Fd=Dn(ls);ge.PostgrestBuilder=Fd.default;const Md=Dn(as);ge.PostgrestError=Md.default;var og=ge.default={PostgrestClient:Dd.default,PostgrestQueryBuilder:zd.default,PostgrestFilterBuilder:Ud.default,PostgrestTransformBuilder:bd.default,PostgrestBuilder:Fd.default,PostgrestError:Md.default};const{PostgrestClient:lg,PostgrestQueryBuilder:am,PostgrestFilterBuilder:um,PostgrestTransformBuilder:cm,PostgrestBuilder:dm,PostgrestError:fm}=og,ag="2.11.2",ug={"X-Client-Info":`realtime-js/${ag}`},cg="1.0.0",Bd=1e4,dg=1e3;var Sn;(function(e){e[e.connecting=0]="connecting",e[e.open=1]="open",e[e.closing=2]="closing",e[e.closed=3]="closed"})(Sn||(Sn={}));var _e;(function(e){e.closed="closed",e.errored="errored",e.joined="joined",e.joining="joining",e.leaving="leaving"})(_e||(_e={}));var Ue;(function(e){e.close="phx_close",e.error="phx_error",e.join="phx_join",e.reply="phx_reply",e.leave="phx_leave",e.access_token="access_token"})(Ue||(Ue={}));var Bo;(function(e){e.websocket="websocket"})(Bo||(Bo={}));var Ut;(function(e){e.Connecting="connecting",e.Open="open",e.Closing="closing",e.Closed="closed"})(Ut||(Ut={}));class fg{constructor(){this.HEADER_LENGTH=1}decode(t,n){return t.constructor===ArrayBuffer?n(this._binaryDecode(t)):n(typeof t=="string"?JSON.parse(t):{})}_binaryDecode(t){const n=new DataView(t),r=new TextDecoder;return this._decodeBroadcast(t,n,r)}_decodeBroadcast(t,n,r){const i=n.getUint8(1),s=n.getUint8(2);let o=this.HEADER_LENGTH+2;const l=r.decode(t.slice(o,o+i));o=o+i;const a=r.decode(t.slice(o,o+s));o=o+s;const u=JSON.parse(r.decode(t.slice(o,t.byteLength)));return{ref:null,topic:l,event:a,payload:u}}}class Hd{constructor(t,n){this.callback=t,this.timerCalc=n,this.timer=void 0,this.tries=0,this.callback=t,this.timerCalc=n}reset(){this.tries=0,clearTimeout(this.timer)}scheduleTimeout(){clearTimeout(this.timer),this.timer=setTimeout(()=>{this.tries=this.tries+1,this.callback()},this.timerCalc(this.tries+1))}}var z;(function(e){e.abstime="abstime",e.bool="bool",e.date="date",e.daterange="daterange",e.float4="float4",e.float8="float8",e.int2="int2",e.int4="int4",e.int4range="int4range",e.int8="int8",e.int8range="int8range",e.json="json",e.jsonb="jsonb",e.money="money",e.numeric="numeric",e.oid="oid",e.reltime="reltime",e.text="text",e.time="time",e.timestamp="timestamp",e.timestamptz="timestamptz",e.timetz="timetz",e.tsrange="tsrange",e.tstzrange="tstzrange"})(z||(z={}));const su=(e,t,n={})=>{var r;const i=(r=n.skipTypes)!==null&&r!==void 0?r:[];return Object.keys(t).reduce((s,o)=>(s[o]=hg(o,e,t,i),s),{})},hg=(e,t,n,r)=>{const i=t.find(l=>l.name===e),s=i==null?void 0:i.type,o=n[e];return s&&!r.includes(s)?Vd(s,o):Ho(o)},Vd=(e,t)=>{if(e.charAt(0)==="_"){const n=e.slice(1,e.length);return mg(t,n)}switch(e){case z.bool:return pg(t);case z.float4:case z.float8:case z.int2:case z.int4:case z.int8:case z.numeric:case z.oid:return gg(t);case z.json:case z.jsonb:return vg(t);case z.timestamp:return yg(t);case z.abstime:case z.date:case z.daterange:case z.int4range:case z.int8range:case z.money:case z.reltime:case z.text:case z.time:case z.timestamptz:case z.timetz:case z.tsrange:case z.tstzrange:return Ho(t);default:return Ho(t)}},Ho=e=>e,pg=e=>{switch(e){case"t":return!0;case"f":return!1;default:return e}},gg=e=>{if(typeof e=="string"){const t=parseFloat(e);if(!Number.isNaN(t))return t}return e},vg=e=>{if(typeof e=="string")try{return JSON.parse(e)}catch(t){return console.log(`JSON parse error: ${t}`),e}return e},mg=(e,t)=>{if(typeof e!="string")return e;const n=e.length-1,r=e[n];if(e[0]==="{"&&r==="}"){let s;const o=e.slice(1,n);try{s=JSON.parse("["+o+"]")}catch{s=o?o.split(","):[]}return s.map(l=>Vd(t,l))}return e},yg=e=>typeof e=="string"?e.replace(" ","T"):e,Wd=e=>{let t=e;return t=t.replace(/^ws/i,"http"),t=t.replace(/(\/socket\/websocket|\/socket|\/websocket)\/?$/i,""),t.replace(/\/+$/,"")};class Ms{constructor(t,n,r={},i=Bd){this.channel=t,this.event=n,this.payload=r,this.timeout=i,this.sent=!1,this.timeoutTimer=void 0,this.ref="",this.receivedResp=null,this.recHooks=[],this.refEvent=null}resend(t){this.timeout=t,this._cancelRefEvent(),this.ref="",this.refEvent=null,this.receivedResp=null,this.sent=!1,this.send()}send(){this._hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload,ref:this.ref,join_ref:this.channel._joinRef()}))}updatePayload(t){this.payload=Object.assign(Object.assign({},this.payload),t)}receive(t,n){var r;return this._hasReceived(t)&&n((r=this.receivedResp)===null||r===void 0?void 0:r.response),this.recHooks.push({status:t,callback:n}),this}startTimeout(){if(this.timeoutTimer)return;this.ref=this.channel.socket._makeRef(),this.refEvent=this.channel._replyEventName(this.ref);const t=n=>{this._cancelRefEvent(),this._cancelTimeout(),this.receivedResp=n,this._matchReceive(n)};this.channel._on(this.refEvent,{},t),this.timeoutTimer=setTimeout(()=>{this.trigger("timeout",{})},this.timeout)}trigger(t,n){this.refEvent&&this.channel._trigger(this.refEvent,{status:t,response:n})}destroy(){this._cancelRefEvent(),this._cancelTimeout()}_cancelRefEvent(){this.refEvent&&this.channel._off(this.refEvent,{})}_cancelTimeout(){clearTimeout(this.timeoutTimer),this.timeoutTimer=void 0}_matchReceive({status:t,response:n}){this.recHooks.filter(r=>r.status===t).forEach(r=>r.callback(n))}_hasReceived(t){return this.receivedResp&&this.receivedResp.status===t}}var ou;(function(e){e.SYNC="sync",e.JOIN="join",e.LEAVE="leave"})(ou||(ou={}));class ar{constructor(t,n){this.channel=t,this.state={},this.pendingDiffs=[],this.joinRef=null,this.caller={onJoin:()=>{},onLeave:()=>{},onSync:()=>{}};const r=(n==null?void 0:n.events)||{state:"presence_state",diff:"presence_diff"};this.channel._on(r.state,{},i=>{const{onJoin:s,onLeave:o,onSync:l}=this.caller;this.joinRef=this.channel._joinRef(),this.state=ar.syncState(this.state,i,s,o),this.pendingDiffs.forEach(a=>{this.state=ar.syncDiff(this.state,a,s,o)}),this.pendingDiffs=[],l()}),this.channel._on(r.diff,{},i=>{const{onJoin:s,onLeave:o,onSync:l}=this.caller;this.inPendingSyncState()?this.pendingDiffs.push(i):(this.state=ar.syncDiff(this.state,i,s,o),l())}),this.onJoin((i,s,o)=>{this.channel._trigger("presence",{event:"join",key:i,currentPresences:s,newPresences:o})}),this.onLeave((i,s,o)=>{this.channel._trigger("presence",{event:"leave",key:i,currentPresences:s,leftPresences:o})}),this.onSync(()=>{this.channel._trigger("presence",{event:"sync"})})}static syncState(t,n,r,i){const s=this.cloneDeep(t),o=this.transformState(n),l={},a={};return this.map(s,(u,c)=>{o[u]||(a[u]=c)}),this.map(o,(u,c)=>{const d=s[u];if(d){const h=c.map(x=>x.presence_ref),v=d.map(x=>x.presence_ref),m=c.filter(x=>v.indexOf(x.presence_ref)<0),w=d.filter(x=>h.indexOf(x.presence_ref)<0);m.length>0&&(l[u]=m),w.length>0&&(a[u]=w)}else l[u]=c}),this.syncDiff(s,{joins:l,leaves:a},r,i)}static syncDiff(t,n,r,i){const{joins:s,leaves:o}={joins:this.transformState(n.joins),leaves:this.transformState(n.leaves)};return r||(r=()=>{}),i||(i=()=>{}),this.map(s,(l,a)=>{var u;const c=(u=t[l])!==null&&u!==void 0?u:[];if(t[l]=this.cloneDeep(a),c.length>0){const d=t[l].map(v=>v.presence_ref),h=c.filter(v=>d.indexOf(v.presence_ref)<0);t[l].unshift(...h)}r(l,c,a)}),this.map(o,(l,a)=>{let u=t[l];if(!u)return;const c=a.map(d=>d.presence_ref);u=u.filter(d=>c.indexOf(d.presence_ref)<0),t[l]=u,i(l,u,a),u.length===0&&delete t[l]}),t}static map(t,n){return Object.getOwnPropertyNames(t).map(r=>n(r,t[r]))}static transformState(t){return t=this.cloneDeep(t),Object.getOwnPropertyNames(t).reduce((n,r)=>{const i=t[r];return"metas"in i?n[r]=i.metas.map(s=>(s.presence_ref=s.phx_ref,delete s.phx_ref,delete s.phx_ref_prev,s)):n[r]=i,n},{})}static cloneDeep(t){return JSON.parse(JSON.stringify(t))}onJoin(t){this.caller.onJoin=t}onLeave(t){this.caller.onLeave=t}onSync(t){this.caller.onSync=t}inPendingSyncState(){return!this.joinRef||this.joinRef!==this.channel._joinRef()}}var lu;(function(e){e.ALL="*",e.INSERT="INSERT",e.UPDATE="UPDATE",e.DELETE="DELETE"})(lu||(lu={}));var au;(function(e){e.BROADCAST="broadcast",e.PRESENCE="presence",e.POSTGRES_CHANGES="postgres_changes",e.SYSTEM="system"})(au||(au={}));var Ye;(function(e){e.SUBSCRIBED="SUBSCRIBED",e.TIMED_OUT="TIMED_OUT",e.CLOSED="CLOSED",e.CHANNEL_ERROR="CHANNEL_ERROR"})(Ye||(Ye={}));class Wl{constructor(t,n={config:{}},r){this.topic=t,this.params=n,this.socket=r,this.bindings={},this.state=_e.closed,this.joinedOnce=!1,this.pushBuffer=[],this.subTopic=t.replace(/^realtime:/i,""),this.params.config=Object.assign({broadcast:{ack:!1,self:!1},presence:{key:""},private:!1},n.config),this.timeout=this.socket.timeout,this.joinPush=new Ms(this,Ue.join,this.params,this.timeout),this.rejoinTimer=new Hd(()=>this._rejoinUntilConnected(),this.socket.reconnectAfterMs),this.joinPush.receive("ok",()=>{this.state=_e.joined,this.rejoinTimer.reset(),this.pushBuffer.forEach(i=>i.send()),this.pushBuffer=[]}),this._onClose(()=>{this.rejoinTimer.reset(),this.socket.log("channel",`close ${this.topic} ${this._joinRef()}`),this.state=_e.closed,this.socket._remove(this)}),this._onError(i=>{this._isLeaving()||this._isClosed()||(this.socket.log("channel",`error ${this.topic}`,i),this.state=_e.errored,this.rejoinTimer.scheduleTimeout())}),this.joinPush.receive("timeout",()=>{this._isJoining()&&(this.socket.log("channel",`timeout ${this.topic}`,this.joinPush.timeout),this.state=_e.errored,this.rejoinTimer.scheduleTimeout())}),this._on(Ue.reply,{},(i,s)=>{this._trigger(this._replyEventName(s),i)}),this.presence=new ar(this),this.broadcastEndpointURL=Wd(this.socket.endPoint)+"/api/broadcast",this.private=this.params.config.private||!1}subscribe(t,n=this.timeout){var r,i;if(this.socket.isConnected()||this.socket.connect(),this.joinedOnce)throw"tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance";{const{config:{broadcast:s,presence:o,private:l}}=this.params;this._onError(c=>t==null?void 0:t(Ye.CHANNEL_ERROR,c)),this._onClose(()=>t==null?void 0:t(Ye.CLOSED));const a={},u={broadcast:s,presence:o,postgres_changes:(i=(r=this.bindings.postgres_changes)===null||r===void 0?void 0:r.map(c=>c.filter))!==null&&i!==void 0?i:[],private:l};this.socket.accessTokenValue&&(a.access_token=this.socket.accessTokenValue),this.updateJoinPayload(Object.assign({config:u},a)),this.joinedOnce=!0,this._rejoin(n),this.joinPush.receive("ok",async({postgres_changes:c})=>{var d;if(this.socket.setAuth(),c===void 0){t==null||t(Ye.SUBSCRIBED);return}else{const h=this.bindings.postgres_changes,v=(d=h==null?void 0:h.length)!==null&&d!==void 0?d:0,m=[];for(let w=0;w<v;w++){const x=h[w],{filter:{event:p,schema:f,table:g,filter:y}}=x,k=c&&c[w];if(k&&k.event===p&&k.schema===f&&k.table===g&&k.filter===y)m.push(Object.assign(Object.assign({},x),{id:k.id}));else{this.unsubscribe(),t==null||t(Ye.CHANNEL_ERROR,new Error("mismatch between server and client bindings for postgres changes"));return}}this.bindings.postgres_changes=m,t&&t(Ye.SUBSCRIBED);return}}).receive("error",c=>{t==null||t(Ye.CHANNEL_ERROR,new Error(JSON.stringify(Object.values(c).join(", ")||"error")))}).receive("timeout",()=>{t==null||t(Ye.TIMED_OUT)})}return this}presenceState(){return this.presence.state}async track(t,n={}){return await this.send({type:"presence",event:"track",payload:t},n.timeout||this.timeout)}async untrack(t={}){return await this.send({type:"presence",event:"untrack"},t)}on(t,n,r){return this._on(t,n,r)}async send(t,n={}){var r,i;if(!this._canPush()&&t.type==="broadcast"){const{event:s,payload:o}=t,a={method:"POST",headers:{Authorization:this.socket.accessTokenValue?`Bearer ${this.socket.accessTokenValue}`:"",apikey:this.socket.apiKey?this.socket.apiKey:"","Content-Type":"application/json"},body:JSON.stringify({messages:[{topic:this.subTopic,event:s,payload:o,private:this.private}]})};try{const u=await this._fetchWithTimeout(this.broadcastEndpointURL,a,(r=n.timeout)!==null&&r!==void 0?r:this.timeout);return await((i=u.body)===null||i===void 0?void 0:i.cancel()),u.ok?"ok":"error"}catch(u){return u.name==="AbortError"?"timed out":"error"}}else return new Promise(s=>{var o,l,a;const u=this._push(t.type,t,n.timeout||this.timeout);t.type==="broadcast"&&!(!((a=(l=(o=this.params)===null||o===void 0?void 0:o.config)===null||l===void 0?void 0:l.broadcast)===null||a===void 0)&&a.ack)&&s("ok"),u.receive("ok",()=>s("ok")),u.receive("error",()=>s("error")),u.receive("timeout",()=>s("timed out"))})}updateJoinPayload(t){this.joinPush.updatePayload(t)}unsubscribe(t=this.timeout){this.state=_e.leaving;const n=()=>{this.socket.log("channel",`leave ${this.topic}`),this._trigger(Ue.close,"leave",this._joinRef())};return this.rejoinTimer.reset(),this.joinPush.destroy(),new Promise(r=>{const i=new Ms(this,Ue.leave,{},t);i.receive("ok",()=>{n(),r("ok")}).receive("timeout",()=>{n(),r("timed out")}).receive("error",()=>{r("error")}),i.send(),this._canPush()||i.trigger("ok",{})})}async _fetchWithTimeout(t,n,r){const i=new AbortController,s=setTimeout(()=>i.abort(),r),o=await this.socket.fetch(t,Object.assign(Object.assign({},n),{signal:i.signal}));return clearTimeout(s),o}_push(t,n,r=this.timeout){if(!this.joinedOnce)throw`tried to push '${t}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;let i=new Ms(this,t,n,r);return this._canPush()?i.send():(i.startTimeout(),this.pushBuffer.push(i)),i}_onMessage(t,n,r){return n}_isMember(t){return this.topic===t}_joinRef(){return this.joinPush.ref}_trigger(t,n,r){var i,s;const o=t.toLocaleLowerCase(),{close:l,error:a,leave:u,join:c}=Ue;if(r&&[l,a,u,c].indexOf(o)>=0&&r!==this._joinRef())return;let h=this._onMessage(o,n,r);if(n&&!h)throw"channel onMessage callbacks must return the payload, modified or unmodified";["insert","update","delete"].includes(o)?(i=this.bindings.postgres_changes)===null||i===void 0||i.filter(v=>{var m,w,x;return((m=v.filter)===null||m===void 0?void 0:m.event)==="*"||((x=(w=v.filter)===null||w===void 0?void 0:w.event)===null||x===void 0?void 0:x.toLocaleLowerCase())===o}).map(v=>v.callback(h,r)):(s=this.bindings[o])===null||s===void 0||s.filter(v=>{var m,w,x,p,f,g;if(["broadcast","presence","postgres_changes"].includes(o))if("id"in v){const y=v.id,k=(m=v.filter)===null||m===void 0?void 0:m.event;return y&&((w=n.ids)===null||w===void 0?void 0:w.includes(y))&&(k==="*"||(k==null?void 0:k.toLocaleLowerCase())===((x=n.data)===null||x===void 0?void 0:x.type.toLocaleLowerCase()))}else{const y=(f=(p=v==null?void 0:v.filter)===null||p===void 0?void 0:p.event)===null||f===void 0?void 0:f.toLocaleLowerCase();return y==="*"||y===((g=n==null?void 0:n.event)===null||g===void 0?void 0:g.toLocaleLowerCase())}else return v.type.toLocaleLowerCase()===o}).map(v=>{if(typeof h=="object"&&"ids"in h){const m=h.data,{schema:w,table:x,commit_timestamp:p,type:f,errors:g}=m;h=Object.assign(Object.assign({},{schema:w,table:x,commit_timestamp:p,eventType:f,new:{},old:{},errors:g}),this._getPayloadRecords(m))}v.callback(h,r)})}_isClosed(){return this.state===_e.closed}_isJoined(){return this.state===_e.joined}_isJoining(){return this.state===_e.joining}_isLeaving(){return this.state===_e.leaving}_replyEventName(t){return`chan_reply_${t}`}_on(t,n,r){const i=t.toLocaleLowerCase(),s={type:i,filter:n,callback:r};return this.bindings[i]?this.bindings[i].push(s):this.bindings[i]=[s],this}_off(t,n){const r=t.toLocaleLowerCase();return this.bindings[r]=this.bindings[r].filter(i=>{var s;return!(((s=i.type)===null||s===void 0?void 0:s.toLocaleLowerCase())===r&&Wl.isEqual(i.filter,n))}),this}static isEqual(t,n){if(Object.keys(t).length!==Object.keys(n).length)return!1;for(const r in t)if(t[r]!==n[r])return!1;return!0}_rejoinUntilConnected(){this.rejoinTimer.scheduleTimeout(),this.socket.isConnected()&&this._rejoin()}_onClose(t){this._on(Ue.close,{},t)}_onError(t){this._on(Ue.error,{},n=>t(n))}_canPush(){return this.socket.isConnected()&&this._isJoined()}_rejoin(t=this.timeout){this._isLeaving()||(this.socket._leaveOpenTopic(this.topic),this.state=_e.joining,this.joinPush.resend(t))}_getPayloadRecords(t){const n={new:{},old:{}};return(t.type==="INSERT"||t.type==="UPDATE")&&(n.new=su(t.columns,t.record)),(t.type==="UPDATE"||t.type==="DELETE")&&(n.old=su(t.columns,t.old_record)),n}}const wg=()=>{},_g=typeof WebSocket<"u",kg=`
  addEventListener("message", (e) => {
    if (e.data.event === "start") {
      setInterval(() => postMessage({ event: "keepAlive" }), e.data.interval);
    }
  });`;class Sg{constructor(t,n){var r;this.accessTokenValue=null,this.apiKey=null,this.channels=[],this.endPoint="",this.httpEndpoint="",this.headers=ug,this.params={},this.timeout=Bd,this.heartbeatIntervalMs=3e4,this.heartbeatTimer=void 0,this.pendingHeartbeatRef=null,this.ref=0,this.logger=wg,this.conn=null,this.sendBuffer=[],this.serializer=new fg,this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.accessToken=null,this._resolveFetch=s=>{let o;return s?o=s:typeof fetch>"u"?o=(...l)=>Rn(async()=>{const{default:a}=await Promise.resolve().then(()=>Nn);return{default:a}},void 0).then(({default:a})=>a(...l)):o=fetch,(...l)=>o(...l)},this.endPoint=`${t}/${Bo.websocket}`,this.httpEndpoint=Wd(t),n!=null&&n.transport?this.transport=n.transport:this.transport=null,n!=null&&n.params&&(this.params=n.params),n!=null&&n.headers&&(this.headers=Object.assign(Object.assign({},this.headers),n.headers)),n!=null&&n.timeout&&(this.timeout=n.timeout),n!=null&&n.logger&&(this.logger=n.logger),n!=null&&n.heartbeatIntervalMs&&(this.heartbeatIntervalMs=n.heartbeatIntervalMs);const i=(r=n==null?void 0:n.params)===null||r===void 0?void 0:r.apikey;if(i&&(this.accessTokenValue=i,this.apiKey=i),this.reconnectAfterMs=n!=null&&n.reconnectAfterMs?n.reconnectAfterMs:s=>[1e3,2e3,5e3,1e4][s-1]||1e4,this.encode=n!=null&&n.encode?n.encode:(s,o)=>o(JSON.stringify(s)),this.decode=n!=null&&n.decode?n.decode:this.serializer.decode.bind(this.serializer),this.reconnectTimer=new Hd(async()=>{this.disconnect(),this.connect()},this.reconnectAfterMs),this.fetch=this._resolveFetch(n==null?void 0:n.fetch),n!=null&&n.worker){if(typeof window<"u"&&!window.Worker)throw new Error("Web Worker is not supported");this.worker=(n==null?void 0:n.worker)||!1,this.workerUrl=n==null?void 0:n.workerUrl}this.accessToken=(n==null?void 0:n.accessToken)||null}connect(){if(!this.conn){if(this.transport){this.conn=new this.transport(this.endpointURL(),void 0,{headers:this.headers});return}if(_g){this.conn=new WebSocket(this.endpointURL()),this.setupConnection();return}this.conn=new Eg(this.endpointURL(),void 0,{close:()=>{this.conn=null}}),Rn(async()=>{const{default:t}=await import("./browser.js").then(n=>n.b);return{default:t}},[]).then(({default:t})=>{this.conn=new t(this.endpointURL(),void 0,{headers:this.headers}),this.setupConnection()})}}endpointURL(){return this._appendParams(this.endPoint,Object.assign({},this.params,{vsn:cg}))}disconnect(t,n){this.conn&&(this.conn.onclose=function(){},t?this.conn.close(t,n??""):this.conn.close(),this.conn=null,this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.reconnectTimer.reset())}getChannels(){return this.channels}async removeChannel(t){const n=await t.unsubscribe();return this.channels.length===0&&this.disconnect(),n}async removeAllChannels(){const t=await Promise.all(this.channels.map(n=>n.unsubscribe()));return this.disconnect(),t}log(t,n,r){this.logger(t,n,r)}connectionState(){switch(this.conn&&this.conn.readyState){case Sn.connecting:return Ut.Connecting;case Sn.open:return Ut.Open;case Sn.closing:return Ut.Closing;default:return Ut.Closed}}isConnected(){return this.connectionState()===Ut.Open}channel(t,n={config:{}}){const r=new Wl(`realtime:${t}`,n,this);return this.channels.push(r),r}push(t){const{topic:n,event:r,payload:i,ref:s}=t,o=()=>{this.encode(t,l=>{var a;(a=this.conn)===null||a===void 0||a.send(l)})};this.log("push",`${n} ${r} (${s})`,i),this.isConnected()?o():this.sendBuffer.push(o)}async setAuth(t=null){let n=t||this.accessToken&&await this.accessToken()||this.accessTokenValue;if(n){let r=null;try{r=JSON.parse(atob(n.split(".")[1]))}catch{}if(r&&r.exp&&!(Math.floor(Date.now()/1e3)-r.exp<0))return this.log("auth",`InvalidJWTToken: Invalid value for JWT claim "exp" with value ${r.exp}`),Promise.reject(`InvalidJWTToken: Invalid value for JWT claim "exp" with value ${r.exp}`);this.accessTokenValue=n,this.channels.forEach(i=>{n&&i.updateJoinPayload({access_token:n}),i.joinedOnce&&i._isJoined()&&i._push(Ue.access_token,{access_token:n})})}}async sendHeartbeat(){var t;if(this.isConnected()){if(this.pendingHeartbeatRef){this.pendingHeartbeatRef=null,this.log("transport","heartbeat timeout. Attempting to re-establish connection"),(t=this.conn)===null||t===void 0||t.close(dg,"hearbeat timeout");return}this.pendingHeartbeatRef=this._makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef}),this.setAuth()}}flushSendBuffer(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach(t=>t()),this.sendBuffer=[])}_makeRef(){let t=this.ref+1;return t===this.ref?this.ref=0:this.ref=t,this.ref.toString()}_leaveOpenTopic(t){let n=this.channels.find(r=>r.topic===t&&(r._isJoined()||r._isJoining()));n&&(this.log("transport",`leaving duplicate topic "${t}"`),n.unsubscribe())}_remove(t){this.channels=this.channels.filter(n=>n._joinRef()!==t._joinRef())}setupConnection(){this.conn&&(this.conn.binaryType="arraybuffer",this.conn.onopen=()=>this._onConnOpen(),this.conn.onerror=t=>this._onConnError(t),this.conn.onmessage=t=>this._onConnMessage(t),this.conn.onclose=t=>this._onConnClose(t))}_onConnMessage(t){this.decode(t.data,n=>{let{topic:r,event:i,payload:s,ref:o}=n;o&&o===this.pendingHeartbeatRef&&(this.pendingHeartbeatRef=null),this.log("receive",`${s.status||""} ${r} ${i} ${o&&"("+o+")"||""}`,s),this.channels.filter(l=>l._isMember(r)).forEach(l=>l._trigger(i,s,o)),this.stateChangeCallbacks.message.forEach(l=>l(n))})}async _onConnOpen(){if(this.log("transport",`connected to ${this.endpointURL()}`),this.flushSendBuffer(),this.reconnectTimer.reset(),!this.worker)this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.heartbeatTimer=setInterval(()=>this.sendHeartbeat(),this.heartbeatIntervalMs);else{this.workerUrl?this.log("worker",`starting worker for from ${this.workerUrl}`):this.log("worker","starting default worker");const t=this._workerObjectUrl(this.workerUrl);this.workerRef=new Worker(t),this.workerRef.onerror=n=>{this.log("worker","worker error",n.message),this.workerRef.terminate()},this.workerRef.onmessage=n=>{n.data.event==="keepAlive"&&this.sendHeartbeat()},this.workerRef.postMessage({event:"start",interval:this.heartbeatIntervalMs})}this.stateChangeCallbacks.open.forEach(t=>t())}_onConnClose(t){this.log("transport","close",t),this._triggerChanError(),this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach(n=>n(t))}_onConnError(t){this.log("transport",t.message),this._triggerChanError(),this.stateChangeCallbacks.error.forEach(n=>n(t))}_triggerChanError(){this.channels.forEach(t=>t._trigger(Ue.error))}_appendParams(t,n){if(Object.keys(n).length===0)return t;const r=t.match(/\?/)?"&":"?",i=new URLSearchParams(n);return`${t}${r}${i}`}_workerObjectUrl(t){let n;if(t)n=t;else{const r=new Blob([kg],{type:"application/javascript"});n=URL.createObjectURL(r)}return n}}class Eg{constructor(t,n,r){this.binaryType="arraybuffer",this.onclose=()=>{},this.onerror=()=>{},this.onmessage=()=>{},this.onopen=()=>{},this.readyState=Sn.connecting,this.send=()=>{},this.url=null,this.url=t,this.close=r.close}}class Kl extends Error{constructor(t){super(t),this.__isStorageError=!0,this.name="StorageError"}}function Z(e){return typeof e=="object"&&e!==null&&"__isStorageError"in e}class xg extends Kl{constructor(t,n){super(t),this.name="StorageApiError",this.status=n}toJSON(){return{name:this.name,message:this.message,status:this.status}}}class Vo extends Kl{constructor(t,n){super(t),this.name="StorageUnknownError",this.originalError=n}}var Cg=function(e,t,n,r){function i(s){return s instanceof n?s:new n(function(o){o(s)})}return new(n||(n=Promise))(function(s,o){function l(c){try{u(r.next(c))}catch(d){o(d)}}function a(c){try{u(r.throw(c))}catch(d){o(d)}}function u(c){c.done?s(c.value):i(c.value).then(l,a)}u((r=r.apply(e,t||[])).next())})};const Kd=e=>{let t;return e?t=e:typeof fetch>"u"?t=(...n)=>Rn(async()=>{const{default:r}=await Promise.resolve().then(()=>Nn);return{default:r}},void 0).then(({default:r})=>r(...n)):t=fetch,(...n)=>t(...n)},Pg=()=>Cg(void 0,void 0,void 0,function*(){return typeof Response>"u"?(yield Rn(()=>Promise.resolve().then(()=>Nn),void 0)).Response:Response}),Wo=e=>{if(Array.isArray(e))return e.map(n=>Wo(n));if(typeof e=="function"||e!==Object(e))return e;const t={};return Object.entries(e).forEach(([n,r])=>{const i=n.replace(/([-_][a-z])/gi,s=>s.toUpperCase().replace(/[-_]/g,""));t[i]=Wo(r)}),t};var Yt=function(e,t,n,r){function i(s){return s instanceof n?s:new n(function(o){o(s)})}return new(n||(n=Promise))(function(s,o){function l(c){try{u(r.next(c))}catch(d){o(d)}}function a(c){try{u(r.throw(c))}catch(d){o(d)}}function u(c){c.done?s(c.value):i(c.value).then(l,a)}u((r=r.apply(e,t||[])).next())})};const Bs=e=>e.msg||e.message||e.error_description||e.error||JSON.stringify(e),Tg=(e,t,n)=>Yt(void 0,void 0,void 0,function*(){const r=yield Pg();e instanceof r&&!(n!=null&&n.noResolveJson)?e.json().then(i=>{t(new xg(Bs(i),e.status||500))}).catch(i=>{t(new Vo(Bs(i),i))}):t(new Vo(Bs(e),e))}),jg=(e,t,n,r)=>{const i={method:e,headers:(t==null?void 0:t.headers)||{}};return e==="GET"?i:(i.headers=Object.assign({"Content-Type":"application/json"},t==null?void 0:t.headers),r&&(i.body=JSON.stringify(r)),Object.assign(Object.assign({},i),n))};function Nr(e,t,n,r,i,s){return Yt(this,void 0,void 0,function*(){return new Promise((o,l)=>{e(n,jg(t,r,i,s)).then(a=>{if(!a.ok)throw a;return r!=null&&r.noResolveJson?a:a.json()}).then(a=>o(a)).catch(a=>Tg(a,l,r))})})}function Mi(e,t,n,r){return Yt(this,void 0,void 0,function*(){return Nr(e,"GET",t,n,r)})}function ft(e,t,n,r,i){return Yt(this,void 0,void 0,function*(){return Nr(e,"POST",t,r,i,n)})}function Og(e,t,n,r,i){return Yt(this,void 0,void 0,function*(){return Nr(e,"PUT",t,r,i,n)})}function Rg(e,t,n,r){return Yt(this,void 0,void 0,function*(){return Nr(e,"HEAD",t,Object.assign(Object.assign({},n),{noResolveJson:!0}),r)})}function Qd(e,t,n,r,i){return Yt(this,void 0,void 0,function*(){return Nr(e,"DELETE",t,r,i,n)})}var he=function(e,t,n,r){function i(s){return s instanceof n?s:new n(function(o){o(s)})}return new(n||(n=Promise))(function(s,o){function l(c){try{u(r.next(c))}catch(d){o(d)}}function a(c){try{u(r.throw(c))}catch(d){o(d)}}function u(c){c.done?s(c.value):i(c.value).then(l,a)}u((r=r.apply(e,t||[])).next())})};const $g={limit:100,offset:0,sortBy:{column:"name",order:"asc"}},uu={cacheControl:"3600",contentType:"text/plain;charset=UTF-8",upsert:!1};class Lg{constructor(t,n={},r,i){this.url=t,this.headers=n,this.bucketId=r,this.fetch=Kd(i)}uploadOrUpdate(t,n,r,i){return he(this,void 0,void 0,function*(){try{let s;const o=Object.assign(Object.assign({},uu),i);let l=Object.assign(Object.assign({},this.headers),t==="POST"&&{"x-upsert":String(o.upsert)});const a=o.metadata;typeof Blob<"u"&&r instanceof Blob?(s=new FormData,s.append("cacheControl",o.cacheControl),a&&s.append("metadata",this.encodeMetadata(a)),s.append("",r)):typeof FormData<"u"&&r instanceof FormData?(s=r,s.append("cacheControl",o.cacheControl),a&&s.append("metadata",this.encodeMetadata(a))):(s=r,l["cache-control"]=`max-age=${o.cacheControl}`,l["content-type"]=o.contentType,a&&(l["x-metadata"]=this.toBase64(this.encodeMetadata(a)))),i!=null&&i.headers&&(l=Object.assign(Object.assign({},l),i.headers));const u=this._removeEmptyFolders(n),c=this._getFinalPath(u),d=yield this.fetch(`${this.url}/object/${c}`,Object.assign({method:t,body:s,headers:l},o!=null&&o.duplex?{duplex:o.duplex}:{})),h=yield d.json();return d.ok?{data:{path:u,id:h.Id,fullPath:h.Key},error:null}:{data:null,error:h}}catch(s){if(Z(s))return{data:null,error:s};throw s}})}upload(t,n,r){return he(this,void 0,void 0,function*(){return this.uploadOrUpdate("POST",t,n,r)})}uploadToSignedUrl(t,n,r,i){return he(this,void 0,void 0,function*(){const s=this._removeEmptyFolders(t),o=this._getFinalPath(s),l=new URL(this.url+`/object/upload/sign/${o}`);l.searchParams.set("token",n);try{let a;const u=Object.assign({upsert:uu.upsert},i),c=Object.assign(Object.assign({},this.headers),{"x-upsert":String(u.upsert)});typeof Blob<"u"&&r instanceof Blob?(a=new FormData,a.append("cacheControl",u.cacheControl),a.append("",r)):typeof FormData<"u"&&r instanceof FormData?(a=r,a.append("cacheControl",u.cacheControl)):(a=r,c["cache-control"]=`max-age=${u.cacheControl}`,c["content-type"]=u.contentType);const d=yield this.fetch(l.toString(),{method:"PUT",body:a,headers:c}),h=yield d.json();return d.ok?{data:{path:s,fullPath:h.Key},error:null}:{data:null,error:h}}catch(a){if(Z(a))return{data:null,error:a};throw a}})}createSignedUploadUrl(t,n){return he(this,void 0,void 0,function*(){try{let r=this._getFinalPath(t);const i=Object.assign({},this.headers);n!=null&&n.upsert&&(i["x-upsert"]="true");const s=yield ft(this.fetch,`${this.url}/object/upload/sign/${r}`,{},{headers:i}),o=new URL(this.url+s.url),l=o.searchParams.get("token");if(!l)throw new Kl("No token returned by API");return{data:{signedUrl:o.toString(),path:t,token:l},error:null}}catch(r){if(Z(r))return{data:null,error:r};throw r}})}update(t,n,r){return he(this,void 0,void 0,function*(){return this.uploadOrUpdate("PUT",t,n,r)})}move(t,n,r){return he(this,void 0,void 0,function*(){try{return{data:yield ft(this.fetch,`${this.url}/object/move`,{bucketId:this.bucketId,sourceKey:t,destinationKey:n,destinationBucket:r==null?void 0:r.destinationBucket},{headers:this.headers}),error:null}}catch(i){if(Z(i))return{data:null,error:i};throw i}})}copy(t,n,r){return he(this,void 0,void 0,function*(){try{return{data:{path:(yield ft(this.fetch,`${this.url}/object/copy`,{bucketId:this.bucketId,sourceKey:t,destinationKey:n,destinationBucket:r==null?void 0:r.destinationBucket},{headers:this.headers})).Key},error:null}}catch(i){if(Z(i))return{data:null,error:i};throw i}})}createSignedUrl(t,n,r){return he(this,void 0,void 0,function*(){try{let i=this._getFinalPath(t),s=yield ft(this.fetch,`${this.url}/object/sign/${i}`,Object.assign({expiresIn:n},r!=null&&r.transform?{transform:r.transform}:{}),{headers:this.headers});const o=r!=null&&r.download?`&download=${r.download===!0?"":r.download}`:"";return s={signedUrl:encodeURI(`${this.url}${s.signedURL}${o}`)},{data:s,error:null}}catch(i){if(Z(i))return{data:null,error:i};throw i}})}createSignedUrls(t,n,r){return he(this,void 0,void 0,function*(){try{const i=yield ft(this.fetch,`${this.url}/object/sign/${this.bucketId}`,{expiresIn:n,paths:t},{headers:this.headers}),s=r!=null&&r.download?`&download=${r.download===!0?"":r.download}`:"";return{data:i.map(o=>Object.assign(Object.assign({},o),{signedUrl:o.signedURL?encodeURI(`${this.url}${o.signedURL}${s}`):null})),error:null}}catch(i){if(Z(i))return{data:null,error:i};throw i}})}download(t,n){return he(this,void 0,void 0,function*(){const i=typeof(n==null?void 0:n.transform)<"u"?"render/image/authenticated":"object",s=this.transformOptsToQueryString((n==null?void 0:n.transform)||{}),o=s?`?${s}`:"";try{const l=this._getFinalPath(t);return{data:yield(yield Mi(this.fetch,`${this.url}/${i}/${l}${o}`,{headers:this.headers,noResolveJson:!0})).blob(),error:null}}catch(l){if(Z(l))return{data:null,error:l};throw l}})}info(t){return he(this,void 0,void 0,function*(){const n=this._getFinalPath(t);try{const r=yield Mi(this.fetch,`${this.url}/object/info/${n}`,{headers:this.headers});return{data:Wo(r),error:null}}catch(r){if(Z(r))return{data:null,error:r};throw r}})}exists(t){return he(this,void 0,void 0,function*(){const n=this._getFinalPath(t);try{return yield Rg(this.fetch,`${this.url}/object/${n}`,{headers:this.headers}),{data:!0,error:null}}catch(r){if(Z(r)&&r instanceof Vo){const i=r.originalError;if([400,404].includes(i==null?void 0:i.status))return{data:!1,error:r}}throw r}})}getPublicUrl(t,n){const r=this._getFinalPath(t),i=[],s=n!=null&&n.download?`download=${n.download===!0?"":n.download}`:"";s!==""&&i.push(s);const l=typeof(n==null?void 0:n.transform)<"u"?"render/image":"object",a=this.transformOptsToQueryString((n==null?void 0:n.transform)||{});a!==""&&i.push(a);let u=i.join("&");return u!==""&&(u=`?${u}`),{data:{publicUrl:encodeURI(`${this.url}/${l}/public/${r}${u}`)}}}remove(t){return he(this,void 0,void 0,function*(){try{return{data:yield Qd(this.fetch,`${this.url}/object/${this.bucketId}`,{prefixes:t},{headers:this.headers}),error:null}}catch(n){if(Z(n))return{data:null,error:n};throw n}})}list(t,n,r){return he(this,void 0,void 0,function*(){try{const i=Object.assign(Object.assign(Object.assign({},$g),n),{prefix:t||""});return{data:yield ft(this.fetch,`${this.url}/object/list/${this.bucketId}`,i,{headers:this.headers},r),error:null}}catch(i){if(Z(i))return{data:null,error:i};throw i}})}encodeMetadata(t){return JSON.stringify(t)}toBase64(t){return typeof Buffer<"u"?Buffer.from(t).toString("base64"):btoa(t)}_getFinalPath(t){return`${this.bucketId}/${t}`}_removeEmptyFolders(t){return t.replace(/^\/|\/$/g,"").replace(/\/+/g,"/")}transformOptsToQueryString(t){const n=[];return t.width&&n.push(`width=${t.width}`),t.height&&n.push(`height=${t.height}`),t.resize&&n.push(`resize=${t.resize}`),t.format&&n.push(`format=${t.format}`),t.quality&&n.push(`quality=${t.quality}`),n.join("&")}}const Ag="2.7.1",Ig={"X-Client-Info":`storage-js/${Ag}`};var Zt=function(e,t,n,r){function i(s){return s instanceof n?s:new n(function(o){o(s)})}return new(n||(n=Promise))(function(s,o){function l(c){try{u(r.next(c))}catch(d){o(d)}}function a(c){try{u(r.throw(c))}catch(d){o(d)}}function u(c){c.done?s(c.value):i(c.value).then(l,a)}u((r=r.apply(e,t||[])).next())})};class Ng{constructor(t,n={},r){this.url=t,this.headers=Object.assign(Object.assign({},Ig),n),this.fetch=Kd(r)}listBuckets(){return Zt(this,void 0,void 0,function*(){try{return{data:yield Mi(this.fetch,`${this.url}/bucket`,{headers:this.headers}),error:null}}catch(t){if(Z(t))return{data:null,error:t};throw t}})}getBucket(t){return Zt(this,void 0,void 0,function*(){try{return{data:yield Mi(this.fetch,`${this.url}/bucket/${t}`,{headers:this.headers}),error:null}}catch(n){if(Z(n))return{data:null,error:n};throw n}})}createBucket(t,n={public:!1}){return Zt(this,void 0,void 0,function*(){try{return{data:yield ft(this.fetch,`${this.url}/bucket`,{id:t,name:t,public:n.public,file_size_limit:n.fileSizeLimit,allowed_mime_types:n.allowedMimeTypes},{headers:this.headers}),error:null}}catch(r){if(Z(r))return{data:null,error:r};throw r}})}updateBucket(t,n){return Zt(this,void 0,void 0,function*(){try{return{data:yield Og(this.fetch,`${this.url}/bucket/${t}`,{id:t,name:t,public:n.public,file_size_limit:n.fileSizeLimit,allowed_mime_types:n.allowedMimeTypes},{headers:this.headers}),error:null}}catch(r){if(Z(r))return{data:null,error:r};throw r}})}emptyBucket(t){return Zt(this,void 0,void 0,function*(){try{return{data:yield ft(this.fetch,`${this.url}/bucket/${t}/empty`,{},{headers:this.headers}),error:null}}catch(n){if(Z(n))return{data:null,error:n};throw n}})}deleteBucket(t){return Zt(this,void 0,void 0,function*(){try{return{data:yield Qd(this.fetch,`${this.url}/bucket/${t}`,{},{headers:this.headers}),error:null}}catch(n){if(Z(n))return{data:null,error:n};throw n}})}}class Dg extends Ng{constructor(t,n={},r){super(t,n,r)}from(t){return new Lg(this.url,this.headers,t,this.fetch)}}const zg="2.49.4";let Xn="";typeof Deno<"u"?Xn="deno":typeof document<"u"?Xn="web":typeof navigator<"u"&&navigator.product==="ReactNative"?Xn="react-native":Xn="node";const Ug={"X-Client-Info":`supabase-js-${Xn}/${zg}`},bg={headers:Ug},Fg={schema:"public"},Mg={autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0,flowType:"implicit"},Bg={};var Hg=function(e,t,n,r){function i(s){return s instanceof n?s:new n(function(o){o(s)})}return new(n||(n=Promise))(function(s,o){function l(c){try{u(r.next(c))}catch(d){o(d)}}function a(c){try{u(r.throw(c))}catch(d){o(d)}}function u(c){c.done?s(c.value):i(c.value).then(l,a)}u((r=r.apply(e,t||[])).next())})};const Vg=e=>{let t;return e?t=e:typeof fetch>"u"?t=$d:t=fetch,(...n)=>t(...n)},Wg=()=>typeof Headers>"u"?Ld:Headers,Kg=(e,t,n)=>{const r=Vg(n),i=Wg();return(s,o)=>Hg(void 0,void 0,void 0,function*(){var l;const a=(l=yield t())!==null&&l!==void 0?l:e;let u=new i(o==null?void 0:o.headers);return u.has("apikey")||u.set("apikey",e),u.has("Authorization")||u.set("Authorization",`Bearer ${a}`),r(s,Object.assign(Object.assign({},o),{headers:u}))})};var Qg=function(e,t,n,r){function i(s){return s instanceof n?s:new n(function(o){o(s)})}return new(n||(n=Promise))(function(s,o){function l(c){try{u(r.next(c))}catch(d){o(d)}}function a(c){try{u(r.throw(c))}catch(d){o(d)}}function u(c){c.done?s(c.value):i(c.value).then(l,a)}u((r=r.apply(e,t||[])).next())})};function qg(e){return e.replace(/\/$/,"")}function Gg(e,t){const{db:n,auth:r,realtime:i,global:s}=e,{db:o,auth:l,realtime:a,global:u}=t,c={db:Object.assign(Object.assign({},o),n),auth:Object.assign(Object.assign({},l),r),realtime:Object.assign(Object.assign({},a),i),global:Object.assign(Object.assign({},u),s),accessToken:()=>Qg(this,void 0,void 0,function*(){return""})};return e.accessToken?c.accessToken=e.accessToken:delete c.accessToken,c}const qd="2.69.1",nn=30*1e3,Ko=3,Hs=Ko*nn,Jg="http://localhost:9999",Yg="supabase.auth.token",Xg={"X-Client-Info":`gotrue-js/${qd}`},Qo="X-Supabase-Api-Version",Gd={"2024-01-01":{timestamp:Date.parse("2024-01-01T00:00:00.0Z"),name:"2024-01-01"}},Zg=/^([a-z0-9_-]{4})*($|[a-z0-9_-]{3}$|[a-z0-9_-]{2}$)$/i,ev=6e5;class Ql extends Error{constructor(t,n,r){super(t),this.__isAuthError=!0,this.name="AuthError",this.status=n,this.code=r}}function R(e){return typeof e=="object"&&e!==null&&"__isAuthError"in e}class tv extends Ql{constructor(t,n,r){super(t,n,r),this.name="AuthApiError",this.status=n,this.code=r}}function nv(e){return R(e)&&e.name==="AuthApiError"}class Jd extends Ql{constructor(t,n){super(t),this.name="AuthUnknownError",this.originalError=n}}class $t extends Ql{constructor(t,n,r,i){super(t,r,i),this.name=n,this.status=r}}class at extends $t{constructor(){super("Auth session missing!","AuthSessionMissingError",400,void 0)}}function rv(e){return R(e)&&e.name==="AuthSessionMissingError"}class Vs extends $t{constructor(){super("Auth session or user missing","AuthInvalidTokenResponseError",500,void 0)}}class ti extends $t{constructor(t){super(t,"AuthInvalidCredentialsError",400,void 0)}}class ni extends $t{constructor(t,n=null){super(t,"AuthImplicitGrantRedirectError",500,void 0),this.details=null,this.details=n}toJSON(){return{name:this.name,message:this.message,status:this.status,details:this.details}}}function iv(e){return R(e)&&e.name==="AuthImplicitGrantRedirectError"}class cu extends $t{constructor(t,n=null){super(t,"AuthPKCEGrantCodeExchangeError",500,void 0),this.details=null,this.details=n}toJSON(){return{name:this.name,message:this.message,status:this.status,details:this.details}}}class qo extends $t{constructor(t,n){super(t,"AuthRetryableFetchError",n,void 0)}}function Ws(e){return R(e)&&e.name==="AuthRetryableFetchError"}class du extends $t{constructor(t,n,r){super(t,"AuthWeakPasswordError",n,"weak_password"),this.reasons=r}}class ur extends $t{constructor(t){super(t,"AuthInvalidJwtError",400,"invalid_jwt")}}const fu="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".split(""),hu=` 	
\r=`.split(""),sv=(()=>{const e=new Array(128);for(let t=0;t<e.length;t+=1)e[t]=-1;for(let t=0;t<hu.length;t+=1)e[hu[t].charCodeAt(0)]=-2;for(let t=0;t<fu.length;t+=1)e[fu[t].charCodeAt(0)]=t;return e})();function Yd(e,t,n){const r=sv[e];if(r>-1)for(t.queue=t.queue<<6|r,t.queuedBits+=6;t.queuedBits>=8;)n(t.queue>>t.queuedBits-8&255),t.queuedBits-=8;else{if(r===-2)return;throw new Error(`Invalid Base64-URL character "${String.fromCharCode(e)}"`)}}function pu(e){const t=[],n=o=>{t.push(String.fromCodePoint(o))},r={utf8seq:0,codepoint:0},i={queue:0,queuedBits:0},s=o=>{av(o,r,n)};for(let o=0;o<e.length;o+=1)Yd(e.charCodeAt(o),i,s);return t.join("")}function ov(e,t){if(e<=127){t(e);return}else if(e<=2047){t(192|e>>6),t(128|e&63);return}else if(e<=65535){t(224|e>>12),t(128|e>>6&63),t(128|e&63);return}else if(e<=1114111){t(240|e>>18),t(128|e>>12&63),t(128|e>>6&63),t(128|e&63);return}throw new Error(`Unrecognized Unicode codepoint: ${e.toString(16)}`)}function lv(e,t){for(let n=0;n<e.length;n+=1){let r=e.charCodeAt(n);if(r>55295&&r<=56319){const i=(r-55296)*1024&65535;r=(e.charCodeAt(n+1)-56320&65535|i)+65536,n+=1}ov(r,t)}}function av(e,t,n){if(t.utf8seq===0){if(e<=127){n(e);return}for(let r=1;r<6;r+=1)if(!(e>>7-r&1)){t.utf8seq=r;break}if(t.utf8seq===2)t.codepoint=e&31;else if(t.utf8seq===3)t.codepoint=e&15;else if(t.utf8seq===4)t.codepoint=e&7;else throw new Error("Invalid UTF-8 sequence");t.utf8seq-=1}else if(t.utf8seq>0){if(e<=127)throw new Error("Invalid UTF-8 sequence");t.codepoint=t.codepoint<<6|e&63,t.utf8seq-=1,t.utf8seq===0&&n(t.codepoint)}}function uv(e){const t=[],n={queue:0,queuedBits:0},r=i=>{t.push(i)};for(let i=0;i<e.length;i+=1)Yd(e.charCodeAt(i),n,r);return new Uint8Array(t)}function cv(e){const t=[];return lv(e,n=>t.push(n)),new Uint8Array(t)}function dv(e){return Math.round(Date.now()/1e3)+e}function fv(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){const t=Math.random()*16|0;return(e=="x"?t:t&3|8).toString(16)})}const We=()=>typeof window<"u"&&typeof document<"u",It={tested:!1,writable:!1},cr=()=>{if(!We())return!1;try{if(typeof globalThis.localStorage!="object")return!1}catch{return!1}if(It.tested)return It.writable;const e=`lswt-${Math.random()}${Math.random()}`;try{globalThis.localStorage.setItem(e,e),globalThis.localStorage.removeItem(e),It.tested=!0,It.writable=!0}catch{It.tested=!0,It.writable=!1}return It.writable};function hv(e){const t={},n=new URL(e);if(n.hash&&n.hash[0]==="#")try{new URLSearchParams(n.hash.substring(1)).forEach((i,s)=>{t[s]=i})}catch{}return n.searchParams.forEach((r,i)=>{t[i]=r}),t}const Xd=e=>{let t;return e?t=e:typeof fetch>"u"?t=(...n)=>Rn(async()=>{const{default:r}=await Promise.resolve().then(()=>Nn);return{default:r}},void 0).then(({default:r})=>r(...n)):t=fetch,(...n)=>t(...n)},pv=e=>typeof e=="object"&&e!==null&&"status"in e&&"ok"in e&&"json"in e&&typeof e.json=="function",Zd=async(e,t,n)=>{await e.setItem(t,JSON.stringify(n))},ri=async(e,t)=>{const n=await e.getItem(t);if(!n)return null;try{return JSON.parse(n)}catch{return n}},ii=async(e,t)=>{await e.removeItem(t)};class ds{constructor(){this.promise=new ds.promiseConstructor((t,n)=>{this.resolve=t,this.reject=n})}}ds.promiseConstructor=Promise;function Ks(e){const t=e.split(".");if(t.length!==3)throw new ur("Invalid JWT structure");for(let r=0;r<t.length;r++)if(!Zg.test(t[r]))throw new ur("JWT not in base64url format");return{header:JSON.parse(pu(t[0])),payload:JSON.parse(pu(t[1])),signature:uv(t[2]),raw:{header:t[0],payload:t[1]}}}async function gv(e){return await new Promise(t=>{setTimeout(()=>t(null),e)})}function vv(e,t){return new Promise((r,i)=>{(async()=>{for(let s=0;s<1/0;s++)try{const o=await e(s);if(!t(s,null,o)){r(o);return}}catch(o){if(!t(s,o)){i(o);return}}})()})}function mv(e){return("0"+e.toString(16)).substr(-2)}function yv(){const t=new Uint32Array(56);if(typeof crypto>"u"){const n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~",r=n.length;let i="";for(let s=0;s<56;s++)i+=n.charAt(Math.floor(Math.random()*r));return i}return crypto.getRandomValues(t),Array.from(t,mv).join("")}async function wv(e){const n=new TextEncoder().encode(e),r=await crypto.subtle.digest("SHA-256",n),i=new Uint8Array(r);return Array.from(i).map(s=>String.fromCharCode(s)).join("")}async function _v(e){if(!(typeof crypto<"u"&&typeof crypto.subtle<"u"&&typeof TextEncoder<"u"))return console.warn("WebCrypto API is not supported. Code challenge method will default to use plain instead of sha256."),e;const n=await wv(e);return btoa(n).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")}async function en(e,t,n=!1){const r=yv();let i=r;n&&(i+="/PASSWORD_RECOVERY"),await Zd(e,`${t}-code-verifier`,i);const s=await _v(r);return[s,r===s?"plain":"s256"]}const kv=/^2[0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])$/i;function Sv(e){const t=e.headers.get(Qo);if(!t||!t.match(kv))return null;try{return new Date(`${t}T00:00:00.0Z`)}catch{return null}}function Ev(e){if(!e)throw new Error("Missing exp claim");const t=Math.floor(Date.now()/1e3);if(e<=t)throw new Error("JWT has expired")}function xv(e){switch(e){case"RS256":return{name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}};case"ES256":return{name:"ECDSA",namedCurve:"P-256",hash:{name:"SHA-256"}};default:throw new Error("Invalid alg claim")}}var Cv=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(e!=null&&typeof Object.getOwnPropertySymbols=="function")for(var i=0,r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]]);return n};const zt=e=>e.msg||e.message||e.error_description||e.error||JSON.stringify(e),Pv=[502,503,504];async function gu(e){var t;if(!pv(e))throw new qo(zt(e),0);if(Pv.includes(e.status))throw new qo(zt(e),e.status);let n;try{n=await e.json()}catch(s){throw new Jd(zt(s),s)}let r;const i=Sv(e);if(i&&i.getTime()>=Gd["2024-01-01"].timestamp&&typeof n=="object"&&n&&typeof n.code=="string"?r=n.code:typeof n=="object"&&n&&typeof n.error_code=="string"&&(r=n.error_code),r){if(r==="weak_password")throw new du(zt(n),e.status,((t=n.weak_password)===null||t===void 0?void 0:t.reasons)||[]);if(r==="session_not_found")throw new at}else if(typeof n=="object"&&n&&typeof n.weak_password=="object"&&n.weak_password&&Array.isArray(n.weak_password.reasons)&&n.weak_password.reasons.length&&n.weak_password.reasons.reduce((s,o)=>s&&typeof o=="string",!0))throw new du(zt(n),e.status,n.weak_password.reasons);throw new tv(zt(n),e.status||500,r)}const Tv=(e,t,n,r)=>{const i={method:e,headers:(t==null?void 0:t.headers)||{}};return e==="GET"?i:(i.headers=Object.assign({"Content-Type":"application/json;charset=UTF-8"},t==null?void 0:t.headers),i.body=JSON.stringify(r),Object.assign(Object.assign({},i),n))};async function A(e,t,n,r){var i;const s=Object.assign({},r==null?void 0:r.headers);s[Qo]||(s[Qo]=Gd["2024-01-01"].name),r!=null&&r.jwt&&(s.Authorization=`Bearer ${r.jwt}`);const o=(i=r==null?void 0:r.query)!==null&&i!==void 0?i:{};r!=null&&r.redirectTo&&(o.redirect_to=r.redirectTo);const l=Object.keys(o).length?"?"+new URLSearchParams(o).toString():"",a=await jv(e,t,n+l,{headers:s,noResolveJson:r==null?void 0:r.noResolveJson},{},r==null?void 0:r.body);return r!=null&&r.xform?r==null?void 0:r.xform(a):{data:Object.assign({},a),error:null}}async function jv(e,t,n,r,i,s){const o=Tv(t,r,i,s);let l;try{l=await e(n,Object.assign({},o))}catch(a){throw console.error(a),new qo(zt(a),0)}if(l.ok||await gu(l),r!=null&&r.noResolveJson)return l;try{return await l.json()}catch(a){await gu(a)}}function ut(e){var t;let n=null;Lv(e)&&(n=Object.assign({},e),e.expires_at||(n.expires_at=dv(e.expires_in)));const r=(t=e.user)!==null&&t!==void 0?t:e;return{data:{session:n,user:r},error:null}}function vu(e){const t=ut(e);return!t.error&&e.weak_password&&typeof e.weak_password=="object"&&Array.isArray(e.weak_password.reasons)&&e.weak_password.reasons.length&&e.weak_password.message&&typeof e.weak_password.message=="string"&&e.weak_password.reasons.reduce((n,r)=>n&&typeof r=="string",!0)&&(t.data.weak_password=e.weak_password),t}function gt(e){var t;return{data:{user:(t=e.user)!==null&&t!==void 0?t:e},error:null}}function Ov(e){return{data:e,error:null}}function Rv(e){const{action_link:t,email_otp:n,hashed_token:r,redirect_to:i,verification_type:s}=e,o=Cv(e,["action_link","email_otp","hashed_token","redirect_to","verification_type"]),l={action_link:t,email_otp:n,hashed_token:r,redirect_to:i,verification_type:s},a=Object.assign({},o);return{data:{properties:l,user:a},error:null}}function $v(e){return e}function Lv(e){return e.access_token&&e.refresh_token&&e.expires_in}var Av=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(e!=null&&typeof Object.getOwnPropertySymbols=="function")for(var i=0,r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]]);return n};class Iv{constructor({url:t="",headers:n={},fetch:r}){this.url=t,this.headers=n,this.fetch=Xd(r),this.mfa={listFactors:this._listFactors.bind(this),deleteFactor:this._deleteFactor.bind(this)}}async signOut(t,n="global"){try{return await A(this.fetch,"POST",`${this.url}/logout?scope=${n}`,{headers:this.headers,jwt:t,noResolveJson:!0}),{data:null,error:null}}catch(r){if(R(r))return{data:null,error:r};throw r}}async inviteUserByEmail(t,n={}){try{return await A(this.fetch,"POST",`${this.url}/invite`,{body:{email:t,data:n.data},headers:this.headers,redirectTo:n.redirectTo,xform:gt})}catch(r){if(R(r))return{data:{user:null},error:r};throw r}}async generateLink(t){try{const{options:n}=t,r=Av(t,["options"]),i=Object.assign(Object.assign({},r),n);return"newEmail"in r&&(i.new_email=r==null?void 0:r.newEmail,delete i.newEmail),await A(this.fetch,"POST",`${this.url}/admin/generate_link`,{body:i,headers:this.headers,xform:Rv,redirectTo:n==null?void 0:n.redirectTo})}catch(n){if(R(n))return{data:{properties:null,user:null},error:n};throw n}}async createUser(t){try{return await A(this.fetch,"POST",`${this.url}/admin/users`,{body:t,headers:this.headers,xform:gt})}catch(n){if(R(n))return{data:{user:null},error:n};throw n}}async listUsers(t){var n,r,i,s,o,l,a;try{const u={nextPage:null,lastPage:0,total:0},c=await A(this.fetch,"GET",`${this.url}/admin/users`,{headers:this.headers,noResolveJson:!0,query:{page:(r=(n=t==null?void 0:t.page)===null||n===void 0?void 0:n.toString())!==null&&r!==void 0?r:"",per_page:(s=(i=t==null?void 0:t.perPage)===null||i===void 0?void 0:i.toString())!==null&&s!==void 0?s:""},xform:$v});if(c.error)throw c.error;const d=await c.json(),h=(o=c.headers.get("x-total-count"))!==null&&o!==void 0?o:0,v=(a=(l=c.headers.get("link"))===null||l===void 0?void 0:l.split(","))!==null&&a!==void 0?a:[];return v.length>0&&(v.forEach(m=>{const w=parseInt(m.split(";")[0].split("=")[1].substring(0,1)),x=JSON.parse(m.split(";")[1].split("=")[1]);u[`${x}Page`]=w}),u.total=parseInt(h)),{data:Object.assign(Object.assign({},d),u),error:null}}catch(u){if(R(u))return{data:{users:[]},error:u};throw u}}async getUserById(t){try{return await A(this.fetch,"GET",`${this.url}/admin/users/${t}`,{headers:this.headers,xform:gt})}catch(n){if(R(n))return{data:{user:null},error:n};throw n}}async updateUserById(t,n){try{return await A(this.fetch,"PUT",`${this.url}/admin/users/${t}`,{body:n,headers:this.headers,xform:gt})}catch(r){if(R(r))return{data:{user:null},error:r};throw r}}async deleteUser(t,n=!1){try{return await A(this.fetch,"DELETE",`${this.url}/admin/users/${t}`,{headers:this.headers,body:{should_soft_delete:n},xform:gt})}catch(r){if(R(r))return{data:{user:null},error:r};throw r}}async _listFactors(t){try{const{data:n,error:r}=await A(this.fetch,"GET",`${this.url}/admin/users/${t.userId}/factors`,{headers:this.headers,xform:i=>({data:{factors:i},error:null})});return{data:n,error:r}}catch(n){if(R(n))return{data:null,error:n};throw n}}async _deleteFactor(t){try{return{data:await A(this.fetch,"DELETE",`${this.url}/admin/users/${t.userId}/factors/${t.id}`,{headers:this.headers}),error:null}}catch(n){if(R(n))return{data:null,error:n};throw n}}}const Nv={getItem:e=>cr()?globalThis.localStorage.getItem(e):null,setItem:(e,t)=>{cr()&&globalThis.localStorage.setItem(e,t)},removeItem:e=>{cr()&&globalThis.localStorage.removeItem(e)}};function mu(e={}){return{getItem:t=>e[t]||null,setItem:(t,n)=>{e[t]=n},removeItem:t=>{delete e[t]}}}function Dv(){if(typeof globalThis!="object")try{Object.defineProperty(Object.prototype,"__magic__",{get:function(){return this},configurable:!0}),__magic__.globalThis=__magic__,delete Object.prototype.__magic__}catch{typeof self<"u"&&(self.globalThis=self)}}const tn={debug:!!(globalThis&&cr()&&globalThis.localStorage&&globalThis.localStorage.getItem("supabase.gotrue-js.locks.debug")==="true")};class ef extends Error{constructor(t){super(t),this.isAcquireTimeout=!0}}class zv extends ef{}async function Uv(e,t,n){tn.debug&&console.log("@supabase/gotrue-js: navigatorLock: acquire lock",e,t);const r=new globalThis.AbortController;return t>0&&setTimeout(()=>{r.abort(),tn.debug&&console.log("@supabase/gotrue-js: navigatorLock acquire timed out",e)},t),await Promise.resolve().then(()=>globalThis.navigator.locks.request(e,t===0?{mode:"exclusive",ifAvailable:!0}:{mode:"exclusive",signal:r.signal},async i=>{if(i){tn.debug&&console.log("@supabase/gotrue-js: navigatorLock: acquired",e,i.name);try{return await n()}finally{tn.debug&&console.log("@supabase/gotrue-js: navigatorLock: released",e,i.name)}}else{if(t===0)throw tn.debug&&console.log("@supabase/gotrue-js: navigatorLock: not immediately available",e),new zv(`Acquiring an exclusive Navigator LockManager lock "${e}" immediately failed`);if(tn.debug)try{const s=await globalThis.navigator.locks.query();console.log("@supabase/gotrue-js: Navigator LockManager state",JSON.stringify(s,null,"  "))}catch(s){console.warn("@supabase/gotrue-js: Error when querying Navigator LockManager state",s)}return console.warn("@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request"),await n()}}))}Dv();const bv={url:Jg,storageKey:Yg,autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0,headers:Xg,flowType:"implicit",debug:!1,hasCustomAuthorizationHeader:!1};async function yu(e,t,n){return await n()}class jr{constructor(t){var n,r;this.memoryStorage=null,this.stateChangeEmitters=new Map,this.autoRefreshTicker=null,this.visibilityChangedCallback=null,this.refreshingDeferred=null,this.initializePromise=null,this.detectSessionInUrl=!0,this.hasCustomAuthorizationHeader=!1,this.suppressGetSessionWarning=!1,this.lockAcquired=!1,this.pendingInLock=[],this.broadcastChannel=null,this.logger=console.log,this.instanceID=jr.nextInstanceID,jr.nextInstanceID+=1,this.instanceID>0&&We()&&console.warn("Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key.");const i=Object.assign(Object.assign({},bv),t);if(this.logDebugMessages=!!i.debug,typeof i.debug=="function"&&(this.logger=i.debug),this.persistSession=i.persistSession,this.storageKey=i.storageKey,this.autoRefreshToken=i.autoRefreshToken,this.admin=new Iv({url:i.url,headers:i.headers,fetch:i.fetch}),this.url=i.url,this.headers=i.headers,this.fetch=Xd(i.fetch),this.lock=i.lock||yu,this.detectSessionInUrl=i.detectSessionInUrl,this.flowType=i.flowType,this.hasCustomAuthorizationHeader=i.hasCustomAuthorizationHeader,i.lock?this.lock=i.lock:We()&&(!((n=globalThis==null?void 0:globalThis.navigator)===null||n===void 0)&&n.locks)?this.lock=Uv:this.lock=yu,this.jwks={keys:[]},this.jwks_cached_at=Number.MIN_SAFE_INTEGER,this.mfa={verify:this._verify.bind(this),enroll:this._enroll.bind(this),unenroll:this._unenroll.bind(this),challenge:this._challenge.bind(this),listFactors:this._listFactors.bind(this),challengeAndVerify:this._challengeAndVerify.bind(this),getAuthenticatorAssuranceLevel:this._getAuthenticatorAssuranceLevel.bind(this)},this.persistSession?i.storage?this.storage=i.storage:cr()?this.storage=Nv:(this.memoryStorage={},this.storage=mu(this.memoryStorage)):(this.memoryStorage={},this.storage=mu(this.memoryStorage)),We()&&globalThis.BroadcastChannel&&this.persistSession&&this.storageKey){try{this.broadcastChannel=new globalThis.BroadcastChannel(this.storageKey)}catch(s){console.error("Failed to create a new BroadcastChannel, multi-tab state changes will not be available",s)}(r=this.broadcastChannel)===null||r===void 0||r.addEventListener("message",async s=>{this._debug("received broadcast notification from other tab or client",s),await this._notifyAllSubscribers(s.data.event,s.data.session,!1)})}this.initialize()}_debug(...t){return this.logDebugMessages&&this.logger(`GoTrueClient@${this.instanceID} (${qd}) ${new Date().toISOString()}`,...t),this}async initialize(){return this.initializePromise?await this.initializePromise:(this.initializePromise=(async()=>await this._acquireLock(-1,async()=>await this._initialize()))(),await this.initializePromise)}async _initialize(){var t;try{const n=hv(window.location.href);let r="none";if(this._isImplicitGrantCallback(n)?r="implicit":await this._isPKCECallback(n)&&(r="pkce"),We()&&this.detectSessionInUrl&&r!=="none"){const{data:i,error:s}=await this._getSessionFromURL(n,r);if(s){if(this._debug("#_initialize()","error detecting session from URL",s),iv(s)){const a=(t=s.details)===null||t===void 0?void 0:t.code;if(a==="identity_already_exists"||a==="identity_not_found"||a==="single_identity_not_deletable")return{error:s}}return await this._removeSession(),{error:s}}const{session:o,redirectType:l}=i;return this._debug("#_initialize()","detected session in URL",o,"redirect type",l),await this._saveSession(o),setTimeout(async()=>{l==="recovery"?await this._notifyAllSubscribers("PASSWORD_RECOVERY",o):await this._notifyAllSubscribers("SIGNED_IN",o)},0),{error:null}}return await this._recoverAndRefresh(),{error:null}}catch(n){return R(n)?{error:n}:{error:new Jd("Unexpected error during initialization",n)}}finally{await this._handleVisibilityChange(),this._debug("#_initialize()","end")}}async signInAnonymously(t){var n,r,i;try{const s=await A(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,body:{data:(r=(n=t==null?void 0:t.options)===null||n===void 0?void 0:n.data)!==null&&r!==void 0?r:{},gotrue_meta_security:{captcha_token:(i=t==null?void 0:t.options)===null||i===void 0?void 0:i.captchaToken}},xform:ut}),{data:o,error:l}=s;if(l||!o)return{data:{user:null,session:null},error:l};const a=o.session,u=o.user;return o.session&&(await this._saveSession(o.session),await this._notifyAllSubscribers("SIGNED_IN",a)),{data:{user:u,session:a},error:null}}catch(s){if(R(s))return{data:{user:null,session:null},error:s};throw s}}async signUp(t){var n,r,i;try{let s;if("email"in t){const{email:c,password:d,options:h}=t;let v=null,m=null;this.flowType==="pkce"&&([v,m]=await en(this.storage,this.storageKey)),s=await A(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,redirectTo:h==null?void 0:h.emailRedirectTo,body:{email:c,password:d,data:(n=h==null?void 0:h.data)!==null&&n!==void 0?n:{},gotrue_meta_security:{captcha_token:h==null?void 0:h.captchaToken},code_challenge:v,code_challenge_method:m},xform:ut})}else if("phone"in t){const{phone:c,password:d,options:h}=t;s=await A(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,body:{phone:c,password:d,data:(r=h==null?void 0:h.data)!==null&&r!==void 0?r:{},channel:(i=h==null?void 0:h.channel)!==null&&i!==void 0?i:"sms",gotrue_meta_security:{captcha_token:h==null?void 0:h.captchaToken}},xform:ut})}else throw new ti("You must provide either an email or phone number and a password");const{data:o,error:l}=s;if(l||!o)return{data:{user:null,session:null},error:l};const a=o.session,u=o.user;return o.session&&(await this._saveSession(o.session),await this._notifyAllSubscribers("SIGNED_IN",a)),{data:{user:u,session:a},error:null}}catch(s){if(R(s))return{data:{user:null,session:null},error:s};throw s}}async signInWithPassword(t){try{let n;if("email"in t){const{email:s,password:o,options:l}=t;n=await A(this.fetch,"POST",`${this.url}/token?grant_type=password`,{headers:this.headers,body:{email:s,password:o,gotrue_meta_security:{captcha_token:l==null?void 0:l.captchaToken}},xform:vu})}else if("phone"in t){const{phone:s,password:o,options:l}=t;n=await A(this.fetch,"POST",`${this.url}/token?grant_type=password`,{headers:this.headers,body:{phone:s,password:o,gotrue_meta_security:{captcha_token:l==null?void 0:l.captchaToken}},xform:vu})}else throw new ti("You must provide either an email or phone number and a password");const{data:r,error:i}=n;return i?{data:{user:null,session:null},error:i}:!r||!r.session||!r.user?{data:{user:null,session:null},error:new Vs}:(r.session&&(await this._saveSession(r.session),await this._notifyAllSubscribers("SIGNED_IN",r.session)),{data:Object.assign({user:r.user,session:r.session},r.weak_password?{weakPassword:r.weak_password}:null),error:i})}catch(n){if(R(n))return{data:{user:null,session:null},error:n};throw n}}async signInWithOAuth(t){var n,r,i,s;return await this._handleProviderSignIn(t.provider,{redirectTo:(n=t.options)===null||n===void 0?void 0:n.redirectTo,scopes:(r=t.options)===null||r===void 0?void 0:r.scopes,queryParams:(i=t.options)===null||i===void 0?void 0:i.queryParams,skipBrowserRedirect:(s=t.options)===null||s===void 0?void 0:s.skipBrowserRedirect})}async exchangeCodeForSession(t){return await this.initializePromise,this._acquireLock(-1,async()=>this._exchangeCodeForSession(t))}async _exchangeCodeForSession(t){const n=await ri(this.storage,`${this.storageKey}-code-verifier`),[r,i]=(n??"").split("/");try{const{data:s,error:o}=await A(this.fetch,"POST",`${this.url}/token?grant_type=pkce`,{headers:this.headers,body:{auth_code:t,code_verifier:r},xform:ut});if(await ii(this.storage,`${this.storageKey}-code-verifier`),o)throw o;return!s||!s.session||!s.user?{data:{user:null,session:null,redirectType:null},error:new Vs}:(s.session&&(await this._saveSession(s.session),await this._notifyAllSubscribers("SIGNED_IN",s.session)),{data:Object.assign(Object.assign({},s),{redirectType:i??null}),error:o})}catch(s){if(R(s))return{data:{user:null,session:null,redirectType:null},error:s};throw s}}async signInWithIdToken(t){try{const{options:n,provider:r,token:i,access_token:s,nonce:o}=t,l=await A(this.fetch,"POST",`${this.url}/token?grant_type=id_token`,{headers:this.headers,body:{provider:r,id_token:i,access_token:s,nonce:o,gotrue_meta_security:{captcha_token:n==null?void 0:n.captchaToken}},xform:ut}),{data:a,error:u}=l;return u?{data:{user:null,session:null},error:u}:!a||!a.session||!a.user?{data:{user:null,session:null},error:new Vs}:(a.session&&(await this._saveSession(a.session),await this._notifyAllSubscribers("SIGNED_IN",a.session)),{data:a,error:u})}catch(n){if(R(n))return{data:{user:null,session:null},error:n};throw n}}async signInWithOtp(t){var n,r,i,s,o;try{if("email"in t){const{email:l,options:a}=t;let u=null,c=null;this.flowType==="pkce"&&([u,c]=await en(this.storage,this.storageKey));const{error:d}=await A(this.fetch,"POST",`${this.url}/otp`,{headers:this.headers,body:{email:l,data:(n=a==null?void 0:a.data)!==null&&n!==void 0?n:{},create_user:(r=a==null?void 0:a.shouldCreateUser)!==null&&r!==void 0?r:!0,gotrue_meta_security:{captcha_token:a==null?void 0:a.captchaToken},code_challenge:u,code_challenge_method:c},redirectTo:a==null?void 0:a.emailRedirectTo});return{data:{user:null,session:null},error:d}}if("phone"in t){const{phone:l,options:a}=t,{data:u,error:c}=await A(this.fetch,"POST",`${this.url}/otp`,{headers:this.headers,body:{phone:l,data:(i=a==null?void 0:a.data)!==null&&i!==void 0?i:{},create_user:(s=a==null?void 0:a.shouldCreateUser)!==null&&s!==void 0?s:!0,gotrue_meta_security:{captcha_token:a==null?void 0:a.captchaToken},channel:(o=a==null?void 0:a.channel)!==null&&o!==void 0?o:"sms"}});return{data:{user:null,session:null,messageId:u==null?void 0:u.message_id},error:c}}throw new ti("You must provide either an email or phone number.")}catch(l){if(R(l))return{data:{user:null,session:null},error:l};throw l}}async verifyOtp(t){var n,r;try{let i,s;"options"in t&&(i=(n=t.options)===null||n===void 0?void 0:n.redirectTo,s=(r=t.options)===null||r===void 0?void 0:r.captchaToken);const{data:o,error:l}=await A(this.fetch,"POST",`${this.url}/verify`,{headers:this.headers,body:Object.assign(Object.assign({},t),{gotrue_meta_security:{captcha_token:s}}),redirectTo:i,xform:ut});if(l)throw l;if(!o)throw new Error("An error occurred on token verification.");const a=o.session,u=o.user;return a!=null&&a.access_token&&(await this._saveSession(a),await this._notifyAllSubscribers(t.type=="recovery"?"PASSWORD_RECOVERY":"SIGNED_IN",a)),{data:{user:u,session:a},error:null}}catch(i){if(R(i))return{data:{user:null,session:null},error:i};throw i}}async signInWithSSO(t){var n,r,i;try{let s=null,o=null;return this.flowType==="pkce"&&([s,o]=await en(this.storage,this.storageKey)),await A(this.fetch,"POST",`${this.url}/sso`,{body:Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},"providerId"in t?{provider_id:t.providerId}:null),"domain"in t?{domain:t.domain}:null),{redirect_to:(r=(n=t.options)===null||n===void 0?void 0:n.redirectTo)!==null&&r!==void 0?r:void 0}),!((i=t==null?void 0:t.options)===null||i===void 0)&&i.captchaToken?{gotrue_meta_security:{captcha_token:t.options.captchaToken}}:null),{skip_http_redirect:!0,code_challenge:s,code_challenge_method:o}),headers:this.headers,xform:Ov})}catch(s){if(R(s))return{data:null,error:s};throw s}}async reauthenticate(){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._reauthenticate())}async _reauthenticate(){try{return await this._useSession(async t=>{const{data:{session:n},error:r}=t;if(r)throw r;if(!n)throw new at;const{error:i}=await A(this.fetch,"GET",`${this.url}/reauthenticate`,{headers:this.headers,jwt:n.access_token});return{data:{user:null,session:null},error:i}})}catch(t){if(R(t))return{data:{user:null,session:null},error:t};throw t}}async resend(t){try{const n=`${this.url}/resend`;if("email"in t){const{email:r,type:i,options:s}=t,{error:o}=await A(this.fetch,"POST",n,{headers:this.headers,body:{email:r,type:i,gotrue_meta_security:{captcha_token:s==null?void 0:s.captchaToken}},redirectTo:s==null?void 0:s.emailRedirectTo});return{data:{user:null,session:null},error:o}}else if("phone"in t){const{phone:r,type:i,options:s}=t,{data:o,error:l}=await A(this.fetch,"POST",n,{headers:this.headers,body:{phone:r,type:i,gotrue_meta_security:{captcha_token:s==null?void 0:s.captchaToken}}});return{data:{user:null,session:null,messageId:o==null?void 0:o.message_id},error:l}}throw new ti("You must provide either an email or phone number and a type")}catch(n){if(R(n))return{data:{user:null,session:null},error:n};throw n}}async getSession(){return await this.initializePromise,await this._acquireLock(-1,async()=>this._useSession(async n=>n))}async _acquireLock(t,n){this._debug("#_acquireLock","begin",t);try{if(this.lockAcquired){const r=this.pendingInLock.length?this.pendingInLock[this.pendingInLock.length-1]:Promise.resolve(),i=(async()=>(await r,await n()))();return this.pendingInLock.push((async()=>{try{await i}catch{}})()),i}return await this.lock(`lock:${this.storageKey}`,t,async()=>{this._debug("#_acquireLock","lock acquired for storage key",this.storageKey);try{this.lockAcquired=!0;const r=n();for(this.pendingInLock.push((async()=>{try{await r}catch{}})()),await r;this.pendingInLock.length;){const i=[...this.pendingInLock];await Promise.all(i),this.pendingInLock.splice(0,i.length)}return await r}finally{this._debug("#_acquireLock","lock released for storage key",this.storageKey),this.lockAcquired=!1}})}finally{this._debug("#_acquireLock","end")}}async _useSession(t){this._debug("#_useSession","begin");try{const n=await this.__loadSession();return await t(n)}finally{this._debug("#_useSession","end")}}async __loadSession(){this._debug("#__loadSession()","begin"),this.lockAcquired||this._debug("#__loadSession()","used outside of an acquired lock!",new Error().stack);try{let t=null;const n=await ri(this.storage,this.storageKey);if(this._debug("#getSession()","session from storage",n),n!==null&&(this._isValidSession(n)?t=n:(this._debug("#getSession()","session from storage is not valid"),await this._removeSession())),!t)return{data:{session:null},error:null};const r=t.expires_at?t.expires_at*1e3-Date.now()<Hs:!1;if(this._debug("#__loadSession()",`session has${r?"":" not"} expired`,"expires_at",t.expires_at),!r){if(this.storage.isServer){let o=this.suppressGetSessionWarning;t=new Proxy(t,{get:(a,u,c)=>(!o&&u==="user"&&(console.warn("Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server."),o=!0,this.suppressGetSessionWarning=!0),Reflect.get(a,u,c))})}return{data:{session:t},error:null}}const{session:i,error:s}=await this._callRefreshToken(t.refresh_token);return s?{data:{session:null},error:s}:{data:{session:i},error:null}}finally{this._debug("#__loadSession()","end")}}async getUser(t){return t?await this._getUser(t):(await this.initializePromise,await this._acquireLock(-1,async()=>await this._getUser()))}async _getUser(t){try{return t?await A(this.fetch,"GET",`${this.url}/user`,{headers:this.headers,jwt:t,xform:gt}):await this._useSession(async n=>{var r,i,s;const{data:o,error:l}=n;if(l)throw l;return!(!((r=o.session)===null||r===void 0)&&r.access_token)&&!this.hasCustomAuthorizationHeader?{data:{user:null},error:new at}:await A(this.fetch,"GET",`${this.url}/user`,{headers:this.headers,jwt:(s=(i=o.session)===null||i===void 0?void 0:i.access_token)!==null&&s!==void 0?s:void 0,xform:gt})})}catch(n){if(R(n))return rv(n)&&(await this._removeSession(),await ii(this.storage,`${this.storageKey}-code-verifier`)),{data:{user:null},error:n};throw n}}async updateUser(t,n={}){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._updateUser(t,n))}async _updateUser(t,n={}){try{return await this._useSession(async r=>{const{data:i,error:s}=r;if(s)throw s;if(!i.session)throw new at;const o=i.session;let l=null,a=null;this.flowType==="pkce"&&t.email!=null&&([l,a]=await en(this.storage,this.storageKey));const{data:u,error:c}=await A(this.fetch,"PUT",`${this.url}/user`,{headers:this.headers,redirectTo:n==null?void 0:n.emailRedirectTo,body:Object.assign(Object.assign({},t),{code_challenge:l,code_challenge_method:a}),jwt:o.access_token,xform:gt});if(c)throw c;return o.user=u.user,await this._saveSession(o),await this._notifyAllSubscribers("USER_UPDATED",o),{data:{user:o.user},error:null}})}catch(r){if(R(r))return{data:{user:null},error:r};throw r}}async setSession(t){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._setSession(t))}async _setSession(t){try{if(!t.access_token||!t.refresh_token)throw new at;const n=Date.now()/1e3;let r=n,i=!0,s=null;const{payload:o}=Ks(t.access_token);if(o.exp&&(r=o.exp,i=r<=n),i){const{session:l,error:a}=await this._callRefreshToken(t.refresh_token);if(a)return{data:{user:null,session:null},error:a};if(!l)return{data:{user:null,session:null},error:null};s=l}else{const{data:l,error:a}=await this._getUser(t.access_token);if(a)throw a;s={access_token:t.access_token,refresh_token:t.refresh_token,user:l.user,token_type:"bearer",expires_in:r-n,expires_at:r},await this._saveSession(s),await this._notifyAllSubscribers("SIGNED_IN",s)}return{data:{user:s.user,session:s},error:null}}catch(n){if(R(n))return{data:{session:null,user:null},error:n};throw n}}async refreshSession(t){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._refreshSession(t))}async _refreshSession(t){try{return await this._useSession(async n=>{var r;if(!t){const{data:o,error:l}=n;if(l)throw l;t=(r=o.session)!==null&&r!==void 0?r:void 0}if(!(t!=null&&t.refresh_token))throw new at;const{session:i,error:s}=await this._callRefreshToken(t.refresh_token);return s?{data:{user:null,session:null},error:s}:i?{data:{user:i.user,session:i},error:null}:{data:{user:null,session:null},error:null}})}catch(n){if(R(n))return{data:{user:null,session:null},error:n};throw n}}async _getSessionFromURL(t,n){try{if(!We())throw new ni("No browser detected.");if(t.error||t.error_description||t.error_code)throw new ni(t.error_description||"Error in URL with unspecified error_description",{error:t.error||"unspecified_error",code:t.error_code||"unspecified_code"});switch(n){case"implicit":if(this.flowType==="pkce")throw new cu("Not a valid PKCE flow url.");break;case"pkce":if(this.flowType==="implicit")throw new ni("Not a valid implicit grant flow url.");break;default:}if(n==="pkce"){if(this._debug("#_initialize()","begin","is PKCE flow",!0),!t.code)throw new cu("No code detected.");const{data:f,error:g}=await this._exchangeCodeForSession(t.code);if(g)throw g;const y=new URL(window.location.href);return y.searchParams.delete("code"),window.history.replaceState(window.history.state,"",y.toString()),{data:{session:f.session,redirectType:null},error:null}}const{provider_token:r,provider_refresh_token:i,access_token:s,refresh_token:o,expires_in:l,expires_at:a,token_type:u}=t;if(!s||!l||!o||!u)throw new ni("No session defined in URL");const c=Math.round(Date.now()/1e3),d=parseInt(l);let h=c+d;a&&(h=parseInt(a));const v=h-c;v*1e3<=nn&&console.warn(`@supabase/gotrue-js: Session as retrieved from URL expires in ${v}s, should have been closer to ${d}s`);const m=h-d;c-m>=120?console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued over 120s ago, URL could be stale",m,h,c):c-m<0&&console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued in the future? Check the device clock for skew",m,h,c);const{data:w,error:x}=await this._getUser(s);if(x)throw x;const p={provider_token:r,provider_refresh_token:i,access_token:s,expires_in:d,expires_at:h,refresh_token:o,token_type:u,user:w.user};return window.location.hash="",this._debug("#_getSessionFromURL()","clearing window.location.hash"),{data:{session:p,redirectType:t.type},error:null}}catch(r){if(R(r))return{data:{session:null,redirectType:null},error:r};throw r}}_isImplicitGrantCallback(t){return!!(t.access_token||t.error_description)}async _isPKCECallback(t){const n=await ri(this.storage,`${this.storageKey}-code-verifier`);return!!(t.code&&n)}async signOut(t={scope:"global"}){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._signOut(t))}async _signOut({scope:t}={scope:"global"}){return await this._useSession(async n=>{var r;const{data:i,error:s}=n;if(s)return{error:s};const o=(r=i.session)===null||r===void 0?void 0:r.access_token;if(o){const{error:l}=await this.admin.signOut(o,t);if(l&&!(nv(l)&&(l.status===404||l.status===401||l.status===403)))return{error:l}}return t!=="others"&&(await this._removeSession(),await ii(this.storage,`${this.storageKey}-code-verifier`)),{error:null}})}onAuthStateChange(t){const n=fv(),r={id:n,callback:t,unsubscribe:()=>{this._debug("#unsubscribe()","state change callback with id removed",n),this.stateChangeEmitters.delete(n)}};return this._debug("#onAuthStateChange()","registered callback with id",n),this.stateChangeEmitters.set(n,r),(async()=>(await this.initializePromise,await this._acquireLock(-1,async()=>{this._emitInitialSession(n)})))(),{data:{subscription:r}}}async _emitInitialSession(t){return await this._useSession(async n=>{var r,i;try{const{data:{session:s},error:o}=n;if(o)throw o;await((r=this.stateChangeEmitters.get(t))===null||r===void 0?void 0:r.callback("INITIAL_SESSION",s)),this._debug("INITIAL_SESSION","callback id",t,"session",s)}catch(s){await((i=this.stateChangeEmitters.get(t))===null||i===void 0?void 0:i.callback("INITIAL_SESSION",null)),this._debug("INITIAL_SESSION","callback id",t,"error",s),console.error(s)}})}async resetPasswordForEmail(t,n={}){let r=null,i=null;this.flowType==="pkce"&&([r,i]=await en(this.storage,this.storageKey,!0));try{return await A(this.fetch,"POST",`${this.url}/recover`,{body:{email:t,code_challenge:r,code_challenge_method:i,gotrue_meta_security:{captcha_token:n.captchaToken}},headers:this.headers,redirectTo:n.redirectTo})}catch(s){if(R(s))return{data:null,error:s};throw s}}async getUserIdentities(){var t;try{const{data:n,error:r}=await this.getUser();if(r)throw r;return{data:{identities:(t=n.user.identities)!==null&&t!==void 0?t:[]},error:null}}catch(n){if(R(n))return{data:null,error:n};throw n}}async linkIdentity(t){var n;try{const{data:r,error:i}=await this._useSession(async s=>{var o,l,a,u,c;const{data:d,error:h}=s;if(h)throw h;const v=await this._getUrlForProvider(`${this.url}/user/identities/authorize`,t.provider,{redirectTo:(o=t.options)===null||o===void 0?void 0:o.redirectTo,scopes:(l=t.options)===null||l===void 0?void 0:l.scopes,queryParams:(a=t.options)===null||a===void 0?void 0:a.queryParams,skipBrowserRedirect:!0});return await A(this.fetch,"GET",v,{headers:this.headers,jwt:(c=(u=d.session)===null||u===void 0?void 0:u.access_token)!==null&&c!==void 0?c:void 0})});if(i)throw i;return We()&&!(!((n=t.options)===null||n===void 0)&&n.skipBrowserRedirect)&&window.location.assign(r==null?void 0:r.url),{data:{provider:t.provider,url:r==null?void 0:r.url},error:null}}catch(r){if(R(r))return{data:{provider:t.provider,url:null},error:r};throw r}}async unlinkIdentity(t){try{return await this._useSession(async n=>{var r,i;const{data:s,error:o}=n;if(o)throw o;return await A(this.fetch,"DELETE",`${this.url}/user/identities/${t.identity_id}`,{headers:this.headers,jwt:(i=(r=s.session)===null||r===void 0?void 0:r.access_token)!==null&&i!==void 0?i:void 0})})}catch(n){if(R(n))return{data:null,error:n};throw n}}async _refreshAccessToken(t){const n=`#_refreshAccessToken(${t.substring(0,5)}...)`;this._debug(n,"begin");try{const r=Date.now();return await vv(async i=>(i>0&&await gv(200*Math.pow(2,i-1)),this._debug(n,"refreshing attempt",i),await A(this.fetch,"POST",`${this.url}/token?grant_type=refresh_token`,{body:{refresh_token:t},headers:this.headers,xform:ut})),(i,s)=>{const o=200*Math.pow(2,i);return s&&Ws(s)&&Date.now()+o-r<nn})}catch(r){if(this._debug(n,"error",r),R(r))return{data:{session:null,user:null},error:r};throw r}finally{this._debug(n,"end")}}_isValidSession(t){return typeof t=="object"&&t!==null&&"access_token"in t&&"refresh_token"in t&&"expires_at"in t}async _handleProviderSignIn(t,n){const r=await this._getUrlForProvider(`${this.url}/authorize`,t,{redirectTo:n.redirectTo,scopes:n.scopes,queryParams:n.queryParams});return this._debug("#_handleProviderSignIn()","provider",t,"options",n,"url",r),We()&&!n.skipBrowserRedirect&&window.location.assign(r),{data:{provider:t,url:r},error:null}}async _recoverAndRefresh(){var t;const n="#_recoverAndRefresh()";this._debug(n,"begin");try{const r=await ri(this.storage,this.storageKey);if(this._debug(n,"session from storage",r),!this._isValidSession(r)){this._debug(n,"session is not valid"),r!==null&&await this._removeSession();return}const i=((t=r.expires_at)!==null&&t!==void 0?t:1/0)*1e3-Date.now()<Hs;if(this._debug(n,`session has${i?"":" not"} expired with margin of ${Hs}s`),i){if(this.autoRefreshToken&&r.refresh_token){const{error:s}=await this._callRefreshToken(r.refresh_token);s&&(console.error(s),Ws(s)||(this._debug(n,"refresh failed with a non-retryable error, removing the session",s),await this._removeSession()))}}else await this._notifyAllSubscribers("SIGNED_IN",r)}catch(r){this._debug(n,"error",r),console.error(r);return}finally{this._debug(n,"end")}}async _callRefreshToken(t){var n,r;if(!t)throw new at;if(this.refreshingDeferred)return this.refreshingDeferred.promise;const i=`#_callRefreshToken(${t.substring(0,5)}...)`;this._debug(i,"begin");try{this.refreshingDeferred=new ds;const{data:s,error:o}=await this._refreshAccessToken(t);if(o)throw o;if(!s.session)throw new at;await this._saveSession(s.session),await this._notifyAllSubscribers("TOKEN_REFRESHED",s.session);const l={session:s.session,error:null};return this.refreshingDeferred.resolve(l),l}catch(s){if(this._debug(i,"error",s),R(s)){const o={session:null,error:s};return Ws(s)||await this._removeSession(),(n=this.refreshingDeferred)===null||n===void 0||n.resolve(o),o}throw(r=this.refreshingDeferred)===null||r===void 0||r.reject(s),s}finally{this.refreshingDeferred=null,this._debug(i,"end")}}async _notifyAllSubscribers(t,n,r=!0){const i=`#_notifyAllSubscribers(${t})`;this._debug(i,"begin",n,`broadcast = ${r}`);try{this.broadcastChannel&&r&&this.broadcastChannel.postMessage({event:t,session:n});const s=[],o=Array.from(this.stateChangeEmitters.values()).map(async l=>{try{await l.callback(t,n)}catch(a){s.push(a)}});if(await Promise.all(o),s.length>0){for(let l=0;l<s.length;l+=1)console.error(s[l]);throw s[0]}}finally{this._debug(i,"end")}}async _saveSession(t){this._debug("#_saveSession()",t),this.suppressGetSessionWarning=!0,await Zd(this.storage,this.storageKey,t)}async _removeSession(){this._debug("#_removeSession()"),await ii(this.storage,this.storageKey),await this._notifyAllSubscribers("SIGNED_OUT",null)}_removeVisibilityChangedCallback(){this._debug("#_removeVisibilityChangedCallback()");const t=this.visibilityChangedCallback;this.visibilityChangedCallback=null;try{t&&We()&&(window!=null&&window.removeEventListener)&&window.removeEventListener("visibilitychange",t)}catch(n){console.error("removing visibilitychange callback failed",n)}}async _startAutoRefresh(){await this._stopAutoRefresh(),this._debug("#_startAutoRefresh()");const t=setInterval(()=>this._autoRefreshTokenTick(),nn);this.autoRefreshTicker=t,t&&typeof t=="object"&&typeof t.unref=="function"?t.unref():typeof Deno<"u"&&typeof Deno.unrefTimer=="function"&&Deno.unrefTimer(t),setTimeout(async()=>{await this.initializePromise,await this._autoRefreshTokenTick()},0)}async _stopAutoRefresh(){this._debug("#_stopAutoRefresh()");const t=this.autoRefreshTicker;this.autoRefreshTicker=null,t&&clearInterval(t)}async startAutoRefresh(){this._removeVisibilityChangedCallback(),await this._startAutoRefresh()}async stopAutoRefresh(){this._removeVisibilityChangedCallback(),await this._stopAutoRefresh()}async _autoRefreshTokenTick(){this._debug("#_autoRefreshTokenTick()","begin");try{await this._acquireLock(0,async()=>{try{const t=Date.now();try{return await this._useSession(async n=>{const{data:{session:r}}=n;if(!r||!r.refresh_token||!r.expires_at){this._debug("#_autoRefreshTokenTick()","no session");return}const i=Math.floor((r.expires_at*1e3-t)/nn);this._debug("#_autoRefreshTokenTick()",`access token expires in ${i} ticks, a tick lasts ${nn}ms, refresh threshold is ${Ko} ticks`),i<=Ko&&await this._callRefreshToken(r.refresh_token)})}catch(n){console.error("Auto refresh tick failed with error. This is likely a transient error.",n)}}finally{this._debug("#_autoRefreshTokenTick()","end")}})}catch(t){if(t.isAcquireTimeout||t instanceof ef)this._debug("auto refresh token tick lock not available");else throw t}}async _handleVisibilityChange(){if(this._debug("#_handleVisibilityChange()"),!We()||!(window!=null&&window.addEventListener))return this.autoRefreshToken&&this.startAutoRefresh(),!1;try{this.visibilityChangedCallback=async()=>await this._onVisibilityChanged(!1),window==null||window.addEventListener("visibilitychange",this.visibilityChangedCallback),await this._onVisibilityChanged(!0)}catch(t){console.error("_handleVisibilityChange",t)}}async _onVisibilityChanged(t){const n=`#_onVisibilityChanged(${t})`;this._debug(n,"visibilityState",document.visibilityState),document.visibilityState==="visible"?(this.autoRefreshToken&&this._startAutoRefresh(),t||(await this.initializePromise,await this._acquireLock(-1,async()=>{if(document.visibilityState!=="visible"){this._debug(n,"acquired the lock to recover the session, but the browser visibilityState is no longer visible, aborting");return}await this._recoverAndRefresh()}))):document.visibilityState==="hidden"&&this.autoRefreshToken&&this._stopAutoRefresh()}async _getUrlForProvider(t,n,r){const i=[`provider=${encodeURIComponent(n)}`];if(r!=null&&r.redirectTo&&i.push(`redirect_to=${encodeURIComponent(r.redirectTo)}`),r!=null&&r.scopes&&i.push(`scopes=${encodeURIComponent(r.scopes)}`),this.flowType==="pkce"){const[s,o]=await en(this.storage,this.storageKey),l=new URLSearchParams({code_challenge:`${encodeURIComponent(s)}`,code_challenge_method:`${encodeURIComponent(o)}`});i.push(l.toString())}if(r!=null&&r.queryParams){const s=new URLSearchParams(r.queryParams);i.push(s.toString())}return r!=null&&r.skipBrowserRedirect&&i.push(`skip_http_redirect=${r.skipBrowserRedirect}`),`${t}?${i.join("&")}`}async _unenroll(t){try{return await this._useSession(async n=>{var r;const{data:i,error:s}=n;return s?{data:null,error:s}:await A(this.fetch,"DELETE",`${this.url}/factors/${t.factorId}`,{headers:this.headers,jwt:(r=i==null?void 0:i.session)===null||r===void 0?void 0:r.access_token})})}catch(n){if(R(n))return{data:null,error:n};throw n}}async _enroll(t){try{return await this._useSession(async n=>{var r,i;const{data:s,error:o}=n;if(o)return{data:null,error:o};const l=Object.assign({friendly_name:t.friendlyName,factor_type:t.factorType},t.factorType==="phone"?{phone:t.phone}:{issuer:t.issuer}),{data:a,error:u}=await A(this.fetch,"POST",`${this.url}/factors`,{body:l,headers:this.headers,jwt:(r=s==null?void 0:s.session)===null||r===void 0?void 0:r.access_token});return u?{data:null,error:u}:(t.factorType==="totp"&&(!((i=a==null?void 0:a.totp)===null||i===void 0)&&i.qr_code)&&(a.totp.qr_code=`data:image/svg+xml;utf-8,${a.totp.qr_code}`),{data:a,error:null})})}catch(n){if(R(n))return{data:null,error:n};throw n}}async _verify(t){return this._acquireLock(-1,async()=>{try{return await this._useSession(async n=>{var r;const{data:i,error:s}=n;if(s)return{data:null,error:s};const{data:o,error:l}=await A(this.fetch,"POST",`${this.url}/factors/${t.factorId}/verify`,{body:{code:t.code,challenge_id:t.challengeId},headers:this.headers,jwt:(r=i==null?void 0:i.session)===null||r===void 0?void 0:r.access_token});return l?{data:null,error:l}:(await this._saveSession(Object.assign({expires_at:Math.round(Date.now()/1e3)+o.expires_in},o)),await this._notifyAllSubscribers("MFA_CHALLENGE_VERIFIED",o),{data:o,error:l})})}catch(n){if(R(n))return{data:null,error:n};throw n}})}async _challenge(t){return this._acquireLock(-1,async()=>{try{return await this._useSession(async n=>{var r;const{data:i,error:s}=n;return s?{data:null,error:s}:await A(this.fetch,"POST",`${this.url}/factors/${t.factorId}/challenge`,{body:{channel:t.channel},headers:this.headers,jwt:(r=i==null?void 0:i.session)===null||r===void 0?void 0:r.access_token})})}catch(n){if(R(n))return{data:null,error:n};throw n}})}async _challengeAndVerify(t){const{data:n,error:r}=await this._challenge({factorId:t.factorId});return r?{data:null,error:r}:await this._verify({factorId:t.factorId,challengeId:n.id,code:t.code})}async _listFactors(){const{data:{user:t},error:n}=await this.getUser();if(n)return{data:null,error:n};const r=(t==null?void 0:t.factors)||[],i=r.filter(o=>o.factor_type==="totp"&&o.status==="verified"),s=r.filter(o=>o.factor_type==="phone"&&o.status==="verified");return{data:{all:r,totp:i,phone:s},error:null}}async _getAuthenticatorAssuranceLevel(){return this._acquireLock(-1,async()=>await this._useSession(async t=>{var n,r;const{data:{session:i},error:s}=t;if(s)return{data:null,error:s};if(!i)return{data:{currentLevel:null,nextLevel:null,currentAuthenticationMethods:[]},error:null};const{payload:o}=Ks(i.access_token);let l=null;o.aal&&(l=o.aal);let a=l;((r=(n=i.user.factors)===null||n===void 0?void 0:n.filter(d=>d.status==="verified"))!==null&&r!==void 0?r:[]).length>0&&(a="aal2");const c=o.amr||[];return{data:{currentLevel:l,nextLevel:a,currentAuthenticationMethods:c},error:null}}))}async fetchJwk(t,n={keys:[]}){let r=n.keys.find(o=>o.kid===t);if(r||(r=this.jwks.keys.find(o=>o.kid===t),r&&this.jwks_cached_at+ev>Date.now()))return r;const{data:i,error:s}=await A(this.fetch,"GET",`${this.url}/.well-known/jwks.json`,{headers:this.headers});if(s)throw s;if(!i.keys||i.keys.length===0)throw new ur("JWKS is empty");if(this.jwks=i,this.jwks_cached_at=Date.now(),r=i.keys.find(o=>o.kid===t),!r)throw new ur("No matching signing key found in JWKS");return r}async getClaims(t,n={keys:[]}){try{let r=t;if(!r){const{data:v,error:m}=await this.getSession();if(m||!v.session)return{data:null,error:m};r=v.session.access_token}const{header:i,payload:s,signature:o,raw:{header:l,payload:a}}=Ks(r);if(Ev(s.exp),!i.kid||i.alg==="HS256"||!("crypto"in globalThis&&"subtle"in globalThis.crypto)){const{error:v}=await this.getUser(r);if(v)throw v;return{data:{claims:s,header:i,signature:o},error:null}}const u=xv(i.alg),c=await this.fetchJwk(i.kid,n),d=await crypto.subtle.importKey("jwk",c,u,!0,["verify"]);if(!await crypto.subtle.verify(u,d,o,cv(`${l}.${a}`)))throw new ur("Invalid JWT signature");return{data:{claims:s,header:i,signature:o},error:null}}catch(r){if(R(r))return{data:null,error:r};throw r}}}jr.nextInstanceID=0;const Fv=jr;class Mv extends Fv{constructor(t){super(t)}}var Bv=function(e,t,n,r){function i(s){return s instanceof n?s:new n(function(o){o(s)})}return new(n||(n=Promise))(function(s,o){function l(c){try{u(r.next(c))}catch(d){o(d)}}function a(c){try{u(r.throw(c))}catch(d){o(d)}}function u(c){c.done?s(c.value):i(c.value).then(l,a)}u((r=r.apply(e,t||[])).next())})};class Hv{constructor(t,n,r){var i,s,o;if(this.supabaseUrl=t,this.supabaseKey=n,!t)throw new Error("supabaseUrl is required.");if(!n)throw new Error("supabaseKey is required.");const l=qg(t);this.realtimeUrl=`${l}/realtime/v1`.replace(/^http/i,"ws"),this.authUrl=`${l}/auth/v1`,this.storageUrl=`${l}/storage/v1`,this.functionsUrl=`${l}/functions/v1`;const a=`sb-${new URL(this.authUrl).hostname.split(".")[0]}-auth-token`,u={db:Fg,realtime:Bg,auth:Object.assign(Object.assign({},Mg),{storageKey:a}),global:bg},c=Gg(r??{},u);this.storageKey=(i=c.auth.storageKey)!==null&&i!==void 0?i:"",this.headers=(s=c.global.headers)!==null&&s!==void 0?s:{},c.accessToken?(this.accessToken=c.accessToken,this.auth=new Proxy({},{get:(d,h)=>{throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(h)} is not possible`)}})):this.auth=this._initSupabaseAuthClient((o=c.auth)!==null&&o!==void 0?o:{},this.headers,c.global.fetch),this.fetch=Kg(n,this._getAccessToken.bind(this),c.global.fetch),this.realtime=this._initRealtimeClient(Object.assign({headers:this.headers,accessToken:this._getAccessToken.bind(this)},c.realtime)),this.rest=new lg(`${l}/rest/v1`,{headers:this.headers,schema:c.db.schema,fetch:this.fetch}),c.accessToken||this._listenForAuthEvents()}get functions(){return new zp(this.functionsUrl,{headers:this.headers,customFetch:this.fetch})}get storage(){return new Dg(this.storageUrl,this.headers,this.fetch)}from(t){return this.rest.from(t)}schema(t){return this.rest.schema(t)}rpc(t,n={},r={}){return this.rest.rpc(t,n,r)}channel(t,n={config:{}}){return this.realtime.channel(t,n)}getChannels(){return this.realtime.getChannels()}removeChannel(t){return this.realtime.removeChannel(t)}removeAllChannels(){return this.realtime.removeAllChannels()}_getAccessToken(){var t,n;return Bv(this,void 0,void 0,function*(){if(this.accessToken)return yield this.accessToken();const{data:r}=yield this.auth.getSession();return(n=(t=r.session)===null||t===void 0?void 0:t.access_token)!==null&&n!==void 0?n:null})}_initSupabaseAuthClient({autoRefreshToken:t,persistSession:n,detectSessionInUrl:r,storage:i,storageKey:s,flowType:o,lock:l,debug:a},u,c){const d={Authorization:`Bearer ${this.supabaseKey}`,apikey:`${this.supabaseKey}`};return new Mv({url:this.authUrl,headers:Object.assign(Object.assign({},d),u),storageKey:s,autoRefreshToken:t,persistSession:n,detectSessionInUrl:r,storage:i,flowType:o,lock:l,debug:a,fetch:c,hasCustomAuthorizationHeader:"Authorization"in this.headers})}_initRealtimeClient(t){return new Sg(this.realtimeUrl,Object.assign(Object.assign({},t),{params:Object.assign({apikey:this.supabaseKey},t==null?void 0:t.params)}))}_listenForAuthEvents(){return this.auth.onAuthStateChange((n,r)=>{this._handleTokenChanged(n,"CLIENT",r==null?void 0:r.access_token)})}_handleTokenChanged(t,n,r){(t==="TOKEN_REFRESHED"||t==="SIGNED_IN")&&this.changedAccessToken!==r?this.changedAccessToken=r:t==="SIGNED_OUT"&&(this.realtime.setAuth(),n=="STORAGE"&&this.auth.signOut(),this.changedAccessToken=void 0)}}const Vv=(e,t,n)=>new Hv(e,t,n),Wv="https://uzdtqomtbrccinrkhzme.supabase.co",Kv="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InV6ZHRxb210YnJjY2lucmtoem1lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY2NzY5MTIsImV4cCI6MjA2MjI1MjkxMn0.Fh8z-GRcM84tBoiSSeFE21Vhqho9rUfgC8e0jiZMOl0",Bi=Vv(Wv,Kv,{auth:{persistSession:!0,autoRefreshToken:!0}}),Qv=()=>T.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",width:"18",height:"18",viewBox:"0 0 24 24",fill:"currentColor",className:"mr-2",children:[T.jsx("path",{d:"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"}),T.jsx("path",{d:"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"}),T.jsx("path",{d:"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"}),T.jsx("path",{d:"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"}),T.jsx("path",{d:"M1 1h22v22H1z",fill:"none"})]}),qv=()=>T.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",width:"18",height:"18",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",children:[T.jsx("path",{d:"M5 12h14"}),T.jsx("path",{d:"m12 5 7 7-7 7"})]}),Gv=()=>T.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",children:[T.jsx("path",{d:"M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"}),T.jsx("circle",{cx:"12",cy:"12",r:"3"})]}),Jv=()=>T.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",children:[T.jsx("path",{d:"M9.88 9.88a3 3 0 1 0 4.24 4.24"}),T.jsx("path",{d:"M10.73 5.08A10.43 10.43 0 0 1 12 5c7 0 10 7 10 7a13.16 13.16 0 0 1-1.67 2.68"}),T.jsx("path",{d:"M6.61 6.61A13.526 13.526 0 0 0 2 12s3 7 10 7a9.74 9.74 0 0 0 5.39-1.61"}),T.jsx("line",{x1:"2",x2:"22",y1:"2",y2:"22"})]}),Yv=({onLogin:e})=>{const[t,n]=be.useState(""),[r,i]=be.useState(""),[s,o]=be.useState(!1),[l,a]=be.useState(!1),[u,c]=be.useState(""),[d,h]=be.useState(!1),v=async w=>{w.preventDefault(),o(!0),c("");const{data:x,error:p}=await Bi.auth.signInWithPassword({email:t,password:r});p?c(p.message):x.session&&e(x.session),o(!1)},m=async()=>{a(!0),await Bi.auth.signInWithOAuth({provider:"google"}),a(!1)};return T.jsx("div",{className:"auth-container",children:T.jsxs("div",{className:"auth-content",children:[T.jsx("h1",{className:"auth-title",children:"Log in"}),T.jsx("p",{className:"auth-subtitle",children:"Welcome back to Eido! What will you study today?"}),T.jsxs("div",{className:"auth-actions",children:[T.jsxs("button",{onClick:m,className:"auth-button-google",disabled:s||l,children:[l?T.jsx("div",{className:"spinner-small"}):T.jsx(Qv,{}),"Continue with Google"]}),T.jsxs("div",{className:"auth-separator",children:[T.jsx("span",{className:"auth-separator-line"}),T.jsx("span",{className:"auth-separator-text",children:"OR"}),T.jsx("span",{className:"auth-separator-line"})]}),T.jsxs("form",{onSubmit:v,className:"auth-form",children:[T.jsxs("div",{className:"auth-input-wrapper",children:[T.jsx("label",{htmlFor:"email",children:"EMAIL"}),T.jsx("input",{id:"email",type:"email",placeholder:"yourname@email.com",value:t,onChange:w=>n(w.target.value),required:!0})]}),T.jsxs("div",{className:"auth-input-wrapper",children:[T.jsx("label",{htmlFor:"password",children:"PASSWORD"}),T.jsx("input",{id:"password",type:d?"text":"password",placeholder:"••••••••••",value:r,onChange:w=>i(w.target.value),required:!0}),T.jsx("button",{type:"button",onClick:()=>h(!d),className:"auth-password-toggle",children:d?T.jsx(Jv,{}):T.jsx(Gv,{})})]}),T.jsx("a",{href:"#",className:"auth-forgot-password",onClick:w=>w.preventDefault(),children:"Forgot Password?"}),T.jsxs("button",{type:"submit",className:"auth-button-primary",disabled:s||l,children:[s?T.jsx("div",{className:"spinner"}):"Log in",!s&&T.jsx(qv,{})]})]})]}),u&&T.jsx("p",{className:"auth-error",children:u})]})})},Xv=({session:e})=>T.jsx("div",{className:"container"}),Zv=`
  @import url('https://fonts.googleapis.com/css2?family=Lora:wght@400;700&family=Inter:wght@400;500;600&display=swap');

  :root {
    --background: #f9fafb;
    --foreground: #1f2937;
    --primary: #4f46e5;
    --primary-foreground: #ffffff;
    --border: #e5e7eb;
    --input-border: #D1D5DB;
    --auth-bg: #FDFCF9;
    --auth-card-bg: #FFFFFF;
    --auth-title: #111827;
    --auth-subtitle: #4B5563;
    --auth-button-primary-bg: #1F2937;
    --auth-button-primary-text: #FFFFFF;
    --auth-button-google-bg: #F3F4F6;
    --auth-button-google-text: #374151;
    --auth-separator-text: #9CA3AF;
  }

  body {
    background-color: var(--background);
    color: var(--foreground);
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
  }

  /* Main App Structure */
  .app-container { display: flex; flex-direction: column; height: 100vh; }
  .app-header { display: flex; align-items: center; gap: 8px; padding: 8px; background-color: #f3f4f6; border-bottom: 1px solid var(--border); user-select: none; }
  .app-header-title { font-weight: 600; font-size: 14px; flex-grow: 1; text-align: center; }
  .close-button { background: none; border: none; cursor: pointer; padding: 4px; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 16px; line-height: 1; color: #6b7280; }
  .close-button:hover { background-color: var(--border); }
  .main-content { flex-grow: 1; overflow: hidden; display: flex; flex-direction: column; }

  /* Auth Page Styles */
  .auth-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    background-color: var(--auth-bg);
    padding: 24px;
    box-sizing: border-box;
  }
  .auth-content { width: 100%; max-width: 320px; text-align: center; }
  .auth-title {
    font-family: 'Lora', serif;
    font-size: 2.25rem;
    font-weight: 700;
    color: var(--auth-title);
    margin: 0 0 8px 0;
  }
  .auth-subtitle {
    font-size: 0.875rem;
    color: var(--auth-subtitle);
    margin-bottom: 24px;
  }
  .auth-actions { display: flex; flex-direction: column; gap: 16px; }
  
  .auth-button-google {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 44px;
    padding: 0 16px;
    border: 1px solid var(--border);
    border-radius: 6px;
    background-color: var(--auth-button-google-bg);
    color: var(--auth-button-google-text);
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  .auth-button-google:hover { background-color: #E5E7EB; }
  .auth-button-google:disabled { opacity: 0.7; cursor: not-allowed; }

  .auth-separator { display: flex; align-items: center; gap: 8px; }
  .auth-separator-line { flex-grow: 1; height: 1px; background-color: var(--border); }
  .auth-separator-text { font-size: 0.75rem; color: var(--auth-separator-text); }

  .auth-form { display: flex; flex-direction: column; gap: 16px; }
  .auth-input-wrapper {
    position: relative;
    text-align: left;
    border: 1px solid var(--input-border);
    border-radius: 6px;
    padding: 6px 12px;
    transition: border-color 0.2s;
  }
  .auth-input-wrapper:focus-within { border-color: var(--auth-button-primary-bg); }
  .auth-input-wrapper label {
    display: block;
    font-size: 0.625rem;
    font-weight: 500;
    color: var(--auth-subtitle);
    text-transform: uppercase;
    margin-bottom: 2px;
  }
  .auth-input-wrapper input {
    width: 100%;
    border: none;
    outline: none;
    background: transparent;
    padding: 0;
    font-size: 0.875rem;
    color: var(--auth-title);
  }
  .auth-password-toggle {
    position: absolute;
    right: 8px;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    cursor: pointer;
    color: #9CA3AF;
  }
  .auth-password-toggle:hover { color: #4B5563; }

  .auth-forgot-password {
    align-self: flex-end;
    font-size: 0.75rem;
    color: var(--auth-title);
    text-decoration: none;
    margin-top: -8px;
  }
  .auth-forgot-password:hover { text-decoration: underline; }

  .auth-button-primary {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    width: 100%;
    height: 44px;
    border: none;
    border-radius: 6px;
    background-color: var(--auth-button-primary-bg);
    color: var(--auth-button-primary-text);
    font-size: 0.875rem;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  .auth-button-primary:hover { background-color: #374151; }
  .auth-button-primary:disabled { background-color: #4B5563; cursor: not-allowed; }

  .auth-error { color: #EF4444; font-size: 0.75rem; text-align: center; margin-top: 12px; }

  /* Chat Component Styles (placeholders) */
  .container { display: flex; flex-direction: column; height: 100%; padding: 16px; box-sizing: border-box; }
  .chat-area { flex-grow: 1; overflow-y: auto; margin-bottom: 16px; }
  .message { padding: 8px 12px; border-radius: 8px; margin-bottom: 8px; max-width: 80%; word-wrap: break-word; }
  .user-message { background-color: var(--primary); color: var(--primary-foreground); align-self: flex-end; }
  .ai-message { background-color: #e5e7eb; color: #374151; align-self: flex-start; }
  .input-area { display: flex; gap: 8px; }
  .input { flex-grow: 1; padding: 8px; border: 1px solid var(--border); border-radius: 6px; background-color: var(--input); }
  .button { padding: 8px 16px; border: none; background-color: var(--primary); color: var(--primary-foreground); border-radius: 6px; cursor: pointer; }
  .button:disabled { background-color: #a5b4fc; cursor: not-allowed; }
  .loading-indicator { text-align: center; color: #6b7280; padding: 12px; }

  /* Spinners */
  .spinner, .spinner-small {
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  .spinner { width: 20px; height: 20px; border-top-color: #fff; }
  .spinner-small { width: 16px; height: 16px; border-top-color: #4B5563; }
  @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
`,em=()=>{const[e,t]=be.useState(null),[n,r]=be.useState(!0);be.useEffect(()=>{Bi.auth.getSession().then(({data:{session:l}})=>{t(l),r(!1)});const{data:{subscription:o}}=Bi.auth.onAuthStateChange((l,a)=>{t(a)});return()=>{o==null||o.unsubscribe()}},[]);const i=o=>{t(o)},s=()=>{window.parent.postMessage({type:"closeEidoPopup"},"*")};return T.jsxs("div",{className:"app-container",children:[T.jsx("style",{children:Zv}),T.jsxs("header",{className:"app-header",children:[T.jsx("button",{onClick:s,className:"close-button","aria-label":"Close",children:"✕"}),T.jsx("div",{className:"app-header-title",children:"Eido AI Oracle"})]}),T.jsx("main",{className:"main-content",children:n?T.jsx("div",{className:"loading-indicator",children:"Loading..."}):e?T.jsx(Xv,{session:e}):T.jsx(Yv,{onLogin:i})})]})},tm=Qs.createRoot(document.getElementById("root"));tm.render(T.jsx(em,{}));export{nm as g};

================
File: dist-extension/extension/popup.html
================
<!DOCTYPE html>
<html>
  <head>
    <title>Eido AI Oracle</title>
    <style>
      body {
        width: 400px;
        height: 600px;
        margin: 0;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
        border-radius: 8px;
        overflow: hidden; 
      }
      #root {
        height: 100%;
        width: 100%;
      }
    </style>
    <script type="module" crossorigin src="/assets/popup.js"></script>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>

================
File: dist-extension/manifest.json
================
{
  "manifest_version": 3,
  "name": "Eido AI Oracle",
  "version": "1.0",
  "description": "Access the Eido AI Oracle chat from any website.",
  "permissions": [
    "storage",
    "activeTab",
    "cookies"
  ],
  "host_permissions": [
    "<all_urls>",
    "https://uzdtqomtbrccinrkhzme.supabase.co/"
  ],
  "action": {
    "default_popup": "extension/popup.html",
    "default_icon": {
      "16": "images/icon16.png",
      "48": "images/icon48.png",
      "128": "images/icon128.png"
    }
  },
  "background": {
    "service_worker": "assets/background.js"
  },
  "content_scripts": [
    {
      "matches": [
        "<all_urls>"
      ],
      "js": [
        "assets/content.js"
      ]
    }
  ],
  "web_accessible_resources": [
    {
      "resources": [
        "images/*.png",
        "extension/popup.html"
      ],
      "matches": [
        "<all_urls>"
      ]
    }
  ],
  "icons": {
    "16": "images/icon16.png",
    "48": "images/icon48.png",
    "128": "images/icon128.png"
  }
}

================
File: extension/components/AuthComponent.tsx
================
// extension/components/AuthComponent.tsx
import React, { useState } from 'react';
import { supabase } from '../../src/integrations/supabase/client';
import type { Session } from '@supabase/supabase-js';

// Helper component for the Google Icon
const GoogleIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="currentColor" className="mr-2">
      <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" />
      <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" />
      <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" />
      <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" />
      <path d="M1 1h22v22H1z" fill="none" />
    </svg>
);

// Inline SVGs for other icons to avoid adding new dependencies
const ArrowRightIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
        <path d="M5 12h14" /><path d="m12 5 7 7-7 7" />
    </svg>
);

const EyeIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
        <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z" /><circle cx="12" cy="12" r="3" />
    </svg>
);

const EyeOffIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
        <path d="M9.88 9.88a3 3 0 1 0 4.24 4.24" /><path d="M10.73 5.08A10.43 10.43 0 0 1 12 5c7 0 10 7 10 7a13.16 13.16 0 0 1-1.67 2.68" /><path d="M6.61 6.61A13.526 13.526 0 0 0 2 12s3 7 10 7a9.74 9.74 0 0 0 5.39-1.61" /><line x1="2" x2="22" y1="2" y2="22" />
    </svg>
);


export const AuthComponent = ({ onLogin }: { onLogin: (session: Session) => void }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [googleLoading, setGoogleLoading] = useState(false);
  const [error, setError] = useState('');
  const [showPassword, setShowPassword] = useState(false);

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    const { data, error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) {
      setError(error.message);
    } else if (data.session) {
      onLogin(data.session);
    }
    setLoading(false);
  };

  const handleGoogleSignIn = async () => {
    setGoogleLoading(true);
    // *** FIX: Added redirectTo option to prevent full-page navigation ***
    // This tells Supabase to return to the extension's own page after Google auth,
    // instead of redirecting to your main website.
    await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: window.location.href,
      }
    });
    setGoogleLoading(false);
  };

  return (
    <div className="auth-container">
      <div className="auth-content">
        <h1 className="auth-title">Log in</h1>
        <p className="auth-subtitle">Welcome back to Eido! What will you study today?</p>

        <div className="auth-actions">
          <button onClick={handleGoogleSignIn} className="auth-button-google" disabled={loading || googleLoading}>
            {googleLoading ? <div className="spinner-small"></div> : <GoogleIcon />}
            Continue with Google
          </button>

          <div className="auth-separator">
            <span className="auth-separator-line"></span>
            <span className="auth-separator-text">OR</span>
            <span className="auth-separator-line"></span>
          </div>

          <form onSubmit={handleLogin} className="auth-form">
            <div className="auth-input-wrapper">
              <label htmlFor="email">EMAIL</label>
              <input
                id="email"
                type="email"
                placeholder="yourname@email.com"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
            </div>

            <div className="auth-input-wrapper">
              <label htmlFor="password">PASSWORD</label>
              <input
                id="password"
                type={showPassword ? "text" : "password"}
                placeholder="••••••••••"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="auth-password-toggle"
              >
                {showPassword ? <EyeOffIcon /> : <EyeIcon />}
              </button>
            </div>
            
            <a href="#" className="auth-forgot-password" onClick={(e) => e.preventDefault()}>Forgot Password?</a>

            <button type="submit" className="auth-button-primary" disabled={loading || googleLoading}>
              {loading ? <div className="spinner"></div> : 'Log in'}
              {!loading && <ArrowRightIcon />}
            </button>
          </form>
        </div>
        {error && <p className="auth-error">{error}</p>}
      </div>
    </div>
  );
};

================
File: extension/components/ChatComponent.tsx
================
// extension/components/ChatComponent.tsx
import React from 'react';
import type { Session } from '@supabase/supabase-js';

export const ChatComponent = ({ session }: { session: Session }) => {
  // This is now a placeholder component.
  // It renders a blank container, which will appear as a white screen.
  // The header from the main App component will remain visible above this.
  // You can start building your chat UI here.
  return (
    <div className="container">
      {/* Intentionally blank for now */}
    </div>
  );
};

================
File: extension/public/manifest.json
================
{
  "manifest_version": 3,
  "name": "Eido AI Oracle",
  "version": "1.0",
  "description": "Access the Eido AI Oracle chat from any website.",
  "permissions": [
    "storage",
    "activeTab",
    "cookies"
  ],
  "host_permissions": [
    "<all_urls>",
    "https://uzdtqomtbrccinrkhzme.supabase.co/"
  ],
  "action": {
    "default_popup": "extension/popup.html",
    "default_icon": {
      "16": "images/icon16.png",
      "48": "images/icon48.png",
      "128": "images/icon128.png"
    }
  },
  "background": {
    "service_worker": "assets/background.js"
  },
  "content_scripts": [
    {
      "matches": [
        "<all_urls>"
      ],
      "js": [
        "assets/content.js"
      ]
    }
  ],
  "web_accessible_resources": [
    {
      "resources": [
        "images/*.png",
        "extension/popup.html"
      ],
      "matches": [
        "<all_urls>"
      ]
    }
  ],
  "icons": {
    "16": "images/icon16.png",
    "48": "images/icon48.png",
    "128": "images/icon128.png"
  }
}

================
File: extension/background.js
================
// extension/background.js

// This script runs in the background of the browser.

// Log when the extension is installed or updated.
chrome.runtime.onInstalled.addListener(() => {
  console.log('Eido AI Oracle extension installed/updated.');
});

// The background script no longer needs to manage the popup window,
// as the content script now handles the in-page iframe.
// The toolbar icon will use the default_popup defined in the manifest.

================
File: extension/content.js
================
// This script is injected into every webpage to create the floating button and the popup iframe.

let isPopupOpen = false;

// --- Create the main container for our UI ---
const eidoContainer = document.createElement('div');
eidoContainer.id = 'eido-ai-container';
eidoContainer.style.position = 'fixed';
eidoContainer.style.zIndex = '9998';
document.body.appendChild(eidoContainer);

// --- Set fixed position for the FAB ---
eidoContainer.style.bottom = '30px';
eidoContainer.style.right = '30px';


// --- Create the floating action button (FAB) ---
const fab = document.createElement('button');
fab.id = 'eido-ai-fab';
fab.style.width = '60px';
fab.style.height = '60px';
fab.style.borderRadius = '8px';
fab.style.backgroundColor = '#75909C';
fab.style.border = 'none';
fab.style.boxShadow = '0 4px 12px rgba(0,0,0,0.2)';
fab.style.cursor = 'pointer';
fab.style.zIndex = '10000';
fab.style.display = 'flex';
fab.style.alignItems = 'center';
fab.style.justifyContent = 'center';
fab.style.transition = 'transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out, opacity 0.2s ease-in-out';
fab.setAttribute('aria-label', 'Open Eido AI Oracle');
eidoContainer.appendChild(fab);

const icon = document.createElement('img');
icon.src = chrome.runtime.getURL('images/icon128.png');
icon.style.width = '36px';
icon.style.height = '36px';
fab.appendChild(icon);

// --- Create the popup iframe ---
const popupFrame = document.createElement('iframe');
popupFrame.id = 'eido-ai-popup-frame';
popupFrame.src = chrome.runtime.getURL('extension/popup.html');
popupFrame.style.backgroundColor = '#fff';
popupFrame.style.width = '400px';
popupFrame.style.height = '600px';
popupFrame.style.border = '1px solid #e5e7eb';
popupFrame.style.borderRadius = '8px';
popupFrame.style.boxShadow = '0 8px 24px rgba(0,0,0,0.2)';
popupFrame.style.position = 'absolute';
popupFrame.style.bottom = '0px';
popupFrame.style.right = '0px';
popupFrame.style.display = 'none';
popupFrame.style.zIndex = '9999';
eidoContainer.appendChild(popupFrame);

// --- Toggle popup visibility ---
function togglePopup(show) {
  isPopupOpen = show;
  popupFrame.style.display = show ? 'block' : 'none';
  fab.style.display = show ? 'none' : 'flex';
}

// --- Listen for close message from the iframe ---
window.addEventListener('message', (event) => {
  if (event.source !== popupFrame.contentWindow) return;

  if (event.data.type === 'closeEidoPopup') {
    togglePopup(false);
  }
});

// --- FAB Click Listener ---
fab.addEventListener('click', (event) => {
  event.stopPropagation();
  togglePopup(true);
});

================
File: extension/popup.html
================
<!DOCTYPE html>
<html>
  <head>
    <title>Eido AI Oracle</title>
    <style>
      body {
        width: 400px;
        height: 600px;
        margin: 0;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
        border-radius: 8px;
        overflow: hidden; 
      }
      #root {
        height: 100%;
        width: 100%;
      }
    </style>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="./popup.tsx"></script>
  </body>
</html>

================
File: extension/popup.tsx
================
// extension/popup.tsx
import React, { useState, useEffect } from 'react';
import ReactDOM from 'react-dom/client';
import { supabase } from '../src/integrations/supabase/client';
import type { Session } from '@supabase/supabase-js';
import { AuthComponent } from './components/AuthComponent';
import { ChatComponent } from './components/ChatComponent';

// --- STYLES ---
const styles = `
  @import url('https://fonts.googleapis.com/css2?family=Lora:wght@400;700&family=Inter:wght@400;500;600&display=swap');

  :root {
    --background: #f9fafb;
    --foreground: #1f2937;
    --primary: #4f46e5;
    --primary-foreground: #ffffff;
    --border: #e5e7eb;
    --input-border: #D1D5DB;
    --auth-bg: #FDFCF9;
    --auth-card-bg: #FFFFFF;
    --auth-title: #111827;
    --auth-subtitle: #4B5563;
    --auth-button-primary-bg: #1F2937;
    --auth-button-primary-text: #FFFFFF;
    --auth-button-google-bg: #F3F4F6;
    --auth-button-google-text: #374151;
    --auth-separator-text: #9CA3AF;
  }

  body {
    background-color: var(--background);
    color: var(--foreground);
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
  }

  /* Main App Structure */
  .app-container { display: flex; flex-direction: column; height: 100vh; }
  .app-header { display: flex; align-items: center; gap: 8px; padding: 8px; background-color: #f3f4f6; border-bottom: 1px solid var(--border); user-select: none; }
  .app-header-title { font-weight: 600; font-size: 14px; flex-grow: 1; text-align: center; }
  .close-button { background: none; border: none; cursor: pointer; padding: 4px; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 16px; line-height: 1; color: #6b7280; }
  .close-button:hover { background-color: var(--border); }
  .main-content { flex-grow: 1; overflow: hidden; display: flex; flex-direction: column; }

  /* Auth Page Styles */
  .auth-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    background-color: var(--auth-bg);
    padding: 24px;
    box-sizing: border-box;
  }
  .auth-content { width: 100%; max-width: 320px; text-align: center; }
  .auth-title {
    font-family: 'Lora', serif;
    font-size: 2.25rem;
    font-weight: 700;
    color: var(--auth-title);
    margin: 0 0 8px 0;
  }
  .auth-subtitle {
    font-size: 0.875rem;
    color: var(--auth-subtitle);
    margin-bottom: 24px;
  }
  .auth-actions { display: flex; flex-direction: column; gap: 16px; }
  
  .auth-button-google {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 44px;
    padding: 0 16px;
    border: 1px solid var(--border);
    border-radius: 6px;
    background-color: var(--auth-button-google-bg);
    color: var(--auth-button-google-text);
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  .auth-button-google:hover { background-color: #E5E7EB; }
  .auth-button-google:disabled { opacity: 0.7; cursor: not-allowed; }

  .auth-separator { display: flex; align-items: center; gap: 8px; }
  .auth-separator-line { flex-grow: 1; height: 1px; background-color: var(--border); }
  .auth-separator-text { font-size: 0.75rem; color: var(--auth-separator-text); }

  .auth-form { display: flex; flex-direction: column; gap: 16px; }
  .auth-input-wrapper {
    position: relative;
    text-align: left;
    border: 1px solid var(--input-border);
    border-radius: 6px;
    padding: 6px 12px;
    transition: border-color 0.2s;
  }
  .auth-input-wrapper:focus-within { border-color: var(--auth-button-primary-bg); }
  .auth-input-wrapper label {
    display: block;
    font-size: 0.625rem;
    font-weight: 500;
    color: var(--auth-subtitle);
    text-transform: uppercase;
    margin-bottom: 2px;
  }
  .auth-input-wrapper input {
    width: 100%;
    border: none;
    outline: none;
    background: transparent;
    padding: 0;
    font-size: 0.875rem;
    color: var(--auth-title);
  }
  .auth-password-toggle {
    position: absolute;
    right: 8px;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    cursor: pointer;
    color: #9CA3AF;
  }
  .auth-password-toggle:hover { color: #4B5563; }

  .auth-forgot-password {
    align-self: flex-end;
    font-size: 0.75rem;
    color: var(--auth-title);
    text-decoration: none;
    margin-top: -8px;
  }
  .auth-forgot-password:hover { text-decoration: underline; }

  .auth-button-primary {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    width: 100%;
    height: 44px;
    border: none;
    border-radius: 6px;
    background-color: var(--auth-button-primary-bg);
    color: var(--auth-button-primary-text);
    font-size: 0.875rem;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  .auth-button-primary:hover { background-color: #374151; }
  .auth-button-primary:disabled { background-color: #4B5563; cursor: not-allowed; }

  .auth-error { color: #EF4444; font-size: 0.75rem; text-align: center; margin-top: 12px; }

  /* Chat Component Styles (placeholders) */
  .container { display: flex; flex-direction: column; height: 100%; padding: 16px; box-sizing: border-box; }
  .chat-area { flex-grow: 1; overflow-y: auto; margin-bottom: 16px; }
  .message { padding: 8px 12px; border-radius: 8px; margin-bottom: 8px; max-width: 80%; word-wrap: break-word; }
  .user-message { background-color: var(--primary); color: var(--primary-foreground); align-self: flex-end; }
  .ai-message { background-color: #e5e7eb; color: #374151; align-self: flex-start; }
  .input-area { display: flex; gap: 8px; }
  .input { flex-grow: 1; padding: 8px; border: 1px solid var(--border); border-radius: 6px; background-color: var(--input); }
  .button { padding: 8px 16px; border: none; background-color: var(--primary); color: var(--primary-foreground); border-radius: 6px; cursor: pointer; }
  .button:disabled { background-color: #a5b4fc; cursor: not-allowed; }
  .loading-indicator { text-align: center; color: #6b7280; padding: 12px; }

  /* Spinners */
  .spinner, .spinner-small {
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  .spinner { width: 20px; height: 20px; border-top-color: #fff; }
  .spinner-small { width: 16px; height: 16px; border-top-color: #4B5563; }
  @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
`;

// --- MAIN APP ---
const App = () => {
  const [session, setSession] = useState<Session | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session);
      setLoading(false);
    });

    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
    });

    return () => {
      subscription?.unsubscribe();
    };
  }, []);

  const handleLogin = (newSession: Session) => {
    setSession(newSession);
  };

  const handleClose = () => {
    window.parent.postMessage({ type: 'closeEidoPopup' }, '*');
  };

  return (
    <div className="app-container">
        <style>{styles}</style>
        <header className="app-header">
            <button onClick={handleClose} className="close-button" aria-label="Close">
                &#10005;
            </button>
            <div className="app-header-title">Eido AI Oracle</div>
        </header>
        <main className="main-content">
            {loading ? (
                <div className="loading-indicator">Loading...</div>
            ) : session ? (
                <ChatComponent session={session} />
            ) : (
                <AuthComponent onLogin={handleLogin} />
            )}
        </main>
    </div>
  );
};

const root = ReactDOM.createRoot(document.getElementById('root')!);
root.render(<App />);

================
File: extension/styles.css
================
/* This file can be used for more complex styling of injected elements if needed. */
/* For now, the styles are handled inline in content.js for simplicity. */

================
File: public/placeholder.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>

================
File: public/robots.txt
================
User-agent: Googlebot
Allow: /
Disallow: /auth
Disallow: /profile
Disallow: /classes

User-agent: Bingbot
Allow: /

User-agent: Twitterbot
Allow: /

User-agent: facebookexternalhit
Allow: /

User-agent: *
Allow: /

================
File: src/components/auth/Auth.tsx
================
// src/components/auth/Auth.tsx
import { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { Loader2, ArrowRight, Eye, EyeOff } from "lucide-react";
import { useNavigate, Link } from 'react-router-dom';
import { cn } from '@/lib/utils';

const GoogleIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="currentColor" className="mr-2">
    <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" />
    <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" />
    <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" />
    <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" />
    <path d="M1 1h22v22H1z" fill="none" />
  </svg>
);

export function Auth() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [googleLoading, setGoogleLoading] = useState(false);
  const [authMode, setAuthMode] = useState<'signin' | 'signup'>('signin');
  const [showPassword, setShowPassword] = useState(false);
  
  const [emailTouched, setEmailTouched] = useState(false);
  const [passwordTouched, setPasswordTouched] = useState(false);

  const { toast } = useToast();
  const navigate = useNavigate();

  const handleEmailAuth = async (e: React.FormEvent) => {
    e.preventDefault();
    setEmailTouched(true);
    setPasswordTouched(true);

    if (!email || !password) {
      return;
    }

    setLoading(true);
    try {
      if (authMode === 'signup') {
        if (password.length < 10) {
          throw new Error("Password should be at least 10 characters long.");
        }
        const generatedName = email.split('@')[0];
        
        const { data, error } = await supabase.auth.signUp({
          email,
          password,
          options: {
            data: { 
              full_name: generatedName,
              // --- FIX: Set a default avatar_url for email signups ---
              avatar_url: `https://api.dicebear.com/7.x/initials/svg?seed=${generatedName}`
            }
          }
        });

        if (error) throw error;

        if (data.session) {
            toast({
                title: "Account Created!",
                description: "Welcome to Eido AI.",
            });
            navigate('/');
        } else {
            toast({
                title: "Account created successfully",
                description: "We've sent you a confirmation link to complete your signup.",
            });
        }
      } else { 
        const { error } = await supabase.auth.signInWithPassword({ email, password });
        if (error) throw error;
        navigate('/');
      }
    } catch (error) {
      console.error('Email auth error:', error);
      let errorMessage = "An error occurred during authentication";
      if (error instanceof Error) {
        if (error.message.includes("Email not confirmed")) errorMessage = "Please check your email and confirm your address.";
        else if (error.message.includes("Invalid login credentials")) errorMessage = "Invalid email or password.";
        else if (error.message.includes("User already registered")) errorMessage = "An account with this email already exists. Please sign in or use a different email.";
        else if (error.message.includes("Password should be")) errorMessage = "Password must be at least 10 characters long.";
        else errorMessage = error.message;
      }
      toast({ title: "Authentication Error", description: errorMessage, variant: "destructive" });
    } finally {
      setLoading(false);
    }
  };

  const handleGoogleSignIn = async () => {
    setGoogleLoading(true);
    try {
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: { 
          redirectTo: `${window.location.origin}/`,
          // --- FIX: Request user's profile info from Google ---
          queryParams: {
            access_type: 'offline',
            prompt: 'consent',
          },
        },
      });
      if (error) throw error;
    } catch (error) {
      console.error('Google Sign-In error:', error);
      toast({
        title: "Google Sign-In Error",
        description: error instanceof Error ? error.message : "Could not sign in with Google. Please try again.",
        variant: "destructive",
      });
    } finally {
      setGoogleLoading(false);
    }
  };

  const toggleAuthMode = () => {
    setAuthMode(prevMode => (prevMode === 'signin' ? 'signup' : 'signin'));
    setEmailTouched(false);
    setPasswordTouched(false);
  };

  const toggleShowPassword = () => {
    setShowPassword(!showPassword);
  };

  return (
    <div className="w-full">
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold text-gray-900 font-serif">
          {authMode === 'signin' ? 'Log in' : 'Sign Up'}
        </h1>
        <p className="text-sm text-gray-600 mt-2">
          {authMode === 'signin' 
            ? 'Welcome back to Eido! What will you study today?' 
            : 'Get started with your personal, educational copilot.'}
        </p>
      </div>

      <div className="space-y-6">
        <div className="grid grid-cols-1 gap-3">
          <Button
            variant="outline"
            onClick={handleGoogleSignIn}
            disabled={loading || googleLoading}
            className="w-full justify-center py-3 text-xs h-11 text-gray-700 hover:text-gray-700 hover:bg-gray-100 hover:ring-1 hover:ring-gray-800"
          >
            {googleLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <GoogleIcon />}
            Continue with Google
          </Button>
        </div>

        <div className="relative">
           <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-300" />
            </div>
            <div className="relative flex justify-center text-xs">
                <span className="bg-white px-2 text-gray-500">OR</span>
            </div>
        </div>

        <form className="space-y-6" onSubmit={handleEmailAuth} noValidate>
          <div className="space-y-4">
            <div className={cn(
                "relative rounded-md border px-3 py-2 transition-all",
                "focus-within:border-gray-800",
                emailTouched && !email ? "border-red-700/70" : "border-gray-300"
            )}>
              {emailTouched && !email && (
                  <span className="absolute top-1 right-2 text-xs text-red-700">*required</span>
              )}
              <Label htmlFor="email" className="block text-xs font-medium text-gray-400 uppercase">
                Email
               </Label>
              <input
                id="email"
                name="email"
                type="email"
                autoComplete="email"
                value={email}
                onBlur={() => setEmailTouched(true)}
                onChange={(e) => setEmail(e.target.value)}
                required
                className="w-full p-0 border-none bg-transparent focus:outline-none focus:ring-0 text-sm placeholder:text-muted-foreground h-auto"
                placeholder="yourname@email.com"
              />
            </div>

            <div>
              <div className={cn(
                  "relative rounded-md border px-3 py-2 transition-all",
                  "focus-within:border-gray-800",
                  passwordTouched && !password ? "border-red-700/70" : "border-gray-300"
              )}>
                {passwordTouched && !password && (
                    <span className="absolute top-1 right-2 text-xs text-red-700">*required</span>
                )}
                <Label htmlFor="password" className="block text-xs font-medium text-gray-400 uppercase">
                  Password
                </Label>
                <div className="flex items-center">
                  <input
                    id="password"
                    name="password"
                    type={showPassword ? "text" : "password"}
                    autoComplete="current-password"
                    value={password}
                    onBlur={() => setPasswordTouched(true)}
                    onChange={(e) => setPassword(e.target.value)}
                    required
                    minLength={authMode === 'signup' ? 10 : undefined}
                    className="w-full p-0 border-none bg-transparent focus:outline-none focus:ring-0 text-sm placeholder:text-muted-foreground h-auto"
                    placeholder="••••••••••"
                  />
                  <button
                    type="button"
                    onClick={toggleShowPassword}
                    className="flex items-center text-gray-400 hover:text-gray-600 pl-2"
                  >
                    {showPassword ? <EyeOff className="h-5 w-5" /> : <Eye className="h-5 w-5" />}
                  </button>
                </div>
              </div>
              {authMode === 'signin' && (
                  <div className="flex justify-end mt-2">
                    <a href="#" className="text-xs font-medium text-gray-800 hover:underline">
                      Forgot Password?
                    </a>
                  </div>
              )}
            </div>
          </div>

          <div>
            <Button
              type="submit"
              className="w-full flex justify-center items-center py-3 px-4 text-xs font-semibold rounded-md text-white bg-gray-800 hover:bg-gray-900 h-11"
              disabled={loading || googleLoading}
            >
              {loading ? (
                <Loader2 className="h-5 w-5 animate-spin" />
              ) : (
                <>
                  {authMode === 'signin' ? 'Log in' : 'Create Account'}
                  <ArrowRight className="ml-2 h-5 w-5" />
                </>
              )}
            </Button>
          </div>
        </form>
      </div>

      <div className="mt-8 space-y-2 text-center text-xs">
        <p className="text-gray-500">
          By signing up, you agree to the{' '}
          <Link to="/terms" className="font-medium text-gray-900 hover:underline" target="_blank">Terms of Service</Link> and{' '}
          <Link to="/privacy" className="font-medium text-gray-900 hover:underline" target="_blank">Privacy Policy</Link>.
        </p>
        <p className="text-gray-500">
          {authMode === 'signin' ? 'New user? ' : 'Already have an account? '}
          <button
            onClick={toggleAuthMode}
            className="font-medium text-gray-700 hover:text-black"
            disabled={loading || googleLoading}
          >
            {authMode === 'signin' ? 'Sign up' : 'Log in'}
          </button>
        </p>
      </div>
    </div>
  );
}

================
File: src/components/auth/AuthGuard.tsx
================
// src/components/auth/AuthGuard.tsx
import { ReactNode } from "react";
import { Navigate, useLocation, Outlet } from "react-router-dom";
import { Loader2 } from "lucide-react";
// MODIFICATION: Import the new useAuth hook and remove unused imports
import { useAuth } from "@/context/AuthContext";

interface AuthGuardProps {
  children?: ReactNode;
}

export function AuthGuard({ children }: AuthGuardProps) {
  // MODIFICATION: State is now consumed from the global context
  const { isAuthenticated, isLoading } = useAuth();
  const location = useLocation();

  // This spinner will only show on the very first load of the application
  // REMOVED: Full-page loading spinner. The page content will now load instantly.
  // if (isLoading) {
  //   return (
  //     <div className="flex justify-center items-center min-h-screen">
  //       <Loader2 className="h-12 w-12 animate-spin text-primary" />
  //     </div>
  //   );
  // }

  // Once loading is complete, redirect if not authenticated
  if (!isAuthenticated && !isLoading) { // Ensure isLoading is false to prevent redirect loops on initial check
    return <Navigate to="/auth" state={{ from: location }} replace />;
  }

  // If authenticated (or still loading but not yet determined as unauthenticated), render the page content instantly
  // The 'isLoading' check is removed here, so the page content attempts to render immediately.
  // Individual components within the page should handle their own loading states.
  return children ? <>{children}</> : <Outlet />;
}

================
File: src/components/auth/PasswordChangeForm.tsx
================
import { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { Loader2, Eye, EyeOff } from "lucide-react";

export function PasswordChangeForm() {
  const [currentPassword, setCurrentPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [showCurrentPassword, setShowCurrentPassword] = useState(false);
  const [showNewPassword, setShowNewPassword] = useState(false);
  const { toast } = useToast();

  const toggleShowCurrentPassword = () => {
    setShowCurrentPassword(!showCurrentPassword);
  };

  const toggleShowNewPassword = () => {
    setShowNewPassword(!showNewPassword);
  };

  const handlePasswordChange = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validate passwords
    if (newPassword.length < 10) {
      toast({
        title: "Password Error",
        description: "New password should be at least 10 characters long.",
        variant: "destructive",
      });
      return;
    }

    if (newPassword !== confirmPassword) {
      toast({
        title: "Password Error",
        description: "New passwords do not match.",
        variant: "destructive",
      });
      return;
    }

    setLoading(true);
    try {
      // First authenticate with current password to verify user
      const { error: signInError } = await supabase.auth.signInWithPassword({
        email: (await supabase.auth.getUser()).data.user?.email || '',
        password: currentPassword,
      });

      if (signInError) {
        throw new Error("Current password is incorrect");
      }

      // Then update to new password
      const { error: updateError } = await supabase.auth.updateUser({ 
        password: newPassword 
      });

      if (updateError) throw updateError;

      // Clear form
      setCurrentPassword('');
      setNewPassword('');
      setConfirmPassword('');
      
      toast({
        title: "Success",
        description: "Your password has been updated successfully.",
      });
    } catch (error) {
      console.error('Password change error:', error);
      toast({
        title: "Password Change Failed",
        description: error instanceof Error ? error.message : "Failed to update password. Please try again.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Change Password</CardTitle>
        <CardDescription>
          Update your account password
        </CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handlePasswordChange} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="currentPassword">Current Password</Label>
            <div className="relative">
              <Input
                id="currentPassword"
                type={showCurrentPassword ? "text" : "password"}
                value={currentPassword}
                onChange={(e) => setCurrentPassword(e.target.value)}
                required
                className="pr-10"
                placeholder="Enter current password"
              />
              <Button 
                type="button" 
                variant="ghost" 
                size="icon" 
                className="absolute right-1 top-1 h-8 w-8 text-muted-foreground"
                onClick={toggleShowCurrentPassword}
              >
                {showCurrentPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
              </Button>
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="newPassword">New Password</Label>
            <div className="relative">
              <Input
                id="newPassword"
                type={showNewPassword ? "text" : "password"}
                value={newPassword}
                onChange={(e) => setNewPassword(e.target.value)}
                required
                minLength={10}
                className="pr-10"
                placeholder="Enter new password"
              />
              <Button 
                type="button" 
                variant="ghost" 
                size="icon" 
                className="absolute right-1 top-1 h-8 w-8 text-muted-foreground"
                onClick={toggleShowNewPassword}
              >
                {showNewPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
              </Button>
            </div>
            <p className="text-xs text-muted-foreground">
              Password must be at least 10 characters long
            </p>
          </div>

          <div className="space-y-2">
            <Label htmlFor="confirmPassword">Confirm New Password</Label>
            <Input
              id="confirmPassword"
              type="password"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              required
              placeholder="Confirm new password"
            />
          </div>

          <Button 
            type="submit" 
            className="w-full"
            disabled={loading}
          >
            {loading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
            {loading ? 'Updating...' : 'Update Password'}
          </Button>
        </form>
      </CardContent>
    </Card>
  );
}

================
File: src/components/auth/UserProfile.tsx
================
// src/components/auth/UserProfile.tsx
import { useState, useEffect, useCallback } from 'react'; // Added useCallback
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { Loader2, Camera } from "lucide-react";
// useNavigate is not used in this component's current logic.
// import { useNavigate } from 'react-router-dom'; 
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"; 
import type { User } from "@supabase/supabase-js";

interface ProfileData {
  user_id: string;
  full_name: string | null;
  avatar_url: string | null;
  updated_at?: string; // Added to match potential DB schema and for optimistic updates
}

export function UserProfile() {
  const [user, setUser] = useState<User | null>(null);
  const [profile, setProfile] = useState<ProfileData | null>(null);
  const [loadingProfile, setLoadingProfile] = useState(true); // Specific loading state for profile
  const [uploadingPhoto, setUploadingPhoto] = useState(false);
  const { toast } = useToast();
  // const navigate = useNavigate(); // Can be removed if not used

  const fetchProfileForUser = useCallback(async (authUser: User | null) => {
    if (!authUser?.id) {
      setProfile(null);
      setLoadingProfile(false);
      return;
    }

    setLoadingProfile(true);
    console.log("UserProfile: Fetching profile for user_id:", authUser.id);
    try {
      const { data: profileData, error: profileError } = await supabase
        .from('profiles')
        .select('user_id, full_name, avatar_url, updated_at') // Ensure to select all needed fields
        .eq('user_id', authUser.id)
        .single(); 
            
      if (profileError) {
        if (profileError.code === 'PGRST116') {
          console.log("UserProfile: No profile found for user_id:", authUser.id);
          setProfile(null);
        } else {
          console.error("UserProfile: Error fetching profile:", profileError);
          toast({ title: "Error", description: "Could not fetch profile information.", variant: "destructive" });
          setProfile(null);
        }
      } else {
        setProfile(profileData as ProfileData);
        console.log("UserProfile: Profile data loaded:", profileData);
      }
    } catch (error) {
      console.error('UserProfile: Exception in fetchProfileForUser:', error);
      toast({ title: "Error", description: "An unexpected error occurred while fetching profile.", variant: "destructive" });
      setProfile(null);
    } finally {
      setLoadingProfile(false);
    }
  }, [toast]); // toast is a stable dependency from useToast

  useEffect(() => {
    // Initial fetch of session and profile
    const initialFetch = async () => {
        const { data: { session }, error: sessionError } = await supabase.auth.getSession();
        if (sessionError) {
            console.error("Error fetching initial session:", sessionError);
            setLoadingProfile(false); // Ensure loading stops
            return;
        }
        const authUser = session?.user || null;
        setUser(authUser);
        await fetchProfileForUser(authUser);
    };
    initialFetch();

    // Listen for auth state changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (_event, session) => {
        console.log("UserProfile: Auth state changed, event:", _event);
        const authUser = session?.user || null;
        setUser(authUser);
        // Re-fetch profile when user state changes (e.g., sign-in, sign-out, token refresh)
        await fetchProfileForUser(authUser);
      }
    );

    return () => {
      subscription?.unsubscribe();
    };
  }, [fetchProfileForUser]); // fetchProfileForUser is memoized with useCallback

  const handleProfilePhotoChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file || !user) return;

    if (file.size > 5 * 1024 * 1024) {
      toast({ title: "File too large", description: "Profile photo must be less than 5MB", variant: "destructive" });
      return;
    }
    if (!file.type.startsWith('image/')) {
      toast({ title: "Invalid file type", description: "Please upload an image file", variant: "destructive" });
      return;
    }
    
    setUploadingPhoto(true);
    try {
      const fileExt = file.name.split('.').pop();
      const fileName = `${user.id}-${Date.now()}.${fileExt}`;
      const filePath = `${fileName}`;
      
      const { error: uploadError } = await supabase.storage
        .from('profiles') 
        .upload(filePath, file, { cacheControl: '3600', upsert: true });
        
      if (uploadError) throw uploadError;
      
      const { data: publicUrlData } = supabase.storage
        .from('profiles') 
        .getPublicUrl(filePath);
      
      const publicUrl = publicUrlData.publicUrl;
      const newUpdatedAt = new Date().toISOString();
      
      const { error: updateError } = await supabase
        .from('profiles')
        .update({ avatar_url: publicUrl, updated_at: newUpdatedAt }) 
        .eq('user_id', user.id); 
        
      if (updateError) throw updateError;
      
      setProfile(prevProfile => ({
        ...(prevProfile || { user_id: user.id, full_name: null, avatar_url: null }), 
        avatar_url: publicUrl,
        updated_at: newUpdatedAt
      }));
      
      toast({ title: "Profile photo updated", description: "Your new photo is now active." });
    } catch (error: any) {
      console.error('UserProfile: Error uploading photo:', error);
      toast({
        title: "Upload failed",
        description: error.message || "Failed to upload profile photo. Please try again.",
        variant: "destructive",
      });
    } finally {
      setUploadingPhoto(false);
    }
  };

  if (loadingProfile) {
    return (
      <div className="flex justify-center items-center p-4">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    );
  }

  if (!user) {
    return <p className="p-4 text-sm text-muted-foreground">Please sign in to view your profile.</p>; 
  }

  const userInitials = profile?.full_name 
    ? profile.full_name.split(' ').map((n: string) => n[0]).join('').toUpperCase()
    : user.email?.charAt(0).toUpperCase() || "?";

  return (
    <Card>
      <CardHeader>
        <CardTitle>User Profile</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex flex-col items-center gap-2">
          <div className="relative group">
            <Avatar className="h-24 w-24 border-2 border-white shadow-md">
              {profile?.avatar_url && (
                <AvatarImage src={`${profile.avatar_url}?t=${profile.updated_at || Date.now()}`} alt={profile?.full_name || user.email || "User Avatar"} />
              )}
              <AvatarFallback className="text-xl">{userInitials}</AvatarFallback>
            </Avatar>
            <label 
              htmlFor="avatar-upload"
              className="absolute bottom-0 right-0 p-1 bg-primary text-primary-foreground rounded-full cursor-pointer shadow-md hover:bg-primary/90 transition-colors"
            >
              <Camera className="h-4 w-4" />
              <span className="sr-only">Upload profile photo</span>
            </label>
            <input 
              type="file" 
              id="avatar-upload" 
              className="hidden" 
              accept="image/*"
              onChange={handleProfilePhotoChange}
              disabled={uploadingPhoto}
            />
          </div>
          {uploadingPhoto && (
            <div className="flex items-center gap-1 text-sm text-muted-foreground">
              <Loader2 className="h-3 w-3 animate-spin" />
              <span>Uploading...</span>
            </div>
          )}
        </div>
        
        {profile?.full_name && (
          <div>
            <p className="text-sm font-medium text-muted-foreground">Name</p>
            <p>{profile.full_name}</p>
          </div>
        )}
        
        <div>
          <p className="text-sm font-medium text-muted-foreground">Email</p>
          <p>{user.email}</p>
        </div>
      </CardContent>
    </Card>
  );
}

================
File: src/components/calendar/views/DayView.tsx
================
// src/components/calendar/views/DayView.tsx
import React from 'react';
import { cn } from '@/lib/utils';
import { format, isSameDay, addMinutes } from 'date-fns';
import { TimeAxis } from './TimeAxis';
import { CalendarEvent, NewCalendarEvent } from '@/services/calendarEventService';
import { ClassConfigWithColor } from '@/components/calendar/types';

interface DayViewProps {
  currentDate: Date;
  classes: ClassConfigWithColor[];
  events: CalendarEvent[];
  draftEvent: Partial<NewCalendarEvent> | null;
  isCreatingEvent: boolean;
  onEventCreateStart: (startDate: Date) => void;
  onEventCreateUpdate: (newTime: Date, e: React.MouseEvent) => void;
  onEventCreateEnd: (e: React.MouseEvent) => void;
  onEventClick: (event: CalendarEvent, anchorElement: HTMLElement) => void;
}

export const DayView: React.FC<DayViewProps> = ({ 
    currentDate, classes, events, draftEvent, isCreatingEvent,
    onEventCreateStart, onEventCreateUpdate, onEventCreateEnd, onEventClick
}) => {
    
    const calculateDateFromY = (y: number, day: Date, containerHeight: number): Date => {
        const totalMinutes = (y / containerHeight) * 24 * 60;
        const snappedTotalMinutes = Math.round(totalMinutes / 15) * 15;
        const hour = Math.floor(snappedTotalMinutes / 60);
        const minute = snappedTotalMinutes % 60;
        const newDate = new Date(day);
        newDate.setHours(hour, minute, 0, 0);
        return newDate;
    };

    const handleMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {
        if ((e.target as HTMLElement).closest('.event-bubble')) return;
        e.preventDefault();
        const rect = e.currentTarget.getBoundingClientRect();
        const y = e.clientY - rect.top;
        const totalMinutes = (y / rect.height) * 24 * 60;
        const hour = Math.floor(totalMinutes / 60);
        const minute = totalMinutes % 60;
        const snappedMinute = minute < 30 ? 0 : 30;
        const startDate = new Date(currentDate);
        startDate.setHours(hour, snappedMinute, 0, 0);
        onEventCreateStart(startDate);
    };

    const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {
        if (!isCreatingEvent) return;
        const rect = e.currentTarget.getBoundingClientRect();
        const y = e.clientY - rect.top;
        const newTime = calculateDateFromY(y, currentDate, rect.height);
        onEventCreateUpdate(newTime, e);
    };

    return (
        <div className="flex flex-1">
            <TimeAxis />
            <div 
                className="flex-1 border-l border-marble-400 relative calendar-grid"
                onMouseDown={handleMouseDown}
                onMouseMove={handleMouseMove}
                onMouseUp={onEventCreateEnd}
                onMouseLeave={(e) => { if (isCreatingEvent) onEventCreateEnd(e); }}
             >
                {Array.from({ length: 24 }).map((_, hour) => (
                    <div key={hour} className="h-12 border-b border-marble-400"></div>
                ))}
            
                 {draftEvent && draftEvent.event_start && isSameDay(new Date(draftEvent.event_start), currentDate) && (() => {
                    const startDate = new Date(draftEvent.event_start);
                    const endDate = draftEvent.event_end ? new Date(draftEvent.event_end) : new Date(startDate.getTime() + 60 * 60 * 1000);
                    const startMinutes = startDate.getHours() * 60 + startDate.getMinutes();
                    const endMinutes = Math.max(endDate.getHours() * 60 + endDate.getMinutes(), startMinutes + 15);
                    const top = (startMinutes / (24 * 60)) * 100;
                    const duration = endMinutes - startMinutes;
                    const height = (duration / (24 * 60)) * 100;
                    const draftClass = classes.find(c => c.class_id === draftEvent.class_id);
                    return (
                        <div style={{ top: `${top}%`, height: `${height}%` }} className={cn("absolute w-[calc(100%-8px)] left-1 p-2 rounded-lg text-white text-xs z-20 pointer-events-none draft-event-bubble", draftClass?.color || 'bg-stone-500')}>
                            <p className="font-bold">{draftEvent.title || '(No title)'}</p>
                             <p>{format(startDate, 'p')} - {format(endDate, 'p')}</p>
                        </div>
                    );
                })()}

                {events.filter(e => isSameDay(new Date(e.event_start), currentDate)).map(event => {
                    const eventDate = new Date(event.event_start);
                    const endDate = event.event_end ? new Date(event.event_end) : addMinutes(eventDate, 60);
                    const top = (eventDate.getHours() * 60 + eventDate.getMinutes()) / (24 * 60) * 100;
                    const duration = (endDate.getTime() - eventDate.getTime()) / (1000 * 60);
                    const height = (duration / (24 * 60)) * 100;
                    const eventClass = classes.find(c => c.class_id === event.class_id);
                    const isShort = duration < 45;
                    return (
                        <div
                             key={event.id}
                            data-event-id={event.id}
                            style={{ 
                                top: `${top}%`, 
                                height: `${height}%`,
                                width: 'calc(100% - 8px)',
                                left: '4px',
                            }} 
                            className={cn("absolute p-1 rounded text-white text-xs z-10 event-bubble cursor-pointer", eventClass?.color || 'bg-gray-500')}
                            onClick={(e) => { e.stopPropagation(); onEventClick(event, e.currentTarget); }}
                            onMouseDown={(e) => e.stopPropagation()}
                            onMouseUp={(e) => e.stopPropagation()}
                        >
                              <p className="font-bold truncate">{event.title}</p>
                             {isShort ? (
                                <p className="truncate text-white/80">
                                     {format(eventDate, 'p')}
                                    {event.location && `, ${event.location}`}
                                 </p>
                             ) : (
                                <>
                                     <p className="truncate text-white/80">{format(eventDate, 'p')} - {format(endDate, 'p')}</p>
                                    {event.location && <p className="truncate text-white/80">{event.location}</p>}
                                 </>
                            )}
                        </div>
                     );
                })}
            </div>
        </div>
    );
};

================
File: src/components/calendar/views/MonthView.tsx
================
// src/components/calendar/views/MonthView.tsx
import React from 'react';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { addDays, endOfMonth, endOfWeek, isSameDay, isSameMonth, startOfMonth, startOfWeek } from 'date-fns';
import { Trash2 } from 'lucide-react';
import { CalendarEvent } from '@/services/calendarEventService';
import { ClassConfigWithColor } from '@/components/calendar/types';

const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

interface MonthViewProps {
  currentDate: Date;
  classes: ClassConfigWithColor[];
  events: CalendarEvent[];
  onDelete: (id: string) => void;
  // MODIFICATION: Changed prop signature to include the clicked element
  onDayClick: (date: Date, anchorElement: HTMLElement) => void;
  onEventClick: (event: CalendarEvent, anchorElement: HTMLElement) => void;
}

export const MonthView: React.FC<MonthViewProps> = ({ currentDate, classes, events, onDelete, onDayClick, onEventClick }) => {
    const today = new Date();
    const monthStart = startOfMonth(currentDate);
    const monthEnd = endOfMonth(currentDate);
    const startDate = startOfWeek(monthStart);
    const endDate = endOfWeek(monthEnd);

    const days = [];
    let day = startDate;

    while (day <= endDate) {
        days.push(day);
        day = addDays(day, 1);
    }

    return (
        <div className="grid grid-cols-7 flex-1">
             {daysOfWeek.map(day => (
                <div key={day} className="text-center text-sm font-semibold text-volcanic-900 py-2 border-b border-r border-marble-400">
                    {day}
                </div>
            ))}
             {days.map((day, index) => (
                // MODIFICATION: The onClick handler now passes the event target (the div itself)
                <div key={index} className="relative border-b border-r border-marble-400 p-2 min-h-[120px] flex flex-col cursor-pointer hover:bg-stone-50 transition-colors" onClick={(e) => onDayClick(day, e.currentTarget)}>
                    <div className="flex justify-start">
                         <span className={cn(
                            "text-sm w-8 h-8 flex items-center justify-center rounded-full",
                            isSameDay(day, today) ? "bg-stone-700 text-white" : "text-volcanic-800",
                            !isSameMonth(day, currentDate) && !isSameDay(day, today) && "text-stone-400"
                        )}>
                            {day.getDate()}
                         </span>
                    </div>
                    <div className="mt-1 space-y-1 overflow-y-auto">
                        {events.filter(e => isSameDay(new Date(e.event_start), day)).map(event => {
                            const eventClass = classes.find(c => c.class_id === event.class_id);
                            return (
                                 <div 
                                     key={event.id} 
                                     data-event-id={event.id}
                                     className={cn("group text-xs p-1 rounded-md text-white flex items-center justify-between", eventClass?.color || 'bg-gray-500')}
                                     onClick={(e) => {
                                         e.stopPropagation();
                                        onEventClick(event, e.currentTarget);
                                     }}
                                >
                                     <span className="font-semibold truncate">{event.title}</span>
                                    <Button variant="ghost" size="icon" className="h-5 w-5 opacity-0 group-hover:opacity-100" onClick={(e) => { e.stopPropagation(); onDelete(event.id); }}>
                                         <Trash2 className="h-3 w-3" />
                                    </Button>
                                 </div>
                            )
                        })}
                    </div>
                 </div>
            ))}
        </div>
    );
};

================
File: src/components/calendar/views/TimeAxis.tsx
================
// src/components/calendar/views/TimeAxis.tsx
import React from 'react';

export const TimeAxis = () => (
  <div className="w-16 text-right pr-2">
    {Array.from({ length: 24 }).map((_, hour) => (
      <div key={hour} className="h-12 relative">
        <span className="text-xs text-volcanic-800 absolute -top-2 right-2">
          {hour === 0 ? '' : hour < 12 ? `${hour} AM` : hour === 12 ? '12 PM' : `${hour - 12} PM`}
        </span>
      </div>
    ))}
  </div>
);

================
File: src/components/calendar/views/WeekView.tsx
================
// src/components/calendar/views/WeekView.tsx
import React from 'react';
import { cn } from '@/lib/utils';
import { format, addDays, startOfWeek, isSameDay, addMinutes } from 'date-fns';
import { TimeAxis } from './TimeAxis';
import { CalendarEvent, NewCalendarEvent } from '@/services/calendarEventService';
import { ClassConfigWithColor } from '@/components/calendar/types';

interface WeekViewProps {
  currentDate: Date;
  classes: ClassConfigWithColor[];
  events: CalendarEvent[];
  draftEvent: Partial<NewCalendarEvent> | null;
  isCreatingEvent: boolean;
  onEventCreateStart: (startDate: Date) => void;
  onEventCreateUpdate: (newTime: Date, e: React.MouseEvent) => void;
  onEventCreateEnd: (e: React.MouseEvent) => void;
  onEventClick: (event: CalendarEvent, anchorElement: HTMLElement) => void;
}

export const WeekView: React.FC<WeekViewProps> = ({ 
    currentDate, classes, events, draftEvent, isCreatingEvent,
    onEventCreateStart, onEventCreateUpdate, onEventCreateEnd, onEventClick
}) => {
    const weekStart = startOfWeek(currentDate);
    const weekDays = Array.from({ length: 7 }).map((_, i) => addDays(weekStart, i));
    const today = new Date();

    const calculateDateFromY = (y: number, day: Date, containerHeight: number): Date => {
        const totalMinutes = (y / containerHeight) * 24 * 60;
        const snappedTotalMinutes = Math.round(totalMinutes / 15) * 15;
        const hour = Math.floor(snappedTotalMinutes / 60);
        const minute = snappedTotalMinutes % 60;
        const newDate = new Date(day);
        newDate.setHours(hour, minute, 0, 0);
        return newDate;
    };

    const handleMouseDown = (e: React.MouseEvent<HTMLDivElement>, day: Date) => {
         if ((e.target as HTMLElement).closest('.event-bubble')) return;
        e.preventDefault();
        const rect = e.currentTarget.getBoundingClientRect();
        const y = e.clientY - rect.top;
        const totalMinutes = (y / rect.height) * 24 * 60;
        const hour = Math.floor(totalMinutes / 60);
        const minute = totalMinutes % 60;
        const snappedMinute = minute < 30 ? 0 : 30;
        const startDate = new Date(day);
        startDate.setHours(hour, snappedMinute, 0, 0);
        onEventCreateStart(startDate);
    };

    const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>, day: Date) => {
        if (!isCreatingEvent) return;
        const rect = e.currentTarget.getBoundingClientRect();
        const y = e.clientY - rect.top;
        const newTime = calculateDateFromY(y, day, rect.height);
        onEventCreateUpdate(newTime, e);
    };
    
    return (
        <div className="flex flex-col flex-1">
            <div className="flex sticky top-0 bg-white z-20">
                <div className="w-16 shrink-0"></div>
                <div className="flex-1 grid grid-cols-7">
                    {weekDays.map((day) => (
                        <div key={day.toISOString()} className="text-center py-2 border-b border-l border-marble-400">
                            <p className="text-xs text-volcanic-800">{format(day, 'EEE')}</p>
                            <p className={cn("text-lg font-semibold w-8 h-8 flex items-center justify-center mx-auto", isSameDay(day, today) && "bg-stone-700 text-white rounded-full")}>
                                {format(day, 'd')}
                             </p>
                        </div>
                    ))}
                </div>
            </div>
            <div className="flex flex-1">
                <TimeAxis />
                <div className="flex-1 grid grid-cols-7">
                    {weekDays.map(day => (
                        <div key={day.toISOString()} className="relative border-l border-marble-400 calendar-grid"
                             onMouseDown={(e) => handleMouseDown(e, day)}
                             onMouseMove={(e) => handleMouseMove(e, day)}
                             onMouseUp={onEventCreateEnd}
                             onMouseLeave={(e) => { if (isCreatingEvent) onEventCreateEnd(e); }}>
                             {Array.from({ length: 24 }).map((_, hour) => <div key={hour} className="h-12 border-b border-marble-400"></div>)}
                            
                             {draftEvent && draftEvent.event_start && isSameDay(new Date(draftEvent.event_start), day) && (() => {
                                const startDate = new Date(draftEvent.event_start);
                                const endDate = draftEvent.event_end ? new Date(draftEvent.event_end) : new Date(startDate.getTime() + 60 * 60 * 1000);
                                const startMinutes = startDate.getHours() * 60 + startDate.getMinutes();
                                const endMinutes = Math.max(endDate.getHours() * 60 + endDate.getMinutes(), startMinutes + 15);
                                const top = (startMinutes / (24 * 60)) * 100;
                                const duration = endMinutes - startMinutes;
                                const height = (duration / (24 * 60)) * 100;
                                const draftClass = classes.find(c => c.class_id === draftEvent.class_id);
                                return (
                                     <div style={{ top: `${top}%`, height: `${height}%` }} className={cn("absolute w-full p-2 rounded-lg text-white text-xs z-20 pointer-events-none draft-event-bubble", draftClass?.color || 'bg-stone-500')}>
                                        <p className="font-bold">{draftEvent.title || '(No title)'}</p>
                                          <p>{format(startDate, 'p')} - {format(endDate, 'p')}</p>
                                    </div>
                                 );
                            })()}

                            {events.filter(e => isSameDay(new Date(e.event_start), day)).map(event => {
                                 const eventDate = new Date(event.event_start);
                                const endDate = event.event_end ? new Date(event.event_end) : addMinutes(eventDate, 60);
                                const top = (eventDate.getHours() * 60 + eventDate.getMinutes()) / (24 * 60) * 100;
                                const duration = (endDate.getTime() - eventDate.getTime()) / (1000 * 60);
                                const height = (duration / (24 * 60)) * 100;
                                const eventClass = classes.find(c => c.class_id === event.class_id);
                                const isShort = duration < 45;
                                return (
                                     <div
                                        key={event.id}
                                        data-event-id={event.id}
                                        style={{ top: `${top}%`, height: `${height}%` }}
                                        className={cn("absolute w-[calc(100%-8px)] p-1 rounded text-white text-xs z-10 event-bubble cursor-pointer", eventClass?.color || 'bg-gray-500')}
                                        onClick={(e) => { e.stopPropagation(); onEventClick(event, e.currentTarget); }}
                                        onMouseDown={(e) => e.stopPropagation()}
                                        onMouseUp={(e) => e.stopPropagation()}
                                     >
                                        <p className="font-bold truncate">{event.title}</p>
                                         {isShort ? (
                                            <p className="truncate text-white/80">
                                                 {format(eventDate, 'p')}
                                                {event.location && `, ${event.location}`}
                                             </p>
                                        ) : (
                                            <>
                                                 <p className="truncate text-white/80">{format(eventDate, 'p')} - {format(endDate, 'p')}</p>
                                                {event.location && <p className="truncate text-white/80">{event.location}</p>}
                                             </>
                                        )}
                                     </div>
                                );
                            })}
                        </div>
                    ))}
                </div>
            </div>
        </div>
    );
};

================
File: src/components/calendar/AddEventDialog.tsx
================
import React, { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group';
import { NewCalendarEvent } from '@/services/calendarEventService';
import { ClassConfig } from '@/services/classOpenAIConfig';
import { Book, FileText, MapPin } from 'lucide-react';
import { format } from 'date-fns';

interface AddEventDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (event: NewCalendarEvent) => Promise<boolean>;
  defaults: { date: string, time: string } | null;
  classes: ClassConfig[];
}

export const AddEventDialog: React.FC<AddEventDialogProps> = ({ isOpen, onClose, onSubmit, defaults, classes }) => {
    const [eventType, setEventType] = useState('event');
    const [isSubmitting, setIsSubmitting] = useState(false);

    // Use a key to force re-mount when dialog opens, ensuring defaults are applied
    const dialogKey = isOpen ? Date.now() : 'closed';

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setIsSubmitting(true);
        const formData = new FormData(e.currentTarget as HTMLFormElement);
        const newEvent: NewCalendarEvent = {
            title: formData.get('title') as string,
            event_type: eventType,
            event_start: new Date(`${formData.get('date')}T${formData.get('time')}`).toISOString(),
            repeat_pattern: formData.get('repeat_pattern') as string,
            location: formData.get('location') as string,
            class_id: formData.get('class_id') as string,
            notes: formData.get('notes') as string
        };
        const success = await onSubmit(newEvent);
        if (success) {
            onClose();
        }
        setIsSubmitting(false);
    };

    return (
        <Dialog open={isOpen} onOpenChange={onClose}>
            <DialogContent className="sm:max-w-md p-0" key={dialogKey}>
                <form onSubmit={handleSubmit}>
                    <DialogHeader className="p-6 pb-0">
                        <DialogTitle>Add Event</DialogTitle>
                    </DialogHeader>
                    <div className="p-6 space-y-4">
                        <Input name="title" placeholder="Add title" className="text-lg h-12 border-0 focus-visible:ring-0 shadow-none px-0" autoComplete="off" />
                        <ToggleGroup type="single" defaultValue={eventType} onValueChange={(value) => { if (value) setEventType(value) }} size="sm">
                            <ToggleGroupItem value="event">Event</ToggleGroupItem>
                            <ToggleGroupItem value="assignment">Assignment</ToggleGroupItem>
                            <ToggleGroupItem value="exam">Exam</ToggleGroupItem>
                        </ToggleGroup>
                        <div className="flex items-center gap-2">
                            <Input name="date" type="date" defaultValue={defaults?.date || format(new Date(), 'yyyy-MM-dd')} className="flex-1" autoComplete="off" />
                            <Input name="time" type="time" defaultValue={defaults?.time || format(new Date(), 'HH:mm')} className="flex-1" autoComplete="off" />
                        </div>
                        <Select name="repeat_pattern" defaultValue="none">
                            <SelectTrigger><SelectValue placeholder="Does not repeat" /></SelectTrigger>
                            <SelectContent>
                                <SelectItem value="none">Does not repeat</SelectItem>
                                <SelectItem value="daily">Daily</SelectItem>
                                <SelectItem value="weekly">Weekly</SelectItem>
                                <SelectItem value="monthly">Monthly</SelectItem>
                            </SelectContent>
                        </Select>
                        <div className="flex items-center gap-4">
                            <MapPin className="h-5 w-5 text-stone-500" />
                            <Input name="location" placeholder="Add location" className="border-0 focus-visible:ring-0 shadow-none px-0" autoComplete="off" />
                        </div>
                        <div className="flex items-center gap-4">
                            <Book className="h-5 w-5 text-stone-500" />
                            <Select name="class_id">
                                <SelectTrigger className="border-0 focus-visible:ring-0 shadow-none px-0"><SelectValue placeholder="Select a class" /></SelectTrigger>
                                <SelectContent>
                                    {classes.map(c => <SelectItem key={c.class_id} value={c.class_id}>{c.class_name}</SelectItem>)}
                                </SelectContent>
                            </Select>
                        </div>
                        <div className="flex items-start gap-4">
                            <FileText className="h-5 w-5 text-stone-500 mt-2" />
                            <Textarea name="notes" placeholder="Add description or notes" className="border-0 focus-visible:ring-0 shadow-none px-0" />
                        </div>
                    </div>
                    <DialogFooter className="bg-stone-50 px-6 py-3">
                        <Button type="submit" disabled={isSubmitting}>
                            {isSubmitting ? "Saving..." : "Save"}
                        </Button>
                    </DialogFooter>
                </form>
            </DialogContent>
        </Dialog>
    );
};

================
File: src/components/calendar/AddEventForm.tsx
================
// src/components/calendar/AddEventForm.tsx
import React, { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group';
import { CalendarEvent, NewCalendarEvent } from '@/services/calendarEventService';
import { ClassConfig } from '@/services/classOpenAIConfig';
import { Book, FileText, MapPin, X } from 'lucide-react';
import { format } from 'date-fns';
import { cn } from '@/lib/utils';
import { TimeInput } from '@/components/ui/time-input';

interface AddEventFormProps {
  onSave: (event: NewCalendarEvent, id?: string) => Promise<boolean>;
  onClose: () => void;
  defaults: { startDate: Date, endDate: Date };
  classes: ClassConfig[];
  eventToEdit?: CalendarEvent;
}

export const AddEventForm: React.FC<AddEventFormProps> = ({ onSave, onClose, defaults, classes, eventToEdit }) => {
    const [title, setTitle] = useState(eventToEdit?.title || '');
    const [eventType, setEventType] = useState(eventToEdit?.event_type || 'event');
    const [startTime, setStartTime] = useState(format(defaults.startDate, 'HH:mm'));
    const [endTime, setEndTime] = useState(format(defaults.endDate, 'HH:mm'));
    const [repeatPattern, setRepeatPattern] = useState(eventToEdit?.repeat_pattern || 'none');
    const [location, setLocation] = useState(eventToEdit?.location || '');
    const [classId, setClassId] = useState(eventToEdit?.class_id || '');
    const [notes, setNotes] = useState(eventToEdit?.notes || '');
    
    const [isSubmitting, setIsSubmitting] = useState(false);

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        e.stopPropagation();
        setIsSubmitting(true);

        const eventDate = format(defaults.startDate, 'yyyy-MM-dd');
        
        const eventPayload: NewCalendarEvent = {
            title: title || '(No title)',
            event_type: eventType,
            event_start: new Date(`${eventDate}T${startTime}`).toISOString(),
            event_end: new Date(`${eventDate}T${endTime}`).toISOString(),
            repeat_pattern: repeatPattern,
            location,
            class_id: classId,
            notes,
        };
        const success = await onSave(eventPayload, eventToEdit?.id);
        if (success) {
            onClose();
        }
        setIsSubmitting(false);
    };

    return (
        <div className="relative">
            <Button type="button" variant="ghost" size="icon" onClick={onClose} className="absolute top-3 right-3 h-7 w-7 text-stone-400 hover:text-stone-700 z-10">
                <X className="h-4 w-4" /><span className="sr-only">Close</span>
            </Button>
            <form onSubmit={handleSubmit} className="flex flex-col">
                <div className="p-4 pt-10 space-y-4">
                    <Input value={title} onChange={(e) => setTitle(e.target.value)} placeholder="Add title" className="text-lg h-12 px-0 border-0 border-b-2 border-stone-200 rounded-none shadow-none focus-visible:ring-0 focus-visible:ring-offset-0" autoComplete="off" autoFocus />
                    <ToggleGroup type="single" value={eventType} onValueChange={(value) => { if (value) setEventType(value) }} size="sm">
                        <ToggleGroupItem value="event">Event</ToggleGroupItem>
                        <ToggleGroupItem value="assignment">Assignment</ToggleGroupItem>
                        <ToggleGroupItem value="exam">Exam</ToggleGroupItem>
                    </ToggleGroup>
                    <div className="flex items-center gap-2 w-full">
                        <Input name="date" type="date" value={format(defaults.startDate, 'yyyy-MM-dd')} className="w-40 h-9" readOnly/>
                        <div className={cn("flex items-center justify-between flex-1 rounded-md border border-input bg-transparent text-sm h-9 px-3")}>
                            <TimeInput value={startTime} onChange={setStartTime} />
                            <span className="mx-2 text-muted-foreground">-</span>
                            <TimeInput value={endTime} onChange={setEndTime} />
                        </div>
                    </div>
                    <div className="flex items-center gap-4">
                        <Select name="repeat_pattern" value={repeatPattern} onValueChange={setRepeatPattern}>
                            <SelectTrigger className="bg-transparent border-0 border-b-2 border-stone-200 rounded-none shadow-none focus:ring-0 w-full focus:border-stone-400 text-muted-foreground data-[state=open]:text-foreground data-[placeholder]:text-muted-foreground h-9">
                                <SelectValue placeholder="Does not repeat" />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="none">Does not repeat</SelectItem>
                                <SelectItem value="daily">Daily</SelectItem>
                                <SelectItem value="weekly">Weekly</SelectItem>
                                <SelectItem value="monthly">Monthly</SelectItem>
                            </SelectContent>
                        </Select>
                    </div>
                    <div className="flex items-center gap-4">
                        <MapPin className="h-5 w-5 text-stone-500" />
                        <Input value={location} onChange={(e) => setLocation(e.target.value)} placeholder="Add location" className="bg-transparent border-0 border-b-2 border-stone-200 rounded-none shadow-none focus:ring-0 focus:border-stone-400 h-9" autoComplete="off" />
                    </div>
                    <div className="flex items-center gap-4">
                        <Book className="h-5 w-5 text-stone-500" />
                        <Select name="class_id" value={classId} onValueChange={setClassId}>
                             <SelectTrigger className="bg-transparent border-0 border-b-2 border-stone-200 rounded-none shadow-none focus:ring-0 w-full focus:border-stone-400 text-muted-foreground data-[state=open]:text-foreground data-[placeholder]:text-muted-foreground h-9">
                                <SelectValue placeholder="Select a class" />
                            </SelectTrigger>
                            <SelectContent>
                                {classes.map(c => <SelectItem key={c.class_id} value={c.class_id}>{c.class_name}</SelectItem>)}
                            </SelectContent>
                        </Select>
                    </div>
                    <div className="flex items-start gap-4">
                        <FileText className="h-5 w-5 text-stone-500 mt-2 flex-shrink-0" />
                        <Textarea value={notes} onChange={(e) => setNotes(e.target.value)} rows={3} placeholder="Add description or notes" className="bg-transparent" />
                    </div>
                </div>
                <div className="flex justify-end gap-2 bg-stone-50 px-4 py-3 border-t mt-auto">
                    <Button type="button" variant="outline" onClick={onClose} disabled={isSubmitting}>Cancel</Button>
                    <Button type="submit" disabled={isSubmitting}>{isSubmitting ? "Saving..." : "Save"}</Button>
                </div>
            </form>
        </div>
    );
};

================
File: src/components/calendar/CalendarHeader.tsx
================
import React, { useRef } from 'react';
import { Button } from '@/components/ui/button';
import { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group';
import { ChevronLeft, ChevronRight, Plus } from 'lucide-react';
import { format, startOfWeek, endOfWeek } from 'date-fns';

interface CalendarHeaderProps {
  view: string;
  currentDate: Date;
  onViewChange: (view: string) => void;
  onPrev: () => void;
  onNext: () => void;
  onToday: () => void;
  onAddEvent: (anchorElement: HTMLElement) => void;
}

export const CalendarHeader: React.FC<CalendarHeaderProps> = ({ view, currentDate, onViewChange, onPrev, onNext, onToday, onAddEvent }) => {
    const addEventButtonRef = useRef<HTMLButtonElement>(null);

    const getHeaderTitle = () => {
        if (view === 'month') return format(currentDate, 'MMMM yyyy');
        if (view === 'week') {
            const start = startOfWeek(currentDate);
            const end = endOfWeek(currentDate);
            return `${format(start, 'MMM d')} - ${format(end, 'MMM d, yyyy')}`;
        }
        return format(currentDate, 'MMMM d, yyyy');
    };

    return (
        <header className="flex items-center justify-between p-3 border-b border-marble-400 flex-shrink-0">
            <div className="flex items-center gap-4">
                <div className="flex items-center gap-1">
                     <span className="text-lg font-semibold text-volcanic-900 min-w-[200px]">
                        {getHeaderTitle()}
                    </span>
                    <Button variant="ghost" size="icon" className="h-8 w-8" onClick={onPrev}>
                        <ChevronLeft className="h-5 w-5" />
                    </Button>
                    <Button variant="ghost" size="icon" className="h-8 w-8" onClick={onNext}>
                         <ChevronRight className="h-5 w-5" />
                    </Button>
                </div>
                <Button variant="outline" size="sm" onClick={onToday}>Today</Button>
                <Button ref={addEventButtonRef} size="sm" onClick={() => { if (addEventButtonRef.current) onAddEvent(addEventButtonRef.current); }}>
                    <Plus className="mr-2 h-4 w-4" />
                    Add Event
                </Button>
            </div>
             <div className="flex items-center gap-2">
                <ToggleGroup type="single" value={view} onValueChange={(v) => v && onViewChange(v)} size="sm">
                    <ToggleGroupItem value="day">Day</ToggleGroupItem>
                    <ToggleGroupItem value="week">Week</ToggleGroupItem>
                     <ToggleGroupItem value="month">Month</ToggleGroupItem>
                </ToggleGroup>
            </div>
        </header>
    );
};

================
File: src/components/calendar/CalendarSidebar.tsx
================
// src/components/calendar/CalendarSidebar.tsx
import React from 'react';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Separator } from '@/components/ui/separator';
import { MiniCalendar } from './MiniCalendar';
import { Upload, MoreHorizontal, Loader2, Check } from 'lucide-react';
import { cn } from '@/lib/utils';
import { format } from 'date-fns';
import { ClassConfigWithColor } from '@/features/calendar/types';
import { CalendarEvent } from '@/services/calendarEventService';

const COLOR_SWATCHES = [
    'bg-red-500', 'bg-orange-500', 'bg-yellow-500', 'bg-lime-500', 'bg-green-500', 'bg-teal-500',
    'bg-cyan-500', 'bg-blue-500', 'bg-indigo-500', 'bg-purple-500', 'bg-fuchsia-500', 'bg-pink-500',
];

interface CalendarSidebarProps {
    currentDate: Date;
    setCurrentDate: (date: Date) => void;
    classes: ClassConfigWithColor[];
    isLoadingClasses: boolean;
    selectedClasses: string[];
    setSelectedClasses: (ids: string[]) => void;
    onColorChange: (classId: string, newColor: string) => void;
    upcomingEvents: CalendarEvent[];
    onUploadSyllabusClick: () => void;
    view: 'day' | 'week' | 'month';
    onUpcomingEventSelect: (event: CalendarEvent) => void;
}

export const CalendarSidebar: React.FC<CalendarSidebarProps> = ({ 
    currentDate, setCurrentDate, classes, isLoadingClasses, 
    selectedClasses, setSelectedClasses, onColorChange, 
    upcomingEvents, onUploadSyllabusClick, view, onUpcomingEventSelect
}) => {
    
    const handleClassSelection = (classId: string) => {
        setSelectedClasses(
            selectedClasses.includes(classId)
                ? selectedClasses.filter(id => id !== classId)
                : [...selectedClasses, classId]
        );
    };

    return (
        <div className="w-1/4 max-w-[300px] flex flex-col rounded-lg border border-marble-400 bg-white">
            <ScrollArea className="flex-1">
                <div className="p-4">
                    <Button size="sm" className="w-full bg-stone-700 hover:bg-stone-800 text-white" onClick={onUploadSyllabusClick}>
                        <Upload className="mr-2 h-4 w-4" />
                        Upload Syllabus
                    </Button>
                </div>
                <Separator />
                <div className="p-3">
                    <MiniCalendar date={currentDate} setDate={setCurrentDate} view={view} />
                </div>
                <Separator />
                <div className="p-4">
                    <h3 className="text-sm font-semibold text-volcanic-900 mb-3">Upcoming Events</h3>
                    <div className="space-y-1 max-h-28 overflow-y-auto pr-2">
                        {upcomingEvents.map(event => {
                            const eventClass = classes.find(c => c.class_id === event.class_id);
                            return (
                                <div 
                                    key={event.id} 
                                    className="flex items-start gap-3 p-2 rounded-md cursor-pointer hover:bg-stone-100 transition-colors"
                                    onClick={() => onUpcomingEventSelect(event)}
                                >
                                    <div className={cn("w-2 h-2 rounded-full mt-1.5 flex-shrink-0", eventClass?.color)} />
                                    <div>
                                        <p className="text-sm font-medium text-volcanic-900">{event.title}</p>
                                        <p className="text-xs text-volcanic-800">{`${format(new Date(event.event_start), 'p')} • ${format(new Date(event.event_start), 'EEE, MMM d')}`}</p>
                                    </div>
                                </div>
                            )
                        })}
                    </div>
                </div>
                <Separator />
                <div className="p-4">
                    <h3 className="text-sm font-semibold text-volcanic-900 mb-3">My Classes</h3>
                    {isLoadingClasses ? (
                        <div className="flex items-center justify-center p-4">
                            <Loader2 className="h-5 w-5 animate-spin text-stone-400" />
                        </div>
                    ) : (
                        <div className="space-y-2">
                            {classes.map(cls => (
                                <div key={cls.class_id} className="flex items-center group">
                                    <Checkbox
                                        id={`class-${cls.class_id}`}
                                        checked={selectedClasses.includes(cls.class_id)}
                                        onCheckedChange={() => handleClassSelection(cls.class_id)}
                                    />
                                    <div className={cn("w-2.5 h-2.5 rounded-full ml-2", cls.color)} />
                                    <label
                                        htmlFor={`class-${cls.class_id}`}
                                        className={cn("ml-2 text-sm cursor-pointer flex-1", selectedClasses.includes(cls.class_id) ? 'text-volcanic-900' : 'text-volcanic-800')}
                                    >
                                        {cls.class_name}
                                    </label>
                                    <Popover>
                                        <PopoverTrigger asChild>
                                            <Button variant="ghost" size="icon" className="h-6 w-6 opacity-0 group-hover:opacity-100">
                                                <MoreHorizontal className="h-4 w-4" />
                                            </Button>
                                        </PopoverTrigger>
                                        <PopoverContent className="w-auto p-2">
                                            <div className="grid grid-cols-6 gap-1">
                                                {COLOR_SWATCHES.map(color => (
                                                    <button
                                                        key={color}
                                                        onClick={() => onColorChange(cls.class_id, color)}
                                                        className={cn("w-6 h-6 rounded-full flex items-center justify-center", color)}
                                                        aria-label={`Set color to ${color}`}
                                                    >
                                                        {cls.color === color && <Check className="h-4 w-4 text-white stroke-[3px]" />}
                                                    </button>
                                                ))}
                                            </div>
                                        </PopoverContent>
                                    </Popover>
                                </div>
                            ))}
                        </div>
                    )}
                </div>
            </ScrollArea>
        </div>
    );
};

================
File: src/components/calendar/CalendarViews.tsx
================
// src/components/calendar/CalendarViews.tsx
import React from 'react';
import { MonthView } from './views/MonthView';
import { WeekView } from './views/WeekView';
import { DayView } from './views/DayView';
import { CalendarEvent, NewCalendarEvent } from '@/services/calendarEventService';
import { ClassConfigWithColor } from '@/components/calendar/types';

interface CalendarViewsProps {
    view: string;
    currentDate: Date;
    classes: ClassConfigWithColor[];
    events: CalendarEvent[];
    draftEvent: Partial<NewCalendarEvent> | null;
    isCreatingEvent: boolean;
    onDelete: (id: string) => void;
    // MODIFICATION: Changed prop signature to include the clicked element for MonthView
    onDayClick: (date: Date, element: HTMLElement) => void;
    onEventCreateStart: (startDate: Date) => void;
    onEventCreateUpdate: (newTime: Date, e: React.MouseEvent) => void;
    onEventCreateEnd: (e: React.MouseEvent | MouseEvent) => void;
    onEventClick: (event: CalendarEvent, anchorElement: HTMLElement) => void;
}

export const CalendarViews: React.FC<CalendarViewsProps> = ({ view, ...props }) => {
    switch (view) {
        case 'day':
            return <DayView {...props} />;
        case 'week':
             return <WeekView {...props} />;
        case 'month':
        default:
            return <MonthView {...props} />;
    }
};

================
File: src/components/calendar/DeleteRecurringEventDialog.tsx
================
// src/components/calendar/DeleteRecurringEventDialog.tsx
import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Label } from '@/components/ui/label';

export type DeletionScope = 'this' | 'following' | 'all';

interface DeleteRecurringEventDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: (scope: DeletionScope) => void;
}

export const DeleteRecurringEventDialog: React.FC<DeleteRecurringEventDialogProps> = ({ isOpen, onClose, onConfirm }) => {
  const [scope, setScope] = useState<DeletionScope>('this');

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Delete recurring event</DialogTitle>
          <DialogDescription>
            This is a recurring event. Choose which instances you want to delete.
          </DialogDescription>
        </DialogHeader>
        <RadioGroup value={scope} onValueChange={(value) => setScope(value as DeletionScope)} className="my-4 space-y-2">
          <div className="flex items-center space-x-2">
            <RadioGroupItem value="this" id="delete-this" />
            <Label htmlFor="delete-this">This event</Label>
          </div>
          <div className="flex items-center space-x-2">
            <RadioGroupItem value="following" id="delete-following" />
            <Label htmlFor="delete-following">This and following events</Label>
          </div>
          <div className="flex items-center space-x-2">
            <RadioGroupItem value="all" id="delete-all" />
            <Label htmlFor="delete-all">All events</Label>
          </div>
        </RadioGroup>
        <DialogFooter>
          <Button variant="outline" onClick={onClose}>Cancel</Button>
          <Button onClick={() => onConfirm(scope)}>OK</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

================
File: src/components/calendar/EventConfirmationDialog.tsx
================
// src/components/calendar/EventConfirmationDialog.tsx
import React, { useState, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Card, CardContent, CardFooter } from '@/components/ui/card';
import { Trash2 } from 'lucide-react';
import { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { NewCalendarEvent } from '@/services/calendarEventService';

export interface ParsedEvent {
  id: string;
  title: string;
  event_type: 'event' | 'assignment' | 'exam';
  date: string | null;
  time: string | null;
  location: string | null;
  notes: string | null;
  repeat_pattern?: string | null;
}

interface EventCardProps {
  event: ParsedEvent;
  onAdd: (event: NewCalendarEvent) => void;
  onDelete: (id: string) => void;
}

const EventCard: React.FC<EventCardProps> = ({ event, onAdd, onDelete }) => {
    const [title, setTitle] = useState(event.title);
    const [date, setDate] = useState(event.date || '');
    const [time, setTime] = useState(event.time || '');
    const [location, setLocation] = useState(event.location || '');
    const [notes, setNotes] = useState(event.notes || '');
    const [eventType, setEventType] = useState(event.event_type);
    const [repeatPattern, setRepeatPattern] = useState(event.repeat_pattern || 'none');

    const handleAddClick = () => {
        const newEvent: NewCalendarEvent = {
            title,
            event_type: eventType,
            event_start: date && time ? new Date(`${date}T${time}`).toISOString() : new Date().toISOString(),
            location,
            notes,
            repeat_pattern: repeatPattern,
        };
        onAdd(newEvent);
    };

    return (
        <Card>
            <CardContent className="pt-6 space-y-3">
                <Input value={title} onChange={(e) => setTitle(e.target.value)} placeholder="Event Title" className="text-md font-semibold"/>
                <ToggleGroup type="single" value={eventType} onValueChange={(value) => { if (value) setEventType(value as any) }} size="sm">
                    <ToggleGroupItem value="event">Event</ToggleGroupItem>
                    <ToggleGroupItem value="assignment">Assignment</ToggleGroupItem>
                    <ToggleGroupItem value="exam">Exam</ToggleGroupItem>
                </ToggleGroup>
                <div className="flex gap-2">
                    <Input type="date" value={date} onChange={(e) => setDate(e.target.value)} />
                    <Input type="time" value={time} onChange={(e) => setTime(e.target.value)} />
                </div>
                 <Select value={repeatPattern} onValueChange={setRepeatPattern}>
                    <SelectTrigger><SelectValue placeholder="Does not repeat" /></SelectTrigger>
                    <SelectContent>
                        <SelectItem value="none">Does not repeat</SelectItem>
                        <SelectItem value="daily">Daily</SelectItem>
                        <SelectItem value="weekly">Weekly</SelectItem>
                        <SelectItem value="monthly">Monthly</SelectItem>
                    </SelectContent>
                </Select>
                <Input value={location} onChange={(e) => setLocation(e.target.value)} placeholder="Location" />
                <Input value={notes} onChange={(e) => setNotes(e.target.value)} placeholder="Notes" />
            </CardContent>
            <CardFooter className="flex justify-end gap-2">
                <Button variant="outline" size="sm" onClick={() => onDelete(event.id)}>
                    <Trash2 className="h-4 w-4 mr-2"/>
                    Delete
                </Button>
                <Button size="sm" onClick={handleAddClick}>Add to Calendar</Button>
            </CardFooter>
        </Card>
    );
};


interface EventConfirmationDialogProps {
  isOpen: boolean;
  onClose: () => void;
  parsedEvents: ParsedEvent[];
  onConfirmEvent: (event: NewCalendarEvent) => void;
}

export const EventConfirmationDialog: React.FC<EventConfirmationDialogProps> = ({ isOpen, onClose, parsedEvents, onConfirmEvent }) => {
  const [eventsToConfirm, setEventsToConfirm] = useState<ParsedEvent[]>([]);

  useEffect(() => {
    const sortedEvents = [...parsedEvents].sort((a, b) => {
        const dateA = a.date ? new Date(a.date).getTime() : 0;
        const dateB = b.date ? new Date(b.date).getTime() : 0;
        return dateA - dateB;
    });
    setEventsToConfirm(sortedEvents.map((e, i) => ({ ...e, id: `parsed-${i}` })));
  }, [parsedEvents]);

  const handleAddEvent = (eventToAdd: NewCalendarEvent) => {
    onConfirmEvent(eventToAdd);
  };

  const handleDeleteEvent = (eventId: string) => {
    setEventsToConfirm(prev => prev.filter(e => e.id !== eventId));
  };
  
  const handleConfirmAndAdd = (eventData: NewCalendarEvent, eventId: string) => {
      handleAddEvent(eventData);
      handleDeleteEvent(eventId);
  }

  useEffect(() => {
    if (isOpen && eventsToConfirm.length === 0 && parsedEvents.length > 0) {
      onClose();
    }
  }, [eventsToConfirm, isOpen, onClose, parsedEvents]);

  return (
    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle>Confirm Extracted Events</DialogTitle>
          <DialogDescription>
            The AI found the following events. Review, edit, and add them to your calendar.
          </DialogDescription>
        </DialogHeader>
        <ScrollArea className="h-[60vh] my-4">
          <div className="space-y-4 pr-6">
            {eventsToConfirm.map((event) => (
              <EventCard 
                key={event.id}
                event={event}
                onAdd={(newEvent) => handleConfirmAndAdd(newEvent, event.id)}
                onDelete={() => handleDeleteEvent(event.id)}
              />
            ))}
             {eventsToConfirm.length === 0 && (
                <div className="text-center py-10 text-stone-500">All events have been processed!</div>
            )}
          </div>
        </ScrollArea>
      </DialogContent>
    </Dialog>
  );
};

================
File: src/components/calendar/EventCreatorPopover.tsx
================
// src/components/calendar/EventCreatorPopover.tsx
import React, { useState, useEffect } from 'react';
import { Popover, PopoverContent, PopoverAnchor } from '@/components/ui/popover';
import { AddEventForm } from './AddEventForm';
import { CalendarEvent, NewCalendarEvent } from '@/services/calendarEventService';
import { ClassConfig } from '@/services/classOpenAIConfig';

interface EventCreatorPopoverProps {
    anchorElement: HTMLElement | null;
    startDate: Date;
    endDate: Date;
    onClose: () => void;
    onSave: (event: NewCalendarEvent, id?: string) => Promise<boolean>;
    classes: ClassConfig[];
    eventToEdit?: CalendarEvent | null;
}

export const EventCreatorPopover: React.FC<EventCreatorPopoverProps> = ({ anchorElement, startDate, endDate, onClose, onSave, classes, eventToEdit }) => {
    const [popoverSide, setPopoverSide] = useState<'right' | 'left'>('right');

    useEffect(() => {
        if (anchorElement) {
            const rect = anchorElement.getBoundingClientRect();
            const popoverWidth = 400; 

            if (rect.right + popoverWidth > window.innerWidth) {
                setPopoverSide('left');
            } else {
                setPopoverSide('right');
            }
        }
    }, [anchorElement]);

    if (!anchorElement) return null;

    const defaults = {
        startDate: startDate,
        endDate: endDate,
    };

    const style: React.CSSProperties = {
        position: 'absolute',
        top: `${anchorElement.getBoundingClientRect().top}px`,
        left: `${anchorElement.getBoundingClientRect().right}px`,
    };

    const styleLeft: React.CSSProperties = {
        position: 'absolute',
        top: `${anchorElement.getBoundingClientRect().top}px`,
        left: `${anchorElement.getBoundingClientRect().left}px`,
    };

    return (
        <Popover open={true} onOpenChange={onClose}>
            <PopoverAnchor style={popoverSide === 'right' ? style : styleLeft} />
            <PopoverContent 
                className="w-96 p-0" 
                side={popoverSide} 
                align="start" 
                sideOffset={5}
                collisionPadding={10} 
            >
                <AddEventForm
                    onSave={onSave}
                    onClose={onClose}
                    defaults={defaults}
                    classes={classes}
                    eventToEdit={eventToEdit}
                />
            </PopoverContent>
        </Popover>
    );
};

================
File: src/components/calendar/MiniCalendar.tsx
================
// src/components/calendar/MiniCalendar.tsx
import React from 'react';
import { Button } from '@/components/ui/button';
import { ChevronLeft, ChevronRight } from 'lucide-react';
import { cn } from '@/lib/utils';
import { addDays, addMonths, format, startOfMonth, startOfWeek, subMonths, isSameDay, isSameMonth, endOfWeek, isWithinInterval } from 'date-fns';

const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

interface MiniCalendarProps {
    date: Date;
    setDate: (date: Date) => void;
    view: 'day' | 'week' | 'month';
}

export const MiniCalendar: React.FC<MiniCalendarProps> = ({ date, setDate, view }) => {
    const handlePrevMonth = () => setDate(subMonths(date, 1));
    const handleNextMonth = () => setDate(addMonths(date, 1));

    const monthStart = startOfMonth(date);
    const startDate = startOfWeek(monthStart);
    const today = new Date();
    
    // Logic for week view highlighting
    const weekStart = startOfWeek(date);
    const weekEnd = endOfWeek(date);

    const days = [];
    let day = startDate;
    for (let i = 0; i < 35; i++) { // Display 5 weeks for consistency
        days.push(day);
        day = addDays(day, 1);
    }

    return (
        <div className="p-1">
            <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-semibold text-volcanic-900">
                    {format(date, 'MMMM yyyy')}
                </span>
                <div className="flex items-center -mr-2">
                    <Button variant="ghost" size="icon" className="h-7 w-7" onClick={handlePrevMonth}>
                        <ChevronLeft className="h-4 w-4" />
                    </Button>
                    <Button variant="ghost" size="icon" className="h-7 w-7" onClick={handleNextMonth}>
                        <ChevronRight className="h-4 w-4" />
                    </Button>
                </div>
            </div>
            <div className="grid grid-cols-7 gap-y-1 text-center text-xs text-volcanic-800">
                {daysOfWeek.map(day => <div key={day}>{day[0]}</div>)}
                {days.map((d, index) => {
                    const isInWeek = view === 'week' && isWithinInterval(d, { start: weekStart, end: weekEnd });
                    const isWeekStart = isSameDay(d, weekStart);
                    const isWeekEnd = isSameDay(d, weekEnd);

                    return (
                        <div key={d.toString()} className={cn(
                            "flex items-center justify-center",
                            isInWeek && "bg-stone-100",
                            isWeekStart && "rounded-l-full",
                            isWeekEnd && "rounded-r-full"
                        )}>
                            <button onClick={() => setDate(d)} className={cn(
                                "flex items-center justify-center h-7 w-7 rounded-full hover:bg-stone-200 transition-colors",
                                isSameDay(d, date) && "bg-stone-300 font-bold",
                                isSameDay(d, today) && "bg-stone-700 text-white hover:bg-stone-600",
                                !isSameMonth(d, date) && !isInWeek && "text-stone-300"
                            )}>
                                {d.getDate()}
                            </button>
                        </div>
                    )
                })}
            </div>
        </div>
    );
};

================
File: src/components/calendar/ProcessingLoader.tsx
================
// In: src/components/calendar/ProcessingLoader.tsx

import React from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Loader2 } from 'lucide-react';

interface ProcessingLoaderProps {
  isOpen: boolean;
}

export const ProcessingLoader: React.FC<ProcessingLoaderProps> = ({ isOpen }) => {
  return (
    <Dialog open={isOpen}>
      <DialogContent
        hideCloseButton // This prop will now work correctly
        onEscapeKeyDown={(e) => e.preventDefault()}
        onPointerDownOutside={(e) => e.preventDefault()}
      >
        <DialogHeader>
          <DialogTitle className="text-center">Processing Syllabus</DialogTitle>
          <DialogDescription className="text-center">
            The AI is reading your files and extracting events. This may take a moment...
          </DialogDescription>
        </DialogHeader>
        <div className="flex justify-center items-center py-8">
          <Loader2 className="h-12 w-12 animate-spin text-stone-500" />
        </div>
      </DialogContent>
    </Dialog>
  );
};

================
File: src/components/calendar/SyllabusUploadDialog.tsx
================
// src/components/calendar/SyllabusUploadDialog.tsx
import React, { useState, useCallback } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { UploadCloud, File, Image as ImageIcon, X } from 'lucide-react';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { cn } from '@/lib/utils';
import { ClassConfig } from '@/services/classOpenAIConfig';

interface SyllabusUploadDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onUpload: (files: File[], classId: string) => void;
  classes: ClassConfig[];
}

export const SyllabusUploadDialog: React.FC<SyllabusUploadDialogProps> = ({ isOpen, onClose, onUpload, classes }) => {
  const [files, setFiles] = useState<File[]>([]);
  const [isDragging, setIsDragging] = useState(false);
  const [selectedClassId, setSelectedClassId] = useState<string | null>(null);

  const handleFilesChange = useCallback((newFiles: FileList | null) => {
    if (newFiles) {
     setFiles(prev => [...prev, ...Array.from(newFiles)]);
    }
  }, []);

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDragging(false);
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDragging(false);
    handleFilesChange(e.dataTransfer.files);
  };

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    handleFilesChange(e.target.files);
  };

  const handlePaste = (event: React.ClipboardEvent) => {
    handleFilesChange(event.clipboardData.files);
  };

  const removeFile = (index: number) => {
    setFiles(prev => prev.filter((_, i) => i !== index));
  };

  const handleUploadClick = () => {
    if (files.length > 0 && selectedClassId) {
      onUpload(files, selectedClassId);
      setFiles([]);
      setSelectedClassId(null);
      onClose();
    }
  };

  const handleClose = () => {
    setFiles([]);
    setSelectedClassId(null);
    onClose();
  };

  return (
    <Dialog open={isOpen} onOpenChange={(open) => !open && handleClose()}>
      <DialogContent className="bg-white">
        <DialogHeader className="text-center sm:text-center">
          <DialogTitle>Upload Syllabus</DialogTitle>
          <DialogDescription className="pt-2">
            Upload your syllabus to automatically populate your calendar.
          </DialogDescription>
        </DialogHeader>
        
        <div className="space-y-4">
            <Select onValueChange={setSelectedClassId}>
                <SelectTrigger className="bg-white">
                    <SelectValue placeholder="Select a class for this syllabus..." />
                </SelectTrigger>
                <SelectContent>
                    {classes.map(c => <SelectItem key={c.class_id} value={c.class_id}>{c.class_name}</SelectItem>)}
                </SelectContent>
            </Select>

            <div 
               onDragOver={handleDragOver}
              onDragLeave={handleDragLeave}
              onDrop={handleDrop}
              className={cn(
                "border-2 border-dashed border-stone-300 rounded-lg p-8 text-center transition-colors",
                isDragging && "border-stone-500 bg-stone-100"
              )}
            >
              <input id="file-upload" type="file" className="hidden" multiple onChange={handleFileSelect} accept=".pdf,.docx,.png,.jpg,.jpeg" />
              <label htmlFor="file-upload" className="cursor-pointer">
                 <UploadCloud className="mx-auto h-12 w-12 text-stone-400" />
                <p className="mt-2 text-sm text-muted-foreground">
                  Drag & drop files here, or{' '}
                  <span className="text-stone-700 font-semibold hover:underline">
                    browse
                  </span>
                </p>
              </label>
            </div>

            <div className="relative my-2">
               <div className="absolute inset-0 flex items-center">
                    <div className="w-full border-t border-stone-300" />
                </div>
                <div className="relative flex justify-center text-xs">
                     <span className="bg-white px-2 text-stone-500">OR</span>
                </div>
            </div>

            <Textarea 
                placeholder="Paste screenshots here..." 
                onPaste={handlePaste}
                rows={3}
                className="bg-white"
            />
        </div>

        {files.length > 0 && (
          <div className="mt-4 space-y-2">
            <h4 className="text-sm font-medium">Files to upload:</h4>
            <ScrollArea className="h-32">
                <div className="space-y-2 pr-4">
                    {files.map((file, i) => (
                      <div key={i} className="flex items-center justify-between bg-stone-100 p-2 rounded-md">
                        <div className="flex items-center gap-2 overflow-hidden">
                            {file.type.startsWith('image/') ? <ImageIcon className="h-4 w-4 flex-shrink-0 text-stone-500"/> : <File className="h-4 w-4 flex-shrink-0 text-stone-500"/>}
                             <span className="text-sm truncate" title={file.name}>{file.name}</span>
                        </div>
                        <Button variant="ghost" size="icon" className="h-6 w-6" onClick={() => removeFile(i)}>
                           <X className="h-4 w-4" />
                        </Button>
                      </div>
                    ))}
                </div>
            </ScrollArea>
          </div>
        )}
        
        <DialogFooter className="bg-white border-t pt-4 mt-4">
          <Button variant="outline" onClick={handleClose}>Cancel</Button>
          <Button onClick={handleUploadClick} disabled={files.length === 0 || !selectedClassId}>
            Upload {files.length > 0 && `(${files.length})`}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

================
File: src/components/calendar/types.ts
================
// src/features/calendar/types.ts
import { ClassConfig } from '@/services/classOpenAIConfig';

export interface ClassConfigWithColor extends ClassConfig {
    color: string;
}

================
File: src/components/calendar/ViewEventPopover.tsx
================
// src/components/calendar/ViewEventPopover.tsx
import React, { useState, useEffect } from 'react';
import { Popover, PopoverContent, PopoverAnchor } from '@/components/ui/popover';
import { Button } from '@/components/ui/button';
import { CalendarEvent } from '@/services/calendarEventService';
import { ClassConfigWithColor } from '@/features/calendar/types';
import { format } from 'date-fns';
import { MapPin, Edit, Trash2, X, Book, FileText } from 'lucide-react';
import { cn } from '@/lib/utils';

interface ViewEventPopoverProps {
  event: CalendarEvent;
  eventClass: ClassConfigWithColor | undefined;
  anchorElement: HTMLElement;
  onClose: () => void;
  onEdit: (event: CalendarEvent) => void;
  onDelete: (event: CalendarEvent) => void;
}

export const ViewEventPopover: React.FC<ViewEventPopoverProps> = ({ event, eventClass, anchorElement, onClose, onEdit, onDelete }) => {
  const [popoverSide, setPopoverSide] = useState<'right' | 'left'>('right');

  useEffect(() => {
    if (anchorElement) {
        const rect = anchorElement.getBoundingClientRect();
        const popoverWidth = 320; // from className="w-80"
        const spaceOnRight = window.innerWidth - rect.right;
        const spaceOnLeft = rect.left;

        // If not enough space on the right, but enough on the left, switch side
        if (spaceOnRight < popoverWidth + 10 && spaceOnLeft > popoverWidth + 10) {
            setPopoverSide('left');
        } else {
            setPopoverSide('right');
        }
    }
  }, [anchorElement]);
  
  const startTime = format(new Date(event.event_start), 'p');
  const endTime = event.event_end ? format(new Date(event.event_end), 'p') : '';
  const dayOfWeek = format(new Date(event.event_start), 'eeee, MMMM d');

  return (
    <Popover open={true} onOpenChange={onClose}>
      <PopoverAnchor asChild>
        <div style={{
            position: 'absolute',
            top: `${anchorElement.getBoundingClientRect().top}px`,
            left: `${popoverSide === 'right' ? anchorElement.getBoundingClientRect().right : anchorElement.getBoundingClientRect().left}px`
        }} />
      </PopoverAnchor>
      <PopoverContent
        className="w-80 p-0 shadow-xl"
        side={popoverSide}
        align="start"
        sideOffset={10}
        collisionPadding={10}
      >
        <div className="flex justify-end p-2">
            <Button variant="ghost" size="icon" className="h-7 w-7" onClick={() => onEdit(event)}><Edit className="h-4 w-4" /></Button>
            <Button variant="ghost" size="icon" className="h-7 w-7" onClick={() => onDelete(event)}><Trash2 className="h-4 w-4" /></Button>
            <Button variant="ghost" size="icon" className="h-7 w-7" onClick={onClose}><X className="h-4 w-4" /></Button>
        </div>
        <div className="p-4 pt-0">
            <div className="flex items-center gap-4 mb-2">
                <div className={cn("w-4 h-4 rounded", eventClass?.color || 'bg-gray-500')} />
                <h3 className="text-2xl font-semibold">{event.title}</h3>
            </div>
            <p className="text-sm text-muted-foreground">{dayOfWeek} • {startTime}{endTime && ` - ${endTime}`}</p>
            {event.location && (
                <div className="flex items-center gap-4 mt-2 text-sm text-muted-foreground">
                    <MapPin className="h-4 w-4" />
                    <span>{event.location}</span>
                </div>
            )}
            {eventClass && (
                <div className="flex items-start gap-4 mt-2 text-sm text-muted-foreground">
                    <Book className="h-4 w-4 flex-shrink-0 mt-0.5" />
                    <span>{eventClass.class_name}</span>
                </div>
            )}
            {event.notes && (
                <div className="flex items-start gap-4 mt-2 text-sm text-muted-foreground">
                    <FileText className="h-4 w-4 flex-shrink-0 mt-0.5" />
                    <p className="whitespace-pre-wrap">{event.notes}</p>
                </div>
            )}
        </div>
      </PopoverContent>
    </Popover>
  );
};

================
File: src/components/chat/AttachedFilePill.tsx
================
// src/components/chat/AttachedFilePill.tsx
import React from 'react';
import { FileText, Image as ImageIcon, X } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';

export interface AttachedFile {
  id: string;
  name: string;
  type: string; // Keep as string to handle various MIME types
  content: string; // Base64 encoded content
}

interface AttachedFilePillProps {
  file: AttachedFile;
  onRemove: (fileId: string) => void;
}

export const AttachedFilePill: React.FC<AttachedFilePillProps> = ({ file, onRemove }) => {
  const isImage = file.type.startsWith('image/');
  
  return (
    <div className="group relative flex items-center gap-2 pl-2 pr-1 py-1 rounded-md bg-stone-100 border border-stone-200 max-w-[200px] h-8">
      {isImage ? (
        <ImageIcon className="h-4 w-4 text-stone-500 flex-shrink-0" />
      ) : (
        <FileText className="h-4 w-4 text-stone-500 flex-shrink-0" />
      )}
      <span className="text-sm text-stone-700 truncate flex-grow" title={file.name}>
        {file.name}
      </span>
      <Button
        variant="ghost"
        size="icon"
        className="h-6 w-6 rounded-md flex-shrink-0 text-stone-400 hover:text-stone-700 hover:bg-stone-200 opacity-50 group-hover:opacity-100 transition-opacity"
        onClick={(e) => {
          e.stopPropagation(); // Prevent any parent onClick handlers
          onRemove(file.id);
        }}
      >
        <X className="h-4 w-4" />
        <span className="sr-only">Remove {file.name}</span>
      </Button>
    </div>
  );
};

================
File: src/components/chat/ChatMessage.tsx
================
// src/components/chat/ChatMessage.tsx
import React, { forwardRef } from 'react';
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { MarkdownRenderer } from './MarkdownRenderer';
import { cn } from '@/lib/utils';
import { FileText, Image as ImageIcon } from 'lucide-react';

interface ChatMessageProps {
  content: string;
  isUser: boolean;
  senderName: string;
  avatarUrl?: string | null;
  isSelected?: boolean;
  onClick?: () => void;
  onCitationClick?: (sourceNumber: number) => void;
  attachedFiles?: { name: string; type: string; }[];
}

export const ChatMessage = forwardRef<HTMLDivElement, ChatMessageProps>(({
    content,
    isUser,
    senderName,
    avatarUrl,
    isSelected,
    onClick,
    onCitationClick,
    attachedFiles,
}, ref) => {
  
  const userInitials = senderName.split(' ').map(n => n[0]).join('').toUpperCase();

  return (
    <div 
        ref={ref}
        // --- FIX: Conditionally apply the onClick handler only if the message is NOT from the user.
        onClick={!isUser ? onClick : undefined}
        className={cn(
            "group flex h-fit w-full flex-col gap-2 rounded-md p-2 text-left md:flex-row transition-all duration-200 ease-in-out",
            // --- FIX: Conditionally apply cursor-pointer class only for AI messages.
            !isUser && "cursor-pointer",
            isSelected 
                ? "bg-stone-100 border border-stone-400"
                : "border border-transparent hover:bg-stone-100"
        )}
    >
        {/* Avatar Section */}
        <div className="flex h-9 w-9 flex-shrink-0 items-center justify-center rounded">
            <Avatar className="h-9 w-9">
                {isUser && avatarUrl ? (
                    <AvatarImage src={avatarUrl} alt={senderName} />
                ) : !isUser ? (
                    <AvatarImage src="/chatboteido.png" alt="Eido AI Avatar" />
                ) : null}
                <AvatarFallback className="text-xs bg-stone-200">{userInitials}</AvatarFallback>
            </Avatar>
        </div>

        {/* Message Content Section */}
        <div className="max-w-message items-left flex w-full flex-1 flex-col flex-wrap gap-x-1 md:flex-nowrap">
            <div className="flex w-full flex-col gap-y-1 py-1">
                {/* Render Attached File Pills for User Messages if they exist */}
                {isUser && attachedFiles && attachedFiles.length > 0 && (
                    <div className="flex flex-wrap gap-2 mb-2">
                        {attachedFiles.map((file, index) => (
                            <div key={index} className="flex items-center gap-1.5 pl-2 pr-2 py-1 rounded-md bg-stone-100 border border-stone-200 max-w-[180px]">
                                {file.type.startsWith('image/') ? 
                                    <ImageIcon className="h-3.5 w-3.5 text-stone-500 flex-shrink-0" /> : 
                                    <FileText className="h-3.5 w-3.5 text-stone-500 flex-shrink-0" />
                                }
                                <span className="text-xs text-stone-600 truncate" title={file.name}>
                                    {file.name}
                                </span>
                            </div>
                        ))}
                    </div>
                )}
                
                {/* Render the main text content */}
                {content && (
                    <div className="text-sm text-stone-700 flex flex-col gap-y-1 whitespace-pre-wrap [overflow-wrap:anywhere] md:max-w-4xl">
                       <MarkdownRenderer content={content} onCitationClick={onCitationClick} />
                    </div>
                )}
            </div>
        </div>
    </div>
  );
});

================
File: src/components/chat/HighlightedText.tsx
================
// src/components/chat/HighlightedText.tsx
import React from 'react';

interface HighlightedTextProps {
  text?: string;
  keywords?: string[];
}

export const HighlightedText = ({ text = '', keywords = [] }: HighlightedTextProps) => {
  if (keywords.length === 0 || !text) {
    return <p className="whitespace-pre-wrap">{text}</p>;
  }

  // Escape special characters for each keyword and join them with '|' for the regex
  const escapedKeywords = keywords.map(kw => kw.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'));
  const regex = new RegExp(`(${escapedKeywords.join('|')})`, 'gi');
  const parts = text.split(regex);

  return (
    <p className="whitespace-pre-wrap">
      {parts.map((part, index) => {
        // Check if the part is one of the keywords (case-insensitive)
        const isHighlight = keywords.some(kw => kw.toLowerCase() === part.toLowerCase());
        if (isHighlight) { 
          return (
            <mark key={index} className="bg-yellow-300/60 text-black/90 px-1 rounded-sm">
              {part}
            </mark>
          );
        } else {
          return <span key={index}>{part}</span>;
        }
      })}
    </p>
  );
};

================
File: src/components/chat/MarkdownRenderer.tsx
================
// src/components/chat/MarkdownRenderer.tsx
import React, { useEffect, useRef } from 'react';

interface MarkdownRendererProps {
  content: string;
  onCitationClick?: (sourceNumber: number) => void;
}

export function MarkdownRenderer({ content, onCitationClick }: MarkdownRendererProps) {
  
  const renderMarkdown = (text: string) => {
    let rendered = text;
    rendered = rendered.replace(/(\*\*|__)(.*?)\1/g, '<strong>$2</strong>');
    rendered = rendered.replace(/(?<!\S)(\*|_)(?!\s)((?:(?!\1).)+)(?<!\s)\1(?!\S)/g, '<em>$2</em>');
    rendered = rendered.replace(/(?:^\s*-\s+(.+)$\n?)+/gm, match => `<ul class="list-disc pl-5 my-2 space-y-0.5">${match.split('\n').filter(Boolean).map(line => `<li>${line.replace(/^\s*-\s+/, '')}</li>`).join('')}</ul>`);
    rendered = rendered.replace(/(?:^\s*\d+\.\s+(.+)$\n?)+/gm, match => `<ol class="list-decimal pl-5 my-2 space-y-0.5">${match.split('\n').filter(Boolean).map(line => `<li>${line.replace(/^\s*\d+\.\s+/, '')}</li>`).join('')}</ol>`);
    rendered = rendered.replace(/`([^`]+)`/g, '<code class="bg-gray-100 dark:bg-gray-800 px-1 rounded text-sm">$1</code>');
    
    // --- FIX START ---
    // The previous regex was replacing all instances with the same number.
    // By using a replacer function (the second argument to .replace), we can process each match individually.
    // 'match' is the full string (e.g., "[Source 1]"), and 'numberStr' is the captured digit (e.g., "1").
    // This ensures each citation is rendered with its correct, unique number.
    rendered = rendered.replace(/\[Source (\d+)]/gi, (match, numberStr) => {
      return `<sub><span class="source-citation" data-source-number="${numberStr}">${match}</span></sub>`;
    });
    // --- FIX END ---
    
    rendered = rendered.replace(/\n/g, '<br />');
    
    return rendered;
  };

  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const container = containerRef.current;
    if (container && onCitationClick) {
      const handleClick = (event: MouseEvent) => {
        const target = event.target as HTMLElement;
        if (target.classList.contains('source-citation')) {
          const sourceNumber = target.getAttribute('data-source-number');
          if (sourceNumber) {
            event.preventDefault();
            event.stopPropagation(); 
            onCitationClick(parseInt(sourceNumber, 10));
          }
        }
      };
      container.addEventListener('click', handleClick);
      return () => {
        if (container) {
          container.removeEventListener('click', handleClick);
        }
      };
    }
  }, [content, onCitationClick]);
  
  const citationStyles = `
    .source-citation {
      font-family: sans-serif;
      color: hsl(210, 80%, 55%);
      font-weight: 600;
      cursor: pointer;
      padding: 0 3px;
      text-decoration: none;
      border-radius: 4px;
      transition: color 0.2s, background-color 0.2s;
    }
    .source-citation:hover {
      background-color: hsl(210, 100%, 95%);
      text-decoration: underline;
    }
  `;

  return (
    <>
      <style>{citationStyles}</style>
      <div 
        ref={containerRef}
        className="markdown-content prose dark:prose-invert prose-sm max-w-none"
        dangerouslySetInnerHTML={{ __html: renderMarkdown(content) }}
      />
    </>
  );
}

================
File: src/components/classes/ClassCard.tsx
================
// src/components/datasets/ClassCard.tsx
import React from 'react';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { MoreHorizontal, Trash2 } from 'lucide-react';

interface ClassCardProps {
  id: string;
  className: string; // Renamed from 'name'
  files: number;
  size: string;
  isSelected: boolean;
  onClick: () => void;
  onDelete: (id: string, className: string) => void; // Renamed 'name' to 'className'
}

export const ClassCard: React.FC<ClassCardProps> = ({ id, className, files, size, isSelected, onClick, onDelete }) => { // Renamed 'name' to 'className'
  const handleDeleteClick = (e: React.MouseEvent) => {
    e.stopPropagation(); // Prevent the card's onClick from firing
    onDelete(id, className); // Renamed 'name' to 'className'
  };

  return (
    <div
      onClick={onClick}
      className={cn(
        "group p-3 rounded-lg cursor-pointer transition-all border relative",
        isSelected
          ? 'bg-stone-200 border-stone-400'
          : 'bg-stone-100 border-stone-200 hover:bg-stone-200 hover:border-stone-300'
    )}>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button
            variant="ghost"
            size="icon"
            className="absolute top-2 right-2 h-7 w-7 opacity-0 group-hover:opacity-100 transition-opacity"
            onClick={(e) => e.stopPropagation()}
          >
            <MoreHorizontal className="h-4 w-4" />
            <span className="sr-only">Class Options</span>
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end">
          <DropdownMenuItem
            onClick={handleDeleteClick}
            className="text-destructive focus:text-destructive focus:bg-destructive/10"
          >
            <Trash2 className="mr-2 h-4 w-4" />
            Delete Class
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>

      <div className="mb-2">
        <h3 className="font-semibold text-sm text-stone-700 truncate pr-8" title={className}>{className}</h3> {/* Renamed 'name' to 'className' */}
      </div>
      <div className="text-xs text-muted-foreground">
        <span>{files} Files</span>
        <span className="mx-2">•</span>
        <span>{size}</span>
      </div>
    </div>
  );
};

================
File: src/components/classes/ClassesHeader.tsx
================
// src/components/classes/ClassesHeader.tsx
import React from 'react';
import { Button } from '@/components/ui/button';
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb";
import { FolderPlus } from 'lucide-react';
import { ClassConfig } from '@/services/classOpenAIConfig';

interface ClassesHeaderProps {
  breadcrumbs: { name: string; id: string | null }[];
  selectedClass: ClassConfig | null;
  onBreadcrumbClick: (index: number) => void;
  onNewFolderClick: () => void;
  onHeaderButtonClick: () => void;
}

export const ClassesHeader: React.FC<ClassesHeaderProps> = ({
  breadcrumbs,
  selectedClass,
  onBreadcrumbClick,
  onNewFolderClick,
  onHeaderButtonClick,
}) => {
  return (
    <div className="flex justify-between items-center">
      <Breadcrumb>
        <BreadcrumbList>
          {breadcrumbs.map((crumb, index) => (
            <div key={crumb.id || 'home'} className="flex items-center">
              <BreadcrumbItem>
                {index < breadcrumbs.length - 1 ? (
                  <BreadcrumbLink
                    href="#"
                    onClick={(e) => {
                      e.preventDefault();
                      onBreadcrumbClick(index);
                    }}
                    className="text-muted-foreground hover:text-stone-800"
                  >
                    {crumb.name}
                  </BreadcrumbLink>
                ) : (
                  <BreadcrumbPage className="font-semibold text-stone-800">
                    {crumb.name}
                  </BreadcrumbPage>
                )}
              </BreadcrumbItem>
              {index < breadcrumbs.length - 1 && <BreadcrumbSeparator />}
            </div>
          ))}
        </BreadcrumbList>
      </Breadcrumb>
      <div className="flex gap-2">
        {selectedClass && (
          <Button variant="outline" onClick={onNewFolderClick}>
            <FolderPlus className="mr-2 h-4 w-4" />
            New Folder
          </Button>
        )}
        <Button onClick={onHeaderButtonClick}>
          {selectedClass ? "Upload Files" : "New Class"}
        </Button>
      </div>
    </div>
  );
};

================
File: src/components/classes/ClassesPageDialogs.tsx
================
// src/components/classes/ClassesPageDialogs.tsx
import React from 'react';
import { CreateClassDialog } from '@/components/classes/CreateClassDialog';
import { NewFolderDialog } from '@/components/classes/NewFolderDialog';
import { UploadDialog } from '@/components/classes/UploadDialog';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Loader2 } from 'lucide-react';
import { ClassConfig } from '@/services/classOpenAIConfig';
import { FileType } from '@/features/files/types';

interface ClassesPageDialogsProps {
    isCreateClassOpen: boolean;
    setIsCreateClassOpen: (isOpen: boolean) => void;
    handleCreateClass: (className: string) => void;
    isSubmitting: boolean;

    isNewFolderOpen: boolean;
    setIsNewFolderOpen: (isOpen: boolean) => void;
    handleCreateFolder: (folderName: string) => void;

    isUploadOpen: boolean;
    setIsUploadOpen: (isOpen: boolean) => void;
    handleUploadFiles: (files: File[]) => void;

    filesToDelete: FileType[];
    setFilesToDelete: (files: FileType[]) => void;
    isDeleting: boolean;
    confirmDelete: () => void;

    isDeleteClassConfirmationOpen: boolean;
    setIsDeleteClassConfirmationOpen: (isOpen: boolean) => void;
    classToDelete: ClassConfig | null;
    isDeletingClass: boolean;
    confirmDeleteClass: () => void;
}

export const ClassesPageDialogs: React.FC<ClassesPageDialogsProps> = ({
    isCreateClassOpen, setIsCreateClassOpen, handleCreateClass, isSubmitting,
    isNewFolderOpen, setIsNewFolderOpen, handleCreateFolder,
    isUploadOpen, setIsUploadOpen, handleUploadFiles,
    filesToDelete, setFilesToDelete, isDeleting, confirmDelete,
    isDeleteClassConfirmationOpen, setIsDeleteClassConfirmationOpen, classToDelete, isDeletingClass, confirmDeleteClass
}) => {
    return (
        <>
            <CreateClassDialog
                isOpen={isCreateClassOpen}
                onClose={() => setIsCreateClassOpen(false)}
                onSubmit={handleCreateClass}
                isLoading={isSubmitting}
            />
            <NewFolderDialog
                isOpen={isNewFolderOpen}
                onClose={() => setIsNewFolderOpen(false)}
                onSubmit={handleCreateFolder}
                isLoading={isSubmitting}
            />
            <UploadDialog
                isOpen={isUploadOpen}
                onClose={() => setIsUploadOpen(false)}
                onUpload={(fileList) => handleUploadFiles(Array.from(fileList))}
                isUploading={isSubmitting}
            />
            <AlertDialog open={filesToDelete.length > 0} onOpenChange={(open) => !open && setFilesToDelete([])}>
                <AlertDialogContent>
                    <AlertDialogHeader><AlertDialogTitle>Confirm Deletion</AlertDialogTitle><AlertDialogDescription>Are you sure you want to delete {filesToDelete.length} selected file(s)? This action cannot be undone.</AlertDialogDescription></AlertDialogHeader>
                    <AlertDialogFooter>
                        <AlertDialogCancel disabled={isDeleting}>Cancel</AlertDialogCancel>
                        <AlertDialogAction onClick={confirmDelete} className="bg-destructive text-destructive-foreground hover:bg-destructive/90" disabled={isDeleting}>{isDeleting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}Delete</AlertDialogAction>
                    </AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>
            <AlertDialog open={isDeleteClassConfirmationOpen} onOpenChange={setIsDeleteClassConfirmationOpen}>
                <AlertDialogContent>
                    <AlertDialogHeader><AlertDialogTitle>Delete Class "{classToDelete?.class_name}"?</AlertDialogTitle><AlertDialogDescription>Are you sure you want to delete the class "{classToDelete?.class_name}"? This will permanently remove the class and all associated files, folders, chats, flashcards, and quizzes. This action cannot be undone.</AlertDialogDescription></AlertDialogHeader>
                    <AlertDialogFooter>
                        <AlertDialogCancel disabled={isDeletingClass}>Cancel</AlertDialogCancel>
                        <AlertDialogAction onClick={confirmDeleteClass} className="bg-destructive text-destructive-foreground hover:bg-destructive/90" disabled={isDeletingClass}>{isDeletingClass && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}Delete Class</AlertDialogAction>
                    </AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>
        </>
    );
};

================
File: src/components/classes/ClassesPageToasts.tsx
================
// src/components/classes/ClassesPageToasts.tsx
import React from 'react';
import { UploadProgressToast, UploadingFile } from '@/components/classes/UploadProgressToast';
import { DeletionProgressToast, DeletingFile } from '@/components/classes/DeletionProgressToast';

interface ClassesPageToastsProps {
    uploadingFiles: UploadingFile[];
    deletingFiles: DeletingFile[];
    setUploadingFiles: (files: UploadingFile[]) => void;
    setDeletingFiles: (files: DeletingFile[]) => void;
}

export const ClassesPageToasts: React.FC<ClassesPageToastsProps> = ({
    uploadingFiles,
    deletingFiles,
    setUploadingFiles,
    setDeletingFiles,
}) => {
    return (
        <>
            <UploadProgressToast files={uploadingFiles} onClear={() => setUploadingFiles([])} />
            <DeletionProgressToast files={deletingFiles} onClear={() => setDeletingFiles([])} />
        </>
    );
};

================
File: src/components/classes/ClassesView.tsx
================
// src/components/classes/ClassesView.tsx
import React from 'react';
import { Separator } from '@/components/ui/separator';
import { Skeleton } from '@/components/ui/skeleton';
import { ClassCard } from '@/components/classes/ClassCard';
import { ClassConfig } from '@/services/classOpenAIConfig';

interface ClassesViewProps {
  isLoading: boolean;
  classesWithStats: (ClassConfig & { files: number; size: string })[];
  onClassClick: (classData: ClassConfig) => void;
  onDeleteClassClick: (classData: ClassConfig) => void;
}

const SkeletonGrid = () => (
  <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
    {Array.from({ length: 4 }).map((_, i) => (
      <div key={i} className="space-y-2">
        <Skeleton className="h-20 w-full" />
        <Skeleton className="h-4 w-3/4" />
      </div>
    ))}
  </div>
);

export const ClassesView: React.FC<ClassesViewProps> = ({
  isLoading,
  classesWithStats,
  onClassClick,
  onDeleteClassClick,
}) => {
  return (
    <div className="space-y-4">
      <h2 className="text-sm uppercase font-semibold text-muted-foreground">Classes</h2>
      <Separator className="my-4" />
      {isLoading ? (
        <SkeletonGrid />
      ) : classesWithStats.length > 0 ? (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {classesWithStats.map((classItem) => (
            <ClassCard
              key={classItem.class_id}
              id={classItem.class_id}
              className={classItem.class_name}
              files={classItem.files}
              size={classItem.size}
              isSelected={false}
              onClick={() => onClassClick(classItem)}
              onDelete={() => onDeleteClassClick(classItem)}
            />
          ))}
        </div>
      ) : (
        <p className="text-sm text-muted-foreground">No classes found. Click "New Class" to get started.</p>
      )}
    </div>
  );
};

================
File: src/components/classes/CreateClassDialog.tsx
================
// src/components/datasets/CreateClassDialog.tsx
import React, { useState } from 'react';
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Loader2 } from 'lucide-react';

interface CreateClassDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (className: string) => void;
  isLoading: boolean;
}

export const CreateClassDialog: React.FC<CreateClassDialogProps> = ({ isOpen, onClose, onSubmit, isLoading }) => {
  const [className, setClassName] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (className.trim()) {
      onSubmit(className.trim());
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      {/* 1. Increased the max-width to allow description to fit on two lines. */}
      <DialogContent className="sm:max-w-[400px]">
        <form onSubmit={handleSubmit}>
          {/* 2. Applied text-center directly to Title and Description for better alignment control. */}
          <DialogHeader>
            <DialogTitle className="text-center">Create New Class</DialogTitle>
            <DialogDescription className="text-center pt-2">
              Classes are the top-level containers for your course materials. Give your new class a name to get started.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="flex items-center justify-center gap-4">
              <Label htmlFor="name">
                Name
              </Label>
              <Input
                id="name"
                value={className}
                onChange={(e) => setClassName(e.target.value)}
                className="w-64"
                placeholder="e.g., ITP-216: Applied Python"
                disabled={isLoading}
                // 3. Added autoComplete="off" to prevent browser suggestions.
                autoComplete="off"
              />
            </div>
          </div>
          <DialogFooter className="sm:justify-center">
            <Button type="button" variant="ghost" onClick={onClose} disabled={isLoading}>Cancel</Button>
            <Button type="submit" disabled={isLoading || !className.trim()}>
              {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              {isLoading ? 'Creating...' : 'Create Class'}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
};

================
File: src/components/classes/DeletionProgressToast.tsx
================
// src/components/classes/DeletionProgressToast.tsx
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Loader2, CheckCircle2, AlertCircle, ChevronUp, ChevronDown, X, Trash2 } from 'lucide-react';
import { AnimatePresence, motion } from 'framer-motion';
import { cn } from '@/lib/utils';

export interface DeletingFile {
  id: string;
  name: string;
  status: 'pending' | 'deleting' | 'complete' | 'error';
  errorMessage?: string;
}

interface DeletionProgressToastProps {
  files: DeletingFile[];
  onClear: () => void;
}

const StatusIcon = ({ status }: { status: DeletingFile['status'] }) => {
  switch (status) {
    case 'pending':
    case 'deleting':
      return <Loader2 className="h-4 w-4 animate-spin text-muted-foreground" />;
    case 'complete':
      return <CheckCircle2 className="h-4 w-4 text-green-500" />;
    case 'error':
      return <AlertCircle className="h-4 w-4 text-destructive" />;
    default:
      return <Trash2 className="h-4 w-4 text-muted-foreground" />;
  }
};

export const DeletionProgressToast: React.FC<DeletionProgressToastProps> = ({ files, onClear }) => {
  const [isExpanded, setIsExpanded] = useState(true);
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    if (files.length > 0) {
      setIsVisible(true);
    }
  }, [files]);

  const completedCount = files.filter(f => f.status === 'complete').length;
  const inProgress = files.some(f => f.status === 'pending' || f.status === 'deleting');
  const hasErrors = files.some(f => f.status === 'error');

  useEffect(() => {
    let timer: NodeJS.Timeout;
    // Hide the toast automatically 5 seconds after all operations are finished.
    if (isVisible && files.length > 0 && !inProgress) {
      timer = setTimeout(() => {
        setIsVisible(false);
        onClear(); // Clear the parent state after hiding
      }, 5000);
    }
    return () => clearTimeout(timer);
  }, [isVisible, inProgress, hasErrors, files.length, onClear]);

  const getHeaderText = () => {
    if (inProgress) {
      return `Deleting ${files.length} item(s)...`;
    }
    if (hasErrors) {
      const errorCount = files.filter(f => f.status === 'error').length;
      return `Deletion complete with ${errorCount} error(s)`;
    }
    return `${completedCount} of ${files.length} items deleted`;
  };

  return (
    <AnimatePresence>
      {isVisible && (
        <motion.div
          initial={{ opacity: 0, y: 50, scale: 0.9 }}
          animate={{ opacity: 1, y: 0, scale: 1 }}
          exit={{ opacity: 0, y: 20, scale: 0.95 }}
          transition={{ duration: 0.3, ease: 'easeOut' }}
          className="fixed bottom-4 right-4 z-50 w-80" // Positioned on the bottom-right
        >
          <Card className="shadow-2xl">
            <CardHeader className="flex flex-row items-center justify-between p-3 border-b">
              <p className="text-sm font-semibold">{getHeaderText()}</p>
              <div className="flex items-center">
                <Button variant="ghost" size="icon" className="h-6 w-6" onClick={() => setIsExpanded(!isExpanded)}>
                  {isExpanded ? <ChevronDown className="h-4 w-4" /> : <ChevronUp className="h-4 w-4" />}
                </Button>
                <Button variant="ghost" size="icon" className="h-6 w-6" onClick={() => { setIsVisible(false); onClear(); }}>
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </CardHeader>
            {isExpanded && (
              <CardContent className="p-0 max-h-48 overflow-y-auto">
                <ul className="divide-y">
                  {files.map(file => (
                    <li key={file.id} className="p-3 flex items-center justify-between text-sm">
                      <div className="flex items-center gap-2 overflow-hidden">
                        <StatusIcon status={file.status} />
                        <span className="truncate" title={file.name}>{file.name}</span>
                      </div>
                    </li>
                  ))}
                </ul>
              </CardContent>
            )}
          </Card>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

================
File: src/components/classes/FileGridCard.tsx
================
// src/components/datasets/FileGridCard.tsx
import React from 'react';
import { Card, CardContent, CardFooter } from '@/components/ui/card';
import { FileType } from '@/features/files/types';
import { cn, formatFileSize } from '@/lib/utils';
import { FileText, Image as ImageIcon, Video, Loader2, AlertTriangle } from 'lucide-react';

interface FileGridCardProps {
  file: FileType;
  onClick: () => void;
  isSelected: boolean;
}

const FilePreview = ({ file }: { file: FileType }) => {
  // 1. Show a loading spinner if processing
  if (file.status === 'processing') {
    return <Loader2 className="h-12 w-12 text-muted-foreground animate-spin" />;
  }

  // 2. Show an error icon if processing failed
  if (file.status === 'error') {
    return <AlertTriangle className="h-12 w-12 text-destructive" />;
  }

  // 3. Prioritize the generated thumbnail for any file type if it exists
  if (file.thumbnail_url) {
    return <img src={file.thumbnail_url} alt={`Preview of ${file.name}`} className="w-full h-full object-cover object-top" />;
  }

  // 4. Fallback for native images if thumbnail failed but a file URL exists
  if (file.type.startsWith('image/') && file.url) {
    return <img src={file.url} alt={`Preview of ${file.name}`} className="w-full h-full object-cover object-top" />;
  }
  
  // 5. Fallback to icons for everything else
  if (file.type.startsWith('video/')) {
    return <Video className="h-12 w-12 text-gray-400" />;
  }
  return <FileText className="h-12 w-12 text-gray-400" />;
};

// src/components/datasets/FileGridCard.tsx

export const FileGridCard: React.FC<FileGridCardProps> = ({ file, onClick, isSelected }) => {
  console.log(`[5. RENDER] FileGridCard rendering for: ${file.name}, Status: ${file.status}`);
  const isImage = file.type.startsWith('image/');

  // --- 1. APPLY a fixed height to the main Card element ---
  return (
    <Card
      onClick={file.status === 'processing' ? undefined : onClick}
      className={cn(
        'group transition-all overflow-hidden flex flex-col h-[19rem]', // MODIFIED: Add a fixed height like 'h-56'
        file.status === 'processing' ? 'cursor-not-allowed opacity-60' : 'cursor-pointer',
        isSelected
          ? 'ring-2 ring-inset ring-stone-400 border-stone-400'
          : 'border-stone-200 hover:shadow-md hover:border-stone-300'
      )}
    >
      {/* --- 2. MODIFY the CardContent to correctly fill the remaining space --- */}
      <CardContent className="flex-1 flex items-center justify-center p-0 bg-stone-50 overflow-hidden min-h-0">
        <FilePreview file={file} />
      </CardContent>
      <CardFooter className="flex-col items-start p-3 bg-white border-t">
        <div className="w-full flex items-center gap-2">
            <div className="flex-shrink-0">
                {isImage ? <ImageIcon className="h-4 w-4 text-muted-foreground" /> : <FileText className="h-4 w-4 text-muted-foreground" />}
            </div>
            <p className="text-sm font-medium text-stone-800 truncate" title={file.name}>
                {file.name}
            </p>
        </div>
        <p className="text-xs text-muted-foreground mt-1 ml-[22px]">
            {file.status === 'processing' ? 'Processing...' : formatFileSize(file.size)}
        </p>
      </CardFooter>
    </Card>
  );
};

================
File: src/components/classes/FilePreview.tsx
================
// src/components/classes/FilePreview.tsx
import React from 'react';
import { Button } from '@/components/ui/button';
import { ExternalLink, Trash2, X, Loader2 } from 'lucide-react';
import { FileType } from '@/features/files/types';
import { cn } from '@/lib/utils';

interface FilePreviewProps {
  previewedFile: FileType | null;
  onDeleteClick: (files: FileType[]) => void;
  onClosePreview: () => void;
}

export const FilePreview: React.FC<FilePreviewProps> = ({
  previewedFile,
  onDeleteClick,
  onClosePreview,
}) => {
  const renderPreviewContent = () => {
    if (!previewedFile) {
      return (
        <div className="w-full h-full flex items-center justify-center p-4 bg-cover bg-center" style={{ backgroundImage: "url('/background6.png')" }}>
          <div className="p-4 bg-black/10 backdrop-blur-sm rounded-lg">
            <p className="font-medium text-white drop-shadow-md">Select a file to preview</p>
          </div>
        </div>
      );
    }

    if (previewedFile.status === 'processing' || (!previewedFile.url && previewedFile.status !== 'error')) {
      return (
        <div className="w-full h-full flex flex-col items-center justify-center p-4 text-center">
          <Loader2 className="h-12 w-12 animate-spin text-muted-foreground mb-4" />
          <p className="font-medium text-foreground">File is processing...</p>
          <p className="text-sm text-muted-foreground">A preview will be available shortly.</p>
        </div>
      );
    }

    if (previewedFile.status === 'error') {
      return (
        <div className="w-full h-full flex flex-col items-center justify-center p-4 text-center">
          <X className="h-12 w-12 text-destructive mb-4" />
          <p className="font-medium text-destructive-foreground">Processing Failed</p>
          <p className="text-sm text-muted-foreground">Please try uploading this file again.</p>
        </div>
      );
    }

    const fileType = previewedFile.type || '';
    const fileUrl = previewedFile.url || '';

    if (fileType.startsWith('image/')) {
      return <img src={fileUrl} alt={previewedFile.name} className="w-full h-full object-cover" />;
    }
    if (fileType === 'application/pdf') {
      return <iframe src={`${fileUrl}#toolbar=0`} className="w-full h-full scale-105" title={previewedFile.name}></iframe>;
    }
    return <pre className="w-full h-full text-sm whitespace-pre-wrap p-4">{`Preview for this file type is not supported.`}</pre>;
  };

  return (
    <div className="w-4/12 flex flex-col rounded-lg border border-marble-400 bg-white overflow-hidden">
      <header className="flex items-center justify-between p-4 border-b border-marble-400 flex-shrink-0">
        <div className="flex items-center gap-2 overflow-hidden">
          {previewedFile ? (
            <a
              href={`/api/serve-file?id=${previewedFile.file_id}`}
              target="_blank"
              rel="noopener noreferrer"
              className="font-semibold text-sm text-muted-foreground truncate hover:text-stone-800 hover:underline"
              title={`Open ${previewedFile.name} in a new tab`}
            >
              {previewedFile.name}
            </a>
          ) : (
            <span className="font-semibold text-sm text-muted-foreground truncate">
              Select a file to preview
            </span>
          )}
        </div>
        <div className="flex items-center">
          <a href={`/api/serve-file?id=${previewedFile?.file_id}`} target="_blank" rel="noopener noreferrer" className={!previewedFile ? 'pointer-events-none' : ''} title="Open in new tab">
            <Button variant="ghost" size="icon" className="text-stone-400 hover:bg-transparent hover:text-stone-900 focus-visible:ring-0 focus-visible:ring-offset-0" onClick={() => previewedFile?.url && window.open(previewedFile.url, '_blank')} disabled={!previewedFile?.url} title="Open in new tab"><ExternalLink className="h-4 w-4" /></Button>
          </a>
          <Button variant="ghost" size="icon" className="text-stone-400 hover:bg-transparent hover:text-stone-900 focus-visible:ring-0 focus-visible:ring-offset-0" onClick={() => previewedFile && onDeleteClick([previewedFile])} disabled={!previewedFile}><Trash2 className="h-4 w-4" /></Button>
          <Button variant="ghost" size="icon" className="text-stone-400 hover:bg-transparent hover:text-stone-900 focus-visible:ring-0 focus-visible:ring-offset-0" onClick={onClosePreview} disabled={!previewedFile}><X className="h-4 w-4" /></Button>
        </div>
      </header>
      <div className={cn("flex-grow m-4 rounded-md border border-marble-400 flex items-center justify-center overflow-hidden transition-all bg-white")}>
        {renderPreviewContent()}
      </div>
    </div>
  );
};

================
File: src/components/classes/FilesView.tsx
================
// src/components/classes/FilesView.tsx
import React from 'react';
import { Separator } from '@/components/ui/separator';
import { Skeleton } from '@/components/ui/skeleton';
import { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group';
import { List, LayoutGrid, Loader2 } from 'lucide-react';
import { FolderCard } from '@/components/classes/FolderCard';
import { FileGridCard } from '@/components/classes/FileGridCard';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { FolderType, FileType } from '@/features/files/types';
import { cn } from '@/lib/utils';
import { ClassConfig } from '@/services/classOpenAIConfig';

interface FilesViewProps {
  isLoading: boolean;
  foldersWithStats: (FolderType & { files: number; size: string; folderName: string | null })[];
  filesForTable: FileType[];
  viewMode: 'list' | 'grid';
  setViewMode: (mode: 'list' | 'grid') => void;
  onFolderClick: (folderData: FolderType) => void;
  onFileRowClick: (file: FileType) => void;
  previewedFile: FileType | null;
  classes: ClassConfig[];
  getFolderPath: (file: FileType) => string;
  selectedClass: ClassConfig | null;
  recentFiles: FileType[];
}

const SkeletonGrid = () => (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {Array.from({ length: 4 }).map((_, i) => (
            <div key={i} className="space-y-2">
                <Skeleton className="h-20 w-full" />
                <Skeleton className="h-4 w-3/4" />
            </div>
        ))}
    </div>
);

export const FilesView: React.FC<FilesViewProps> = ({
  isLoading,
  foldersWithStats,
  filesForTable,
  viewMode,
  setViewMode,
  onFolderClick,
  onFileRowClick,
  previewedFile,
  classes,
  getFolderPath,
  selectedClass,
  recentFiles,
}) => {
  return (
    <>
      {selectedClass && (
        <div className="space-y-4">
          <h2 className="text-sm uppercase font-semibold text-muted-foreground">Folders</h2>
          <Separator className="my-4" />
          {isLoading ? <SkeletonGrid /> : foldersWithStats.length > 0 ? (
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              {foldersWithStats.map((folder) => (
                <FolderCard key={folder.folder_id} {...folder} folderName={folder.name!} isSelected={false} onClick={() => onFolderClick(folder)} />
              ))}
            </div>
          ) : (<p className="text-sm text-muted-foreground">No folders in this directory.</p>)}
        </div>
      )}

      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <h2 className="text-sm uppercase font-semibold text-muted-foreground">{selectedClass ? "Files" : "Recent Files"}</h2>
          <ToggleGroup type="single" variant="outline" size="sm" value={viewMode} onValueChange={(value) => { if (value) setViewMode(value as 'list' | 'grid'); }} disabled={isLoading}>
            <ToggleGroupItem value="list" aria-label="List view"><List className="h-4 w-4" /></ToggleGroupItem>
            <ToggleGroupItem value="grid" aria-label="Grid view"><LayoutGrid className="h-4 w-4" /></ToggleGroupItem>
          </ToggleGroup>
        </div>
        <Separator className="my-4" />
        {isLoading ? (<div className="text-center p-8"><Loader2 className="h-8 w-8 animate-spin mx-auto text-muted-foreground" /></div>) :
          filesForTable.length === 0 ? (<div className="text-center p-8 text-muted-foreground">No files to display.</div>) :
          viewMode === 'list' ? (
            <div className="border rounded-lg overflow-hidden">
              <Table>
                <TableHeader><TableRow className="bg-stone-50 hover:bg-stone-50">
                  <TableHead>Name</TableHead>
                  <TableHead>Class</TableHead>
                  <TableHead>Folder Path</TableHead>
                  <TableHead className="text-right w-28">Date Added</TableHead>
                </TableRow></TableHeader>
                <TableBody>
                  {filesForTable.map((file) => (
                    <TableRow key={file.file_id} onClick={() => onFileRowClick(file)} className={cn("text-stone-800 h-[60px] cursor-pointer", previewedFile?.file_id === file.file_id && "ring-2 ring-inset ring-stone-400 bg-stone-100")}>
                      <TableCell className="font-medium"><div className="flex items-center">{file.name}</div></TableCell>
                      <TableCell className="text-muted-foreground"><div className="[display:-webkit-box] [-webkit-line-clamp:2] [-webkit-box-orient:vertical] overflow-hidden leading-tight">{classes.find(c => c.class_id === file.class_id)?.class_name || '...'}</div></TableCell>
                      <TableCell className="text-muted-foreground"><div className="[display:-webkit-box] [-webkit-line-clamp:2] [-webkit-box-orient:vertical] overflow-hidden leading-tight">{getFolderPath(file)}</div></TableCell>
                      <TableCell className="text-right text-muted-foreground text-sm">{new Date(file.created_at).toLocaleDateString()}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          ) : (
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
              {filesForTable.map((file) => (
                <FileGridCard
                  key={file.file_id}
                  file={file}
                  onClick={() => onFileRowClick(file)}
                  isSelected={previewedFile?.file_id === file.file_id}
                />
              ))}
            </div>
          )}
      </div>
    </>
  );
};

================
File: src/components/classes/FolderCard.tsx
================
// src/components/datasets/FolderCard.tsx
import React from 'react';
import { cn } from '@/lib/utils';
import { Folder } from 'lucide-react';

interface FolderCardProps {
  folderName: string; // Renamed from 'name'
  files: number;
  size: string;
  isSelected: boolean;
  onClick: () => void;
}

export const FolderCard: React.FC<FolderCardProps> = ({ folderName, files, size, isSelected, onClick }) => { // Renamed 'name' to 'folderName'
  return (
    <div
        onClick={onClick}
        className={cn(
        "p-3 rounded-lg cursor-pointer transition-all border",
        isSelected ? 'bg-stone-200 border-stone-400' : 'bg-stone-100 border-stone-200 hover:bg-stone-200 hover:border-stone-300'
    )}>
      <div className="flex items-center mb-2">
        <Folder className="h-5 w-5 mr-2 text-stone-600 flex-shrink-0" />
        <h3 className="font-semibold text-sm text-stone-700 truncate" title={folderName}>{folderName}</h3> {/* Renamed 'name' to 'folderName' */}
      </div>
      <div className="text-xs text-muted-foreground pl-7">
        <span>{files} Files</span>
        <span className="mx-2">•</span>
        <span>{size}</span>
      </div>
    </div>
  );
};

================
File: src/components/classes/NewFolderDialog.tsx
================
// src/components/datasets/NewFolderDialog.tsx
import React, { useState } from 'react';
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Loader2 } from 'lucide-react';

interface NewFolderDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (folderName: string) => void;
  isLoading: boolean;
}

export const NewFolderDialog: React.FC<NewFolderDialogProps> = ({ isOpen, onClose, onSubmit, isLoading }) => {
  const [folderName, setFolderName] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (folderName.trim()) {
      onSubmit(folderName.trim());
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[425px]">
        <form onSubmit={handleSubmit}>
          <DialogHeader>
            <DialogTitle>Create New Folder</DialogTitle>
            <DialogDescription>
              Enter a name for your new folder within this class.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="name" className="text-right">
                Name
              </Label>
              <Input
                id="name"
                value={folderName}
                onChange={(e) => setFolderName(e.target.value)}
                className="col-span-3"
                placeholder="e.g., Lecture Notes"
                disabled={isLoading}
              />
            </div>
          </div>
          <DialogFooter>
             <Button type="button" variant="ghost" onClick={onClose} disabled={isLoading}>Cancel</Button>
            <Button type="submit" disabled={isLoading || !folderName.trim()}>
              {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              {isLoading ? 'Creating...' : 'Create Folder'}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
};

================
File: src/components/classes/UploadDialog.tsx
================
// src/components/datasets/UploadDialog.tsx
import React, { useState, useCallback } from 'react';
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { UploadCloud, File, X, Loader2 } from 'lucide-react';

interface UploadDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onUpload: (files: File[]) => void;
  isUploading: boolean;
}

export const UploadDialog: React.FC<UploadDialogProps> = ({ isOpen, onClose, onUpload, isUploading }) => {
  const [files, setFiles] = useState<File[]>([]);

  const onDrop = useCallback((acceptedFiles: File[]) => {
    setFiles(prev => [...prev, ...acceptedFiles]);
  }, []);

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => e.preventDefault();
  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    onDrop(Array.from(e.dataTransfer.files));
  };
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      onDrop(Array.from(e.target.files));
    }
  };
  const removeFile = (index: number) => {
    setFiles(prev => prev.filter((_, i) => i !== index));
  };

  const handleUploadClick = () => {
    onUpload(files);
  };
  
  // Reset state when dialog is closed
  const handleOpenChange = (open: boolean) => {
      if (!open) {
          setFiles([]);
          onClose();
      }
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleOpenChange}>
      <DialogContent>
        <DialogHeader>
          {/* 1. Centered the DialogTitle */}
          <DialogTitle className="text-center">Upload Files</DialogTitle>
          {/* 2. Centered the DialogDescription and added padding */}
          <DialogDescription className="text-center pt-2">
            Add files to the current directory. PDF, DOCX, and TXT are supported for indexing.
          </DialogDescription>
        </DialogHeader>
        
        <div 
          onDragOver={handleDragOver}
          onDrop={handleDrop}
          className="mt-4 border-2 border-dashed border-stone-300 rounded-lg p-8 text-center"
        >
          <UploadCloud className="mx-auto h-12 w-12 text-stone-400" />
          <p className="mt-2 text-sm text-muted-foreground">
            Drag & drop files here, or{' '}
            <label htmlFor="file-upload" className="text-primary font-semibold cursor-pointer hover:underline">
              browse
            </label>
          </p>
          <input id="file-upload" type="file" className="hidden" multiple onChange={handleFileChange} />
        </div>

        {files.length > 0 && (
          <div className="mt-4 space-y-2 max-h-48 overflow-y-auto">
            <h4 className="text-sm font-medium">Files to upload:</h4>
            {files.map((file, i) => (
              <div key={i} className="flex items-center justify-between bg-stone-100 p-2 rounded-md">
                <div className="flex items-center gap-2 overflow-hidden">
                    <File className="h-4 w-4 flex-shrink-0"/>
                    <span className="text-sm truncate">{file.name}</span>
                </div>
                <Button variant="ghost" size="icon" className="h-6 w-6" onClick={() => removeFile(i)}>
                  <X className="h-4 w-4" />
                </Button>
              </div>
            ))}
          </div>
        )}
        
        <DialogFooter>
          <Button variant="ghost" onClick={onClose} disabled={isUploading}>Cancel</Button>
          <Button onClick={handleUploadClick} disabled={files.length === 0 || isUploading}>
            {isUploading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {isUploading ? "Uploading..." : `Upload ${files.length} File(s)`}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

================
File: src/components/classes/UploadProgressToast.tsx
================
// src/components/classes/UploadProgressToast.tsx
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Loader2, CheckCircle2, AlertCircle, ChevronUp, ChevronDown, X } from 'lucide-react';
import { AnimatePresence, motion } from 'framer-motion';
import { cn } from '@/lib/utils';

export interface UploadingFile {
  id: string; // A unique temporary ID for the upload batch
  name: string;
  status: 'pending' | 'uploading' | 'processing' | 'complete' | 'error';
  errorMessage?: string;
}

interface UploadProgressToastProps {
  files: UploadingFile[];
  onClear: () => void;
}

const StatusIcon = ({ status }: { status: UploadingFile['status'] }) => {
  switch (status) {
    case 'pending':
    case 'uploading':
    case 'processing':
      return <Loader2 className="h-4 w-4 animate-spin text-muted-foreground" />;
    case 'complete':
      return <CheckCircle2 className="h-4 w-4 text-green-500" />;
    case 'error':
      return <AlertCircle className="h-4 w-4 text-destructive" />;
    default:
      return null;
  }
};

export const UploadProgressToast: React.FC<UploadProgressToastProps> = ({ files, onClear }) => {
  const [isExpanded, setIsExpanded] = useState(true);
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    if (files.length > 0) {
      setIsVisible(true);
    }
  }, [files]);

  const completedCount = files.filter(f => f.status === 'complete').length;
  const inProgress = files.some(f => f.status === 'pending' || f.status === 'uploading' || f.status === 'processing');
  const hasErrors = files.some(f => f.status === 'error');

  useEffect(() => {
    let timer: NodeJS.Timeout;
    // If there are files, and none are in progress, and there are no errors, hide after 5 seconds.
    if (isVisible && files.length > 0 && !inProgress && !hasErrors) {
      timer = setTimeout(() => {
        setIsVisible(false);
        onClear(); // Clear the files from parent state after hiding
      }, 5000);
    }
    return () => clearTimeout(timer);
  }, [isVisible, inProgress, hasErrors, files.length, onClear]);
  
  const getHeaderText = () => {
    if (inProgress) {
        const processingCount = files.filter(f => f.status === 'processing').length;
        const uploadingCount = files.filter(f => f.status === 'uploading' || f.status === 'pending').length;
        if (processingCount > 0) return `Processing ${processingCount} of ${files.length}...`
        return `Uploading ${uploadingCount} of ${files.length}...`;
    }
    if (hasErrors) return `Upload complete with ${files.filter(f => f.status === 'error').length} error(s)`;
    return `${completedCount} of ${files.length} uploads complete`;
  };

  return (
    <AnimatePresence>
      {isVisible && (
        <motion.div
          initial={{ opacity: 0, y: 50, scale: 0.9 }}
          animate={{ opacity: 1, y: 0, scale: 1 }}
          exit={{ opacity: 0, y: 20, scale: 0.95 }}
          transition={{ duration: 0.3, ease: 'easeOut' }}
          className="fixed bottom-4 right-4 z-50 w-80"
        >
          <Card className="shadow-2xl">
            <CardHeader className="flex flex-row items-center justify-between p-3 border-b">
              <p className="text-sm font-semibold">{getHeaderText()}</p>
              <div className="flex items-center">
                <Button variant="ghost" size="icon" className="h-6 w-6" onClick={() => setIsExpanded(!isExpanded)}>
                  {isExpanded ? <ChevronDown className="h-4 w-4" /> : <ChevronUp className="h-4 w-4" />}
                </Button>
                <Button variant="ghost" size="icon" className="h-6 w-6" onClick={() => { setIsVisible(false); onClear(); }}>
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </CardHeader>
            {isExpanded && (
              <CardContent className="p-0 max-h-48 overflow-y-auto">
                <ul className="divide-y">
                  {files.map(file => (
                    <li key={file.id} className="p-3 flex items-center justify-between text-sm">
                      <div className="flex items-center gap-2 overflow-hidden">
                        <StatusIcon status={file.status} />
                        <span className="truncate" title={file.name}>{file.name}</span>
                      </div>
                    </li>
                  ))}
                </ul>
              </CardContent>
            )}
          </Card>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

================
File: src/components/dashboard/AssignmentsCard.tsx
================
// src/components/dashboard/AssignmentsCard.tsx
import React from 'react';

interface AssignmentsCardProps {
  onClick: () => void;
}

export const AssignmentsCard: React.FC<AssignmentsCardProps> = ({ onClick }) => {
  return (
    <section 
      // MODIFICATION: Corrected border and background colors
      className="relative flex flex-col rounded-lg p-4 md:p-8 xl:flex-row overflow-hidden border assignments-background-image border-blue-200"
    >
      <div className="flex flex-col gap-y-3 w-full xl:w/2 z-10">
        <h2 className="text-h5-m lg:text-h5 font-variable font-[420]">Assignments</h2>
        
        <p className="text-p font-body md:max-w-xs">Generate practice problems, get step-by-step solutions, and master your course material.</p>

        <div onClick={onClick} className="w-fit pb-3 pt-4 focus:outline-none disabled:cursor-not-allowed inline-block cursor-pointer">
          <div className="relative flex grow">
            <div className="z-10 flex grow gap-x-2.5">
              <div className="h-full min-h-cell-md max-h-cell-md flex grow group/cell transition-all">
                {/* MODIFICATION: Corrected button color */}
                <span className="bg-blue-500 h-full min-h-cell-md max-h-cell-md transition-all bg-clip-padding origin-top-right -mr-0.5 w-3 rounded-l-[6px] border-transparent"></span>
                 <div className="bg-blue-500 text-white h-full min-h-cell-md max-h-cell-md truncate flex grow justify-between items-center transition-colors bg-clip-padding">
                  <div className="z-10 w-full"><span className="px-2 justify-center flex w-full items-center transition-all"><span className="text-p font-body">Go to Assignments</span></span></div>
                </div>
                 <span className="bg-blue-500 h-full min-h-cell-md max-h-cell-md transition-all bg-clip-padding origin-top-right w-6 -skew-x-[21deg] rounded-tr-[10px] rounded-br-[4px] border-transparent"></span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

================
File: src/components/dashboard/CommandBar.tsx
================
// src/components/dashboard/CommandBar.tsx
import React from 'react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Terminal } from 'lucide-react';

interface CommandBarProps {
  command: string;
  setCommand: (value: string) => void;
  handleCommandSubmit: (e: React.FormEvent) => void;
}

export const CommandBar: React.FC<CommandBarProps> = ({ command, setCommand, handleCommandSubmit }) => {
  return (
    <div className="rounded-lg border border-marble-400 overflow-hidden bg-white">
      <div className="p-4">
        <form onSubmit={handleCommandSubmit} className="flex items-center gap-2">
          <Terminal className="h-5 w-5 text-volcanic-800" />
          <Input
            type="text"
            placeholder="Enter a command..."
            value={command}
            onChange={(e) => setCommand(e.target.value)}
            className="flex-grow bg-white border-0 focus-visible:ring-0 focus-visible:ring-offset-0"
          />
          <Button type="submit" variant="outline" size="sm">
            Run
          </Button>
        </form>
      </div>
    </div>
  );
};

================
File: src/components/dashboard/DashboardCalendar.tsx
================
// src/components/dashboard/DashboardCalendar.tsx
import React, { useState, useEffect, useMemo } from 'react';
import { useCalendarData } from '@/hooks/useCalendarData';
import { CalendarHeader } from '@/components/calendar/CalendarHeader';
import { WeekView } from '@/components/calendar/views/WeekView';
import { DayView } from '@/components/calendar/views/DayView';
import { MonthView } from '@/components/calendar/views/MonthView';
import { startOfDay, subWeeks, addWeeks, addDays, subDays, addMonths, subMonths } from 'date-fns';

interface DashboardCalendarProps {
  onAddEventClick: () => void;
}

export const DashboardCalendar: React.FC<DashboardCalendarProps> = ({ onAddEventClick }) => {
  const [calendarDate, setCalendarDate] = useState(startOfDay(new Date()));
  const [calendarView, setCalendarView] = useState('week'); // 'day', 'week', 'month'
  const { classes, events, isLoadingClasses } = useCalendarData();
  const [selectedClasses, setSelectedClasses] = useState<string[]>([]);

  useEffect(() => {
    if (!isLoadingClasses && classes.length > 0) {
      setSelectedClasses(classes.map(c => c.class_id));
    }
  }, [isLoadingClasses, classes]);

  const filteredEvents = useMemo(() => {
    return events.filter(e => e.class_id && selectedClasses.includes(e.class_id));
  }, [events, selectedClasses]);

  const handlePrev = () => {
    switch (calendarView) {
      case 'day':
        setCalendarDate(prev => subDays(prev, 1));
        break;
      case 'week':
        setCalendarDate(prev => subWeeks(prev, 1));
        break;
      case 'month':
        setCalendarDate(prev => subMonths(prev, 1));
        break;
    }
  };

  const handleNext = () => {
    switch (calendarView) {
      case 'day':
        setCalendarDate(prev => addDays(prev, 1));
        break;
      case 'week':
        setCalendarDate(prev => addWeeks(prev, 1));
        break;
      case 'month':
        setCalendarDate(prev => addMonths(prev, 1));
        break;
    }
  };
  
  const handleToday = () => setCalendarDate(startOfDay(new Date()));

  const renderCalendarView = () => {
    switch (calendarView) {
      case 'day':
        return <DayView 
                  currentDate={calendarDate} 
                  classes={classes} 
                  events={filteredEvents}
                  draftEvent={null}
                  isCreatingEvent={false}
                  onEventCreateStart={() => {}}
                  onEventCreateUpdate={() => {}}
                  onEventCreateEnd={() => {}}
                  onEventClick={() => {}}
                />;
      case 'month':
        return <MonthView 
                  currentDate={calendarDate}
                  classes={classes}
                  events={filteredEvents}
                  onDelete={() => {}}
                  onDayClick={(date) => {
                    setCalendarView('day');
                    setCalendarDate(date);
                  }}
                  onEventClick={() => {}}
                />;
      case 'week':
      default:
        return <WeekView
                  currentDate={calendarDate}
                  classes={classes}
                  events={filteredEvents}
                  draftEvent={null}
                  isCreatingEvent={false}
                  onEventCreateStart={() => {}}
                  onEventCreateUpdate={() => {}}
                  onEventCreateEnd={() => {}}
                  onEventClick={() => {}}
                />;
    }
  };

  return (
    <div className="rounded-lg border border-marble-400 bg-white overflow-hidden flex flex-col h-[450px]">
      <CalendarHeader
        view={calendarView}
        currentDate={calendarDate}
        onViewChange={setCalendarView}
        onPrev={handlePrev}
        onNext={handleNext}
        onToday={handleToday}
        onAddEvent={onAddEventClick}
      />
      <div className="flex-1 overflow-auto">
        {renderCalendarView()}
      </div>
    </div>
  );
};

================
File: src/components/dashboard/DashboardSidebar.tsx
================
// src/components/dashboard/DashboardSidebar.tsx
import React from 'react';

interface DashboardSidebarProps {
  onLinkClick: (path: string) => void;
}

export const DashboardSidebar: React.FC<DashboardSidebarProps> = ({ onLinkClick }) => {
  return (
    <div className="hidden h-full md:flex">
      <div className="flex h-full flex-col justify-between overflow-y-auto border-marble-400 bg-marble-100 md:rounded-lg md:border md:w-42 w-full lg:w-56 px-4 md:py-6">
        <nav className="hidden w-full flex-col gap-y-8 md:flex">
          <div className="flex flex-col gap-y-1">
            <span className="text-overline uppercase font-code font-bold text-dark-blue">Platform</span>
            <span onClick={() => onLinkClick('/')} className="text-p font-body flex items-center py-0.5 text-volcanic-900 cursor-pointer">
              <div className="mr-3 h-2 w-2 rounded-full bg-coral-500"></div>
              <span className="font-medium">Dashboard</span>
            </span>
            <span onClick={() => onLinkClick('/classes')} className="text-p font-body flex items-center py-0.5 text-volcanic-800 hover:text-volcanic-900 cursor-pointer">
              <span>Classes</span>
            </span>
            <span onClick={() => onLinkClick('/calendar')} className="text-p font-body flex items-center py-0.5 text-volcanic-800 hover:text-volcanic-900 cursor-pointer">
              <span>Calendar</span>
            </span>
            <span onClick={() => onLinkClick('/console')} className="text-p font-body flex items-center py-0.5 text-volcanic-800 hover:text-volcanic-900 cursor-pointer">
              <span>Console</span>
            </span>
          </div>
          <div className="flex flex-col gap-y-1">
            <span className="text-overline uppercase font-code font-bold text-dark-blue">Tools</span>
            <span onClick={() => onLinkClick('/oracle')} className="text-p font-body flex items-center py-0.5 text-volcanic-800 hover:text-volcanic-900 cursor-pointer">
              <span>Oracle</span>
            </span>
            <span onClick={() => onLinkClick('/assignments')} className="text-p font-body flex items-center py-0.5 text-volcanic-800 hover:text-volcanic-900 cursor-pointer">
              <span>Assignments</span>
            </span>
            <span onClick={() => onLinkClick('/codepad')} className="text-p font-body flex items-center py-0.5 text-volcanic-800 hover:text-volcanic-900 cursor-pointer">
              <span>Codepad</span>
            </span>
          </div>
          <div className="flex flex-col gap-y-1">
            <span className="text-overline uppercase font-code font-bold text-dark-blue">Settings</span>
            <span onClick={() => onLinkClick('/profile')} className="text-p font-body flex items-center py-0.5 text-volcanic-800 hover:text-volcanic-900 cursor-pointer">
              <span>Profile</span>
            </span>
            <span onClick={() => onLinkClick('/billing')} className="text-p font-body flex items-center py-0.5 text-volcanic-800 hover:text-volcanic-900 cursor-pointer">
              <span>Billing</span>
            </span>
          </div>
        </nav>
      </div>
    </div>
  );
};

================
File: src/components/dashboard/OracleCard.tsx
================
// src/components/dashboard/OracleCard.tsx
import React from 'react';

interface OracleCardProps {
  onClick: () => void;
}

export const OracleCard: React.FC<OracleCardProps> = ({ onClick }) => {
  return (
    <section 
      className="relative flex flex-col rounded-lg p-4 md:p-8 xl:flex-row overflow-hidden border oracle-background-image border-blue-200"
      // MODIFICATION: Removed the inline style for flexBasis. This is critical.
    >
      {/* Left side: Text Content. z-10 ensures it sits above the image element. */}
      <div className="flex flex-col gap-y-3 w-full xl:w/2 z-10">
        <div className="text-label uppercase font-code">
          <span className="text-blue-700 bg-white border border-blue-200 flex w-fit items-center rounded px-2 py-1">New</span>
        </div>
        <h2 className="text-h5-m lg:text-h5 font-variable font-[420]">Oracle</h2>
        
        <p className="text-p font-body md:max-w-xs">Get instant, cited answers from your course content. Plus, install the Chrome extension to access Oracle from anywhere.</p>

        <div onClick={onClick} className="w-fit pb-3 pt-4 focus:outline-none disabled:cursor-not-allowed inline-block cursor-pointer">
          <div className="relative flex grow">
            <div className="z-10 flex grow gap-x-2.5">
              <div className="h-full min-h-cell-md max-h-cell-md flex grow group/cell transition-all">
                <span className="bg-blue-500 h-full min-h-cell-md max-h-cell-md transition-all bg-clip-padding origin-top-right -mr-0.5 w-3 rounded-l-[6px] border-transparent"></span>
                 <div className="bg-blue-500 text-white h-full min-h-cell-md max-h-cell-md truncate flex grow justify-between items-center transition-colors bg-clip-padding">
                  <div className="z-10 w-full"><span className="px-2 justify-center flex w-full items-center transition-all"><span className="text-p font-body">Go to Oracle</span></span></div>
                </div>
                 <span className="bg-blue-500 h-full min-h-cell-md max-h-cell-md transition-all bg-clip-padding origin-top-right w-6 -skew-x-[21deg] rounded-tr-[10px] rounded-br-[4px] border-transparent"></span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Right side: Image. Positioned absolutely to float on top of the background. */}
      <div className="hidden xl:block absolute top-0 right-0 h-full w-2/3 lg:w-1/2">
        <img
          src="/oracle_screenshot.png"
          alt="Eido AI Oracle Interface Screenshot"
          // This positioning creates the bleed effect.
          className="absolute top-10 left-6 -right-20 -bottom-4 w-auto h-auto object-contain rounded-lg shadow-xl"
        />
      </div>
    </section>
  );
};

================
File: src/components/dashboard/WelcomeBanner.tsx
================
// src/components/dashboard/WelcomeBanner.tsx
import React from 'react';
import type { User } from '@supabase/supabase-js';

interface WelcomeBannerProps {
  user: User | null;
  profile: { full_name: string | null } | null;
}

export const WelcomeBanner: React.FC<WelcomeBannerProps> = ({ user, profile }) => {
  const welcomeName = user ? profile?.full_name?.split(' ')[0] || user.email?.split('@')[0] || 'User' : '';

  return (
    <div className="mb-8 border-b border-marble-400 bg-cover md:mb-10 flex-shrink-0 bg-mushroom-50 bg-[url(/images/whiteCellBackground.svg)]">
      <div className="flex w-full flex-col overflow-hidden md:flex-row">
        <div className="flex flex-col px-4 pt-10 pb-4 md:w-2/3 md:px-9 md:pt-16 lg:px-10">
          <p className="text-h3-m lg:text-h2 font-variable font-[420] mb-6 text-volcanic-700">
            Welcome{user ? `, ${welcomeName}` : ''}!
          </p>
          <h1 className="text-h5-m lg:text-h4 font-variable font-[420] mb-3 text-volcanic-900">What is Eido AI?</h1>
          <p className="text-p font-body pb-6 text-volcanic-900 md:pb-10">
          Eido AI is your educational copilot, transforming your coursework into a powerful suite of intelligent tools. Get started with Eido AI by taking a tour or exploring the tools below.
          </p>
        </div>
        <div className="hidden items-end md:flex md:w-1/3">
          <div className="relative max-h-[250px] min-w-[300px] items-end ">
            <span style={{boxSizing: "border-box", display: "inline-block", overflow: "hidden", width: "initial", height: "initial", background: "none", opacity: 1, border: 0, margin: 0, padding: 0, position: "relative", maxWidth: "100%"}}>
              <img alt="" src="https://dashboard.cohere.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FdashboardPebbles.73d9a103.png&w=3840&q=75" decoding="async" style={{position: "absolute", top: 0, left: 0, bottom: 0, right: 0, boxSizing: "border-box", padding: 0, border: "none", margin: "auto", display: "block", width: 0, height: 0, minWidth: "100%", maxWidth: "100%", minHeight: "100%", maxHeight: "100%"}} />
            </span>
          </div>
        </div>
      </div>
    </div>
  );
};

================
File: src/components/layout/sidebar/SidebarAccount.tsx
================
// src/components/layout/sidebar/SidebarAccount.tsx
import { NavLink } from "react-router-dom";
import { LogIn } from "lucide-react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { useEffect, useState } from "react";
import { supabase } from "@/integrations/supabase/client";
import type { User } from "@supabase/supabase-js"; // Ensure User type is imported

interface ProfileData {
  full_name: string | null;
  avatar_url: string | null;
  // Add other fields from your 'profiles' table if needed
}

interface SidebarAccountProps {
  loading: boolean; // This prop comes from useSidebarState
  user: User | null;    // This prop comes from useSidebarState
}

export function SidebarAccount({ loading, user }: SidebarAccountProps) {
  const [profile, setProfile] = useState<ProfileData | null>(null);
  
  useEffect(() => {
    const fetchProfile = async () => {
      if (!user || !user.id) { // Check if user and user.id exist
        setProfile(null); // Clear profile if no user
        return;
      }
      
      try {
        // MODIFICATION: Querying 'profiles' table using 'user_id' column
        const { data, error } = await supabase
          .from('profiles')
          .select('full_name, avatar_url') // Select only needed fields
          .eq('user_id', user.id) // Match against the 'user_id' column in 'profiles' table
          .single(); // Expecting a single profile per user
          
        if (error) {
          // PGRST116 means no row was found, which is not necessarily an error if profile creation is optional/deferred
          if (error.code === 'PGRST116') {
            console.log("SidebarAccount: No profile found for user:", user.id);
            setProfile(null);
          } else {
            console.error("SidebarAccount: Error fetching profile:", error);
            setProfile(null); // Set profile to null on error
          }
        } else {
          setProfile(data as ProfileData);
        }
      } catch (error) {
        console.error("SidebarAccount: Exception in profile fetch:", error);
        setProfile(null); // Set profile to null on exception
      }
    };
    
    if (user) { // Only fetch if user object exists
        fetchProfile();
    } else {
        setProfile(null); // Clear profile if user is null (e.g., on logout)
    }

  }, [user]); // Depend on user object

  if (loading) {
    return null; 
  }
  
  if (!user) {
    return (
      <NavLink
        to="/auth"
        className={({ isActive }) => 
          `flex items-center px-4 py-2 rounded-md transition-colors ${
            isActive 
              ? "bg-sidebar-accent text-sidebar-accent-foreground font-medium" 
              : "text-sidebar-foreground hover:bg-sidebar-accent/50"
          }`
        }
      >
        <LogIn className="mr-2 h-5 w-5" />
        <span>Sign In</span>
      </NavLink>
    );
  }
  
  const userInitials = profile?.full_name
    ? profile.full_name.split(' ').map((n: string) => n[0]).join('').toUpperCase()
    : user.email?.charAt(0).toUpperCase() || "U";
    
  return (
    <NavLink 
      to="/account"
      className={({ isActive }) => 
        `flex items-center p-2 rounded-md transition-colors ${
          isActive 
            ? "bg-sidebar-accent text-sidebar-accent-foreground font-medium" 
            : "text-sidebar-foreground hover:bg-sidebar-accent/50"
        }`
      }
    >
      <Avatar className="w-8 h-8 rounded-full bg-sidebar-accent">
        {profile?.avatar_url && (
          <AvatarImage src={profile.avatar_url} alt={profile?.full_name || user.email || "User Avatar"} />
        )}
        <AvatarFallback className="text-xs font-medium">{userInitials}</AvatarFallback>
      </Avatar>
      <div className="ml-2 overflow-hidden">
        <p className="font-medium truncate">{user.email || "User"}</p>
        <p className="text-xs opacity-70 truncate">Signed In</p>
      </div>
    </NavLink>
  );
}

================
File: src/components/layout/sidebar/SidebarHeader.tsx
================
import { X, GraduationCap } from "lucide-react";
import { Button } from "@/components/ui/button";

interface SidebarHeaderProps {
  onClose: () => void;
  activeClassName: string | null;
}

export function SidebarHeader({ onClose, activeClassName }: SidebarHeaderProps) {
  return (
    <div className="flex flex-col p-4 border-b border-sidebar-border">
      <div className="flex items-center justify-between mb-2">
        <div className="flex items-center">
          <div className="w-8 h-8 rounded-md flex items-center justify-center mr-2">
            <img
              src="/eido-icon.png"
              alt="Eido AI Logo"
              className="h-8 w-8 object-contain"
            />
          </div>
          <span className="font-semibold text-xl">Eido</span>
        </div>
        <Button
          variant="ghost"
          size="icon"
          onClick={onClose}
          className="md:hidden text-sidebar-foreground hover:bg-sidebar-accent"
        >
          <X className="h-5 w-5" />
        </Button>
      </div>

      {/* Display active class at the top under Eido */}
      {activeClassName && (
        <div className="py-1 px-1">
          <div className="text-sm font-medium text-sidebar-foreground truncate">
            {activeClassName}
          </div>
        </div>
      )}
    </div>
  );
}

================
File: src/components/layout/sidebar/SidebarNavigation.tsx
================
// src/components/layout/sidebar/SidebarNavigation.tsx
import { ReactNode } from "react";
import { NavLink } from "react-router-dom";

interface NavItem {
  icon: ReactNode;
  label: string;
  to: string;
  exact?: boolean;
}

interface SidebarNavigationProps {
  navItems: NavItem[];
}

export function SidebarNavigation({ navItems }: SidebarNavigationProps) {
  return (
    <ul className="space-y-2 px-2">
      {navItems.map((item) => (
        <li key={item.to}>
          <NavLink
            to={item.to}
            end={item.exact}
            // This state prop signals navigation to the Oracle page.
            state={item.to === '/oracle' ? { fromNavigation: true } : undefined}
            className={({ isActive }) => 
              `flex items-center px-4 py-2 rounded-md transition-colors ${
                isActive 
                  ? "bg-sidebar-accent text-sidebar-accent-foreground font-medium" 
                  : "text-sidebar-foreground hover:bg-sidebar-accent/50"
              }`
            }
          >
            {item.icon}
            <span>{item.label}</span>
          </NavLink>
        </li>
      ))}
    </ul>
  );
}

================
File: src/components/layout/sidebar/SidebarWidgets.tsx
================
import { ReactNode } from "react";
import { NavLink } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { LayoutGrid, Loader2 } from "lucide-react";
import { WidgetType } from "@/hooks/use-widgets";

interface WidgetNavItem {
  icon: ReactNode;
  label: string;
  to: string;
  widgetId: WidgetType;
}

interface SidebarWidgetsProps {
  activeClassName: string | null;
  widgetNavItems: WidgetNavItem[];
  isLoading: boolean;
  onAddWidgetsClick: () => void;
}

export function SidebarWidgets({
  activeClassName,
  widgetNavItems,
  isLoading,
  onAddWidgetsClick
}: SidebarWidgetsProps) {
  return (
    <div className="pt-4">
      <div className="px-4 py-2 flex justify-between items-center">
        <h3 className="text-xs font-semibold text-sidebar-foreground/70 uppercase">
          {activeClassName ? "Class Widgets" : "Available Widgets"}
        </h3>
        {activeClassName && (
          <Button 
            onClick={onAddWidgetsClick}
            variant="ghost"
            size="sm"
            className="flex items-center gap-1 h-7 text-sidebar-foreground hover:text-primary hover:bg-sidebar-accent/80"
          >
            <LayoutGrid className="h-4 w-4" />
            <span>Add</span>
          </Button>
        )}
      </div>
      
      {isLoading ? (
        <div className="flex items-center justify-center p-4">
          <Loader2 className="h-4 w-4 mr-2 animate-spin" />
          <span className="text-xs text-muted-foreground">Loading...</span>
        </div>
      ) : widgetNavItems.length > 0 ? (
        <ul className="space-y-2 px-2">
          {widgetNavItems.map((item) => (
            <li key={item.to}>
              <NavLink
                to={item.to}
                className={({ isActive }) => 
                  `flex items-center px-4 py-2 rounded-md transition-colors ${
                    isActive 
                      ? "bg-sidebar-accent text-sidebar-accent-foreground font-medium" 
                      : "text-sidebar-foreground hover:bg-sidebar-accent/50"
                  }`
                }
              >
                {item.icon}
                <span>{item.label}</span>
              </NavLink>
            </li>
          ))}
        </ul>
      ) : (
        <p className="text-xs text-muted-foreground px-4 py-2">
          {activeClassName 
            ? "No widgets added yet" 
            : "Select a class to use widgets"}
        </p>
      )}
    </div>
  );
}

================
File: src/components/layout/AppLayout.tsx
================
// src/components/layout/AppLayout.tsx

import { useState, useEffect } from "react";
import { Outlet, useLocation } from "react-router-dom";
import { AppSidebar } from "./AppSidebar";
import { Menu } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Toaster } from "@/components/ui/toaster";
import { Header } from "./Header"; // Import the centralized Header component

export function AppLayout() {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  // Store activeClass with its 'class_name' and 'class_id'
  const [activeClass, setActiveClass] = useState<{ class_id: string; class_name: string; } | null>(null);
  const location = useLocation();

  // Load active class from session storage and handle homepage clearing
  useEffect(() => {
    if (location.pathname === '/') {
      // Clear active class when on homepage
      setActiveClass(null);
      sessionStorage.removeItem('activeClass');
    } else {
      // Get active class from session storage on other pages
      const storedActiveClass = sessionStorage.getItem('activeClass');
      if (storedActiveClass) {
        try {
          // Parse the stored class data, expecting 'class_name' now
          const parsedClass: { class_id: string; class_name: string; } = JSON.parse(storedActiveClass);
          setActiveClass(parsedClass);
        } catch (e: unknown) { // Catch as unknown
          console.error("Error parsing stored active class", e);
        }
      }
    }
  }, [location.pathname]);

  return (
    <div className="flex h-screen overflow-hidden bg-background">
      {/* Mobile sidebar */}
      <div className="md:hidden">
        {isSidebarOpen && (
          <div
            className="fixed inset-0 z-40 bg-background/80 backdrop-blur-sm"
            onClick={() => setIsSidebarOpen(false)}
          />
        )}

        <div className={`fixed inset-y-0 left-0 z-50 w-64 transform transition-transform duration-200 ${
          isSidebarOpen ? 'translate-x-0' : '-translate-x-full'
        }`}>
          <AppSidebar onClose={() => setIsSidebarOpen(false)} />
        </div>
      </div>

      {/* Desktop sidebar */}
      <div className="hidden md:block">
        <AppSidebar onClose={() => {}} />
      </div>

      {/* Main content */}
      <div className="flex-1 flex flex-col overflow-hidden">
        {/* Unified Header for both mobile (when sidebar closed) and desktop */}
        {/* This header will be consistent across all pages using AppLayout */}
        <header className="flex-shrink-0">
          {/* Mobile menu button and Eido logo will still be here for mobile if sidebar is closed */}
          <div className="flex items-center px-4 py-2 border-b md:hidden">
            <Button
              variant="ghost"
              size="icon"
              onClick={() => setIsSidebarOpen(true)}
            >
              <Menu className="h-6 w-6" />
            </Button>
            <div className="flex items-center mx-auto">
              <div className="w-8 h-8 rounded-md flex items-center justify-center mr-2">
                <img
                  src="/eido-icon.png"
                  alt="Eido AI Logo"
                  className="h-8 w-8 object-contain"
                />
              </div>
              <h1 className="text-lg font-semibold">Eido</h1>
            </div>
            <div className="w-9"></div> {/* Empty div for centering */}
          </div>
          {/* The main Header component, always visible on desktop */}
          <div className="hidden md:block">
            <Header />
          </div>
        </header>

        {/* Content area */}
        <main className="flex-1 overflow-auto p-4 md:p-8">
          <Outlet />
          <Toaster />
        </main>
      </div>
    </div>
  );
}

================
File: src/components/layout/AppSidebar.tsx
================
// src/components/layout/AppSidebar.tsx
import { Home, CalendarDays, Terminal, Compass } from "lucide-react"; // Using Compass for Oracle
import { useSidebarState } from "@/hooks/use-sidebar-state";
import { SidebarHeader } from "./sidebar/SidebarHeader";
import { SidebarNavigation } from "./sidebar/SidebarNavigation";
import { SidebarAccount } from "./sidebar/SidebarAccount";

interface AppSidebarProps {
  onClose: () => void;
}

export function AppSidebar({ onClose }: AppSidebarProps) {
  const { user, loading, activeClassName } = useSidebarState();

  // MODIFIED: All navigation items are now in a single, static list.
  const navItems = [
    {
      icon: <Home className="mr-2 h-5 w-5" />,
      label: "Dashboard",
      to: "/",
      exact: true,
      section: "Platform",
    },
    {
      icon: <CalendarDays className="mr-2 h-5 w-5" />,
      label: "Datasets",
      to: "/datasets",
      exact: false,
      section: "Platform",
    },
    {
      icon: <Compass className="mr-2 h-5 w-5" />, // Using a more appropriate icon for Oracle
      label: "Oracle",
      to: "/oracle",
      exact: false,
      section: "Tools",
    },
    // Add other future tools like Chrono, Codex here under the "Tools" section
  ];

  return (
    <div className="flex flex-col h-screen w-64 bg-sidebar text-sidebar-foreground border-r border-sidebar-border">
      <SidebarHeader onClose={onClose} activeClassName={activeClassName} />

      <nav className="flex-1 overflow-auto py-4">
        {/* MODIFIED: Simplified navigation structure */}
        <div className="px-4 py-2">
          <h3 className="text-xs font-semibold text-sidebar-foreground/70 uppercase">
            Platform
          </h3>
        </div>
        <SidebarNavigation
          navItems={navItems.filter((item) => item.section === "Platform")}
        />

        <div className="pt-4 px-4 py-2">
          <h3 className="text-xs font-semibold text-sidebar-foreground/70 uppercase">
            Tools
          </h3>
        </div>
        <SidebarNavigation
          navItems={navItems.filter((item) => item.section === "Tools")}
        />
      </nav>

      <div className="mt-auto border-t border-sidebar-border/50 px-2 py-4">
        <SidebarAccount loading={loading} user={user} />
      </div>
    </div>
  );
}

================
File: src/components/layout/Header.tsx
================
// src/components/layout/Header.tsx
import React from 'react';
import { Link, useLocation } from 'react-router-dom';
import { cn } from '@/lib/utils';

/**
 * Header component for consistent navigation across the application.
 * It centralizes the navigation links and applies the desired styling.
 */
export const Header = () => {
  const location = useLocation();
  const navLinks = [
    { to: "/", label: "Dashboard" },
    { to: "/classes", label: "Classes", state: { reset: true } }, // <-- ADD THIS STATE
    { to: "/calendar", label: "Calendar", state: { reset: true } },
    { to: "/community", label: "Community", state: { reset: true } },
  ];

  return (
    <div className="p-3"> {/* This div maintains the margin around the navbar, matching OraclePage */}
      <nav className="z-navigation flex w-full items-center justify-between rounded-lg border border-marble-400 bg-marble-100 px-4 py-3">
        {/* Application Logo */}
        <Link to="/">
          <div className="mr-3 flex items-baseline">
            <span className="text-logo lowercase font-variable ml-1 font-light text-green-700">eido ai</span>
          </div>
        </Link>
        {/* Navigation Links (visible on medium screens and up) */}
        <div className="hidden md:flex flex-row items-center gap-x-4 gap-y-0 lg:gap-x-6 justify-between">
          {navLinks.map((link) => {
            const isActive = location.pathname === link.to;
            if (link.isExternal) {
              return (
                <a key={link.to} target="_blank" rel="noopener noreferrer" href={link.href}>
                  <p className="
                    text-base uppercase tracking-wider font-normal text-volcanic-800 hover:text-volcanic-900
                  ">
                    {link.label}
                  </p>
                </a>
              );
            }
            return (
              <Link key={link.to} to={link.to} state={link.state}> 
                <p className={cn(
                  "text-base uppercase tracking-wider hover:text-volcanic-900",
                  isActive ? "font-bold text-volcanic-900" 
                  : "font-normal text-volcanic-800"
                )}>
                  {link.label}
                </p>
              </Link>
            );
          })}
        </div>
      </nav>
    </div>
  );
};

================
File: src/components/layout/MainAppLayout.tsx
================
// src/components/layout/MainAppLayout.tsx
import React from 'react';
import { Helmet } from 'react-helmet-async';
import { cn } from '@/lib/utils';
import { Header } from './Header'; // Import the new centralized Header component

interface MainAppLayoutProps {
  children: React.ReactNode;
  pageTitle: string;
}

export const MainAppLayout = ({ children, pageTitle }: MainAppLayoutProps) => {
  return (
    <>
      <Helmet>
        <title>{pageTitle}</title>
        <link rel="canonical" href="https://www.eido-ai.com/" /> 
        <meta name="viewport" content="initial-scale=1.0, width=device-width, viewport-fit=cover, maximum-scale=1.0" />
        <link rel="icon" href="/favicon.ico" />
        {/* Re-adding essential inline styles to avoid layout breakage.
            Ideally, these should be systematically moved to global CSS (src/index.css or tailwind.config.ts)
            and applied via Tailwind utility classes. */}
        <style type="text/css">{`
          :root { --volcanic: #212121; --marble: #fafafa; --green: #39594d; --coral: #ff7759; }
          html, body { font-family: "Trebuchet MS", sans-serif; }
          
          .bg-mushroom-100 { background-color: #75909C; } .mx-auto { margin-left: auto; margin-right: auto; }
          .flex { display: flex; } .h-screen { height: 100vh; } .w-screen { width: 100vw; }
          .max-w-page { max-width: 1440px; } .flex-1 { flex: 1 1 0%; } .flex-col { flex-direction: column; }
          .overflow-y-auto { overflow-y: auto; } .m-3 { margin: 0.75rem; } .z-navigation { z-index: 50; }
          .w-full { width: 100%; } 
          .items-center { align-items: center; } .justify-between { justify-content: space-between; }
          .rounded-lg { border-radius: 0.5rem; } .border { border-width: 1px; } .px-4 { padding-left: 1rem; padding-right: 1rem; }
          .py-3 { padding-top: 0.75rem; padding-bottom: 0.75rem; } .border-marble-400 { border-color:rgb(176, 197, 206); }
          .bg-marble-100 { background-color: #F8F7F4; } .mr-3 { margin-right: 0.75rem; } .h-full { height: 100%; }
          .text-logo { font-size: 1.125rem; line-height: 1.75rem; } .lowercase { text-transform: lowercase; }
          .font-variable { font-family: "Trebuchet MS", sans-serif; } .ml-1 { margin-left: 0.25rem; } .font-light { font-weight: 300; }
          .text-green-700 { color: #39594D; } .text-dark-blue { color: #0F2A47; } .gap-x-4 { column-gap: 1rem; }
          .text-overline { font-size: 0.875rem; line-height: 1.25rem; letter-spacing: 0.05em; } .uppercase { text-transform: uppercase; }
          .font-code { font-family: monospace; } .font-medium { font-weight: 500; } .font-bold { font-weight: 700; }
          .text-volcanic-900 { color: #212121; } .text-volcanic-800 { color: #6B7280; }
          .hover\\:text-volcanic-900:hover { color: #212121; } .flex-grow { flex-grow: 1; } .pb-3 { padding-bottom: 0.75rem; }
          .main-content { min-height: calc(100vh - 74px); } .mb-8 { margin-bottom: 2rem; } .border-b { border-bottom-width: 1px; }
          .bg-cover { background-size: cover; } .flex-shrink-0 { flex-shrink: 0; }
          .bg-\\[url\\(\\/images\\/whiteCellBackground\\.svg\\)\\] { background-image: url(/background1.png); }
          .oracle-background-image { background-image: url(/background2.png); background-size: cover; background-repeat: no-repeat; background-position: center; }
          .assignments-background-image { background-image: url(/assignments_background.png); background-size: cover; background-repeat: no-repeat; background-position: center; }
          .pt-10 { padding-top: 2.5rem; } .px-9 { padding-left: 2.25rem; padding-right: 2.25rem; }
          .px-10 { padding-left: 2.5rem; padding-right: 2.5rem; } .text-h3-m { font-size: 2.25rem; line-height: 2.5rem; }
          .font-\\[420\\] { font-weight: 420; } .mb-6 { margin-bottom: 1.5rem; } .text-h5-m { font-size: 1.5rem; line-height: 2rem; }
          .mb-3 { margin-bottom: 0.75rem; } .text-p { font-size: 1rem; line-height: 1.5rem; } .pb-10 { padding-bottom: 2.5rem; }
          .items-end { align-items: flex-end; } .gap-y-6 { row-gap: 1.5rem; } .p-4 { padding: 1rem; }
          .p-8 { padding: 2rem; } .border-blue-200 { border-color:rgb(189, 197, 212); }
          .gap-y-3 { row-gap: 0.75rem; } .text-label { font-size: 0.875rem; line-height: 1.25rem; } .text-blue-700 { color:rgb(167, 175, 192); }
          .bg-white { background-color: #ffffff; } .w-fit { width: fit-content; } .px-2 { padding-left: 0.5rem; padding-right: 0.5rem; }
          .py-1 { padding-top: 0.25rem; padding-bottom: 0.25rem; } .inline-block { display: inline-block; }
          .cursor-pointer { cursor: pointer; } .pt-7 { padding-top: 1.75rem; }
          .min-h-cell-md { min-height: 40px; } .max-h-cell-md { max-height: 40px; }
          .transition-all { transition-property: all; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 150ms; }
          .bg-blue-500 { background-color: #75909C; } .-mr-0\\.5 { margin-right: -0.125rem; }
          .w-3 { width: 0.75rem; } .rounded-l-\\[6px\\] { border-top-left-radius: 6px; border-bottom-left-radius: 6px; }
          .text-white { color: #ffffff; } .truncate { overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }
          .-skew-x-\\[21deg\\] { transform: skewX(-21deg); } .w-6 { width: 1.5rem; } .rounded-tr-\\[10px\\] { border-top-right-radius: 10px; }
          .rounded-br-\\[4px\\] { border-bottom-right-radius: 4px; }
          .bg-coral-500 { background-color: #0F2A47; } .bg-quartz-700 { background-color: #6B6960; }
          /* REMOVED .bg-purple-500 and .border-purple-200 */
          @media (min-width: 768px) { .md\\:hidden { display: none; } .md\\:flex { display: flex; }
          .md\\:max-w-\\[680px\\] { max-width: 680px; } .md\\:gap-x-3 { column-gap: 0.75rem; } .md\\:ml-0 { margin-left: 0; }
          .md\\:rounded-lg { border-radius: 0.5rem; } .md\\:border { border-width: 1px; } .md\\:w-42 { width: 10.5rem; }
          .md\\:py-6 { padding-top: 1.5rem; padding-bottom: 1.5rem; } .md\\:mb-10 { margin-bottom: 2.5rem; }
          .md\\:flex-row { flex-direction: row; } .md\\:w-2\\/3 { width: 66.666667%; } .md\\:w-1\\/3 { width: 33.333333%; }
          .md\\:px-9 { padding-left: 2.25rem; padding-right: 2.25rem; } .md\\:flex-wrap { flex-wrap: wrap; }
          .md\\:p-8 { padding: 2rem; } .md\\:items-end { align-items: flex-end; } }
          @media (min-width: 1024px) { .lg\\:gap-x-6 { column-gap: 1.5rem; } .lg\\:max-w-\\[820px\\] { max-width: 820px; }
          .lg\\:w-56 { width: 14rem; } .lg\\:text-h5 { font-size: 1.875rem; line-height: 2.25rem; } }
        `}</style>
      </Helmet>
      <div className="h-screen w-full bg-mushroom-100">
        <div className="mx-auto flex h-full w-screen max-w-page flex-1 flex-col">
          <Header />
          {/* The main content area now has padding and handles overflow */}
          <div className="flex-1 overflow-hidden p-3 pt-0">
            {children}
          </div>
        </div>
      </div>
    </>
  );
};

================
File: src/components/layout/MainLayout.tsx
================
import * as React from "react"

interface PageHeaderProps {
  title: string
  description?: string
}

export function PageHeader({ title, description }: PageHeaderProps) {
  return (
    <div className="space-y-1">
      <h1 className="text-2xl font-semibold tracking-tight">{title}</h1>
      {description && (
        <p className="text-sm text-muted-foreground">{description}</p>
      )}
    </div>
  )
}

================
File: src/components/layout/OracleLayout.tsx
================
// src/components/layout/OracleLayout.tsx
import React from 'react';

interface OracleLayoutProps {
  children: React.ReactNode;
}

const OracleLayout = ({ children }: OracleLayoutProps) => {
  return (
    // This outer div provides the overall light gray background for the entire page
    <div className="h-full w-full bg-stone-100 p-3">
      {/* This inner div is the main white container with the border and rounded corners */}
      <div className="mx-auto flex h-full w-full flex-1 flex-col rounded-lg border bg-white">
        {children}
      </div>
    </div>
  );
};

export default OracleLayout;

================
File: src/components/layout/PageHeader.tsx
================
import * as React from "react"

interface PageHeaderProps {
  title: string
  description?: string
}

export function PageHeader({ title, description }: PageHeaderProps) {
  return (
    <div className="space-y-1">
      <h1 className="text-2xl font-semibold tracking-tight">{title}</h1>
      {description && (
        <p className="text-sm text-muted-foreground">{description}</p>
      )}
    </div>
  )
}

================
File: src/components/oracle/upload-panel/index.tsx
================
// src/components/oracle/upload-panel/index.tsx
import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { FolderPlus, Upload, Loader2, Home } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { ClassConfig } from '@/services/classOpenAIConfig';
import { FileType, FolderType } from '@/features/files/types';
import { fileService } from '@/services/fileService';
import { classOpenAIConfigService } from '@/services/classOpenAIConfig';
import { formatFileSize } from '@/lib/utils';
import { User } from '@supabase/supabase-js';
import { MiniClassCard } from './MiniClassCard';
import { MiniFolderCard } from './MiniFolderCard';
import { MiniFileCard } from './MiniFileCard';

interface SourcesUploadPanelProps {
  user: User | null;
}

export const SourcesUploadPanel: React.FC<SourcesUploadPanelProps> = ({ user }) => {
  const [allClasses, setAllClasses] = useState<ClassConfig[]>([]);
  const [allFiles, setAllFiles] = useState<(FileType & { class: string; })[]>([]);
  
  const [selectedClassId, setSelectedClassId] = useState<string | null>(null);
  const [currentFolderId, setCurrentFolderId] = useState<string | null>(null);
  
  const [folders, setFolders] = useState<FolderType[]>([]);
  const [files, setFiles] = useState<FileType[]>([]);
  
  const [breadcrumbs, setBreadcrumbs] = useState<{ id: string | null; name: string }[]>([{ name: 'Home', id: null }]);
  const [isLoading, setIsLoading] = useState(true);
  
  const [isNewFolderOpen, setIsNewFolderOpen] = useState(false);
  const [newFolderName, setNewFolderName] = useState('');
  
  const [isUploading, setIsUploading] = useState(false);
  const [filesToUpload, setFilesToUpload] = useState<File[]>([]);
  const fileInputRef = React.useRef<HTMLInputElement>(null);

  const { toast } = useToast();

  const fetchData = useCallback(async () => {
    if (!user) return;
    setIsLoading(true);
    try {
      if (selectedClassId) {
        // Fetch content for a specific class
        const [folderData, fileData] = await Promise.all([
          fileService.getFolders(selectedClassId, currentFolderId),
          fileService.getFiles(selectedClassId, currentFolderId)
        ]);
        setFolders(folderData);
        setFiles(fileData);
      } else {
        // Fetch all classes for the home view
        const [fetchedClasses, fetchedAllFiles] = await Promise.all([
            classOpenAIConfigService.getAllClasses(),
            fileService.getAllFilesWithClass()
        ]);
        setAllClasses(fetchedClasses);
        setAllFiles(fetchedAllFiles as (FileType & { class: string; })[]);
        setFolders([]);
        setFiles([]);
      }
    } catch (error) {
      toast({ title: "Error", description: "Could not load data.", variant: "destructive" });
    } finally {
      setIsLoading(false);
    }
  }, [user, selectedClassId, currentFolderId, toast]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  const handleClassClick = (classItem: ClassConfig) => {
    setSelectedClassId(classItem.class_id);
    setCurrentFolderId(null);
    setBreadcrumbs([{ name: 'Home', id: null }, { name: classItem.class_name, id: classItem.class_id }]);
  };

  const handleFolderClick = (folder: FolderType) => {
    setCurrentFolderId(folder.folder_id);
    setBreadcrumbs(prev => [...prev, { name: folder.name, id: folder.folder_id }]);
  };

  const handleBreadcrumbClick = (index: number) => {
    const clickedCrumb = breadcrumbs[index];
    setBreadcrumbs(breadcrumbs.slice(0, index + 1));
    if (index === 0) { // Clicked on Home
      setSelectedClassId(null);
      setCurrentFolderId(null);
    } else { // Clicked on a class or folder
      const classCrumb = breadcrumbs[1];
      setSelectedClassId(classCrumb.id);
      setCurrentFolderId(clickedCrumb.id === classCrumb.id ? null : clickedCrumb.id);
    }
  };

  const handleCreateFolder = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedClassId || !user || !newFolderName.trim()) return;
    try {
      await fileService.createFolder(newFolderName.trim(), selectedClassId, currentFolderId);
      toast({ title: "Folder created" });
      setIsNewFolderOpen(false);
      setNewFolderName('');
      fetchData();
    } catch (error) {
      toast({ title: "Error", description: "Failed to create folder.", variant: "destructive" });
    }
  };
  
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      setFilesToUpload(prev => [...prev, ...Array.from(e.target.files!)]);
    }
  };

  const handleUpload = async () => {
    if (filesToUpload.length === 0 || !user || !selectedClassId) {
      toast({ title: "Cannot Upload", description: "You must be inside a class to upload files.", variant: "destructive"});
      return;
    }
    setIsUploading(true);
    toast({ title: `Uploading ${filesToUpload.length} file(s)...` });
    try {
      const uploadPromises = filesToUpload.map(file => {
        const filePath = `${user.id}/${selectedClassId}/${currentFolderId || 'root'}/${Date.now()}-${file.name}`;
        return supabase.storage.from('file_storage').upload(filePath, file);
      });
      await Promise.all(uploadPromises);
      
      toast({ title: "Upload complete", description: `${filesToUpload.length} file(s) processed.` });
      setFilesToUpload([]);
      fetchData();
    } catch (error) {
        toast({ title: "Upload failed", description: (error as Error).message, variant: "destructive" });
    } finally {
        setIsUploading(false);
    }
  };
  
  const classesWithStats = useMemo(() => {
    return allClasses.map(cls => {
        const filesForClass = allFiles.filter(file => file.class_id === cls.class_id);
        const totalSize = filesForClass.reduce((acc, file) => acc + (file.size || 0), 0);
        return { ...cls, files: filesForClass.length, size: formatFileSize(totalSize) };
    });
  }, [allClasses, allFiles]);

  const renderContent = () => {
    if (isLoading) {
      return <div className="flex justify-center items-center h-full"><Loader2 className="h-6 w-6 animate-spin text-muted-foreground" /></div>;
    }

    if (!selectedClassId) {
      return (
        <>
          <h3 className="text-xs font-semibold text-muted-foreground px-2 mb-2">CLASSES</h3>
          <div className="grid grid-cols-2 gap-2">
            {classesWithStats.length > 0 ? (
              classesWithStats.map(c => <MiniClassCard key={c.class_id} classItem={c} onClick={() => handleClassClick(c)} />)
            ) : (
              <p className="text-xs text-muted-foreground col-span-2 text-center p-4">No classes found.</p>
            )}
          </div>
        </>
      );
    }

    return (
      <>
        {folders.length > 0 && (
          <>
            <h3 className="text-xs font-semibold text-muted-foreground px-2 mb-2">FOLDERS</h3>
            <div className="grid grid-cols-2 gap-2 mb-4">
              {folders.map(folder => <MiniFolderCard key={folder.folder_id} folder={folder} onClick={() => handleFolderClick(folder)} />)}
            </div>
          </>
        )}
        <h3 className="text-xs font-semibold text-muted-foreground px-2 mb-2">FILES</h3>
        <div className="grid grid-cols-2 gap-2">
          {files.length > 0 ? (
            files.map(file => <MiniFileCard key={file.file_id} file={file} />)
          ) : (
            <p className="text-xs text-muted-foreground col-span-2 text-center p-4">No files in this location.</p>
          )}
        </div>
      </>
    );
  };

  return (
    <div className="flex flex-col h-full p-2">
      <header className="flex items-center justify-between p-2">
        <Breadcrumb>
          <BreadcrumbList>
            {breadcrumbs.map((crumb, index) => (
              <React.Fragment key={crumb.id || 'home'}>
                <BreadcrumbItem>
                  {index < breadcrumbs.length - 1 ? (
                    <BreadcrumbLink 
                      href="#" 
                      onClick={(e) => { e.preventDefault(); handleBreadcrumbClick(index); }}
                      className="text-sm font-normal text-muted-foreground hover:text-foreground"
                    >
                      {crumb.name}
                    </BreadcrumbLink>
                  ) : (
                    <BreadcrumbPage className="text-sm font-semibold text-foreground">
                      {crumb.name}
                    </BreadcrumbPage>
                  )}
                </BreadcrumbItem>
                {index < breadcrumbs.length - 1 && <BreadcrumbSeparator />}
              </React.Fragment>
            ))}
          </BreadcrumbList>
        </Breadcrumb>
        {selectedClassId && (
          <Button variant="ghost" size="icon" className="h-7 w-7" onClick={() => setIsNewFolderOpen(true)}>
            <FolderPlus className="h-4 w-4" />
          </Button>
        )}
      </header>
      <ScrollArea className="flex-1 px-2 py-2">
        {renderContent()}
      </ScrollArea>
      <div className="p-2 border-t mt-auto">
        <div 
          className="border-2 border-dashed rounded-md p-3 text-center cursor-pointer hover:border-primary"
          onClick={() => fileInputRef.current?.click()}
        >
          <input type="file" ref={fileInputRef} className="hidden" multiple onChange={handleFileChange} />
          <p className="text-xs text-muted-foreground">
            {filesToUpload.length > 0 ? `${filesToUpload.length} file(s) selected` : "Attach, drag & drop, or paste files"}
          </p>
        </div>
        {filesToUpload.length > 0 && (
          <Button className="w-full mt-2" size="sm" onClick={handleUpload} disabled={isUploading || !selectedClassId}>
            {isUploading ? <Loader2 className="h-4 w-4 mr-2 animate-spin" /> : <Upload className="h-4 w-4 mr-2" />}
            Upload to {breadcrumbs.length > 1 ? breadcrumbs[1].name : '...'}
          </Button>
        )}
      </div>
      <Dialog open={isNewFolderOpen} onOpenChange={setIsNewFolderOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Create New Folder</DialogTitle>
            <DialogDescription>Enter a name for your new folder in {breadcrumbs[breadcrumbs.length - 1].name}.</DialogDescription>
          </DialogHeader>
          <form onSubmit={handleCreateFolder}>
            <Input autoFocus value={newFolderName} onChange={(e) => setNewFolderName(e.target.value)} placeholder="e.g., Lecture Notes" />
            <DialogFooter className="mt-4">
              <Button type="button" variant="ghost" onClick={() => setIsNewFolderOpen(false)}>Cancel</Button>
              <Button type="submit">Create</Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
    </div>
  );
};

================
File: src/components/oracle/upload-panel/MiniClassCard.tsx
================
// src/components/oracle/upload-panel/MiniClassCard.tsx
import React from 'react';
import { Card } from '@/components/ui/card';
import { ClassConfig } from '@/services/classOpenAIConfig';

interface MiniClassCardProps {
  classItem: ClassConfig & { files: number, size: string };
  onClick: () => void;
}

export const MiniClassCard: React.FC<MiniClassCardProps> = ({ classItem, onClick }) => (
  <Card onClick={onClick} className="p-2 cursor-pointer hover:bg-stone-50 transition-colors">
    <h4 className="font-semibold text-xs text-stone-700 truncate">{classItem.class_name}</h4>
    <div className="text-[10px] text-muted-foreground mt-1">
      <span>{classItem.files} Files</span>
      <span className="mx-1">•</span>
      <span>{classItem.size}</span>
    </div>
  </Card>
);

================
File: src/components/oracle/upload-panel/MiniFileCard.tsx
================
// src/components/oracle/upload-panel/MiniFileCard.tsx
import React from 'react';
import { Card } from '@/components/ui/card';
import { FileText as FileIcon } from 'lucide-react';
import { FileType } from '@/features/files/types';
import { formatFileSize } from '@/lib/utils';

interface MiniFileCardProps {
  file: FileType;
}

export const MiniFileCard: React.FC<MiniFileCardProps> = ({ file }) => (
    <Card className="p-2">
        <div className="flex items-center gap-2">
            <FileIcon className="h-4 w-4 text-blue-500 flex-shrink-0" />
            <p className="text-xs font-medium truncate">{file.name}</p>
        </div>
        <p className="text-[10px] text-muted-foreground mt-1 pl-6">{formatFileSize(file.size)}</p>
    </Card>
);

================
File: src/components/oracle/upload-panel/MiniFolderCard.tsx
================
// src/components/oracle/upload-panel/MiniFolderCard.tsx
import React from 'react';
import { Card } from '@/components/ui/card';
import { Folder as FolderIcon } from 'lucide-react';
import { FolderType } from '@/features/files/types';

interface MiniFolderCardProps {
  folder: FolderType;
  onClick: () => void;
}

export const MiniFolderCard: React.FC<MiniFolderCardProps> = ({ folder, onClick }) => (
    <Card onClick={onClick} className="p-2 cursor-pointer hover:bg-stone-50 transition-colors">
        <div className="flex items-center gap-2">
            <FolderIcon className="h-4 w-4 text-yellow-500 flex-shrink-0" />
            <p className="text-xs font-medium truncate">{folder.name}</p>
        </div>
    </Card>
);

================
File: src/components/oracle/ChatInput.tsx
================
// src/components/oracle/ChatInput.tsx

import React from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { PlusCircle } from 'lucide-react';
import { AttachedFilePill } from '@/components/chat/AttachedFilePill';
import type { AttachedFile } from '@/components/chat/AttachedFilePill'; // Assuming types are moved

interface ChatInputProps {
  input: string;
  setInput: (value: string) => void;
  handleSendMessage: () => void;
  isChatLoading: boolean;
  attachedFiles: AttachedFile[];
  handleRemoveFile: (fileId: string) => void;
  fileInputRef: React.RefObject<HTMLInputElement>;
}

export const ChatInput: React.FC<ChatInputProps> = ({
  input, setInput, handleSendMessage, isChatLoading, attachedFiles, handleRemoveFile, fileInputRef
}) => {
  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="pt-4 border-t border-stone-200 flex-shrink-0">
      {attachedFiles.length > 0 && (
        <div className="px-1 pb-2">
          <ScrollArea className="w-full whitespace-nowrap">
            <div className="flex items-center gap-2 pb-2">
              {attachedFiles.map(file => (
                <AttachedFilePill key={file.id} file={file} onRemove={handleRemoveFile} />
              ))}
            </div>
          </ScrollArea>
        </div>
      )}
      <div className="relative">
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button
                variant="ghost"
                size="icon"
                className="absolute left-2 bottom-1/2 translate-y-1/2 h-8 w-8 text-stone-500 hover:text-stone-800 hover:bg-stone-100"
                onClick={() => fileInputRef.current?.click()}
              >
                <PlusCircle className="h-5 w-5" />
              </Button>
            </TooltipTrigger>
            <TooltipContent><p>Attach PDF or Image</p></TooltipContent>
          </Tooltip>
        </TooltipProvider>
        <Textarea
          placeholder="Ask about your documents, or attach a file..."
          className="min-h-[60px] bg-stone-50 pl-12 pr-24 resize-none"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onKeyDown={handleKeyDown}
          disabled={isChatLoading}
        />
        <Button
          className="absolute bottom-3 right-3"
          onClick={handleSendMessage}
          disabled={isChatLoading || (input.trim() === "" && attachedFiles.length === 0)}
        >
          Send
        </Button>
      </div>
    </div>
  );
};

================
File: src/components/oracle/DocumentPreview.tsx
================
// src/components/oracle/DocumentPreview.tsx
import React, { useState, useRef } from 'react';
import { Document, Page, pdfjs } from 'react-pdf';
import 'react-pdf/dist/esm/Page/AnnotationLayer.css';
import 'react-pdf/dist/esm/Page/TextLayer.css';
import { Button } from '@/components/ui/button';
import { Loader2, ZoomIn, ZoomOut, ChevronLeft, ChevronRight, Download } from 'lucide-react';
import { ActiveSource } from '@/services/chatMessageService';
import { FileType } from '@/features/files/types';

// Set up the worker source for react-pdf
pdfjs.GlobalWorkerOptions.workerSrc = `//unpkg.com/pdfjs-dist@${pdfjs.version}/build/pdf.worker.min.mjs`;

interface DocumentPreviewProps {
  source: ActiveSource;
}

export const DocumentPreview: React.FC<DocumentPreviewProps> = ({ source }) => {
    const [numPages, setNumPages] = useState<number | null>(null);
    const [currentPage, setCurrentPage] = useState(source.pageNumber || 1);
    const [scale, setScale] = useState(1.0);
    const pdfContainerRef = useRef<HTMLDivElement>(null);
  
    const onDocumentLoadSuccess = (pdf: any) => {
      setNumPages(pdf.numPages);
      setCurrentPage(source.pageNumber || 1);
  
      // Set initial scale to fit the container width after a brief delay
      // to ensure the container has been rendered and has a width.
      setTimeout(async () => {
        if (pdfContainerRef.current) {
          try {
            const page = await pdf.getPage(1);
            const containerWidth = pdfContainerRef.current.clientWidth;
            const pageWidth = page.view[2]; // page.view is [x1, y1, x2, y2]
            if (containerWidth > 0 && pageWidth > 0) {
              setScale(containerWidth / pageWidth);
            }
          } catch (e) {
            console.error("Failed to calculate initial PDF scale:", e);
            setScale(1.0); // Fallback to default scale on error
          }
        }
      }, 0);
    };

  const goToPrevPage = () => setCurrentPage(prev => Math.max(prev - 1, 1));
  const goToNextPage = () => setCurrentPage(prev => Math.min(prev + 1, numPages || 1));

  const handleDownload = () => {
    if (!source.file.url) return;
    const link = document.createElement('a');
    link.href = source.file.url;
    link.download = source.file.name;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  if (!source || !source.file) {
    return <div className="p-4 text-sm text-muted-foreground">Select a source to view its preview.</div>;
  }
  
  const isPdf = source.file.type === 'application/pdf';
  const isImage = source.file.type.startsWith('image/');

  return (
    <div className="flex flex-col max-h-[600px] border rounded-lg overflow-hidden bg-white shadow-sm">
    <header className="flex items-center justify-between p-2 border-b bg-white flex-shrink-0">
        {/* Left side with two-line title */}
        <div className="flex flex-col overflow-hidden pr-2">
            <span className="text-xs font-mono uppercase text-muted-foreground">
                SOURCE {source.number}
            </span>
            <a
                href={source.file.url || '#'}
                target="_blank"
                rel="noopener noreferrer"
                className="text-sm font-medium text-stone-800 truncate hover:underline"
                title={source.file.name}
                // Prevent click action if there's no valid URL
                onClick={(e) => !source.file.url && e.preventDefault()}
            >
                {source.file.name}
            </a>
        </div>

        {/* Right side with zoom controls */}
        <div className="flex items-center gap-1 flex-shrink-0">
            {isPdf && (
                <>
                    <Button variant="ghost" size="icon" onClick={() => setScale(s => s * 1.2)}>
                        <ZoomIn className="h-4 w-4" />
                    </Button>
                    <Button variant="ghost" size="icon" onClick={() => setScale(s => s / 1.2)}>
                        <ZoomOut className="h-4 w-4" />
                    </Button>
                </>
            )}
        </div>
    </header>
      
      <div ref={pdfContainerRef} className="flex-grow overflow-auto flex justify-center">
        {isPdf && source.file.url ? (
          <Document
            file={source.file.url}
            onLoadSuccess={onDocumentLoadSuccess}
            loading={<div className="flex justify-center items-center h-full"><Loader2 className="h-8 w-8 animate-spin" /></div>}
          >
            <Page pageNumber={currentPage} scale={scale} />
          </Document>
        ) : isImage && source.file.url ? (
          <img src={source.file.url} alt={source.file.name} className="max-w-full object-contain p-4"/>
        ) : (
          <div className="p-4 text-muted-foreground">Preview not available for this file type.</div>
        )}
      </div>

      {isPdf && numPages && (
        <footer className="flex items-center justify-center py-.5 px-2 border-t bg-white flex-shrink-0">
          <Button variant="ghost" size="icon" onClick={goToPrevPage} disabled={currentPage <= 1}><ChevronLeft className="h-4 w-4" /></Button>
          <span className="text-sm mx-4">Page {currentPage} of {numPages}</span>
          <Button variant="ghost" size="icon" onClick={goToNextPage} disabled={currentPage >= numPages}><ChevronRight className="h-4 w-4" /></Button>
        </footer>
      )}
    </div>
  );
};

================
File: src/components/oracle/DocumentViewer.tsx
================
// src/components/oracle/DocumentViewer.tsx

import React, { useState, useEffect, useRef, useCallback } from 'react';
import { Document, Page } from 'react-pdf';
import { Button } from '@/components/ui/button';
import { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';
import { Loader2, ZoomIn, ZoomOut } from 'lucide-react';
import { FileType } from '@/features/files/types';
import { pdfjs } from 'react-pdf';

pdfjs.GlobalWorkerOptions.workerSrc = `//unpkg.com/pdfjs-dist@${pdfjs.version}/build/pdf.worker.min.mjs`;

interface DocumentViewerProps {
  file: FileType;
  initialPage?: number;
}

export const DocumentViewer: React.FC<DocumentViewerProps> = ({ file, initialPage = 1 }) => {
  const [numPages, setNumPages] = useState<number | null>(null);
  const [currentPage, setCurrentPage] = useState(initialPage);
  const [scale, setScale] = useState(1.0);
  const [minScale, setMinScale] = useState(1.0);
  const [isDocLoaded, setIsDocLoaded] = useState(false);
  const [isScrolling, setIsScrolling] = useState(false);
  
  const pdfPreviewRef = useRef<HTMLDivElement>(null);
  const pageRefs = useRef<Map<number, HTMLDivElement>>(new Map());

  const goToPage = useCallback((pageNumber: number) => {
    const pageRef = pageRefs.current.get(pageNumber);
    if (pageRef) {
        setIsScrolling(true);
        pageRef.scrollIntoView({ behavior: 'smooth', block: 'start' });
        setCurrentPage(pageNumber);
        setTimeout(() => setIsScrolling(false), 1000); 
    }
  }, []);

  const onDocumentLoadSuccess = useCallback(async (pdf: any) => {
    setNumPages(pdf.numPages);
    if (pdfPreviewRef.current) {
        try {
            const page = await pdf.getPage(1);
            const containerWidth = pdfPreviewRef.current.clientWidth;
            const pageWidth = page.view[2];
            if (containerWidth > 0 && pageWidth > 0) {
                const calculatedMinScale = (containerWidth / pageWidth) * 0.98;
                setMinScale(calculatedMinScale);
                setScale(calculatedMinScale);
            }
        } catch(e) { console.error("Error calculating initial scale:", e); }
    }
    setIsDocLoaded(true);
  }, []);

  useEffect(() => {
    if (isDocLoaded) {
      setTimeout(() => goToPage(initialPage), 50);
    }
  }, [isDocLoaded, initialPage, goToPage]);
  
  useEffect(() => {
    setIsDocLoaded(false);
    setNumPages(null);
    setCurrentPage(initialPage);
  }, [file, initialPage]);

  useEffect(() => {
    const observer = new IntersectionObserver(
        (entries) => {
            if (isScrolling) return;
            const visibleEntries = entries.filter(entry => entry.isIntersecting);
            if (visibleEntries.length > 0) {
                const pageNumbers = visibleEntries.map(entry => parseInt(entry.target.getAttribute('data-page-number') || '0', 10));
                setCurrentPage(Math.min(...pageNumbers));
            }
        },
        { root: pdfPreviewRef.current, threshold: 0.1 }
    );
    const currentRefs = pageRefs.current;
    currentRefs.forEach(pageEl => { if (pageEl) observer.observe(pageEl); });
    return () => { currentRefs.forEach(pageEl => { if (pageEl) observer.unobserve(pageEl); }); };
  }, [numPages, scale, isScrolling]);

  return (
    <div className="w-full h-full flex flex-col relative">
      <div ref={pdfPreviewRef} className="flex-1 w-full h-full rounded-md border border-stone-700 overflow-hidden flex justify-center bg-stone-100">
        <ScrollArea className="h-full w-full">
          <div className="flex flex-col items-center py-4">
            {file && file.url && (
              <Document 
                key={`${file.file_id}-${initialPage}`}
                file={file.url} 
                onLoadSuccess={onDocumentLoadSuccess} 
                loading={<Loader2 className="h-8 w-8 animate-spin text-stone-400 mx-auto mt-10"/>}
              >
                {isDocLoaded && Array.from(new Array(numPages || 0), (el, index) => (
                  <div key={`page_wrapper_${index + 1}`} ref={(el) => { if(el) pageRefs.current.set(index + 1, el); }} data-page-number={index + 1}>
                    <Page pageNumber={index + 1} scale={scale} renderTextLayer={false} className="mb-4 shadow-md"/>
                  </div>
                ))}
              </Document>
            )}
          </div>
          {/* Added horizontal scrollbar */}
          <ScrollBar orientation="horizontal" />
        </ScrollArea>
      </div>

      {/* Shrunk the controls */}
      {numPages && (
        <div className="absolute bottom-4 left-1/2 -translate-x-1/2">
            <div className="flex items-center gap-1 rounded-full border bg-white/70 p-1 shadow-md backdrop-blur-sm">
                <Button variant="ghost" size="icon" className="h-7 w-7" onClick={() => setScale(s => Math.max(s / 1.2, minScale))}>
                    <ZoomOut className="h-4 w-4" />
                </Button>
                <span className="text-xs font-medium text-stone-700 tabular-nums px-2">
                    {currentPage} / {numPages}
                </span>
                <Button variant="ghost" size="icon" className="h-7 w-7" onClick={() => setScale(s => Math.min(s * 1.2, 3.0))}>
                    <ZoomIn className="h-4 w-4" />
                </Button>
            </div>
        </div>
      )}
    </div>
  );
};

================
File: src/components/oracle/HistorySidebar.tsx
================
// src/components/oracle/HistorySidebar.tsx
import React, { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Edit, Trash2, Loader2 } from 'lucide-react';
import { cn } from '@/lib/utils';
import { ScrollArea } from '../ui/scroll-area';
import { AppConversation } from '@/services/conversationService';
import { Input } from '../ui/input';

interface HistoryItemProps {
  conversation: AppConversation;
  isSelected: boolean;
  onSelect: (id: string) => void;
  onRename: (id: string, newName: string) => Promise<void>;
  onDelete: (conversation: AppConversation) => void;
}

const HistoryItem: React.FC<HistoryItemProps> = ({ conversation, isSelected, onSelect, onRename, onDelete }) => {
    const [isRenaming, setIsRenaming] = useState(false);
    const [name, setName] = useState(conversation.name);
    const inputRef = useRef<HTMLInputElement>(null);

    useEffect(() => {
        if (isRenaming) {
            inputRef.current?.focus();
            inputRef.current?.select();
        }
    }, [isRenaming]);

    // --- FIX START ---
    // This effect synchronizes the component's internal 'name' state with the 'conversation.name' prop.
    // When the parent component generates a new title and updates the conversation list, this
    // ensures the change is reflected here.
    useEffect(() => {
        // We only update the name from the prop if the user is NOT currently renaming it.
        // This prevents overwriting the user's input while they are typing.
        if (!isRenaming) {
            setName(conversation.name);
        }
    }, [conversation.name, isRenaming]);
    // --- FIX END ---

    const handleRenameSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        e.stopPropagation();
        if (name.trim() && name.trim() !== conversation.name) {
            onRename(conversation.id, name.trim());
        }
        setIsRenaming(false);
    };

    return (
    <div
      onClick={() => !isRenaming && onSelect(conversation.id)}
      className={cn(
        'group flex items-center justify-between px-2 py-1.5 my-0.5 rounded-md cursor-pointer transition-all duration-150 border', 
        isSelected 
            ? 'bg-stone-100 border-stone-400' 
            : 'border-transparent hover:bg-stone-100'
      )}
      title={name}
    >
      <div className="flex items-center overflow-hidden flex-grow mr-2">
        {isRenaming ? (
            <form onSubmit={handleRenameSubmit} className="w-full">
                <Input 
                    ref={inputRef} 
                    value={name} 
                    onChange={(e) => setName(e.target.value)} 
                    onBlur={handleRenameSubmit} 
                    className="h-7 text-sm" 
                    onClick={(e) => e.stopPropagation()} 
                />
            </form>
        ) : (
             <p className={cn('text-sm truncate', isSelected ? 'text-stone-800 font-medium' : 'text-stone-700')}>
                {name}
            </p>
        )}
      </div>

      {!isRenaming && (
        <div className="flex items-center opacity-0 group-hover:opacity-100 transition-opacity">
            <Button variant="ghost" size="icon" className="h-7 w-7" onClick={(e) => { e.stopPropagation(); setIsRenaming(true); }}>
                <Edit className="h-4 w-4" />
            </Button>
            <Button variant="ghost" size="icon" className="h-7 w-7 text-destructive/80 hover:text-destructive" onClick={(e) => { e.stopPropagation(); onDelete(conversation); }}>
                <Trash2 className="h-4 w-4" />
            </Button>
        </div>
      )}
    </div>
  );
};

interface HistorySidebarProps {
    conversations: AppConversation[];
    selectedConversationId: string | null;
    onSelectConversation: (id: string) => void;
    onRenameConversation: (id: string, newName: string) => Promise<void>;
    onDeleteConversation: (conversation: AppConversation) => void;
    isLoading: boolean;
}

export const HistorySidebar: React.FC<HistorySidebarProps> = ({ conversations, selectedConversationId, onSelectConversation, onRenameConversation, onDeleteConversation, isLoading }) => {
    if (isLoading) {
        return <div className="flex justify-center items-center h-full"><Loader2 className="h-6 w-6 animate-spin text-muted-foreground" /></div>;
    }

    if (conversations.length === 0) {
        return <div className="flex flex-col items-center justify-center h-full text-center p-4"><p className="text-sm text-muted-foreground">No chat history yet.</p></div>;
    }
    
    return (
        <div className="flex flex-col h-full bg-white">
            <ScrollArea className="flex-grow">
                <div className="space-y-0.5 p-2">
                    {conversations.map((convo) => (
                        <HistoryItem 
                            key={convo.id} 
                            conversation={convo}
                            isSelected={convo.id === selectedConversationId} 
                            onSelect={onSelectConversation}
                            onRename={onRenameConversation}
                            onDelete={onDeleteConversation}
                        />
                    ))}
                </div>
            </ScrollArea>
        </div>
    );
};

================
File: src/components/oracle/PagePreview.tsx
================
// src/components/oracle/PagePreview.tsx

import React, { useState, useRef, useEffect } from 'react';
import { Document, Page } from 'react-pdf';
import { Loader2 } from 'lucide-react';

interface PagePreviewProps {
  fileUrl: string;
  pageNumber: number;
}

export const PagePreview: React.FC<PagePreviewProps> = ({ fileUrl, pageNumber }) => {
  const [width, setWidth] = useState<number | undefined>();
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleResize = () => {
      if (containerRef.current) {
        setWidth(containerRef.current.clientWidth);
      }
    };
    
    handleResize(); // Set initial width
    
    const resizeObserver = new ResizeObserver(handleResize);
    if (containerRef.current) {
      resizeObserver.observe(containerRef.current);
    }
    
    return () => {
      resizeObserver.disconnect();
    };
  }, []);

  return (
    <div ref={containerRef} className="w-full h-full">
      <Document
        file={fileUrl}
        loading={
          <div className="flex items-center justify-center h-full">
            <Loader2 className="h-6 w-6 animate-spin text-stone-400" />
          </div>
        }
        error={
          <div className="flex items-center justify-center h-full text-xs text-red-500">
            Error loading preview
          </div>
        }
      >
        <Page
          pageNumber={pageNumber}
          width={width}
          renderTextLayer={false}
          renderAnnotationLayer={false}
        />
      </Document>
    </div>
  );
};

================
File: src/components/oracle/SourcesPanel.tsx
================
// src/components/oracle/SourcesPanel.tsx
import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';
import { Separator } from '@/components/ui/separator';
import { X, BookCheck } from 'lucide-react';
import { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group';
import { cn } from '@/lib/utils';
import { ActiveSource } from '@/services/chatMessageService';
import { FileType } from '@/features/files/types';
import { DocumentViewer } from './DocumentViewer';
import { PagePreview } from './PagePreview';
import { SourcesUploadPanel } from './upload-panel'; // Corrected import path
import { User } from '@supabase/supabase-js';

interface SourcesPanelProps {
  sourcesToDisplay: ActiveSource[];
  selectedSourceNumber: number | null;
  handleSourceSelect: (sourceNumber: number) => void;
  handleClearSourceSelection: () => void;
  selectedFile: FileType | null;
  user: User | null;
}

export const SourcesPanel: React.FC<SourcesPanelProps> = ({
  sourcesToDisplay,
  selectedSourceNumber,
  handleSourceSelect,
  handleClearSourceSelection,
  selectedFile,
  user,
}) => {
  const [activeView, setActiveView] = useState<'sources' | 'upload'>('sources');
  const sourceTextRefs = React.useRef(new Map<number, HTMLDivElement | null>());
  const sourceThumbnailRefs = React.useRef(new Map());

  const selectedSource = sourcesToDisplay.find(s => s.number === selectedSourceNumber);

  useEffect(() => {
    if (selectedSourceNumber !== null) {
      const sourceElement = sourceTextRefs.current.get(selectedSourceNumber);
      if (sourceElement) {
        sourceElement.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
      }
    }
  }, [selectedSourceNumber]);

  return (
    <div className="w-[40%] flex flex-col h-full rounded-lg border border-marble-400 bg-white overflow-hidden">
      <header className="flex items-center justify-between gap-x-2 border-b border-marble-400 px-4 h-14 flex-shrink-0">
        <div /> 
        <ToggleGroup
          type="single"
          value={activeView}
          onValueChange={(value) => {
            if (value) setActiveView(value as 'sources' | 'upload');
          }}
          size="sm"
        >
          <ToggleGroupItem value="sources">Sources</ToggleGroupItem>
          <ToggleGroupItem value="upload">Upload</ToggleGroupItem>
        </ToggleGroup>
      </header>
      
      {activeView === 'sources' ? (
        <div className="flex-1 flex flex-col min-h-0">
          <div className={cn("transition-all duration-300 ease-in-out", selectedSourceNumber === null ? 'flex-1 min-h-0' : 'h-40 flex-shrink-0')}>
            <div className="h-full p-4">
              <ScrollArea className="h-full pr-2">
                <div className="space-y-4">
                  {sourcesToDisplay.length > 0 ? (
                    sourcesToDisplay.map((source) => (
                      <div
                        key={source.file.file_id + source.number}
                        ref={(el) => sourceTextRefs.current.set(source.number, el)}
                        onClick={() => handleSourceSelect(source.number)}
                        className={cn(
                          "p-3 bg-stone-50 rounded-lg border cursor-pointer transition-all relative group",
                          selectedSourceNumber === source.number
                            ? "border-stone-700"
                            : "border-stone-200 hover:border-stone-300"
                        )}
                      >
                        {selectedSourceNumber === source.number && (
                          <Button variant="ghost" size="icon" className="absolute top-1 right-1 h-6 w-6 text-stone-400 hover:text-stone-700" onClick={(e) => { e.stopPropagation(); handleClearSourceSelection(); }}>
                            <X className="h-4 w-4" />
                          </Button>
                        )}
                        <p className="text-xs font-semibold text-stone-700 mb-1 pr-6">Source {source.number}: {source.file.name} (Page {source.pageNumber || 'N/A'})</p>
                        <blockquote className="text-sm text-stone-600 border-l-2 pl-3 whitespace-pre-wrap max-h-20 overflow-y-auto">{source.content}</blockquote>
                      </div>
                    ))
                  ) : (
                    <div className="text-center text-sm text-muted-foreground pt-10 px-4">
                      <BookCheck className="mx-auto h-12 w-12 text-stone-300 mb-4" />
                      <p className="font-medium text-stone-600">Sources Panel</p>
                      <p>Sources for a selected AI-generated message will appear here.</p>
                    </div>
                  )}
                </div>
              </ScrollArea>
            </div>
          </div>
          <Separator />
          <div className={cn("flex flex-col transition-all duration-300 ease-in-out", selectedSourceNumber === null ? 'flex-shrink-0' : 'flex-1 min-h-0')}>
            <div className="min-h-0 flex-1 p-4">
              {selectedSourceNumber === null ? (
                <ScrollArea className="w-full h-full">
                  <div className="flex w-max space-x-4 pb-2 h-full">
                    {sourcesToDisplay.map((source) => (
                      <div
                        key={source.file.file_id + '-' + source.number}
                        ref={(el) => sourceThumbnailRefs.current.set(source.file.file_id, el)}
                        onClick={() => handleSourceSelect(source.number)}
                        className="flex-shrink-0 w-56 flex flex-col text-center cursor-pointer"
                      >
                        <p className="text-xs font-medium text-stone-700 mb-2 truncate" title={source.file.name}>{source.file.name}</p>
                        <div className={cn("h-56 bg-stone-100 rounded-md border flex items-center justify-center overflow-hidden", selectedSourceNumber === source.number ? "border-stone-700" : "border-stone-200")}>
                          {source.file.type === 'application/pdf' && source.file.url && source.pageNumber ? (
                            <PagePreview fileUrl={source.file.url} pageNumber={source.pageNumber} />
                          ) : (
                            <img src={source.file.thumbnail_url || `https://placehold.co/224x224/e2e8f0/334155?text=IMG`} alt="File Thumbnail" className="w-full h-full object-cover"/>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                  <ScrollBar orientation="horizontal" />
                </ScrollArea>
              ) : (
                selectedFile && <DocumentViewer file={selectedFile} initialPage={selectedSource?.pageNumber} />
              )}
            </div>
          </div>
        </div>
      ) : (
        <SourcesUploadPanel user={user} />
      )}
    </div>
  );
};

================
File: src/components/ui/accordion.tsx
================
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

================
File: src/components/ui/alert-dialog.tsx
================
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

================
File: src/components/ui/alert.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

================
File: src/components/ui/aspect-ratio.tsx
================
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

================
File: src/components/ui/avatar.tsx
================
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-md",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-md bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: src/components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: src/components/ui/breadcrumb.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

================
File: src/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:border-volcanic disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default:
          "bg-stone-700 text-stone-50 shadow hover:bg-stone-800",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
           "border border-input bg-[#e6e6e6] shadow-sm hover:bg-stone-300 text-stone-900",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:text-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-8 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-8 w-8",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: src/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: src/components/ui/carousel.tsx
================
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

================
File: src/components/ui/chart.tsx
================
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

================
File: src/components/ui/checkbox.tsx
================
// src/components/ui/checkbox.tsx
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-stone-400 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-stone-700 data-[state=checked]:text-white data-[state=checked]:border-stone-700",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

================
File: src/components/ui/collapsible.tsx
================
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

================
File: src/components/ui/command.tsx
================
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

================
File: src/components/ui/ConfirmationDialog.tsx
================
// src/components/ui/ConfirmationDialog.tsx
import React from 'react';
import {
  AlertDialog,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { Loader2 } from 'lucide-react';

interface ConfirmationDialogProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  onConfirm: () => void;
  title: string;
  description: string;
  confirmText?: string;
  cancelText?: string;
  isConfirming: boolean;
}

export const ConfirmationDialog: React.FC<ConfirmationDialogProps> = ({
  isOpen,
  onOpenChange,
  onConfirm,
  title,
  description,
  confirmText = "Confirm",
  cancelText = "Cancel",
  isConfirming,
}) => {
  return (
    <AlertDialog open={isOpen} onOpenChange={onOpenChange}>
      <AlertDialogContent className="bg-white border border-stone-400 rounded-lg">
        <AlertDialogHeader>
          <AlertDialogTitle>{title}</AlertDialogTitle>
          <AlertDialogDescription>
            {description}
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <Button 
            variant="outline" 
            size="sm" 
            onClick={() => onOpenChange(false)} 
            disabled={isConfirming}
          >
            {cancelText}
          </Button>
          <Button
            size="sm"
            onClick={onConfirm}
            disabled={isConfirming}
            className="bg-stone-700 text-stone-50 hover:bg-stone-800"
          >
            {isConfirming && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {confirmText}
          </Button>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
};

================
File: src/components/ui/context-menu.tsx
================
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

================
File: src/components/ui/dialog.tsx
================
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"
import { cn } from "@/lib/utils"
import { Cross2Icon } from '@radix-ui/react-icons';

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  // Add the 'hideCloseButton' prop to the component's props
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content> & {
    hideCloseButton?: boolean
  }
>(({ className, children, hideCloseButton, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',
        className
      )}
      {...props}
    >
      {children}
      {/* Conditionally render the close button */}
      {!hideCloseButton && (
        <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
          <Cross2Icon className="h-4 w-4" />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      )}
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName


const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: src/components/ui/drawer.tsx
================
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

================
File: src/components/ui/dropdown-menu.tsx
================
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-stone-900 focus:text-stone-50 data-[state=open]:bg-stone-900 data-[state=open]:text-stone-50",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-stone-900 focus:text-stone-50 data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-stone-900 focus:text-stone-50 data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-stone-900 focus:text-stone-50 data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: src/components/ui/form.tsx
================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: src/components/ui/hover-card.tsx
================
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

================
File: src/components/ui/index.ts
================
// Export all UI components for easier imports
export { Button } from "./button";
export { Input } from "./input";
export { Label } from "./label";
export { Popover, PopoverTrigger, PopoverContent } from "./popover";

================
File: src/components/ui/input-otp.tsx
================
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

================
File: src/components/ui/input.tsx
================
import * as React from "react"
import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:border-volcanic disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: src/components/ui/label.tsx
================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: src/components/ui/menubar.tsx
================
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

================
File: src/components/ui/navigation-menu.tsx
================
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

================
File: src/components/ui/pagination.tsx
================
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}

================
File: src/components/ui/popover.tsx
================
// src/components/ui/popover.tsx
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverAnchor = PopoverPrimitive.Anchor // <-- ADD THIS LINE

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor } // <-- AND ADD IT HERE

================
File: src/components/ui/progress.tsx
================
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

================
File: src/components/ui/radio-group.tsx
================
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

================
File: src/components/ui/resizable.tsx
================
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

================
File: src/components/ui/scroll-area.tsx
================
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: src/components/ui/select.tsx
================
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-8 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:border-volcanic disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
     "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-stone-700 focus:text-stone-50 data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: src/components/ui/separator.tsx
================
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: src/components/ui/sheet.tsx
================
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  VariantProps<typeof sheetVariants> { }

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}

================
File: src/components/ui/sidebar.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

================
File: src/components/ui/skeleton.tsx
================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: src/components/ui/slider.tsx
================
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

================
File: src/components/ui/sonner.tsx
================
import { useTheme } from "next-themes"
import { Toaster as Sonner, toast } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster, toast }

================
File: src/components/ui/switch.tsx
================
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:border-2 focus-visible:border-volcanic disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: src/components/ui/table.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

================
File: src/components/ui/tabs.tsx
================
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:border focus-visible:border-volcanic disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:border-volcanic",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: src/components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

export type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:border-volcanic disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }

================
File: src/components/ui/time-input.tsx
================
// src/components/ui/time-input.tsx
import React, { useState, useMemo, useEffect, useRef } from 'react';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Command, CommandItem, CommandList } from '@/components/ui/command';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { cn } from '@/lib/utils';
import { format, parse } from 'date-fns';

interface TimeInputProps {
  value: string; // Expects "HH:mm" format
  onChange: (value: string) => void; // Returns "HH:mm" format
}

// Helper to generate time options
const generateTimeOptions = () => {
  const options = [];
  const date = new Date();
  for (let i = 0; i < 24 * 4; i++) {
    const minutes = i * 15;
    date.setHours(0, minutes, 0, 0);
    options.push({
      value: format(date, 'HH:mm'),
      label: format(date, 'h:mm a').replace(' AM', 'am').replace(' PM', 'pm'),
    });
  }
  return options;
};

// Helper to parse various time string formats
const parseTimeString = (timeStr: string): string | null => {
    if (!timeStr) return null;
    const normalizedStr = timeStr.toLowerCase().replace(/[\s.]/g, '');
    const patterns = [
        { regex: /^(\d{1,2}):(\d{2})([ap]m?)$/, format: "h:mma" },
        { regex: /^(\d{1,2})([ap]m?)$/, format: "ha" },
        { regex: /^(\d{1,2}):(\d{2})$/, format: "H:mm" },
        { regex: /^(\d{3,4})$/, format: "HHmm" },
    ];

    for (const pattern of patterns) {
        if (pattern.regex.test(normalizedStr)) {
            try {
                const parsedDate = parse(normalizedStr, pattern.format, new Date());
                if (!isNaN(parsedDate.getTime())) {
                    return format(parsedDate, 'HH:mm');
                }
            } catch (e) { /* continue */ }
        }
    }
    
    if (/^\d{1,2}$/.test(normalizedStr)) {
        const hour = parseInt(normalizedStr, 10);
        if (hour >= 0 && hour < 24) {
             const date = new Date();
             date.setHours(hour, 0);
             return format(date, 'HH:mm');
        }
    }

    return null;
};


export const TimeInput: React.FC<TimeInputProps> = ({ value, onChange }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [isSelecting, setIsSelecting] = useState(false);
  const [hasBeenOpened, setHasBeenOpened] = useState(false);
  const timeOptions = useMemo(generateTimeOptions, []);
  const popoverContentRef = useRef<HTMLDivElement>(null);
  
  const displayValue = useMemo(() => {
    if (!value) return '';
    const [hour, minute] = value.split(':').map(Number);
    
    if (isNaN(hour) || isNaN(minute)) return '';
    const date = new Date();
    date.setHours(hour, minute);
    return format(date, 'h:mm a').replace(' AM', 'am').replace(' PM', 'pm');
  }, [value]);

  const [inputValue, setInputValue] = useState(displayValue);

  useEffect(() => {
    if (isOpen && value) {
        setTimeout(() => {
            const selectedElement = popoverContentRef.current?.querySelector(`[data-value="${value}"]`);
            if (selectedElement) {
                selectedElement.scrollIntoView({ block: 'center', behavior: 'instant' });
            }
        }, 100);
    }
  }, [isOpen, value]);

  useEffect(() => {
    setInputValue(displayValue);
  }, [displayValue]);

  const handleSelect = (newTimeValue: string) => {
    setIsSelecting(true);
    onChange(newTimeValue);
    setIsOpen(false);
    setTimeout(() => setIsSelecting(false), 100);
  };
  
  const handleManualInput = () => {
    const parsedTime = parseTimeString(inputValue);
    if (parsedTime) {
      onChange(parsedTime);
    } else {
      setInputValue(displayValue);
    }
  };

  return (
    <Popover open={isOpen} onOpenChange={setIsOpen}>
      <PopoverTrigger asChild>
        <Input
          type="text"
          value={inputValue}
          onFocus={(e) => {
            if (!hasBeenOpened) {
              setHasBeenOpened(true);
              setTimeout(() => {
                setIsOpen(true);
                setTimeout(() => e.currentTarget.select(), 10);
              }, 10);
            } else {
              setIsOpen(true);
              setTimeout(() => e.currentTarget.select(), 0);
            }
          }}
          onChange={(e) => setInputValue(e.target.value)}
          onBlur={() => {
            if (isSelecting) return;
            setTimeout(() => {
                if (isOpen && !popoverContentRef.current?.contains(document.activeElement)) {
                    handleManualInput();
                    setIsOpen(false);
                }
            }, 50);
          }}
          onKeyDown={(e) => {
            if (e.key === 'Enter') {
              handleManualInput();
              e.currentTarget.blur();
            }
          }}
          className={cn(
            "w-full border-none bg-transparent p-0 text-center focus:outline-none focus-visible:ring-0",
          )}
        />
      </PopoverTrigger>
      <PopoverContent 
        ref={popoverContentRef}
        className="w-[var(--radix-popover-trigger-width)] p-0" 
        align="start"
        onMouseDown={(e) => e.preventDefault()}
      >
        <Command>
          <CommandList>
            <ScrollArea className="h-60">
              {timeOptions.map((option) => (
                <CommandItem
                  key={option.value}
                  data-value={option.value}
                  value={option.label}
                  onSelect={() => handleSelect(option.value)}
                  className={cn(
                    "flex justify-center text-sm whitespace-nowrap",
                    "data-[selected='true']:bg-stone-700 data-[selected='true']:text-stone-50",
                    value === option.value && "bg-stone-100 font-medium"
                  )}
                >
                  {option.label}
                </CommandItem>
              ))}
            </ScrollArea>
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  );
};

================
File: src/components/ui/toast.tsx
================
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: src/components/ui/toaster.tsx
================
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"
import { useToast } from "@/components/ui/use-toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: src/components/ui/toggle-group.tsx
================
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

================
File: src/components/ui/toggle.tsx
================
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-stone-700 data-[state=on]:text-stone-50",
  {
    variants: {
      variant: {
        default: "bg-transparent text-muted-foreground",
        outline:
          "border border-input bg-transparent hover:border-foreground",
      },
      size: {
        default: "h-8 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    onKeyDown={(e) => {
      if (e.key === 'Enter') {
        e.preventDefault();
      }
    }}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

================
File: src/components/ui/tooltip.tsx
================
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: src/components/ui/use-toast.ts
================
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_VALUE
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: src/context/AuthContext.tsx
================
// src/context/AuthContext.tsx
import React, { createContext, useState, useEffect, useContext, ReactNode } from 'react';
import { supabase } from '@/integrations/supabase/client';
import type { Session, User } from '@supabase/supabase-js';

interface AuthContextType {
  user: User | null;
  session: Session | null;
  isAuthenticated: boolean;
  isLoading: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);
  const [session, setSession] = useState<Session | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Check for session on initial load
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session);
      setUser(session?.user ?? null);
      setIsLoading(false);
    });

    // Set up the listener for auth state changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
      setUser(session?.user ?? null);
      // Ensure loading is false after the first auth event
      if (isLoading) setIsLoading(false);
    });

    return () => {
      subscription?.unsubscribe();
    };
  }, []);

  const value = {
    user,
    session,
    isAuthenticated: !!user,
    isLoading,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

================
File: src/context/LoaderContext.tsx
================
// src/context/LoaderContext.tsx
import React, { createContext, useContext, useRef, ReactNode } from 'react';
import LoadingBar, { LoadingBarRef } from 'react-top-loading-bar';
import { useNavigate } from 'react-router-dom';

interface LoaderContextType {
  loader: LoadingBarRef | null;
  loadPage: (path: string) => void;
}

const LoaderContext = createContext<LoaderContextType | null>(null);

export const usePageLoader = () => {
  const context = useContext(LoaderContext);
  if (!context) {
    throw new Error('usePageLoader must be used within a LoaderProvider');
  }
  return context;
};

interface LoaderProviderProps {
  children: ReactNode;
}

export const LoaderProvider = ({ children }: LoaderProviderProps) => {
  const loaderRef = useRef<LoadingBarRef>(null);
  const navigate = useNavigate();

  const loadPage = (path: string) => {
    if (loaderRef.current) {
      // Start the loading bar animation immediately
      loaderRef.current.continuousStart();
    }
    // MODIFICATION: The setTimeout wrapper is removed to navigate instantly.
    navigate(path);
  };

  return (
    <LoaderContext.Provider value={{ loader: loaderRef.current, loadPage }}>
      {/* The loading bar component remains */}
      <LoadingBar color='#F6F2E9' ref={loaderRef} shadow={true} height={3} />
      {children}
    </LoaderContext.Provider>
  );
};

================
File: src/features/files/types.ts
================
// src/features/files/types.ts

export interface FolderType {
  folder_id: string;
  name: string;
  user_id: string;
  class_id: string | null;
  parent_id: string | null;
  created_at: string;
}

export interface FileType {
  file_id: string;
  name: string;
  size: number;
  type: string;
  url?: string | null;
  thumbnail_url?: string | null;
  status: 'processing' | 'complete' | 'error' | 'processed_text';
  user_id: string;
  class_id: string | null;
  folder_id: string | null;
  last_modified: string;
  created_at: string;
  category: string | null;
  tags: string[] | null;
}

================
File: src/hooks/use-Debounce.ts
================
// src/hooks/use-debounce.ts
import { useState, useEffect } from 'react';

// This hook delays updating a value until a certain amount of time has passed without any changes.
// It's perfect for search inputs to prevent sending too many API requests.
export function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    // Set up a timer to update the debounced value after the specified delay
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    // Clean up the timer if the value changes before the delay has passed
    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]); // Only re-run the effect if value or delay changes

  return debouncedValue;
}

================
File: src/hooks/use-mobile.tsx
================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

================
File: src/hooks/use-sidebar-state.ts
================
// src/hooks/use-sidebar-state.ts
import { useState, useEffect } from "react";
import { useLocation } from "react-router-dom";
import { supabase } from "@/integrations/supabase/client";
// Removed: import { useClassWidgets } from "@/hooks/use-class-widgets";
// Removed: import { WidgetType } from "@/hooks/use-widgets";
import type { User } from "@supabase/supabase-js";

export function useSidebarState() {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  // Removed: const [isWidgetsDialogOpen, setIsWidgetsDialogOpen] = useState(false);
  const [activeClassName, setActiveClassName] = useState<string | null>(null);
  const location = useLocation();
  // Removed: const { enabledWidgets, isLoading: widgetsLoading } = useClassWidgets(); // No longer used

  // Load user and auth state
  useEffect(() => {
    const fetchUser = async () => {
      try {
        const { data } = await supabase.auth.getSession();
        setUser(data.session?.user || null);
      } finally {
        setLoading(false);
      }
    };
    
    fetchUser();
    
    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      setUser(session?.user || null);
    });
    
    // Get active class name from session storage
    const activeClass = sessionStorage.getItem('activeClass');
    if (activeClass) {
      try {
        const parsedClass: { class_id: string; class_name: string; } = JSON.parse(activeClass);
        setActiveClassName(parsedClass.class_name);
      } catch (e: unknown) {
        console.error("Error parsing active class:", e);
      }
    }
    
    return () => subscription.unsubscribe();
  }, []);

  // Update active class name when location changes
  useEffect(() => {
    if (location.pathname === '/') {
      setActiveClassName(null);
    } else {
      const activeClass = sessionStorage.getItem('activeClass');
      if (activeClass) {
        try {
          const parsedClass: { class_id: string; class_name: string; } = JSON.parse(activeClass);
          setActiveClassName(parsedClass.class_name);
        } catch (e: unknown) {
          console.error("Error parsing active class:", e);
        }
      }
    }
  }, [location.pathname]);

  return {
    user,
    loading,
    // Removed: isWidgetsDialogOpen,
    // Removed: setIsWidgetsDialogOpen,
    activeClassName,
    // Removed: enabledWidgets,
    // Removed: widgetsLoading
  };
}

================
File: src/hooks/use-toast.ts
================
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: src/hooks/useCalendarData.ts
================
// src/hooks/useCalendarData.ts
import { useState, useEffect, useCallback } from 'react';
import { useToast } from '@/hooks/use-toast';
import { classOpenAIConfigService, ClassConfig } from '@/services/classOpenAIConfig';
import { calendarEventService, CalendarEvent, NewCalendarEvent } from '@/services/calendarEventService';
import { ClassConfigWithColor } from '@/features/calendar/types';
import { DeletionScope } from '@/components/calendar/DeleteRecurringEventDialog';

const COLOR_SWATCHES = [
    'bg-red-500', 'bg-orange-500', 'bg-yellow-500', 'bg-lime-500', 'bg-green-500', 'bg-teal-500',
    'bg-cyan-500', 'bg-blue-500', 'bg-indigo-500', 'bg-purple-500', 'bg-fuchsia-500', 'bg-pink-500',
];

export const useCalendarData = () => {
    const [classes, setClasses] = useState<ClassConfigWithColor[]>([]);
    const [isLoadingClasses, setIsLoadingClasses] = useState(true);
    const [events, setEvents] = useState<CalendarEvent[]>([]);
    const [isLoadingEvents, setIsLoadingEvents] = useState(true);
    const { toast } = useToast();

    const fetchAllData = useCallback(async () => {
        setIsLoadingClasses(true);
        setIsLoadingEvents(true);
        try {
            const [fetchedClasses, fetchedEvents] = await Promise.all([
                classOpenAIConfigService.getAllClasses(),
                calendarEventService.getEvents()
            ]);
            const classesWithColors = fetchedClasses.map((cls, index) => ({
                ...cls,
                color: cls.color || COLOR_SWATCHES[index % COLOR_SWATCHES.length]
            }));
            setClasses(classesWithColors);
            setEvents(fetchedEvents);
        } catch (error) {
            toast({ title: "Error fetching data", description: error instanceof Error ? error.message : "Could not load calendar data.", variant: "destructive" });
        } finally {
            setIsLoadingClasses(false);
            setIsLoadingEvents(false);
        }
    }, [toast]);

    useEffect(() => { fetchAllData(); }, [fetchAllData]);

    const updateClassColor = async (classId: string, newColor: string) => {
        try {
            const updatedClass = await classOpenAIConfigService.updateClassColor(classId, newColor);
            setClasses(prevClasses =>
                prevClasses.map(c =>
                    c.class_id === classId ? { ...c, color: updatedClass.color || c.color } : c
                )
            );
        } catch (error) {
            toast({ title: "Error", description: "Failed to update class color.", variant: "destructive" });
        }
    };

    const createEvent = async (eventData: NewCalendarEvent) => {
        try {
            const createdEvents = await calendarEventService.createEvent(eventData);
            setEvents(prev => [...prev, ...createdEvents]);
            const toastDescription = createdEvents.length > 1 ? `Your recurring event "${createdEvents[0].title}" has been scheduled.` : `"${createdEvents[0].title}" has been added.`;
            toast({ title: "Event Created", description: toastDescription });
            return true;
        } catch (error) {
            toast({ title: "Error", description: "Failed to create event.", variant: "destructive" });
            return false;
        }
    };

    const updateEvent = async (eventId: string, eventData: NewCalendarEvent) => {
        try {
            const updatedEvent = await calendarEventService.updateEvent(eventId, eventData);
            setEvents(prev => prev.map(e => e.id === eventId ? updatedEvent : e));
            toast({ title: "Event Updated", description: `"${updatedEvent.title}" has been updated.` });
            return true;
        } catch (error) {
            toast({ title: "Error", description: "Failed to update event.", variant: "destructive" });
            return false;
        }
    };

    const deleteEvent = async (event: CalendarEvent, scope: DeletionScope) => {
        try {
            await calendarEventService.deleteEvent(event, scope);
            await fetchAllData();
            toast({ title: "Event Deleted" });
        } catch (error) {
            toast({ title: "Error", description: "Failed to delete event.", variant: "destructive" });
        }
    };

    return { classes, setClasses, isLoadingClasses, events, isLoadingEvents, createEvent, updateEvent, deleteEvent, updateClassColor };
};

================
File: src/hooks/useClassesPage.ts
================
// src/hooks/useClassesPage.ts
import { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { useToast } from '@/hooks/use-toast';
import { usePageLoader } from '@/context/LoaderContext';
import { supabase } from '@/integrations/supabase/client';
import { User, RealtimeChannel } from '@supabase/supabase-js';
import { ClassConfig, classOpenAIConfigService } from '@/services/classOpenAIConfig';
import { fileService } from '@/services/fileService';
import { FolderType, FileType } from '@/features/files/types';
import { UploadingFile } from '@/components/classes/UploadProgressToast';
import { DeletingFile } from '@/components/classes/DeletionProgressToast';
import { formatFileSize } from '@/lib/utils';

export const useClassesPage = () => {
    const { loader } = usePageLoader();
    const { toast } = useToast();
    const [user, setUser] = useState<User | null>(null);
    const [classes, setClasses] = useState<ClassConfig[]>([]);
    const [folders, setFolders] = useState<FolderType[]>([]);
    const [allUserFolders, setAllUserFolders] = useState<FolderType[]>([]);
    const [files, setFiles] = useState<FileType[]>([]);
    const [allClassFiles, setAllClassFiles] = useState<FileType[]>([]);
    const [allFiles, setAllFiles] = useState<(FileType & { class: string; })[]>([]);
    const [recentFiles, setRecentFiles] = useState<FileType[]>(() => {
        try {
            const item = window.localStorage.getItem('eidoRecentFiles');
            return item ? JSON.parse(item) as FileType[] : [];
        } catch (error) {
            console.error("Error parsing recent files from localStorage", error);
            return [];
        }
    });
    const [selectedClass, setSelectedClass] = useState<ClassConfig | null>(null);
    const [currentFolderId, setCurrentFolderId] = useState<string | null>(null);
    const [breadcrumbs, setBreadcrumbs] = useState<{ name: string; id: string | null }[]>([{ name: 'Home', id: null }]);
    const [isLoading, setIsLoading] = useState(true);
    const [isDeleting, setIsDeleting] = useState(false);
    const [filesToDelete, setFilesToDelete] = useState<FileType[]>([]);
    const [deletingFiles, setDeletingFiles] = useState<DeletingFile[]>([]);
    const [isCreateClassOpen, setIsCreateClassOpen] = useState(false);
    const [isNewFolderOpen, setIsNewFolderOpen] = useState(false);
    const [isUploadOpen, setIsUploadOpen] = useState(false);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [previewedFile, setPreviewedFile] = useState<FileType | null>(null);
    const [isDeleteClassConfirmationOpen, setIsDeleteClassConfirmationOpen] = useState(false);
    const [classToDelete, setClassToDelete] = useState<ClassConfig | null>(null);
    const [isDeletingClass, setIsDeletingClass] = useState(false);
    const [viewMode, setViewMode] = useState<'list' | 'grid'>('grid');
    const [uploadingFiles, setUploadingFiles] = useState<UploadingFile[]>([]);
    const fileSubscription = useRef<RealtimeChannel | null>(null);

    useEffect(() => {
        if (loader) loader.continuousStart();
        const fetchUserAndInitialData = async () => {
            const { data: { session } } = await supabase.auth.getSession();
            const currentUser = session?.user ?? null;
            setUser(currentUser);
            if (currentUser) {
                const allFolders = await fileService.getAllFoldersForUser();
                setAllUserFolders(allFolders);
            }
        };
        fetchUserAndInitialData();
        return () => {
            if (fileSubscription.current) {
                supabase.removeChannel(fileSubscription.current);
            }
        };
    }, [loader]);

    useEffect(() => {
        try {
            window.localStorage.setItem('eidoRecentFiles', JSON.stringify(recentFiles));
        } catch (error) {
            console.error("Failed to save recent files to localStorage", error);
        }
    }, [recentFiles]);

    const fetchData = useCallback(async () => {
        if (!user) return;
        setIsLoading(true);
        try {
            if (selectedClass) {
                const [fetchedFolders, fetchedFiles, fetchedAllClassFiles] = await Promise.all([
                    fileService.getFolders(selectedClass.class_id, currentFolderId),
                    fileService.getFiles(selectedClass.class_id, currentFolderId),
                    fileService.getAllFilesForClass(selectedClass.class_id),
                ]);
                setFolders(fetchedFolders);
                setFiles(fetchedFiles);
                setAllClassFiles(fetchedAllClassFiles);
            } else {
                const [fetchedClasses, fetchedAllFilesResult] = await Promise.all([
                    classOpenAIConfigService.getAllClasses(),
                    fileService.getAllFilesWithClass()
                ]);
                setClasses(fetchedClasses);
                setAllFiles(fetchedAllFilesResult as (FileType & { class: string })[]);
                setFolders([]);
                setFiles([]);
            }
        } catch (error) {
            toast({ title: 'Error fetching data', description: (error instanceof Error) ? error.message : "An unknown error occurred.", variant: 'destructive' });
        } finally {
            setIsLoading(false);
            if (loader) loader.complete();
        }
    }, [user, selectedClass, currentFolderId, toast, loader]);

    useEffect(() => {
        fetchData();
    }, [fetchData]);

    const handleUploadFiles = async (filesToUpload: File[]) => {
        if (!user || !selectedClass) {
            toast({ title: "Upload Failed", description: "A user and class must be selected.", variant: "destructive" });
            return;
        }

        setIsSubmitting(true);
        setIsUploadOpen(false);
        const newUploads: UploadingFile[] = filesToUpload.map((file, index) => ({
            id: `temp-upload-${Date.now()}-${index}`,
            name: file.name,
            status: 'pending',
        }));
        setUploadingFiles(prev => [...prev, ...newUploads]);

        const tempFileEntries: FileType[] = newUploads.map(upload => {
            const file = filesToUpload.find(f => f.name === upload.name)!;
            return {
                file_id: upload.id, name: file.name, size: file.size, type: file.type,
                status: 'processing', folder_id: currentFolderId, user_id: user.id,
                class_id: selectedClass.class_id, last_modified: new Date().toISOString(),
                created_at: new Date().toISOString(), category: null, tags: null
            };
        });
        setFiles(prev => [...prev, ...tempFileEntries]);

        for (const file of filesToUpload) {
            setUploadingFiles(prev => prev.map(uf => uf.name === file.name ? { ...uf, status: 'uploading' } : uf));
            try {
                const storagePath = `${user.id}/${selectedClass.class_id}/${currentFolderId || 'root'}/${Date.now()}-${file.name}`;
                const { data: storageData, error: uploadError } = await supabase.storage.from('file_storage').upload(storagePath, file);
                if (uploadError) throw new Error(`Storage Error: ${uploadError.message}`);

                const processingPayload = {
                    storage_path: storageData.path, original_name: file.name,
                    mime_type: file.type, size: file.size, class_id: selectedClass.class_id,
                    folder_id: currentFolderId,
                };

                const { error: functionError } = await supabase.functions.invoke('upload-file', { body: processingPayload });
                if (functionError) throw new Error(`Function Error: ${functionError.message}`);

                setUploadingFiles(prev => prev.map(uf => uf.name === file.name ? { ...uf, status: 'processing' } : uf));
            } catch (error) {
                setUploadingFiles(prev => prev.map(uf => uf.name === file.name ? { ...uf, status: 'error', errorMessage: (error as Error).message } : uf));
                toast({ title: `Error starting upload for ${file.name}`, description: (error instanceof Error) ? error.message : "An unknown error occurred.", variant: "destructive" });
            }
        }
        setIsSubmitting(false);
    };

    useEffect(() => {
        if (!user || !selectedClass) {
            if (fileSubscription.current) {
                supabase.removeChannel(fileSubscription.current);
                fileSubscription.current = null;
            }
            return;
        }

        const channelId = `files-class-${selectedClass.class_id}`;
        if (fileSubscription.current?.topic.includes(channelId)) return;

        if (fileSubscription.current) supabase.removeChannel(fileSubscription.current);

        const channel = supabase.channel(channelId).on<FileType>(
            'postgres_changes',
            { event: '*', schema: 'public', table: 'files', filter: `class_id=eq.${selectedClass.class_id}` },
            (payload) => {
                const newOrUpdatedFile = payload.new as FileType;
                if (!newOrUpdatedFile?.file_id) return;

                const updateOrAddFile = (prev: FileType[], file: FileType) => {
                    const withoutPlaceholder = prev.filter(f => !(f.name === file.name && f.file_id.startsWith('temp-upload-')));
                    const fileIndex = withoutPlaceholder.findIndex(f => f.file_id === file.file_id);
                    return fileIndex !== -1 ? withoutPlaceholder.map((f, i) => i === fileIndex ? file : f) : [...withoutPlaceholder, file];
                };

                setAllClassFiles(prev => updateOrAddFile(prev, newOrUpdatedFile));
                if (newOrUpdatedFile.folder_id === currentFolderId || (currentFolderId === null && newOrUpdatedFile.folder_id === null)) {
                    setFiles(prev => updateOrAddFile(prev, newOrUpdatedFile));
                }

                const recordForToast = (payload.new || payload.old) as FileType;
                if (recordForToast) {
                    setUploadingFiles(prev => prev.map(uf => {
                        if (uf.name === recordForToast.name) {
                            const newStatus = (recordForToast.status === 'complete' || recordForToast.status === 'processed_text') ? 'complete' : recordForToast.status === 'error' ? 'error' : 'processing';
                            return { ...uf, status: newStatus };
                        }
                        return uf;
                    }));
                }
            }
        ).subscribe((status, err) => {
            if (err) console.error(`Realtime subscription failed for ${channelId}:`, err);
        });

        fileSubscription.current = channel;

        return () => {
            if (fileSubscription.current) {
                supabase.removeChannel(fileSubscription.current);
                fileSubscription.current = null;
            }
        };
    }, [user, selectedClass, currentFolderId]);

    const handleClassClick = (classData: ClassConfig) => {
        setSelectedClass(classData);
        setViewMode('grid');
        setBreadcrumbs([{ name: 'Home', id: null }, { name: classData.class_name, id: classData.class_id }]);
        sessionStorage.setItem('activeClass', JSON.stringify({ class_id: classData.class_id, class_name: classData.class_name }));
    };

    const handleFolderClick = (folderData: FolderType) => {
        setCurrentFolderId(folderData.folder_id);
        setBreadcrumbs([...breadcrumbs, { name: folderData.name, id: folderData.folder_id }]);
    };

    const handleBreadcrumbClick = (index: number) => {
        const newBreadcrumbs = breadcrumbs.slice(0, index + 1);
        setBreadcrumbs(newBreadcrumbs);
        const clickedCrumb = newBreadcrumbs[index];

        if (index === 0) {
            setSelectedClass(null);
            setCurrentFolderId(null);
            sessionStorage.removeItem('activeClass');
        } else {
            const classCrumb = newBreadcrumbs[1];
            setSelectedClass(classes.find(c => c.class_id === classCrumb.id) || null);
            setCurrentFolderId(clickedCrumb.id === classCrumb.id ? null : clickedCrumb.id);
        }
    };

    const getFolderPath = useCallback((file: FileType): string => {
        if (!file.folder_id) return '/';
        let path = '';
        let currentId: string | null = file.folder_id;
        while (currentId) {
            const folder = allUserFolders.find(f => f.folder_id === currentId && f.class_id === file.class_id);
            if (folder) { path = `/${folder.name}${path}`; currentId = folder.parent_id; }
            else break;
        }
        return path || '/';
    }, [allUserFolders]);

    const handleFileRowClick = (file: FileType) => {
        setPreviewedFile(file);
        setRecentFiles(prev => [file, ...prev.filter(f => f.file_id !== file.file_id)].slice(0, 10));
    };

    const confirmDelete = async () => {
        if (filesToDelete.length === 0) return;
        setIsDeleting(true);
        const itemsToProcess: DeletingFile[] = filesToDelete.map(file => ({ id: file.file_id, name: file.name, status: 'pending' }));
        setDeletingFiles(itemsToProcess);

        for (const file of filesToDelete) {
            try {
                setDeletingFiles(prev => prev.map(f => f.id === file.file_id ? { ...f, status: 'deleting' } : f));
                await fileService.deleteFile(file);
                setDeletingFiles(prev => prev.map(f => f.id === file.file_id ? { ...f, status: 'complete' } : f));
            } catch (error) {
                setDeletingFiles(prev => prev.map(f => f.id === file.file_id ? { ...f, status: 'error', errorMessage: (error as Error).message } : f));
                toast({ title: "Deletion Failed", description: (error as Error).message, variant: "destructive" });
            }
        }

        toast({ title: "Deletion process finished" });
        const deletedFileIds = new Set(filesToDelete.map(f => f.file_id));
        setRecentFiles(prev => prev.filter(file => !deletedFileIds.has(file.file_id)));
        if (filesToDelete.some(f => f.file_id === previewedFile?.file_id)) setPreviewedFile(null);
        fetchData();
        setFilesToDelete([]);
        setIsDeleting(false);
    };

    const handleCreateClass = async (className: string) => {
        setIsSubmitting(true);
        try {
            await classOpenAIConfigService.saveConfigForClass(className);
            toast({ title: "Class Created", description: `"${className}" created.` });
            fetchData();
        } catch (error) {
            toast({ title: "Error", description: (error as Error).message, variant: "destructive" });
        } finally {
            setIsSubmitting(false);
            setIsCreateClassOpen(false);
        }
    };

    const handleDeleteClassClick = (classData: ClassConfig) => {
        setClassToDelete(classData);
        setIsDeleteClassConfirmationOpen(true);
    };

    const confirmDeleteClass = async () => {
        if (!classToDelete) return;
    
        const classIdToDelete = classToDelete.class_id;
        const classNameToDelete = classToDelete.class_name;
    
        setIsDeletingClass(true);
        setIsDeleteClassConfirmationOpen(false);
    
        try {
            await classOpenAIConfigService.deleteClass(classIdToDelete);
    
            // Update client-side state immediately after the async operation succeeds
            setClasses(prev => prev.filter(c => c.class_id !== classIdToDelete));
            setRecentFiles(prev => prev.filter(file => file.class_id !== classIdToDelete));
            
            if (selectedClass?.class_id === classIdToDelete) {
                setSelectedClass(null);
                setCurrentFolderId(null);
                setBreadcrumbs([{ name: 'Home', id: null }]);
                sessionStorage.removeItem('activeClass');
            }
    
            if (previewedFile?.class_id === classIdToDelete) {
                setPreviewedFile(null);
            }
            
            toast({
                title: "Class Deleted",
                description: `"${classNameToDelete}" and all associated data have been permanently removed.`
            });
    
        } catch (error) {
            toast({
                title: "Deletion Failed",
                description: (error as Error).message,
                variant: "destructive"
            });
            // Re-fetch data on failure to ensure UI is in a consistent state
            fetchData();
        } finally {
            setIsDeletingClass(false);
            setClassToDelete(null);
        }
    };

    const handleCreateFolder = async (folderName: string) => {
        if (!selectedClass) return;
        setIsSubmitting(true);
        try {
            await fileService.createFolder(folderName, selectedClass.class_id, currentFolderId);
            toast({ title: "Folder Created", description: `"${folderName}" created.` });
            fetchData();
        } catch (error) {
            toast({ title: "Error", description: (error as Error).message, variant: "destructive" });
        } finally {
            setIsSubmitting(false);
            setIsNewFolderOpen(false);
        }
    };

    const classesWithStats = useMemo(() => {
        if (!classes || !allFiles) return [];
        return classes.map(cls => {
            const filesForClass = allFiles.filter(file => file.class_id === cls.class_id);
            const totalSize = filesForClass.reduce((acc, file) => acc + (file.size || 0), 0);
            return { ...cls, files: filesForClass.length, size: formatFileSize(totalSize) };
        });
    }, [classes, allFiles]);

    const foldersWithStats = useMemo(() => {
        if (!folders.length) return [];
        const fileMapByFolder = new Map<string, FileType[]>();
        allClassFiles.forEach(file => {
            const folderId = file.folder_id || 'root';
            if (!fileMapByFolder.has(folderId)) fileMapByFolder.set(folderId, []);
            fileMapByFolder.get(folderId)?.push(file);
        });
        const statsCache = new Map<string, { count: number; size: number }>();
        const getFolderStats = (folderId: string): { count: number; size: number } => {
            if (statsCache.has(folderId)) return statsCache.get(folderId)!;
            let count = fileMapByFolder.get(folderId)?.length || 0;
            let size = (fileMapByFolder.get(folderId) || []).reduce((acc, file) => acc + (file.size || 0), 0);
            allUserFolders.filter(f => f.parent_id === folderId).forEach(subFolder => {
                const subStats = getFolderStats(subFolder.folder_id);
                count += subStats.count;
                size += subStats.size;
            });
            statsCache.set(folderId, { count, size });
            return { count, size };
        };
        return folders.map(folder => {
            const stats = getFolderStats(folder.folder_id);
            return { ...folder, files: stats.count, size: formatFileSize(stats.size), folderName: folder.name };
        });
    }, [folders, allClassFiles, allUserFolders]);

    return {
        user, classes, folders, files, allClassFiles, allFiles, recentFiles,
        selectedClass, currentFolderId, breadcrumbs, isLoading, isDeleting,
        filesToDelete, deletingFiles, isCreateClassOpen, isNewFolderOpen,
        isUploadOpen, isSubmitting, previewedFile, isDeleteClassConfirmationOpen,
        classToDelete, isDeletingClass, viewMode, uploadingFiles,
        
        setRecentFiles, setSelectedClass, setCurrentFolderId, setBreadcrumbs,
        setIsLoading, setIsDeleting, setFilesToDelete, setDeletingFiles,
        setIsCreateClassOpen, setIsNewFolderOpen, setIsUploadOpen, setIsSubmitting,
        setPreviewedFile, setIsDeleteClassConfirmationOpen, setClassToDelete,
        setIsDeletingClass, setViewMode, setUploadingFiles,
        
        fetchData, handleUploadFiles, handleClassClick, handleFolderClick,
        handleBreadcrumbClick, getFolderPath, handleFileRowClick, confirmDelete,
        handleCreateClass, handleDeleteClassClick, confirmDeleteClass, handleCreateFolder,
        classesWithStats, foldersWithStats
    };
};

================
File: src/hooks/useOracle.ts
================
// src/hooks/useOracle.ts

import { useState, useEffect, useRef, useCallback, useMemo } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { supabase } from '@/integrations/supabase/client';
import { User } from '@supabase/supabase-js';
import { useToast } from '@/hooks/use-toast';
import { AppConversation, conversationService } from '@/services/conversationService';
import { chatMessageService, ChatMessageApp, ActiveSource } from '@/services/chatMessageService';
import { ClassConfig, classOpenAIConfigService } from '@/services/classOpenAIConfig';
import { AttachedFile } from '@/components/chat/AttachedFilePill';
import { FileType } from '@/features/files/types';
import { OracleState, ProfileData } from '@/types/oracle';

export const useOracle = (): OracleState => {
  const { toast } = useToast();
  const location = useLocation();
  const navigate = useNavigate();
  const [input, setInput] = useState("");
  const [isChatLoading, setIsChatLoading] = useState(false);
  const [isPageLoading, setPageLoading] = useState(true);
  const [user, setUser] = useState<User | null>(null);
  const [userProfile, setUserProfile] = useState<ProfileData | null>(null);
  const [conversations, setConversations] = useState<AppConversation[]>([]);
  const [selectedConversationId, setSelectedConversationId] = useState<string | null>(null);
  const [messages, setMessages] = useState<ChatMessageApp[]>([]);
  const [classes, setClasses] = useState<ClassConfig[]>([]);
  const [selectedClassId, setSelectedClassId] = useState<string | null>(null);
  const [isLoadingConversations, setIsLoadingConversations] = useState(true);
  const [isLoadingMessages, setIsLoadingMessages] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [conversationToDelete, setConversationToDelete] = useState<AppConversation | null>(null);
  const [selectedMessageId, setSelectedMessageId] = useState<string | null>(null);
  const [attachedFiles, setAttachedFiles] = useState<AttachedFile[]>([]);
  const [openSourceTabs, setOpenSourceTabs] = useState<ActiveSource[]>([]);
  const [isHistoryCollapsed, setIsHistoryCollapsed] = useState(false);
  const [selectedSourceNumber, setSelectedSourceNumber] = useState<number | null>(null);
  const [liveFileCache, setLiveFileCache] = useState<Map<string, FileType>>(new Map());
  const [temporaryChatId, setTemporaryChatId] = useState<string | null>(null);

  const messagesEndRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const sourcesToDisplay = useMemo(() => openSourceTabs.map(source => liveFileCache.get(source.file.file_id) ? { ...source, file: liveFileCache.get(source.file.file_id)! } : source), [openSourceTabs, liveFileCache]);
  const selectedFile = useMemo(() => sourcesToDisplay.find(s => s.number === selectedSourceNumber)?.file || null, [selectedSourceNumber, sourcesToDisplay]);

  const selectConversation = useCallback((id: string | null) => {
    setSelectedConversationId(id);
    if (id) {
      sessionStorage.setItem('oracleActiveChatId', id);
    } else {
      sessionStorage.removeItem('oracleActiveChatId');
    }
  }, []);

  const handleMessageSelect = useCallback((message: ChatMessageApp | null) => {
    setSelectedMessageId(message?.id || null);
    setSelectedSourceNumber(null);
    if (message?.role === 'assistant' && message.sources?.length) {
        setOpenSourceTabs(message.sources);
    } else {
        setOpenSourceTabs([]);
    }
  }, []);

  const fetchMessages = useCallback(async () => {
      if (!selectedConversationId) {
          setMessages([]); setSelectedMessageId(null); setOpenSourceTabs([]); return;
      }
      setIsLoadingMessages(true);
      try {
          const fetchedMessages = await chatMessageService.fetchMessagesByConversation(selectedConversationId);
          setMessages(fetchedMessages);
          handleMessageSelect(fetchedMessages[fetchedMessages.length - 1] || null);
      } catch (error) { toast({ title: "Error", description: "Could not load messages for this chat.", variant: "destructive" }); } 
      finally { setIsLoadingMessages(false); }
  }, [selectedConversationId, toast, handleMessageSelect]);

  const handleCitationClick = useCallback((messageId: string, sourceNumber: number) => {
    setSelectedMessageId(messageId);
    setSelectedSourceNumber(sourceNumber);
  }, []);
  
  const handleClassChange = useCallback((newClassId: string | null) => {
    setSelectedClassId(newClassId);
    selectConversation(null);
    if (newClassId) {
        const selectedClass = classes.find(c => c.class_id === newClassId);
        if (selectedClass) sessionStorage.setItem('activeClass', JSON.stringify(selectedClass));
    } else {
        sessionStorage.removeItem('activeClass');
    }
  }, [classes, selectConversation]);

  const handleRenameConversation = useCallback(async (id: string, newName: string) => {
    if (!user) return;
    setConversations(prev => prev.map(c => c.id === id ? { ...c, name: newName } : c));
    try {
        await conversationService.renameConversation(id, newName, user.id);
    } catch (error) {
        console.error("Failed to rename conversation in DB:", error);
        toast({ title: "Error", description: "Could not save new chat title.", variant: "destructive" });
    }
  }, [user, toast]);

  const handleSendMessage = useCallback(async () => {
    if ((input.trim() === "" && attachedFiles.length === 0) || isChatLoading || !user) return;
    
    let activeConversationId = selectedConversationId;
    let isFirstMessageInNewChat = false;

    if (!activeConversationId) {
        const newConvo = await conversationService.createConversation({ name: 'New Chat', class_id: selectedClassId, chatbot_type: 'oracle' }, user.id);
        setConversations(prev => [newConvo, ...prev]);
        selectConversation(newConvo.id);
        activeConversationId = newConvo.id;
        isFirstMessageInNewChat = true;
    } else if (messages.length === 0) {
        isFirstMessageInNewChat = true;
    }

    const currentInput = input;
    const currentFiles = [...attachedFiles];
    setInput("");
    setAttachedFiles([]);
    setIsChatLoading(true);

    const tempUserMessage: ChatMessageApp = {
        id: `temp-${Date.now()}`, role: 'user', content: currentInput,
        createdAt: new Date(), conversation_id: activeConversationId,
        attached_files: currentFiles.map(f => ({ name: f.name, type: f.type })),
    };
    setMessages(prev => [...prev, tempUserMessage]);

    try {
        const savedUserMessage = await chatMessageService.saveMessage({
            conversation_id: activeConversationId, role: 'user', content: currentInput,
            chat_mode: 'rag',
            class_id: selectedClassId, attached_files: currentFiles.map(f => ({ name: f.name, type: f.type }))
        });

        if (isFirstMessageInNewChat) {
            try {
                const titleQuery = currentInput || `Chat about ${currentFiles.map(f => f.name).join(', ')}`;
                const { data } = await supabase.functions.invoke('generate-title', { body: { query: titleQuery } });
                if (data?.title) await handleRenameConversation(activeConversationId, data.title);
            } catch (titleError) { console.error("Could not auto-generate title:", titleError); }
        } else {
            await conversationService.updateConversationTimestamp(activeConversationId, user.id, new Date());
        }

        const { data: aiData, error: aiError } = await supabase.functions.invoke('oracle-chat', {
            body: { message: currentInput, class_id: selectedClassId, files: currentFiles }
        });
        if (aiError || aiData.error) throw new Error(aiError?.message || aiData.error);
        
        const savedAiMessage = await chatMessageService.saveMessage({
            conversation_id: activeConversationId, role: 'assistant', content: aiData.response,
            chat_mode: 'rag',
            class_id: selectedClassId, sources: aiData.sources
        });
        
        setMessages(prev => [...prev.filter(m => m.id !== tempUserMessage.id), savedUserMessage, savedAiMessage]);
        handleMessageSelect(savedAiMessage);

    } catch (error) {
        toast({ title: "Error sending message", description: (error as Error).message, variant: "destructive" });
        setMessages(prev => prev.filter(m => m.id !== tempUserMessage.id));
    } finally {
        setIsChatLoading(false);
    }
  }, [input, attachedFiles, isChatLoading, user, selectedConversationId, selectedClassId, messages.length, toast, handleMessageSelect, handleRenameConversation, selectConversation]);
  
  const handleNewChat = useCallback(async () => {
      if (!user) return;
      const newConvo = await conversationService.createConversation({ name: 'New Chat', class_id: selectedClassId, chatbot_type: 'oracle' }, user.id);
      setConversations(prev => [newConvo, ...prev]);
      selectConversation(newConvo.id);
      setTemporaryChatId(newConvo.id);
  }, [user, selectedClassId, selectConversation]);

  const handleDeleteConversation = (convo: AppConversation) => setConversationToDelete(convo);

  const confirmDelete = useCallback(async () => {
      if (!conversationToDelete || !user) return;
      setIsDeleting(true);
      await conversationService.deleteConversation(conversationToDelete.id, user.id);
      toast({ title: "Chat Deleted" });
      if (selectedConversationId === conversationToDelete.id) {
          selectConversation(null);
      }
      setConversationToDelete(null);
      setConversations(prev => prev.filter(c => c.id !== conversationToDelete.id));
      setIsDeleting(false);
  }, [conversationToDelete, user, selectedConversationId, selectConversation, toast]);

  const processFiles = useCallback((files: FileList | null) => {
      if (!files) return;
      Array.from(files).forEach(file => {
          const reader = new FileReader();
          reader.onload = (e) => {
              const base64Content = (e.target?.result as string).split(',')[1];
              if (base64Content) {
                  setAttachedFiles(prev => [...prev, { id: `${file.name}-${Date.now()}`, name: file.name, type: file.type, content: base64Content }]);
              }
          };
          reader.readAsDataURL(file);
      });
  }, []);

  const handleFileSelect = useCallback((e: React.ChangeEvent<HTMLInputElement>) => processFiles(e.target.files), [processFiles]);
  const handlePaste = useCallback((e: React.ClipboardEvent) => processFiles(e.clipboardData.files), [processFiles]);
  const handleRemoveFile = (fileId: string) => setAttachedFiles(prev => prev.filter(f => f.id !== fileId));
  const handleSourceSelect = (sourceNumber: number) => setSelectedSourceNumber(prev => (prev === sourceNumber ? null : sourceNumber));
  const handleClearSourceSelection = () => setSelectedSourceNumber(null);

  useEffect(() => {
    const fetchInitialData = async () => {
        setPageLoading(true);
        try {
            const { data: { session } } = await supabase.auth.getSession();
            const currentUser = session?.user;
            setUser(currentUser || null);
            if (currentUser) {
                const { data: profileData } = await supabase.from('profiles').select('full_name, avatar_url').eq('user_id', currentUser.id).single();
                setUserProfile(profileData);
                const fetchedClasses = await classOpenAIConfigService.getAllClasses();
                setClasses(fetchedClasses);
                const activeClassDataString = sessionStorage.getItem('activeClass');
                if (activeClassDataString) {
                  const parsedClass = JSON.parse(activeClassDataString);
                    if (fetchedClasses.some(c => c.class_id === parsedClass.class_id)) {
                        setSelectedClassId(parsedClass.class_id);
                    }
                }
            }
        } catch (error) { toast({ title: "Error", description: "Could not load initial page data.", variant: "destructive" }); }
        finally { setPageLoading(false); }
    };
    fetchInitialData();
  }, [toast]);
  
  useEffect(() => {
    if (!user || isPageLoading) return;

    const fetchAndSelectConversations = async () => {
        setIsLoadingConversations(true);
        try {
            const cameFromNav = location.state?.fromNavigation;
            const lastOpenChatId = sessionStorage.getItem('oracleActiveChatId');
            const fetchedConversations = await conversationService.fetchConversations(user.id, selectedClassId || undefined);
            
            setConversations(fetchedConversations);

            if (cameFromNav) {
                await handleNewChat();
            } else if (lastOpenChatId && fetchedConversations.some(c => c.id === lastOpenChatId)) {
                selectConversation(lastOpenChatId);
            } else if (fetchedConversations.length > 0) {
                selectConversation(fetchedConversations[0].id);
            } else {
                await handleNewChat();
            }
        } catch (error) { toast({ title: "Error", description: "Could not load chat history.", variant: "destructive" }); }
        finally { 
            setIsLoadingConversations(false); 
            if (location.state?.fromNavigation) {
                navigate(location.pathname, { replace: true });
            }
        }
    };
    fetchAndSelectConversations();
  }, [user, selectedClassId, isPageLoading, location.state, location.pathname, navigate, handleNewChat, selectConversation, toast]);

  useEffect(() => { fetchMessages(); }, [fetchMessages]);

  useEffect(() => {
    // --- FIX: Using a timeout to ensure the DOM is updated before scrolling.
    // This pushes the scroll command to the end of the event loop, after the new message has been rendered.
    const timer = setTimeout(() => {
      messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, 0);
    
    return () => clearTimeout(timer);
  }, [messages]);

  useEffect(() => {
    const tempId = temporaryChatId;
    return () => {
        if (tempId && user) {
            const checkAndDelete = async () => {
                try {
                    const { count } = await supabase.from('chat_messages').select('*', { count: 'exact', head: true }).eq('conversation_id', tempId);
                    if (count === 0) {
                        await conversationService.deleteConversation(tempId, user.id);
                    }
                } catch (e) { console.error("Failed to clean up temporary chat:", e); }
            };
            checkAndDelete();
        }
    };
  }, [temporaryChatId, user]);

  return {
    input, setInput, isChatLoading, isPageLoading, user, userProfile,
    conversations, selectedConversationId, selectConversation,
    messages, classes, selectedClassId, handleClassChange,
    isLoadingConversations, isLoadingMessages, selectedMessageId,
    attachedFiles, setAttachedFiles, openSourceTabs, isHistoryCollapsed, setIsHistoryCollapsed,
    selectedSourceNumber, sourcesToDisplay, selectedFile,
    messagesEndRef, fileInputRef,
    handleSendMessage, handleNewChat, handleRenameConversation,
    handleDeleteConversation, handleMessageSelect, handleCitationClick,
    handleSourceSelect, handleClearSourceSelection,
    handleFileSelect, handlePaste, handleRemoveFile,
    confirmDelete, conversationToDelete, setConversationToDelete, isDeleting
  };
};

================
File: src/integrations/supabase/client.ts
================
// src/integrations/supabase/client.ts
import { createClient, SupabaseClient } from '@supabase/supabase-js';
import type { Database } from './types'; // This is the auto-generated types

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!SUPABASE_URL) {
  console.error('Error: SUPABASE_URL is not defined. Please check your .env file.');
  throw new Error('SUPABASE_URL is not defined.');
}
if (!SUPABASE_PUBLISHABLE_KEY) {
  console.error('Error: SUPABASE_PUBLISHABLE_KEY is not defined. Please check your .env file.');
  throw new Error('SUPABASE_PUBLISHABLE_KEY is not defined.');
}

// Define the CustomDatabase interface which extends the auto-generated Database type.
export interface CustomDatabase extends Database {
  public: Database['public'] & {
    Tables: Database['public']['Tables'] & {
      // Ensure all your existing tables are listed here, referencing Database['public']['Tables']
      profiles: Database['public']['Tables']['profiles'];
      classes: Database['public']['Tables']['classes'];
      folders: Database['public']['Tables']['folders']; 
      files: Database['public']['Tables']['files']; 
      "flashcard-decks": Database['public']['Tables']['flashcard-decks'];
      flashcards: Database['public']['Tables']['flashcards'];
      quiz_questions: Database['public']['Tables']['quiz_questions'];
      quizzes: Database['public']['Tables']['quizzes'];
      user_storage: Database['public']['Tables']['user_storage'];
      embeddings: Database['public']['Tables']['embeddings'];
      chat_messages: Database['public']['Tables']['chat_messages'];
      calendar_events: Database['public']['Tables']['calendar_events']; // Add the new table here
    };
    // Views and Functions can also be extended here if needed
    Views: Database['public']['Views'];
    Functions: Database['public']['Functions'];
  };
}

export const supabase: SupabaseClient<CustomDatabase> = createClient<CustomDatabase>(
  SUPABASE_URL,
  SUPABASE_PUBLISHABLE_KEY,
  { auth: { persistSession: true, autoRefreshToken: true } }
);

================
File: src/integrations/supabase/types.ts
================
// src/integrations/supabase/types.ts
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  public: {
    Tables: {
      calendar_events: {
        Row: {
          id: string
          user_id: string
          class_id: string | null
          title: string
          event_start: string
          event_end: string | null
          location: string | null
          notes: string | null
          event_type: string | null
          created_at: string
          repeat_pattern: string | null // Add the new column here
        }
        Insert: {
          id?: string
          user_id: string
          class_id?: string | null
          title: string
          event_start: string
          event_end?: string | null
          location?: string | null
          notes?: string | null
          event_type?: string | null
          created_at?: string
          repeat_pattern?: string | null // Add the new column here
        }
        Update: {
          id?: string
          user_id?: string
          class_id?: string | null
          title?: string
          event_start?: string
          event_end?: string | null
          location?: string | null
          notes?: string | null
          event_type?: string | null
          created_at?: string
          repeat_pattern?: string | null // Add the new column here
        }
        Relationships: [
          {
            foreignKeyName: "calendar_events_class_id_fkey"
            columns: ["class_id"]
            isOneToOne: false
            referencedRelation: "classes"
            referencedColumns: ["class_id"]
          },
          {
            foreignKeyName: "calendar_events_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "users"
            referencedColumns: ["id"]
          }
        ]
      }
      chat_messages: {
        Row: {
          attached_files: Json | null
          chat_mode: string
          class_id: string | null
          content: string
          conversation_id: string | null
          created_at: string
          id: string
          role: string
          user_id: string
        }
        Insert: {
          attached_files?: Json | null
          chat_mode: string
          class_id?: string | null
          content: string
          conversation_id?: string | null
          created_at?: string
          id?: string
          role: string
          user_id: string
        }
        Update: {
          attached_files?: Json | null
          chat_mode?: string
          class_id?: string | null
          content?: string
          conversation_id?: string | null
          created_at?: string
          id?: string
          role?: string
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "chat_messages_class_id_fkey"
            columns: ["class_id"]
            isOneToOne: false
            referencedRelation: "classes"
            referencedColumns: ["class_id"]
          },
          {
            foreignKeyName: "chat_messages_conversation_id_fkey"
            columns: ["conversation_id"]
            isOneToOne: false
            referencedRelation: "conversations"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "chat_messages_user_id_fkey_cascade"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["user_id"]
          },
        ]
      }
      classes: {
        Row: {
          class_id: string
          class_name: string
          created_at: string | null
          updated_at: string | null
          user_id: string | null
          color: string | null
        }
        Insert: {
          class_id?: string
          class_name: string
          created_at?: string | null
          updated_at?: string | null
          user_id?: string | null
          color?: string | null
        }
        Update: {
          class_id?: string
          class_name?: string
          created_at?: string | null
          updated_at?: string | null
          user_id?: string | null
          color?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "classes_user_id_fkey_cascade"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["user_id"]
          },
        ]
      }
      conversations: {
        Row: {
          chat_mode: string | null
          chatbot_type: string
          class_id: string | null
          created_at: string | null
          id: string
          last_message_at: string | null
          title: string | null
          updated_at: string | null
          user_id: string
        }
        Insert: {
          chat_mode?: string | null
          chatbot_type: string
          class_id?: string | null
          created_at?: string | null
          id?: string
          last_message_at?: string | null
          title?: string | null
          updated_at?: string | null
          user_id: string
        }
        Update: {
          chat_mode?: string | null
          chatbot_type?: string
          class_id?: string | null
          created_at?: string | null
          id?: string
          last_message_at?: string | null
          title?: string | null
          updated_at?: string | null
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "conversations_class_id_fkey"
            columns: ["class_id"]
            isOneToOne: false
            referencedRelation: "classes"
            referencedColumns: ["class_id"]
          },
          {
            foreignKeyName: "conversations_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["user_id"]
          },
        ]
      }
      embeddings: {
        Row: {
          content: string
          created_at: string
          embedding: string | null
          id: string
          user_id: string | null
        }
        Insert: {
          content: string
          created_at?: string
          embedding?: string | null
          id?: string
          user_id?: string | null
        }
        Update: {
          content?: string
          created_at?: string
          embedding?: string | null
          id?: string
          user_id?: string | null
        }
        Relationships: []
      }
      files: {
        Row: {
          category: string | null
          class_id: string | null
          created_at: string
          document_title: string | null
          file_id: string
          folder_id: string | null
          image_summaries: Json | null
          last_modified: string
          name: string
          page_count: number | null
          page_previews: Json | null
          size: number
          status: string | null
          tags: string[] | null
          thumbnail_url: string | null
          type: string
          url: string | null
          user_id: string
        }
        Insert: {
          category?: string | null
          class_id?: string | null
          created_at?: string
          document_title?: string | null
          file_id?: string
          folder_id?: string | null
          image_summaries?: Json | null
          last_modified?: string
          name: string
          page_count?: number | null
          page_previews?: Json | null
          size: number
          status?: string | null
          tags?: string[] | null
          thumbnail_url?: string | null
          type: string
          url?: string | null
          user_id: string
        }
        Update: {
          category?: string | null
          class_id?: string | null
          created_at?: string
          document_title?: string | null
          file_id?: string
          folder_id?: string | null
          image_summaries?: Json | null
          last_modified?: string
          name?: string
          page_count?: number | null
          page_previews?: Json | null
          size?: number
          status?: string | null
          tags?: string[] | null
          thumbnail_url?: string | null
          type?: string
          url?: string | null
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "files_class_id_fkey"
            columns: ["class_id"]
            isOneToOne: false
            referencedRelation: "classes"
            referencedColumns: ["class_id"]
          },
          {
            foreignKeyName: "files_folder_id_fkey"
            columns: ["folder_id"]
            isOneToOne: false
            referencedRelation: "folders"
            referencedColumns: ["folder_id"]
          },
          {
            foreignKeyName: "files_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["user_id"]
          },
        ]
      }
      "flashcard-decks": {
        Row: {
          card_count: number
          class_id: string | null
          class_title: string | null
          color: string
          created_at: string
          description: string
          due_cards: number
          flashcard_deck_id: string
          new_cards: number
          title: string
          updated_at: string
          user_id: string | null
        }
        Insert: {
          card_count?: number
          class_id?: string | null
          class_title?: string | null
          color: string
          created_at?: string
          description: string
          due_cards?: number
          flashcard_deck_id?: string
          new_cards?: number
          title: string
          updated_at?: string
          user_id?: string | null
        }
        Update: {
          card_count?: number
          class_id?: string | null
          class_title?: string | null
          color?: string
          created_at?: string
          description?: string
          due_cards?: number
          flashcard_deck_id?: string
          new_cards?: number
          title?: string
          updated_at?: string
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "flashcard-decks_class_id_fkey"
            columns: ["class_id"]
            isOneToOne: false
            referencedRelation: "classes"
            referencedColumns: ["class_id"]
          },
          {
            foreignKeyName: "flashcard-decks_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["user_id"]
          },
        ]
      }
      flashcards: {
        Row: {
          back: string
          class_id: string | null
          created_at: string
          difficulty: string
          flashcard_deck_id: string
          flashcard_id: string
          front: string
          last_reviewed: string | null
          next_review: string
          review_count: number | null
          updated_at: string
          user_id: string | null
        }
        Insert: {
          back: string
          class_id?: string | null
          created_at?: string
          difficulty?: string
          flashcard_deck_id: string
          flashcard_id?: string
          front: string
          last_reviewed?: string | null
          next_review?: string
          review_count?: number | null
          updated_at?: string
          user_id?: string | null
        }
        Update: {
          back?: string
          class_id?: string | null
          created_at?: string
          difficulty?: string
          flashcard_deck_id?: string
          flashcard_id?: string
          front?: string
          last_reviewed?: string | null
          next_review?: string
          review_count?: number | null
          updated_at?: string
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "flashcards_class_id_fkey"
            columns: ["class_id"]
            isOneToOne: false
            referencedRelation: "classes"
            referencedColumns: ["class_id"]
          },
          {
            foreignKeyName: "flashcards_flashcard_deck_id_fkey"
            columns: ["flashcard_deck_id"]
            isOneToOne: false
            referencedRelation: "flashcard-decks"
            referencedColumns: ["flashcard_deck_id"]
          },
          {
            foreignKeyName: "flashcards_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["user_id"]
          },
        ]
      }
      folders: {
        Row: {
          class_id: string | null
          created_at: string
          folder_id: string
          name: string | null
          parent_id: string | null
          user_id: string
        }
        Insert: {
          class_id?: string | null
          created_at?: string
          folder_id?: string
          name?: string | null
          parent_id?: string | null
          user_id: string
        }
        Update: {
          class_id?: string | null
          created_at?: string
          folder_id?: string
          name?: string | null
          parent_id?: string | null
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "file_folders_class_id_fkey"
            columns: ["class_id"]
            isOneToOne: false
            referencedRelation: "classes"
            referencedColumns: ["class_id"]
          },
          {
            foreignKeyName: "file_folders_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["user_id"]
          },
          {
            foreignKeyName: "folders_parent_id_fkey"
            columns: ["parent_id"]
            isOneToOne: false
            referencedRelation: "folders"
            referencedColumns: ["folder_id"]
          },
        ]
      }
      message_sources: {
        Row: {
          content: string | null
          created_at: string | null
          file_id: string | null
          highlight: string | null
          id: string
          message_id: string
          name: string | null
          page_number: number | null
          source_number: number
          url: string | null
        }
        Insert: {
          content?: string | null
          created_at?: string | null
          file_id?: string | null
          highlight?: string | null
          id?: string
          message_id: string
          name?: string | null
          page_number?: number | null
          source_number: number
          url?: string | null
        }
        Update: {
          content?: string | null
          created_at?: string | null
          file_id?: string | null
          highlight?: string | null
          id?: string
          message_id?: string
          name?: string | null
          page_number?: number | null
          source_number?: number
          url?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "message_sources_file_id_fkey"
            columns: ["file_id"]
            isOneToOne: false
            referencedRelation: "files"
            referencedColumns: ["file_id"]
          },
          {
            foreignKeyName: "message_sources_message_id_fkey"
            columns: ["message_id"]
            isOneToOne: false
            referencedRelation: "chat_messages"
            referencedColumns: ["id"]
          },
        ]
      }
      preview_queue: {
        Row: {
          created_at: string
          error_message: string | null
          file_id: string
          id: number
          status: string
        }
        Insert: {
          created_at?: string
          error_message?: string | null
          file_id: string
          id?: number
          status?: string
        }
        Update: {
          created_at?: string
          error_message?: string | null
          file_id?: string
          id?: number
          status?: string
        }
        Relationships: [
          {
            foreignKeyName: "preview_queue_file_id_fkey"
            columns: ["file_id"]
            isOneToOne: false
            referencedRelation: "files"
            referencedColumns: ["file_id"]
          },
        ]
      }
      processing_queue: {
        Row: {
          class_id: string
          created_at: string
          error_message: string | null
          folder_id: string | null
          id: number
          mime_type: string
          original_name: string
          size: number
          status: string
          storage_path: string
          user_id: string
        }
        Insert: {
          class_id: string
          created_at?: string
          error_message?: string | null
          folder_id?: string | null
          id?: number
          mime_type: string
          original_name: string
          size: number
          status?: string
          storage_path: string
          user_id: string
        }
        Update: {
          class_id?: string
          created_at?: string
          error_message?: string | null
          folder_id?: string | null
          id?: number
          mime_type?: string
          original_name?: string
          size?: number
          status?: string
          storage_path?: string
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "processing_queue_class_id_fkey"
            columns: ["class_id"]
            isOneToOne: false
            referencedRelation: "classes"
            referencedColumns: ["class_id"]
          },
          {
            foreignKeyName: "processing_queue_folder_id_fkey"
            columns: ["folder_id"]
            isOneToOne: false
            referencedRelation: "folders"
            referencedColumns: ["folder_id"]
          },
        ]
      }
      profiles: {
        Row: {
          created_at: string
          email: string | null
          full_name: string | null
          updated_at: string
          user_id: string
        }
        Insert: {
          created_at?: string
          email?: string | null
          full_name?: string | null
          updated_at?: string
          user_id: string
        }
        Update: {
          created_at?: string
          email?: string | null
          full_name?: string | null
          updated_at?: string
          user_id?: string
        }
        Relationships: []
      }
      quiz_questions: {
        Row: {
          class_id: string | null
          correct_answer_index: number
          created_at: string
          explanation: string
          options: string[]
          question_text: string
          quiz_id: string
          quiz_questions_id: string
          user_id: string | null
        }
        Insert: {
          class_id?: string | null
          correct_answer_index: number
          created_at?: string
          explanation: string
          options: string[]
          question_text: string
          quiz_id: string
          quiz_questions_id?: string
          user_id?: string | null
        }
        Update: {
          class_id?: string | null
          correct_answer_index?: number
          created_at?: string
          explanation?: string
          options?: string[]
          question_text?: string
          quiz_id?: string
          quiz_questions_id?: string
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "quiz_questions_class_id_fkey"
            columns: ["class_id"]
            isOneToOne: false
            referencedRelation: "classes"
            referencedColumns: ["class_id"]
          },
          {
            foreignKeyName: "quiz_questions_quiz_id_fkey"
            columns: ["quiz_id"]
            isOneToOne: false
            referencedRelation: "quizzes"
            referencedColumns: ["quiz_id"]
          },
          {
            foreignKeyName: "quiz_questions_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["user_id"]
          },
        ]
      }
      quizzes: {
        Row: {
          class_id: string | null
          coverage: string
          created_at: string
          description: string
          difficulty: string
          question_count: number
          quiz_id: string
          time_estimate: number
          title: string
          updated_at: string
          user_id: string | null
        }
        Insert: {
          class_id?: string | null
          coverage: string
          created_at?: string
          description: string
          difficulty?: string
          question_count?: number
          quiz_id?: string
          time_estimate?: number
          title: string
          updated_at?: string
          user_id?: string | null
        }
        Update: {
          class_id?: string | null
          coverage?: string
          created_at?: string
          description?: string
          difficulty?: string
          question_count?: number
          quiz_id?: string
          time_estimate?: number
          title?: string
          updated_at?: string
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "quizzes_class_id_fkey"
            columns: ["class_id"]
            isOneToOne: false
            referencedRelation: "classes"
            referencedColumns: ["class_id"]
          },
        ]
      }
      user_storage: {
        Row: {
          storage_limit: number
          storage_used: number
          user_id: string
        }
        Insert: {
          storage_limit?: number
          storage_used?: number
          user_id: string
        }
        Update: {
          storage_limit?: number
          storage_used?: number
          user_id?: string
        }
        Relationships: []
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      binary_quantize: {
        Args: { "": string } | { "": unknown }
        Returns: unknown
      }
      halfvec_avg: {
        Args: { "": number[] }
        Returns: unknown
      }
      halfvec_out: {
        Args: { "": unknown }
        Returns: unknown
      }
      halfvec_send: {
        Args: { "": unknown }
        Returns: string
      }
      halfvec_typmod_in: {
        Args: { "": unknown[] }
        Returns: number
      }
      hnsw_bit_support: {
        Args: { "": unknown }
        Returns: unknown
      }
      hnsw_halfvec_support: {
        Args: { "": unknown }
        Returns: unknown
      }
      hnsw_sparsevec_support: {
        Args: { "": unknown }
        Returns: unknown
      }
      hnswhandler: {
        Args: { "": unknown }
        Returns: unknown
      }
      ivfflat_bit_support: {
        Args: { "": unknown }
        Returns: unknown
      }
      ivfflat_halfvec_support: {
        Args: { "": unknown }
        Returns: unknown
      }
      ivfflathandler: {
        Args: { "": unknown }
        Returns: unknown
      }
      l2_norm: {
        Args: { "": unknown } | { "": unknown }
        Returns: number
      }
      l2_normalize: {
        Args: { "": string } | { "": unknown } | { "": unknown }
        Returns: string
      }
      sparsevec_out: {
        Args: { "": unknown }
        Returns: unknown
      }
      sparsevec_send: {
        Args: { "": unknown }
        Returns: string
      }
      sparsevec_typmod_in: {
        Args: { "": unknown[] }
        Returns: number
      }
      vector_avg: {
        Args: { "": number[] }
        Returns: string
      }
      vector_dims: {
        Args: { "": string } | { "": unknown }
        Returns: number
      }
      vector_norm: {
        Args: { "": string }
        Returns: number
      }
      vector_out: {
        Args: { "": string }
        Returns: unknown
      }
      vector_send: {
        Args: { "": string }
        Returns: string
      }
      vector_typmod_in: {
        Args: { "": unknown[] }
        Returns: number
      }
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

type DefaultSchema = Database[Extract<keyof Database, "public">]

export type Tables<
  DefaultSchemaTableNameOrOptions extends
    | keyof (DefaultSchema["Tables"] & DefaultSchema["Views"])
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof (Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
        Database[DefaultSchemaTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? (Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
      Database[DefaultSchemaTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema["Tables"] &
        DefaultSchema["Views"])
    ? (DefaultSchema["Tables"] &
        DefaultSchema["Views"])[DefaultSchemaTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  DefaultSchemaEnumNameOrOptions extends
    | keyof DefaultSchema["Enums"]
    | { schema: keyof Database },
  EnumName extends DefaultSchemaEnumNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema["Enums"]
    ? DefaultSchema["Enums"][DefaultSchemaEnumNameOrOptions]
    : never

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof DefaultSchema["CompositeTypes"]
    | { schema: keyof Database },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
    : never = never,
> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }
  ? Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema["CompositeTypes"]
    ? DefaultSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
    : never

export const Constants = {
  public: {
    Enums: {},
  },
} as const

================
File: src/lib/utils.ts
================
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function formatFileSize(bytes: number): string {
  if (bytes === 0) return "0 Bytes";
  const k = 1024;
  const sizes = ["Bytes", "KB", "MB", "GB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
}

================
File: src/pages/AuthPage.tsx
================
// src/pages/AuthPage.tsx
import { Auth } from "@/components/auth/Auth";

const AuthPage = () => {
  return (
    // This root div creates the full-screen container
    <div 
      className="min-h-screen w-full bg-gray-50 flex items-center justify-center p-4" 
      style={{ 
        backgroundImage: "url('/auth-background.png')",
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        backgroundRepeat: 'no-repeat'
      }}
    >
      {/* This is the white card that contains the authentication form.
        It's centered by the flex properties on the parent div.
        It has a max-width, rounded corners, a shadow, and padding.
      */}
      <div className="w-full max-w-xl bg-white rounded-2xl shadow-xl p-8 sm:p-12">
        <Auth />
      </div>
    </div>
  );
};

export default AuthPage;

================
File: src/pages/CalendarPage.tsx
================
// src/pages/CalendarPage.tsx
import React, { useState, useEffect, useMemo, useCallback, useRef, useLayoutEffect } from 'react';
import { Helmet } from 'react-helmet-async';
import { MainAppLayout } from '@/components/layout/MainAppLayout';
import { startOfDay, subDays, subMonths, subWeeks, addMonths, addWeeks, format, addDays as addDaysHelper, addMinutes } from 'date-fns';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { useCalendarData } from '@/hooks/useCalendarData';
import { CalendarHeader } from '@/components/calendar/CalendarHeader';
import { CalendarSidebar } from '@/components/calendar/CalendarSidebar';
import { CalendarViews } from '@/components/calendar/CalendarViews';
import { SyllabusUploadDialog } from '@/components/calendar/SyllabusUploadDialog';
import { ProcessingLoader } from '@/components/calendar/ProcessingLoader';
import { EventConfirmationDialog, ParsedEvent } from '@/components/calendar/EventConfirmationDialog';
import { EventCreatorPopover } from '@/components/calendar/EventCreatorPopover';
import { ViewEventPopover } from '@/components/calendar/ViewEventPopover';
import { DeleteRecurringEventDialog, DeletionScope } from '@/components/calendar/DeleteRecurringEventDialog';
import { CalendarEvent, NewCalendarEvent } from '@/services/calendarEventService';
import { AddEventDialog } from '@/components/calendar/AddEventDialog';

const CalendarPage = () => {
    const [view, setView] = useState(() => localStorage.getItem('calendarView') || 'week');
    const [currentDate, setCurrentDate] = useState(startOfDay(new Date()));
    const { classes, isLoadingClasses, events, isLoadingEvents, createEvent, deleteEvent, updateEvent, updateClassColor } = useCalendarData();
    const [selectedClasses, setSelectedClasses] = useState<string[]>([]);
    
    const [creatorPopover, setCreatorPopover] = useState<{ anchor: HTMLElement | null; start: Date; end: Date } | null>(null);
    const [viewerPopover, setViewerPopover] = useState<{ anchor: HTMLElement; event: CalendarEvent } | null>(null);
    const [eventToEdit, setEventToEdit] = useState<CalendarEvent | null>(null);
    const [eventToDelete, setEventToDelete] = useState<CalendarEvent | null>(null);

    const [draftEvent, setDraftEvent] = useState<Partial<NewCalendarEvent> | null>(null);
    const [isCreatingEvent, setIsCreatingEvent] = useState(false);
    const [hasDragged, setHasDragged] = useState(false);

    const [isSyllabusUploadOpen, setIsSyllabusUploadOpen] = useState(false);
    const [isProcessingSyllabus, setIsProcessingSyllabus] = useState(false);
    const [parsedEvents, setParsedEvents] = useState<ParsedEvent[]>([]);
    const [isConfirmationOpen, setIsConfirmationOpen] = useState(false);
    const [isAddEventDialogOpen, setIsAddEventDialogOpen] = useState(false);
    const { toast } = useToast();
    
    const scrollContainerRef = useRef<HTMLDivElement>(null);
    const scrollIntervalRef = useRef<ReturnType<typeof setInterval> | null>(null);

    const filteredEvents = useMemo(() => {
        return events
            .filter(e => e.class_id && selectedClasses.includes(e.class_id))
            .map(event => {
                 const eventClass = classes.find(c => c.class_id === event.class_id);
                return { ...event, color: eventClass?.color };
            });
    }, [events, selectedClasses, classes]);

    useEffect(() => {
        if (!isLoadingClasses && classes.length > 0) {
            setSelectedClasses(classes.map(c => c.class_id));
         }
    }, [isLoadingClasses, classes]);

    useEffect(() => {
        localStorage.setItem('calendarView', view);
    }, [view]);

    useLayoutEffect(() => {
        if (scrollContainerRef.current) {
            if ((view === 'day' || view === 'week') && !isLoadingClasses && !isLoadingEvents) {
                // Scroll to 7 AM for Day and Week views
                const scrollToPosition = 7 * 48;
                scrollContainerRef.current.scrollTop = scrollToPosition;
            } else if (view === 'month') {
                // Reset scroll to top for Month view
                scrollContainerRef.current.scrollTop = 0;
            }
        }
    }, [view, isLoadingClasses, isLoadingEvents]);

    const closeAllPopovers = () => {
        setCreatorPopover(null);
        setViewerPopover(null);
        setDraftEvent(null);
        setEventToEdit(null);
    };

    const handleEventCreateStart = useCallback((startDate: Date) => {
        closeAllPopovers();
        setIsCreatingEvent(true);
        setHasDragged(false);
        setDraftEvent({
            event_start: startDate.toISOString(),
            event_end: addMinutes(startDate, 60).toISOString(),
        });
    }, []);

    const handleEventCreateUpdate = useCallback((newTime: Date, e: React.MouseEvent) => {
        if (!isCreatingEvent || !draftEvent || !draftEvent.event_start) return;
        setHasDragged(true);
        const startDate = new Date(draftEvent.event_start);
        const newEndTime = newTime > addMinutes(startDate, 14) ? newTime : addMinutes(startDate, 15);
        setDraftEvent(prev => ({ ...prev, event_end: newEndTime.toISOString() }));
        if (scrollIntervalRef.current) clearInterval(scrollIntervalRef.current);
        const container = scrollContainerRef.current;
        if (!container) return;
        const rect = container.getBoundingClientRect();
        if (e.clientY > rect.bottom - 50) scrollIntervalRef.current = setInterval(() => { container.scrollTop += 15; }, 30);
        else if (e.clientY < rect.top + 50) scrollIntervalRef.current = setInterval(() => { container.scrollTop -= 15; }, 30);
    }, [isCreatingEvent, draftEvent]);

    const handleEventCreateEnd = useCallback((e: React.MouseEvent | MouseEvent) => {
        if (scrollIntervalRef.current) clearInterval(scrollIntervalRef.current);
        if (!isCreatingEvent || !draftEvent || !draftEvent.event_start) return;
        
        const finalDraftEvent = { ...draftEvent };
        if (!hasDragged) {
            finalDraftEvent.event_end = addMinutes(new Date(draftEvent.event_start), 60).toISOString();
        }
        
        setDraftEvent(finalDraftEvent);
        const anchorEl = document.querySelector('.draft-event-bubble') as HTMLElement || e.currentTarget as HTMLElement;
        setCreatorPopover({ anchor: anchorEl, start: new Date(finalDraftEvent.event_start!), end: new Date(finalDraftEvent.event_end!) });
        setIsCreatingEvent(false);
    }, [isCreatingEvent, draftEvent, hasDragged]);

    // MODIFICATION: Created a new, dedicated handler for month view clicks.
    const handleDayClickInMonthView = (day: Date, anchorElement: HTMLElement) => {
        closeAllPopovers();

        // Default the new event's time to 9:00 AM on the selected day
        const startDate = new Date(day);
        startDate.setHours(9, 0, 0, 0);
        const endDate = addMinutes(startDate, 60);

        // Open the creator popover, anchored to the specific day cell that was clicked
        setCreatorPopover({
            anchor: anchorElement,
            start: startDate,
            end: endDate,
        });
    };

    const handleEventClick = (event: CalendarEvent, anchorElement: HTMLElement) => {
        if (viewerPopover && viewerPopover.event.id === event.id) {
            setViewerPopover(null);
        } else {
            closeAllPopovers();
            setViewerPopover({ event, anchor: anchorElement });
        }
    };
    
    const handleEditRequest = (event: CalendarEvent) => {
        setEventToEdit(event);
        const anchor = viewerPopover?.anchor || document.body;
        setViewerPopover(null);
        setCreatorPopover({
            anchor: anchor,
            start: new Date(event.event_start),
            end: event.event_end ? new Date(event.event_end) : addMinutes(new Date(event.event_start), 60)
        });
    };

    const handleDeleteRequest = (event: CalendarEvent) => {
        if (event.repeat_pattern && event.repeat_pattern !== 'none') {
            setEventToDelete(event);
        } else {
            deleteEvent(event, 'this');
        }
        setViewerPopover(null);
    };

    const confirmEventDeletion = async (scope: DeletionScope) => {
        if (!eventToDelete) return;
        await deleteEvent(eventToDelete, scope);
        setEventToDelete(null);
    };

    const handleSaveEvent = async (eventData: NewCalendarEvent, idToUpdate?: string) => {
        let success = false;
        if (idToUpdate) {
            success = await updateEvent(idToUpdate, eventData);
        } else {
            success = await createEvent(eventData);
        }
        if (success) closeAllPopovers();
        return success;
    };
    
    const handlePrev = () => {
        if (view === 'month') setCurrentDate(prev => subMonths(prev, 1));
        else if (view === 'week') setCurrentDate(prev => subWeeks(prev, 1));
        else setCurrentDate(prev => subDays(prev, 1));
    };

    const handleNext = () => {
        if (view === 'month') setCurrentDate(prev => addMonths(prev, 1));
        else if (view === 'week') setCurrentDate(prev => addWeeks(prev, 1));
        else setCurrentDate(prev => addDaysHelper(prev, 1));
    };

    const handleToday = () => setCurrentDate(startOfDay(new Date()));
    
    const handleAddEventClick = (anchorElement: HTMLElement) => {
        closeAllPopovers();
        const now = new Date();
        const defaultStartDate = new Date(currentDate);
        defaultStartDate.setHours(now.getHours(), Math.ceil(now.getMinutes() / 15) * 15, 0, 0);

        setCreatorPopover({
            anchor: anchorElement,
            start: defaultStartDate,
            end: addMinutes(defaultStartDate, 60),
        });
    };

    const handleSyllabusUpload = async (uploadedFiles: File[], classId: string) => {
        setIsSyllabusUploadOpen(false);
        setIsProcessingSyllabus(true);
        try {
            const fileContents = await Promise.all(
                uploadedFiles.map(file => 
                    new Promise<{ name: string; type: string; content: string }>((resolve, reject) => {
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            const base64Content = (e.target?.result as string).split(',')[1];
                            resolve({ name: file.name, type: file.type, content: base64Content });
                        };
                        reader.onerror = reject;
                        reader.readAsDataURL(file);
                    })
                )
            );
            const { data, error } = await supabase.functions.invoke('parse-syllabus', { body: { files: fileContents, class_id: classId } });
            if (error) throw new Error(error.message);
            const extractedEvents = data?.events;
            if (extractedEvents && Array.isArray(extractedEvents) && extractedEvents.length > 0) {
                setParsedEvents(extractedEvents);
                setIsConfirmationOpen(true);
            } else {
                toast({ title: "No Events Found", description: "The AI could not find any calendar events in the file(s).", variant: "default" });
            }
        } catch (error) {
             toast({ title: "Syllabus Parsing Failed", description: error instanceof Error ? error.message : "An unknown error occurred.", variant: "destructive" });
        } finally {
            setIsProcessingSyllabus(false);
        }
    };

    const handleUpcomingEventSelect = (event: CalendarEvent) => {
        setCurrentDate(new Date(event.event_start));
        
        setTimeout(() => {
            const eventElement = document.querySelector(`[data-event-id="${event.id}"]`) as HTMLElement;
            if (eventElement) {
                handleEventClick(event, eventElement);
            } else {
                console.warn(`Could not find event element for id: ${event.id}`);
            }
         }, 100);
    };
    
    return (
        <MainAppLayout pageTitle="Calendar | Eido AI">
            <Helmet>
                <style>{`.calendar-grid { -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; }`}</style>
            </Helmet>
              <div className="flex flex-row gap-3 h-full">
                <CalendarSidebar
                    currentDate={currentDate}
                    setCurrentDate={setCurrentDate}
                    classes={classes}
                    isLoadingClasses={isLoadingClasses}
                    selectedClasses={selectedClasses}
                    setSelectedClasses={setSelectedClasses}
                    onColorChange={updateClassColor}
                    upcomingEvents={events.filter(e => new Date(e.event_start) >= new Date()).sort((a,b) => new Date(a.event_start).getTime() - new Date(b.event_start).getTime()).slice(0, 5)}
                    onUploadSyllabusClick={() => setIsSyllabusUploadOpen(true)}
                    view={view as 'day' | 'week' | 'month'}
                    onUpcomingEventSelect={handleUpcomingEventSelect}
                />
                <div className="flex-1 flex flex-col rounded-lg border border-marble-400 bg-white overflow-hidden">
                    <CalendarHeader
                        view={view} currentDate={currentDate} onViewChange={(v) => { setView(v); closeAllPopovers(); }}
                        onPrev={handlePrev} onNext={handleNext} onToday={handleToday}
                        onAddEvent={handleAddEventClick}
                    />
                    <div ref={scrollContainerRef} className="flex-1 overflow-auto">
                         <CalendarViews
                            view={view} currentDate={currentDate} classes={classes} events={filteredEvents}
                            draftEvent={draftEvent} isCreatingEvent={isCreatingEvent} onDelete={()=>{}}
                            // MODIFICATION: Pass the new handler to onDayClick
                            onDayClick={handleDayClickInMonthView}
                            onEventCreateStart={handleEventCreateStart} onEventCreateUpdate={handleEventCreateUpdate}
                            onEventCreateEnd={handleEventCreateEnd} onEventClick={handleEventClick}
                         />
                    </div>
                </div>
        
                {creatorPopover && (
                     <EventCreatorPopover
                        anchorElement={creatorPopover.anchor}
                        startDate={creatorPopover.start}
                        endDate={creatorPopover.end}
                        onClose={closeAllPopovers}
                        onSave={handleSaveEvent}
                        eventToEdit={eventToEdit}
                        classes={classes}
                    />
                )}

                {viewerPopover && (
                     <ViewEventPopover
                        event={viewerPopover.event}
                        eventClass={classes.find(c => c.class_id === viewerPopover.event.class_id)}
                        anchorElement={viewerPopover.anchor}
                        onClose={closeAllPopovers}
                        onEdit={handleEditRequest}
                        onDelete={handleDeleteRequest}
                     />
                )}

                {eventToDelete && (
                    <DeleteRecurringEventDialog
                        isOpen={!!eventToDelete}
                        onClose={() => setEventToDelete(null)}
                        onConfirm={confirmEventDeletion}
                    />
                )}
                
                <SyllabusUploadDialog isOpen={isSyllabusUploadOpen} onClose={() => setIsSyllabusUploadOpen(false)} onUpload={handleSyllabusUpload} classes={classes} />
                <ProcessingLoader isOpen={isProcessingSyllabus} />
                <EventConfirmationDialog isOpen={isConfirmationOpen} onClose={() => setIsConfirmationOpen(false)} parsedEvents={parsedEvents} onConfirmEvent={(e) => createEvent(e)} />
                <AddEventDialog
                    isOpen={isAddEventDialogOpen}
                    onClose={() => setIsAddEventDialogOpen(false)}
                    onSubmit={createEvent}
                    defaults={{
                        date: format(currentDate, 'yyyy-MM-dd'),
                        time: format(new Date(), 'HH:mm'),
                    }}
                    classes={classes}
                />
            </div>
        </MainAppLayout>
    );
};

export default CalendarPage;

================
File: src/pages/ClassesPage.tsx
================
// src/pages/ClassesPage.tsx
import React from 'react';
import { useClassesPage } from '@/hooks/useClassesPage';
import { MainAppLayout } from '@/components/layout/MainAppLayout';
import { FilePreview } from '@/components/classes/FilePreview';
import { ClassesHeader } from '@/components/classes/ClassesHeader';
import { ClassesView } from '@/components/classes/ClassesView';
import { FilesView } from '@/components/classes/FilesView';
import { ClassesPageDialogs } from '@/components/classes/ClassesPageDialogs';
import { ClassesPageToasts } from '@/components/classes/ClassesPageToasts';

const ClassesPage = () => {
    const hook = useClassesPage();

    return (
        <MainAppLayout pageTitle="Classes | Eido AI">
            <div className="flex flex-row gap-3 h-full">
                <FilePreview
                    previewedFile={hook.previewedFile}
                    onDeleteClick={hook.setFilesToDelete}
                    onClosePreview={() => hook.setPreviewedFile(null)}
                />
                <div className="w-8/12 flex flex-col rounded-lg border border-marble-400 bg-white overflow-hidden">
                    <div className="p-6 md:p-8 space-y-8 overflow-y-auto">
                        <ClassesHeader
                            breadcrumbs={hook.breadcrumbs}
                            selectedClass={hook.selectedClass}
                            onBreadcrumbClick={hook.handleBreadcrumbClick}
                            onNewFolderClick={() => hook.setIsNewFolderOpen(true)}
                            onHeaderButtonClick={() => hook.selectedClass ? hook.setIsUploadOpen(true) : hook.setIsCreateClassOpen(true)}
                        />
                        {hook.selectedClass ? (
                            <FilesView
                                isLoading={hook.isLoading}
                                foldersWithStats={hook.foldersWithStats}
                                filesForTable={hook.files}
                                viewMode={hook.viewMode}
                                setViewMode={hook.setViewMode}
                                onFolderClick={hook.handleFolderClick}
                                onFileRowClick={hook.handleFileRowClick}
                                previewedFile={hook.previewedFile}
                                classes={hook.classes}
                                getFolderPath={hook.getFolderPath}
                                selectedClass={hook.selectedClass}
                                recentFiles={hook.recentFiles}
                            />
                        ) : (
                            <>
                                <ClassesView
                                    isLoading={hook.isLoading}
                                    classesWithStats={hook.classesWithStats}
                                    onClassClick={hook.handleClassClick}
                                    onDeleteClassClick={hook.handleDeleteClassClick}
                                />
                                <FilesView
                                    isLoading={hook.isLoading}
                                    foldersWithStats={[]}
                                    filesForTable={hook.recentFiles}
                                    viewMode={hook.viewMode}
                                    setViewMode={hook.setViewMode}
                                    onFolderClick={() => {}}
                                    onFileRowClick={hook.handleFileRowClick}
                                    previewedFile={hook.previewedFile}
                                    classes={hook.classes}
                                    getFolderPath={hook.getFolderPath}
                                    selectedClass={null}
                                    recentFiles={hook.recentFiles}
                                />
                            </>
                        )}
                    </div>
                </div>
            </div>
            <ClassesPageToasts
                uploadingFiles={hook.uploadingFiles}
                deletingFiles={hook.deletingFiles}
                setUploadingFiles={hook.setUploadingFiles}
                setDeletingFiles={hook.setDeletingFiles}
            />
            <ClassesPageDialogs
                isCreateClassOpen={hook.isCreateClassOpen}
                setIsCreateClassOpen={hook.setIsCreateClassOpen}
                handleCreateClass={hook.handleCreateClass}
                isSubmitting={hook.isSubmitting}
                isNewFolderOpen={hook.isNewFolderOpen}
                setIsNewFolderOpen={hook.setIsNewFolderOpen}
                handleCreateFolder={hook.handleCreateFolder}
                isUploadOpen={hook.isUploadOpen}
                setIsUploadOpen={hook.setIsUploadOpen}
                handleUploadFiles={hook.handleUploadFiles}
                filesToDelete={hook.filesToDelete}
                setFilesToDelete={hook.setFilesToDelete}
                isDeleting={hook.isDeleting}
                confirmDelete={hook.confirmDelete}
                isDeleteClassConfirmationOpen={hook.isDeleteClassConfirmationOpen}
                setIsDeleteClassConfirmationOpen={hook.setIsDeleteClassConfirmationOpen}
                classToDelete={hook.classToDelete}
                isDeletingClass={hook.isDeletingClass}
                confirmDeleteClass={hook.confirmDeleteClass}
            />
        </MainAppLayout>
    );
};
export default ClassesPage;

================
File: src/pages/DashboardPage.tsx
================
// src/pages/DashboardPage.tsx
import React, { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import type { User } from '@supabase/supabase-js';
import { usePageLoader } from '@/context/LoaderContext';
import { MainAppLayout } from '@/components/layout/MainAppLayout';
import { WelcomeBanner } from '@/components/dashboard/WelcomeBanner';
import { CommandBar } from '@/components/dashboard/CommandBar';
import { OracleCard } from '@/components/dashboard/OracleCard';
import { DashboardCalendar } from '@/components/dashboard/DashboardCalendar';
import { DashboardSidebar } from '@/components/dashboard/DashboardSidebar';
import { AssignmentsCard } from '@/components/dashboard/AssignmentsCard';

const Footer = () => (
  <footer className="w-full px-4 py-6 md:px-9 lg:px-10 border-t border-marble-400 bg-marble-100 flex-shrink-0">
    <div className="flex flex-col md:flex-row justify-between items-center text-sm text-volcanic-800">
      <span>© 2025 Eido AI. All rights reserved.</span>
      <div className="flex gap-x-4 mt-4 md:mt-0">
        <a href="/privacy" target="_blank" rel="noopener noreferrer" className="hover:text-volcanic-900 hover:underline">Privacy Policy</a>
        <a href="/terms" target="_blank" rel="noopener noreferrer" className="hover:text-volcanic-900 hover:underline">Terms of Service</a>
      </div>
    </div>
  </footer>
);

const DashboardPage = () => {
  const [user, setUser] = useState<User | null>(null);
  const [profile, setProfile] = useState<{ full_name: string | null } | null>(null);
  const { loadPage, loader } = usePageLoader();
  const [command, setCommand] = useState('');

  useEffect(() => {
    if (loader) {
      loader.complete();
    }
    
    const fetchUser = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      setUser(user);
    };
    fetchUser();

    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      setUser(session?.user ?? null);
      if (!session?.user) {
        setProfile(null);
      }
    });

    return () => {
      subscription.unsubscribe();
    };
  }, [loader]);

  useEffect(() => {
    const fetchProfile = async () => {
      if (user) {
        const { data, error } = await supabase
          .from('profiles')
          .select('full_name')
          .eq('user_id', user.id)
          .single();

        if (error) {
          console.error("Error fetching user profile:", error);
        } else if (data) {
          setProfile(data);
        }
      }
    };
    fetchProfile();
  }, [user]);

  const handleProtectedLinkClick = (path: string) => {
    if (user) {
      loadPage(path);
    } else {
      loadPage('/auth');
    }
  };

  const handleCommandSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log('Command submitted:', command);
    setCommand('');
  };

  return (
    <MainAppLayout pageTitle="Dashboard | Eido AI">
      <div className="flex h-full w-full justify-self-center md:gap-x-3">
        <DashboardSidebar onLinkClick={handleProtectedLinkClick} />
        
        <main className="flex h-full w-full flex-grow flex-col overflow-y-auto rounded-lg border border-marble-400 bg-marble-100">
          <WelcomeBanner user={user} profile={profile} />
          
          <div className="flex-grow px-4 pb-10 md:px-9 lg:px-10">
            <div className="flex h-full w-full flex-col gap-y-6">
              <CommandBar 
                command={command}
                setCommand={setCommand}
                handleCommandSubmit={handleCommandSubmit}
              />

              {/* MODIFICATION: Replaced flexbox with a more stable CSS Grid layout */}
              <div className="grid grid-cols-10 gap-6">
                {/* Left column for cards */}
                <div className="col-span-10 md:col-span-7 flex flex-col gap-y-6">
                  <OracleCard onClick={() => handleProtectedLinkClick('/oracle')} />
                  <AssignmentsCard onClick={() => handleProtectedLinkClick('/assignments')} />
                </div>
                {/* Right column placeholder */}
                <div className="hidden md:block col-span-3 rounded-lg border border-marble-400 bg-white">
                  {/* This is the white rectangle placeholder */}
                </div>
              </div>

              <DashboardCalendar onAddEventClick={() => handleProtectedLinkClick('/calendar')} />
            </div>
          </div>
          <Footer />
        </main>
      </div>
    </MainAppLayout>
  );
};

export default DashboardPage;

================
File: src/pages/NotFound.tsx
================
import { useLocation } from "react-router-dom";
import { useEffect } from "react";

const NotFound = () => {
  const location = useLocation();

  useEffect(() => {
    console.error(
      "404 Error: User attempted to access non-existent route:",
      location.pathname
    );
  }, [location.pathname]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">404</h1>
        <p className="text-xl text-gray-600 mb-4">Oops! Page not found</p>
        <a href="/" className="text-blue-500 hover:text-blue-700 underline">
          Return to Home
        </a>
      </div>
    </div>
  );
};

export default NotFound;

================
File: src/pages/OraclePage.tsx
================
// src/pages/OraclePage.tsx

import React from 'react';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Loader2, PanelLeft, PanelRight, Plus } from 'lucide-react';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { HistorySidebar } from '@/components/oracle/HistorySidebar';
import { ChatMessage } from '@/components/chat/ChatMessage';
import { ScrollArea } from "@/components/ui/scroll-area";
import { MainAppLayout } from '@/components/layout/MainAppLayout';
import { cn } from '@/lib/utils';
import { useOracle } from '@/hooks/useOracle';
import { ChatInput } from '@/components/oracle/ChatInput';
import { SourcesPanel } from '@/components/oracle/SourcesPanel';
import { ConfirmationDialog } from '@/components/ui/ConfirmationDialog';
import 'react-pdf/dist/esm/Page/AnnotationLayer.css';
import 'react-pdf/dist/esm/Page/TextLayer.css';

// --- FIX: New loading indicator component ---
const LoadingIndicator = () => (
  <>
    <style>{`
      @keyframes dot-flashing {
        0% { opacity: 0.2; }
        20% { opacity: 1; }
        100% { opacity: 0.2; }
      }
      .dot-flashing span {
        animation-name: dot-flashing;
        animation-duration: 1.4s;
        animation-iteration-count: infinite;
        animation-fill-mode: both;
        display: inline-block;
        width: 4px;
        height: 4px;
        margin-left: 2px;
        background-color: currentColor;
        border-radius: 50%;
      }
      .dot-flashing span:nth-child(2) { animation-delay: 0.2s; }
      .dot-flashing span:nth-child(3) { animation-delay: 0.4s; }
    `}</style>
    <div className="flex items-center justify-center p-4 text-sm text-stone-500">
      <span>Searching your files</span>
      <div className="dot-flashing ml-1">
        <span></span>
        <span></span>
        <span></span>
      </div>
    </div>
  </>
);


const OraclePage = () => {
  const {
    input, setInput, isChatLoading, isPageLoading, user, userProfile,
    conversations, selectedConversationId, selectConversation,
    messages, classes, selectedClassId, handleClassChange,
    isLoadingConversations, isLoadingMessages, selectedMessageId,
    attachedFiles, setAttachedFiles, isHistoryCollapsed, setIsHistoryCollapsed,
    selectedSourceNumber, sourcesToDisplay, selectedFile,
    messagesEndRef, fileInputRef,
    handleSendMessage, handleNewChat, handleRenameConversation,
    handleDeleteConversation, handleMessageSelect, handleCitationClick,
    handleSourceSelect, handleClearSourceSelection,
    handleFileSelect, handlePaste, handleRemoveFile,
    confirmDelete, conversationToDelete, setConversationToDelete, isDeleting
  } = useOracle();

  const getUserName = () => userProfile?.full_name || "You";
  const selectedClassConfig = classes.find(c => c.class_id === selectedClassId) || null;

  return (
    <>
      <input type="file" ref={fileInputRef} onChange={handleFileSelect} className="hidden" multiple accept="image/png, image/jpeg, application/pdf" />
      <MainAppLayout pageTitle="Oracle | Eido AI">
        <TooltipProvider delayDuration={100}>
          <div className="flex flex-row gap-3 h-full" onPaste={handlePaste}>
              
              <div className="w-[60%] flex flex-row h-full rounded-lg border border-marble-400 overflow-hidden">
                
                <div className={cn(
                  "h-full bg-white overflow-hidden transition-all duration-300 ease-in-out border-r border-marble-400",
                  isHistoryCollapsed ? "w-0 border-r-0" : "w-1/4 min-w-[220px]"
                )}>
                  <div className="flex flex-col h-full">
                    <header className="flex items-center justify-center p-2 h-14 flex-shrink-0 border-b border-marble-400">
                      <Button size="sm" className="w-full" onClick={handleNewChat}>
                          <Plus className="mr-2 h-4 w-4" />
                          New Chat
                      </Button>
                    </header>
                    <div className="flex-1 min-h-0">
                      <HistorySidebar conversations={conversations} selectedConversationId={selectedConversationId} onSelectConversation={selectConversation} onRenameConversation={handleRenameConversation} onDeleteConversation={handleDeleteConversation} isLoading={isLoadingConversations} />
                    </div>
                  </div>
                </div>

                <div className="flex-1 flex flex-col h-full bg-white overflow-hidden">
                  <header className="flex items-center justify-between gap-x-2 border-b border-marble-400 px-4 h-14 flex-shrink-0">
                    <div className="flex items-center gap-4">
                      <Tooltip>
                        <TooltipTrigger asChild><Button variant="ghost" size="icon" onClick={() => setIsHistoryCollapsed(!isHistoryCollapsed)}>{isHistoryCollapsed ? <PanelRight className="h-4 w-4" /> : <PanelLeft className="h-4 w-4" />}</Button></TooltipTrigger>
                        <TooltipContent><p>Toggle History</p></TooltipContent>
                      </Tooltip>
                      
                      <Select
                        onValueChange={(value) => handleClassChange(value === 'all' ? null : value)}
                        value={selectedClassId || "all"}
                      >
                        <SelectTrigger className="w-full sm:w-[220px] h-8 text-xs bg-transparent border-0 hover:bg-stone-100 focus:ring-0">
                          <SelectValue placeholder="Select a Class..." />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="all">All Classes</SelectItem>
                          {classes.map(cls => (<SelectItem key={cls.class_id} value={cls.class_id}>{cls.class_name}</SelectItem>))}
                        </SelectContent>
                      </Select>

                    </div>
                  </header>
                  <div className="flex-1 flex flex-col p-4 gap-4 min-h-0">
                    <ScrollArea className="flex-1 min-h-0 -mr-4 pr-4">
                      <div className="space-y-4">
                        {isLoadingMessages ? (<div className="flex items-center justify-center p-4 h-full"><Loader2 className="h-6 w-6 animate-spin text-stone-400" /></div>)
                          : messages.length > 0 ? messages.map((message) => (
                            <ChatMessage
                                key={message.id}
                                isUser={message.role === 'user'}
                                senderName={message.role === 'user' ? getUserName() : 'Eido AI'}
                                avatarUrl={message.role === 'user' ? userProfile?.avatar_url : undefined}
                                content={message.content}
                                isSelected={selectedMessageId === message.id}
                                onClick={() => handleMessageSelect(message)}
                                onCitationClick={(sourceNumber) => handleCitationClick(message.id, sourceNumber)}
                                attachedFiles={message.attached_files} />
                          )) : (
                            <div className="flex flex-col items-center justify-center h-full text-center text-stone-500 pt-20">
                              <img src="/eido-icon.png" alt="Eido AI" className="w-16 h-16 mb-4 opacity-50"/>
                              <h2 className="text-lg font-semibold text-stone-700">Eido AI Oracle</h2>
                              <p className="text-sm">How can I help you with your coursework today?</p>
                            </div>
                          )}
                        {isChatLoading && !isLoadingMessages && <LoadingIndicator />}
                        <div ref={messagesEndRef} />
                      </div>
                    </ScrollArea>
                    <ChatInput input={input} setInput={setInput} handleSendMessage={handleSendMessage} isChatLoading={isChatLoading} attachedFiles={attachedFiles} handleRemoveFile={handleRemoveFile} fileInputRef={fileInputRef} />
                  </div>
                </div>
              </div>

              <SourcesPanel
                sourcesToDisplay={sourcesToDisplay}
                selectedSourceNumber={selectedSourceNumber}
                handleSourceSelect={handleSourceSelect}
                handleClearSourceSelection={handleClearSourceSelection}
                selectedFile={selectedFile}
                user={user}
              />
            
            <ConfirmationDialog
              isOpen={!!conversationToDelete}
              onOpenChange={(open) => !open && setConversationToDelete(null)}
              onConfirm={confirmDelete}
              title="Delete Chat?"
              description={`Are you sure you want to delete "${conversationToDelete?.name}"? This action cannot be undone.`}
              confirmText="Delete"
              isConfirming={isDeleting}
            />

          </div>
        </TooltipProvider>
      </MainAppLayout>
    </>
  );
};

export default OraclePage;

================
File: src/pages/PlaceholderPage.tsx
================
// src/pages/PlaceholderPage.tsx
import React from 'react';
import { Button } from "@/components/ui/button";
import { Link } from "react-router-dom";
import { Construction } from "lucide-react"; // Using Construction icon

interface PlaceholderPageProps {
  pageName?: string; // Optional prop to customize the message slightly
}

const PlaceholderPage: React.FC<PlaceholderPageProps> = ({ pageName }) => {
  return (
    <div className="flex flex-col items-center justify-center min-h-[calc(100vh-var(--header-height,60px)-4rem)] text-center p-4">
      <Construction className="w-24 h-24 text-yellow-500 mb-8" strokeWidth={1} />
      <h1 className="text-4xl font-bold mb-4">
        {pageName ? `${pageName} - Coming Soon!` : "New Features Coming Soon!"}
      </h1>
      <p className="text-lg text-muted-foreground mb-8">
        We're working hard to bring you this feature. Stay tuned!
      </p>
      <Button asChild>
        <Link to="/">Return to Home</Link>
      </Button>
    </div>
  );
};

export default PlaceholderPage;

================
File: src/pages/PrivacyPolicyPage.tsx
================
// src/pages/PrivacyPolicyPage.tsx
import React from 'react';
import { Helmet } from 'react-helmet-async';
import { Link } from 'react-router-dom';
import { MainAppLayout } from '@/components/layout/MainAppLayout'; // Import MainAppLayout

const SectionTitle = ({ children }: { children: React.ReactNode }) => (
  <h3 className="text-2xl font-bold text-gray-800 mt-10 mb-4 border-b pb-2">{children}</h3>
);

const PrivacyPolicyPage = () => {
  return (
    <>
      <Helmet>
        <title>Privacy Policy | Eido AI Copilot</title>
      </Helmet>
      {/* PrivacyPolicyPage now uses MainAppLayout to wrap its content, providing the standardized Header. */}
      <MainAppLayout pageTitle="Privacy Policy | Eido AI">
        <div className="bg-gray-50">
          <div className="max-w-4xl mx-auto py-16 px-4 sm:px-6 lg:px-8">
            <div className="bg-white p-8 md:p-12 rounded-2xl shadow-lg">
              <div className="text-center">
                <h1 className="text-4xl font-extrabold tracking-tight text-gray-900 sm:text-5xl">
                  Privacy Policy
                </h1>
                <p className="mt-4 text-lg text-gray-500">
                  Last Updated: June 18, 2025
                </p>
              </div>
            
              <div className="mt-12 text-gray-700 space-y-6">
                <p className="text-lg leading-relaxed">
                  Welcome to Eido AI Copilot ("Eido," "we," "our," or "us"). We are committed to protecting your privacy and being transparent about how we handle your data. This Privacy Policy explains what information we collect, how we use and share it, and your rights concerning your data when you use our application (the "Service"). This policy is an integral part of our <Link to="/terms" className="text-blue-600 hover:text-blue-800 underline">Terms of Service</Link>.
                </p>

                <SectionTitle>1. Information We Collect</SectionTitle>
                <p>To provide our Service, we collect the following types of information:</p>
                <ul className="list-disc list-outside space-y-3 pl-6">
                    <li>
                      <strong>Account Information:</strong> When you register, we collect personal information such as your name, email address, and encrypted password. If you sign up using Google OAuth, we receive your name and email address from Google.
                    </li>
                    <li>
                      <strong>User Content:</strong> Any files, documents, text, and images you upload to the Service to create your knowledge bases. You retain full ownership of your User Content.
                    </li>
                    <li>
                      <strong>Service Usage Data:</strong> We collect information about your interactions with the Service, including the questions you ask the AI, the AI-generated responses, flashcards, and quizzes you create. This is stored to provide you with your conversation history and access to your study materials.
                    </li>
                </ul>

                <SectionTitle>2. How We Use Your Information</SectionTitle>
                <p>We use your information for the sole purpose of providing and improving the Eido AI Copilot service. This includes:</p>
                <ul className="list-disc list-outside space-y-3 pl-6">
                  <li><strong>To Operate the Service:</strong> We use your Account Information to create and manage your account. We process your User Content to power the core features of the app, such as enabling the AI to answer questions about your documents.</li>
                  <li><strong>To Provide AI Features:</strong> To generate chat responses, flashcards, and quizzes, we send relevant portions of your User Content to our AI service providers.</li>
                  <li><strong>To Improve Our Service:</strong> We may analyze anonymized usage data to understand how our features are being used, diagnose technical issues, and improve the overall user experience. We will never use your personal User Content to train our own models without your explicit consent.</li>
                </ul>
                
                <SectionTitle>3. How We Share and Disclose Information</SectionTitle>
                <p>We do not sell your personal information. We only share your data with the essential third-party service providers (sub-processors) that are required to operate our Service:</p>
                <ul className="list-disc list-outside space-y-3 pl-6">
                    <li>
                      <strong>Supabase:</strong> We use Supabase for our primary database, user authentication, and file storage. Your Account Information, Service Usage Data, and uploaded files are stored securely with Supabase.
                    </li>
                    <li>
                      <strong>Weaviate:</strong> We use Weaviate as our vector database. When you upload a document, we create vector embeddings (numerical representations) of your content, which are stored in Weaviate to enable fast and relevant semantic search.
                    </li>
                    <li>
                      <strong>OpenAI:</strong> As our primary AI model provider, we send relevant text chunks from your User Content, along with your query, to the OpenAI API to generate intelligent responses. Per OpenAI's policy, they do not use data submitted via their API to train their models.
                    </li>
                </ul>
                <p>We may also disclose your information if required by law or to protect the rights, property, or safety of Eido AI Copilot, our users, or others.</p>

                <SectionTitle>4. Data Storage, Security, and Retention</SectionTitle>
                <p>We take the security of your data very seriously. We rely on the industry-standard security practices of our cloud providers (Supabase, Weaviate, and OpenAI). All data is encrypted in transit and at rest.</p>
                <p>We retain your data for as long as your account is active. If you choose to delete your account, we will initiate a process to permanently delete all your associated data, including your account information, user content, and usage data from all our systems and those of our sub-processors within 30 days.</p>
                
                <SectionTitle>5. Your Rights and Choices</SectionTitle>
                <p>You have control over your personal information. You have the right to:</p>
                <ul className="list-disc list-outside space-y-3 pl-6">
                  <li><strong>Access and Update:</strong> You can access and update your account information at any time through your profile settings.</li>
                  <li><strong>Data Portability:</strong> You can download the files you have uploaded to the Service at any time.</li>
                  <li><strong>Deletion:</strong> You can delete your account at any time through the "Delete Account" feature in your profile settings. This action is irreversible and will permanently delete all of your data as described in the section above.</li>
                </ul>

                <SectionTitle>6. Children's Privacy</SectionTitle>
                <p>Our Service is not intended for or directed at children under the age of 13. We do not knowingly collect personal information from children under 13. If we become aware that we have collected personal information from a child under 13, we will take steps to delete such information from our files as soon as possible.</p>

                <SectionTitle>7. Contact Us</SectionTitle>
                <p>
                  If you have any questions or concerns about this Privacy Policy or our data practices, please contact us at: <a href="mailto:privacy@eido-ai.com" className="text-blue-600 hover:text-blue-800 underline">privacy@eido-ai.com</a>.

                </p>
                <p>Mailing: 17 Moonray, Irvine, CA, 92603</p>
              </div>
            </div>
          </div>
        </div>
      </MainAppLayout>
    </>
  );
};

export default PrivacyPolicyPage;

================
File: src/pages/ProfilePage.tsx
================
// src/pages/ProfilePage.tsx
import React, { useState } from 'react';
import { Helmet } from 'react-helmet-async';
import { Link } from 'react-router-dom';
import { UserProfile } from "@/components/auth/UserProfile";
import { PasswordChangeForm } from "@/components/auth/PasswordChangeForm";
import { supabase } from "@/integrations/supabase/client";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { Loader2, Trash2 } from "lucide-react";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { MainAppLayout } from '@/components/layout/MainAppLayout'; // Import MainAppLayout

const ProfilePage = () => {
  const [isSignOutLoading, setIsSignOutLoading] = useState(false);
  const [isDeletingAccount, setIsDeletingAccount] = useState(false);
  const { toast } = useToast();

  const handleSignOut = async () => {
    setIsSignOutLoading(true);
    try {
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      // FIX: Clear client-side cache on sign out
      localStorage.removeItem('eidoRecentFiles');
      // Also remove active class from session storage to ensure full logout state
      sessionStorage.removeItem('activeClass');
      toast({
        title: "Signed out successfully",
        description: "You've been signed out of your account",
      });
      // The auth listener in App.tsx will handle the redirect
    } catch (error: unknown) { // Use unknown for error type
      console.error("Error signing out:", error);
      toast({
        title: "Sign out failed",
        description: (error instanceof Error) ? error.message : "There was a problem signing you out. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsSignOutLoading(false);
    }
  };

  const handleDeleteAccount = async () => {
    setIsDeletingAccount(true);
    try {
      // The 'delete-user-account' Edge Function should be updated to handle the new schema
      // and delete all user data from ALL relevant tables (classes, folders, files, etc.).
      const { data, error: functionError } = await supabase.functions.invoke('delete-user-account');
      
      const responseData: { error?: string } = data as { error?: string }; // Cast to specific type

      if (functionError) {
        throw new Error(functionError.message || "Failed to initiate account deletion process.");
      }
      if (responseData.error) {
        throw new Error(responseData.error);
      }

      // FIX: Clear client-side cache on account deletion
      localStorage.removeItem('eidoRecentFiles');
      // Also clear active class from session storage
      sessionStorage.removeItem('activeClass');
      toast({
        title: "Account Deletion Successful",
        description: "Your account and all associated data are being deleted.",
      });
      await supabase.auth.signOut();
    } catch (error: unknown) { // Use unknown for error type
      console.error('Error deleting account:', error);
      toast({
        title: "Account Deletion Failed",
        description: (error instanceof Error) ? error.message : "An unexpected error occurred.",
        variant: "destructive",
      });
    } finally {
      setIsDeletingAccount(false);
    }
  };

  return (
    <>
      <Helmet>
        <title>Profile | Eido AI</title>
        {/* You can include the same styles as DashboardPage here if they aren't global */}
      </Helmet>
      
      {/* ProfilePage now uses MainAppLayout to wrap its content, providing the standardized Header. */}
      <MainAppLayout pageTitle="Profile | Eido AI">
        <div className="h-full w-full bg-mushroom-100">
          <div className="mx-auto flex h-screen w-screen max-w-page flex-1 flex-col overflow-y-auto md:overflow-y-visible">
            
            {/* Removed hardcoded navbar from here */}
            <div className="flex w-full flex-grow justify-self-center pb-3 md:gap-x-3 main-content">
              {/* This sidebar is specific to the ProfilePage, not the main AppSidebar */}
              <div className="ml-3 hidden md:flex">
                <div className="flex flex-col justify-between overflow-auto border-marble-400 bg-marble-100 md:rounded-lg md:border md:w-42 w-full lg:w-56 px-4 md:py-6">
                   <nav className="hidden w-full flex-col gap-y-8 md:flex">
                    <div className="flex flex-col gap-y-1">
                      <span className="text-overline uppercase font-code font-bold text-dark-blue">Platform</span>
                      <Link to="/"><span className="text-p font-body flex items-center py-0.5 text-volcanic-800 hover:text-volcanic-900"><span>Dashboard</span></span></Link>
                      <Link to="/classes"><span className="text-p font-body flex items-center py-0.5 text-volcanic-800 hover:text-volcanic-900"><span>Classes</span></span></Link>
                    </div>
                    <div className="flex flex-col gap-y-1">
                      <span className="text-overline uppercase font-code font-bold text-dark-blue">Tools</span>
                      <Link to="/oracle"><span className="text-p font-body flex items-center py-0.5 text-volcanic-800 hover:text-volcanic-900"><span>Oracle</span></span></Link>
                    </div>
                     <div className="flex flex-col gap-y-1">
                       <span className="text-overline uppercase font-code font-bold text-dark-blue">Settings</span>
                      <Link to="/billing"><span className="text-p font-body flex items-center py-0.5 text-volcanic-800 hover:text-volcanic-900"><span>Billing</span></span></Link>
                      <Link to="/profile"><span className="text-p font-body flex items-center py-0.5 text-volcanic-900"><div className="mr-3 h-2 w-2 rounded-full bg-coral-500"></div><span className="font-medium">Profile</span></span></Link>
                     </div>
                  </nav>
                </div>
              </div>
               <main className="mx-3 flex h-full w-full flex-grow flex-col overflow-y-auto rounded-lg border border-marble-400 bg-marble-100 md:ml-0">
                 {/* Main Content Area for Profile */}
                  <div className="flex flex-col gap-y-8 p-4 md:p-9 lg:p-10">
                    <div>
                      <h1 className="text-h5-m lg:text-h4 font-variable font-[420] text-volcanic-900">
                        Profile & Settings
                      </h1>
                      <p className="text-p font-body text-volcanic-800 mt-2">
                        Manage your profile, password, and account settings.
                      </p>
                    </div>

                    <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                      <div className="lg:col-span-1">
                        <UserProfile />
                      </div>
                      <div className="lg:col-span-2 space-y-8">
                        <PasswordChangeForm />
                        
                        <Card className="border-red-500/30">
                          <CardHeader>
                            <CardTitle className="text-destructive">Danger Zone</CardTitle>
                            <CardDescription>
                              These actions are permanent and cannot be undone.
                            </CardDescription>
                          </CardHeader>
                          <CardContent>
                            <div className="flex flex-col sm:flex-row gap-4 items-center justify-between p-4 bg-red-500/5 rounded-lg">
                              <div>
                                  <h3 className="font-medium text-volcanic-900">Delete Account</h3>
                                  <p className="text-sm text-volcanic-800">Permanently delete your account and all of your data.</p>
                              </div>
                              <AlertDialog>
                                <AlertDialogTrigger asChild>
                                  <Button
                                    variant="destructive"
                                    disabled={isDeletingAccount}
                                    className="w-full sm:w-auto flex-shrink-0"
                                  >
                                    {isDeletingAccount ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Trash2 className="mr-2 h-4 w-4" />}
                                    Delete Account
                                  </Button>
                                </AlertDialogTrigger>
                                <AlertDialogContent>
                                  <AlertDialogHeader>
                                    <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                                    <AlertDialogDescription>
                                      This will permanently delete your account and remove all associated data from our servers. This action cannot be undone.
                                    </AlertDialogDescription>
                                  </AlertDialogHeader>
                                  <AlertDialogFooter>
                                    <AlertDialogCancel disabled={isDeletingAccount}>Cancel</AlertDialogCancel>
                                    <AlertDialogAction
                                      onClick={handleDeleteAccount}
                                      disabled={isDeletingAccount}
                                      className="bg-destructive hover:bg-destructive/90 text-destructive-foreground"
                                    >
                                      {isDeletingAccount ? "Deleting..." : "Yes, delete my account"}
                                    </AlertDialogAction>
                                  </AlertDialogFooter>
                                </AlertDialogContent>
                              </AlertDialog>
                            </div>
                          </CardContent>
                        </Card>
                      </div>
                    </div>
                    <div className="pt-6 border-t mt-4">
                          <Button
                            variant="outline"
                            onClick={handleSignOut}
                            disabled={isSignOutLoading || isDeletingAccount}
                          >
                            {isSignOutLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
                            Sign Out
                          </Button>
                    </div>
                  </div>
              </main>
            </div>
          </div>
        </div>
      </MainAppLayout>
    </>
  );
};

export default ProfilePage;

================
File: src/pages/TermsOfServicePage.tsx
================
// src/pages/TermsOfServicePage.tsx
import React from 'react';
import { Helmet } from 'react-helmet-async';
import { Link } from 'react-router-dom';
import { MainAppLayout } from '@/components/layout/MainAppLayout'; // Import MainAppLayout

const SectionTitle = ({ children }: { children: React.ReactNode }) => (
  <h3 className="text-2xl font-bold text-gray-800 mt-10 mb-4 border-b pb-2">{children}</h3>
);

const TermsOfServicePage = () => {
  return (
    <>
      <Helmet>
        <title>Terms of Service | Eido AI Copilot</title>
      </Helmet>
      {/* TermsOfServicePage now uses MainAppLayout to wrap its content, providing the standardized Header. */}
      <MainAppLayout pageTitle="Terms of Service | Eido AI">
        <div className="bg-gray-50">
          <div className="max-w-4xl mx-auto py-16 px-4 sm:px-6 lg:px-8">
            <div className="bg-white p-8 md:p-12 rounded-2xl shadow-lg">
              <div className="text-center">
                <h1 className="text-4xl font-extrabold tracking-tight text-gray-900 sm:text-5xl">
                  Terms of Service
                </h1>
                <p className="mt-4 text-lg text-gray-500">
                  Last Updated: June 18, 2025
                </p>
              </div>
            
              <div className="mt-12 text-gray-700 space-y-6">
                <p className="text-lg leading-relaxed">
                  Welcome to Eido AI Copilot ("Eido," "we," "our," or "us"). These Terms of Service ("Terms") govern your access to and use of our web application and services (collectively, the "Service"). By accessing or using the Service, you agree to be bound by these Terms and our <Link to="/privacy" className="text-blue-600 hover:text-blue-800 underline">Privacy Policy</Link>.
                </p>

                <SectionTitle>1. Description of Service</SectionTitle>
                <p>Eido AI Copilot is an educational copilot designed to help users create smart, searchable knowledge bases from their course materials. The Service uses artificial intelligence to allow users to chat with their documents and generate study aids like flashcards and quizzes ("AI-Generated Content").</p>

                <SectionTitle>2. User Accounts</SectionTitle>
                <p>To access most features of the Service, you must register for an account. You agree to provide accurate, current, and complete information during the registration process and to update such information to keep it accurate, current, and complete. You are responsible for safeguarding your password and for any activities or actions under your account.</p>
                
                <SectionTitle>3. User Content and Data</SectionTitle>
                <p>
                  You retain full ownership of all documents, text, and other materials you upload to the Service ("User Content"). By uploading User Content, you grant Eido AI Copilot a worldwide, non-exclusive, royalty-free license to use, process, store, and transmit your User Content solely for the purpose of providing and improving the Service for you. This includes:
                </p>
                <ul className="list-disc list-outside space-y-2 pl-6">
                    <li>Processing your documents to create vector embeddings for search and retrieval.</li>
                    <li>Transmitting relevant portions of your User Content to our AI service providers (e.g., OpenAI, Weaviate) to generate responses and other AI-Generated Content.</li>
                    <li>Storing your User Content and AI-Generated Content on our secure cloud infrastructure (e.g., Supabase).</li>
                </ul>
                <p>You are solely responsible for your User Content and you represent and warrant that you own it or have all necessary rights to use it and grant us the license as described in these Terms.</p>

                <SectionTitle>4. Acceptable Use Policy</SectionTitle>
                <p>You agree not to use the Service to upload, create, or share any content that:</p>
                <ul className="list-disc list-outside space-y-2 pl-6">
                  <li>Violates any applicable law or regulation.</li>
                  <li>Infringes on the intellectual property rights of others (e.g., copyrighted material).</li>
                  <li>Is unlawful, defamatory, harmful, obscene, or otherwise objectionable.</li>
                  <li>Contains malicious code, viruses, or any other computer code, files, or programs designed to interrupt, destroy, or limit the functionality of any computer software or hardware or telecommunications equipment.</li>
                </ul>
                <p>Violation of this policy may result in the immediate suspension or termination of your account.</p>

                <SectionTitle>5. AI-Generated Content</SectionTitle>
                <p>The Service uses artificial intelligence to generate content such as chat responses, flashcards, and quizzes. While we strive for accuracy, AI-Generated Content may contain errors or inaccuracies. It is provided for educational and informational purposes only. You should independently verify any critical information before relying on it. Eido AI Copilot does not guarantee the accuracy, completeness, or usefulness of any AI-Generated Content.</p>
                
                <SectionTitle>6. Intellectual Property</SectionTitle>
                <p>Excluding your User Content, the Service and all materials therein, including, without limitation, software, images, text, graphics, logos, patents, trademarks, service marks, and copyrights (the "Eido AI Content"), and all Intellectual Property Rights related thereto, are the exclusive property of Eido AI Copilot. Use of the Eido AI Copilot Content for any purpose not expressly permitted by these Terms is strictly prohibited.</p>

                <SectionTitle>7. Termination</SectionTitle>
                <p>We may terminate or suspend your account and bar access to the Service immediately, without prior notice or liability, under our sole discretion, for any reason whatsoever, including but not limited to a breach of the Terms. If you wish to terminate your account, you may do so through the "Delete Account" feature in your profile settings. This action is irreversible.</p>

                <SectionTitle>8. Disclaimer of Warranties; Limitation of Liability</SectionTitle>
                <p>The Service is provided on an "AS IS" and "AS AVAILABLE" basis. Your use of the Service is at your sole risk. The Service is provided without warranties of any kind, whether express or implied. In no event shall Eido AI Copilot be liable for any indirect, incidental, special, consequential, or punitive damages arising out of or in connection with your use of the Service.</p>

                <SectionTitle>9. Governing Law</SectionTitle>
                <p>These Terms shall be governed and construed in accordance with the laws of the State of California, United States, without regard to its conflict of law provisions.</p>
                
                <SectionTitle>10. Changes to Terms</SectionTitle>
                <p>We reserve the right, at our sole discretion, to modify or replace these Terms at any time. If a revision is material, we will provide at least 30 days' notice prior to any new terms taking effect. By continuing to access or use our Service after any revisions become effective, you agree to be bound by the revised terms.</p>

                <SectionTitle>11. Contact Us</SectionTitle>
                <p>
                  If you have any questions about these Terms, please contact us at: <a href="mailto:support@eido-ai.com" className="text-blue-600 hover:text-blue-800 underline">srwang@usc.edu</a>
                </p>
              </div>
            </div>
          </div>
        </div>
      </MainAppLayout>
    </>
  );
};

export default TermsOfServicePage;

================
File: src/services/calendarEventService.ts
================
// src/services/calendarEventService.ts
import { supabase } from "@/integrations/supabase/client";
import { DeletionScope } from "@/components/calendar/DeleteRecurringEventDialog";

export interface CalendarEvent {
    id: string;
    user_id: string;
    class_id?: string | null;
    title: string;
    event_start: string;
    event_end?: string | null;
    location?: string | null;
    notes?: string | null;
    event_type?: string | null;
    created_at: string;
    repeat_pattern?: string | null;
}

export type NewCalendarEvent = Omit<CalendarEvent, 'id' | 'user_id' | 'created_at'>;

export const calendarEventService = {
    async getEvents(): Promise<CalendarEvent[]> {
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) return [];
        const { data, error } = await supabase.from('calendar_events').select('*').eq('user_id', user.id);
        if (error) throw error;
        return data || [];
    },

    async createEvent(eventData: NewCalendarEvent): Promise<CalendarEvent[]> {
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) throw new Error("User must be authenticated to create an event.");
        const { data, error } = await supabase.functions.invoke('create-recurring-event', { body: eventData });
        if (error) throw error;
        return data;
    },

    async updateEvent(eventId: string, eventData: NewCalendarEvent): Promise<CalendarEvent> {
        const { data, error } = await supabase
            .from('calendar_events')
            .update(eventData)
            .eq('id', eventId)
            .select()
            .single();
        if (error) throw error;
        return data;
    },

    async deleteEvent(event: CalendarEvent, scope: DeletionScope): Promise<void> {
        const { error } = await supabase.functions.invoke('delete-recurring-event', {
            body: { event, scope },
        });
        if (error) throw error;
    },
};

================
File: src/services/chatMessageService.ts
================
// src/services/chatMessageService.ts
import { supabase } from "@/integrations/supabase/client";
import type { CustomDatabase } from "@/integrations/supabase/client";
import { FileType } from "@/features/files/types";

// --- TYPE DEFINITIONS (DEFINED AND EXPORTED HERE) ---

export type ChatMessageDBInsert = CustomDatabase['public']['Tables']['chat_messages']['Insert'];

/**
 * The rich source object used by the frontend. It's generated by the AI function
 * and reconstructed from the database when fetching message history.
 */
export interface ActiveSource {
  number: number;
  file: FileType;
  pageNumber: number | null;  
  content: string;
  file_id: string; // The foreign key used for saving
}

/**
 * The main chat message object used by the application UI.
 */
export interface ChatMessageApp {
  id: string;
  role: 'user' | 'assistant' | 'system';
  content: string;
  createdAt: Date;
  conversation_id: string;
  sources?: ActiveSource[];
  attached_files?: { name: string, type: string }[];
}

// --- MAIN SERVICE LOGIC ---

export const chatMessageService = {
  /**
   * Saves a message and its associated sources to the database.
   * This version ensures that if saving sources fails, the entire operation is rolled back.
   */
  saveMessage: async (
    messagePayload: Omit<ChatMessageDBInsert, 'user_id' | 'id' | 'created_at'> & { conversation_id: string; sources?: ActiveSource[] }
  ): Promise<ChatMessageApp> => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      throw new Error("User must be authenticated to save messages.");
    }

    // First, separate the sources from the core message data
    const { sources, ...coreMessageData } = messagePayload;
    const messageToSave: ChatMessageDBInsert = { ...coreMessageData, user_id: user.id };
    
    // Step 1: Save the core message text
    const { data: savedMessage, error: messageError } = await supabase
      .from('chat_messages')
      .insert(messageToSave)
      .select()
      .single();

    if (messageError) {
      console.error("Error saving core message:", messageError);
      throw messageError;
    }

    // Step 2: If there are sources, attempt to save them.
    let finalSourcesForApp: ActiveSource[] = [];
    if (sources && sources.length > 0) {
      const sourcesToInsert = sources.map(source => ({
        message_id: savedMessage.id,
        file_id: source.file_id,
        source_number: source.number,
        name: source.file.name,
        url: source.file.url,
        page_number: source.pageNumber,
        content: source.content,
      }));

      // Attempt to insert the sources
      const { error: sourcesError } = await supabase
        .from('message_sources')
        .insert(sourcesToInsert);

      // THIS IS THE CRITICAL FIX: If the insert fails, we must handle it.
      if (sourcesError) {
        console.error("Error saving sources, rolling back message:", sourcesError);
        
        // As a cleanup, attempt to delete the message we just created to avoid orphaned data.
        await supabase.from('chat_messages').delete().eq('id', savedMessage.id);
        
        // Most importantly, THROW the error so the UI knows the entire operation failed.
        throw sourcesError;
      }
      
      // Only assign the sources if the database insert was successful.
      finalSourcesForApp = sources;
    }

    // Step 3: Return the complete, successfully saved message object.
    return {
      id: savedMessage.id,
      role: savedMessage.role as 'user' | 'assistant' | 'system',
      content: savedMessage.content,
      createdAt: new Date(savedMessage.created_at),
      conversation_id: savedMessage.conversation_id!,
      attached_files: (savedMessage.attached_files as any) || [],
      sources: finalSourcesForApp,
    };
  },


  fetchMessagesByConversation: async (conversationId: string): Promise<ChatMessageApp[]> => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user || !conversationId) return [];

    // Step 1: Fetch messages and perform a nested join to get their sources AND the full file data for each source.
    const { data: dbData, error } = await supabase
      .from('chat_messages')
      .select(`
        *,
        message_sources (
          *,
          files (*)
        )
      `)
      .eq('user_id', user.id)
      .eq('conversation_id', conversationId)
      .order('created_at', { ascending: true });

    if (error) {
      console.error("Error fetching messages with sources:", error);
      throw error;
    }
    
    // Step 2: Map the raw database result to the 'ChatMessageApp' type our frontend expects.
    return (dbData || []).map((dbRow): ChatMessageApp => {
      const message: ChatMessageApp = {
        id: dbRow.id,
        role: dbRow.role as 'user' | 'assistant' | 'system',
        content: dbRow.content,
        createdAt: new Date(dbRow.created_at),
        conversation_id: dbRow.conversation_id!,
        attached_files: (dbRow.attached_files as any) || [],
        sources: [],
      };

      // Step 3: If sources were returned from the join, reconstruct the 'sources' array.
      if (Array.isArray(dbRow.message_sources) && dbRow.message_sources.length > 0) {
        message.sources = dbRow.message_sources
          .filter(source => source.files) // Safety check: only include sources where the linked file exists.
          .map((source): ActiveSource => ({
            number: source.source_number,
            pageNumber: source.page_number,
            content: source.content,
            file_id: source.file_id,
            file: source.files as FileType, // The 'files(*)' join gives us the full FileType object.
        })).sort((a, b) => a.number - b.number); // Ensure sources are in the correct order.
      }
      
      return message;
    });
  },
};

================
File: src/services/classOpenAIConfig.ts
================
// src/services/classOpenAIConfig.ts
import { supabase } from "@/integrations/supabase/client";
import type { CustomDatabase } from "@/integrations/supabase/client";

// This is defined in CalendarSidebar, but we can keep a copy here for default assignment
const COLOR_SWATCHES = [
    'bg-red-500', 'bg-orange-500', 'bg-yellow-500', 'bg-lime-500', 'bg-green-500', 'bg-teal-500',
    'bg-cyan-500', 'bg-blue-500', 'bg-indigo-500', 'bg-purple-500', 'bg-fuchsia-500', 'bg-pink-500',
];

export interface OpenAIConfig {
  vectorStoreId?: string | null;
  assistantId?: string | null;
}

export interface ClassConfig {
  class_id: string;
  class_name: string;
  user_id?: string | null;
  created_at?: string | null;
  updated_at?: string | null;
  color?: string | null;
}

type ClassesDBInsertPayload = CustomDatabase['public']['Tables']['classes']['Insert'];
type ClassesDBRow = CustomDatabase['public']['Tables']['classes']['Row'];
type ClassesDBUpdatePayload = Partial<ClassesDBRow>;

export const classOpenAIConfigService = {
  getConfigForClass: async (class_id: string): Promise<OpenAIConfig | undefined> => {
    console.warn("getConfigForClass: OpenAI config IDs are no longer stored on the 'classes' table. This function will return undefined.");
    return undefined;
  },

  saveConfigForClass: async (
    className: string,
    class_id_to_update?: string | null
  ): Promise<ClassesDBRow> => {
    if (!className || typeof className !== 'string' || className.trim() === "") {
        throw new Error("Class name is required and cannot be empty.");
    }

    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
        throw new Error('Authentication required to save class configuration.');
    }

    let savedClassRecord: ClassesDBRow;
    if (class_id_to_update) {
      const updatePayload: ClassesDBUpdatePayload = {
        class_name: className,
        updated_at: new Date().toISOString(),
      };
      const { data: updateData, error: updateError } = await supabase
        .from('classes')
        .update(updatePayload)
        .eq('class_id', class_id_to_update)
        .eq('user_id', user.id)
        .select()
        .single();
      if (updateError) {
        console.error('Error updating class in Supabase:', updateError);
        if (updateError.code === 'PGRST116') {
            throw new Error(`Class with ID ${class_id_to_update} not found for update, or you do not have permission.`);
        }
        throw updateError;
      }
      if (!updateData) throw new Error("Failed to update class, no data returned from Supabase.");
      savedClassRecord = updateData;
    } else {
      const { data: existingClassByName, error: fetchError } = await supabase
        .from('classes')
        .select('class_id, class_name')
        .eq('class_name', className)
        .eq('user_id', user.id)
        .maybeSingle();
      if (fetchError) {
        console.error('Error checking if class exists by name:', fetchError);
        throw fetchError;
      }

      if (existingClassByName) {
        throw new Error(`A class named '${className}' already exists. Please use a different name.`);
      }

      const { data: userClasses } = await supabase.from('classes').select('class_id').eq('user_id', user.id);
      const nextColorIndex = (userClasses?.length || 0) % COLOR_SWATCHES.length;

      const insertPayload: ClassesDBInsertPayload = {
        class_name: className,
        user_id: user.id,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        color: COLOR_SWATCHES[nextColorIndex],
      };
      const { data: insertData, error: insertError } = await supabase
        .from('classes')
        .insert(insertPayload)
        .select()
        .single();
      if (insertError) {
        console.error('Error inserting new class into Supabase:', insertError);
        throw insertError;
      }
      if (!insertData) throw new Error("Failed to insert new class, no data returned from Supabase.");
      savedClassRecord = insertData;
    }
    return savedClassRecord;
  },

  getAllClasses: async (): Promise<ClassConfig[]> => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      return [];
    }
    try {
      const { data, error } = await supabase
        .from('classes')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });
      if (error) {
        console.error('Error fetching classes from Supabase:', error);
        throw error;
      }
      return data || [];
    } catch (error) {
      console.error('Error retrieving all classes:', error);
      throw error;
    }
  },

  updateClassColor: async (class_id: string, color: string): Promise<ClassesDBRow> => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) throw new Error("Authentication required.");

    const { data, error } = await supabase
        .from('classes')
        .update({ color: color, updated_at: new Date().toISOString() })
        .eq('class_id', class_id)
        .eq('user_id', user.id)
        .select()
        .single();
    if (error) {
        console.error("Error updating class color:", error);
        throw error;
    }
    return data;
  },

  deleteClass: async (class_id: string): Promise<void> => {
    if (!class_id) throw new Error('Valid class_id is required for deletion');
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) throw new Error('Authentication required to delete a class.');
    
    await supabase.from('chat_messages').delete().eq('class_id', class_id);
    await supabase.from('conversations').delete().eq('class_id', class_id);
    await supabase.from('files').delete().eq('class_id', class_id);
    await supabase.from('folders').delete().eq('class_id', class_id);
    await supabase.from('quiz_questions').delete().eq('class_id', class_id);
    await supabase.from('quizzes').delete().eq('class_id', class_id);
    await supabase.from('flashcards').delete().eq('class_id', class_id);
    await supabase.from('flashcard-decks').delete().eq('class_id', class_id);
    await supabase.functions.invoke('delete-weaviate-data-by-class', { body: { class_id_to_delete: class_id } });
    await supabase.from('classes').delete().eq('class_id', class_id);
  },
};

================
File: src/services/conversationService.ts
================
// src/services/conversationService.ts
import { supabase } from "@/integrations/supabase/client";
import type { CustomDatabase } from "@/integrations/supabase/client";

export type ConversationDBRow = CustomDatabase['public']['Tables']['conversations']['Row'];
export type ConversationDBInsert = CustomDatabase['public']['Tables']['conversations']['Insert'];
export type ConversationDBUpdate = CustomDatabase['public']['Tables']['conversations']['Update'];

// MOVED & EXPORTED: This type is now defined here as its canonical source.
export interface AppConversation {
  id: string;
  name: string;
  user_id: string;
  class_id: string | null;
  chat_mode: 'rag' | 'web' | null;
  created_at: Date;
  last_message_at: Date;
  updated_at: Date;
  chatbot_type: string;
}

const mapToAppConversation = (dbRow: ConversationDBRow): AppConversation => ({
  id: dbRow.id,
  name: dbRow.title || 'Untitled',
  user_id: dbRow.user_id,
  class_id: dbRow.class_id,
  chat_mode: dbRow.chat_mode as 'rag' | 'web' | null,
  chatbot_type: dbRow.chatbot_type,
  created_at: new Date(dbRow.created_at || 0),
  last_message_at: new Date(dbRow.last_message_at || 0),
  updated_at: new Date(dbRow.updated_at || 0),
});

export const conversationService = {
  fetchConversations: async (userId: string, class_id?: string, chat_mode?: 'rag' | 'web'): Promise<AppConversation[]> => {
    let query = supabase
      .from('conversations')
      .select('*')
      .eq('user_id', userId);
      
    if (class_id) {
      query = query.eq('class_id', class_id);
    }
    if (chat_mode) {
      query = query.eq('chat_mode', chat_mode);
    }
  
    query = query.order('last_message_at', { ascending: false, nullsFirst: false });
    
    const { data, error } = await query;

    if (error) {
      console.error("[conversationService] Error fetching conversations:", error);
      throw error;
    }
    return (data || []).map(dbRow => mapToAppConversation(dbRow));
  },

  createConversation: async (
    payload: { name: string; class_id?: string | null; chat_mode?: 'rag' | 'web' | null; chatbot_type?: string; },
    userId: string
  ): Promise<AppConversation> => {
    const now = new Date().toISOString(); // --- FIX: Get current timestamp
    const insertData: ConversationDBInsert = {
      title: payload.name,
      class_id: payload.class_id || null,
      chat_mode: payload.chat_mode || 'rag',
      chatbot_type: payload.chatbot_type || 'oracle',
      user_id: userId,
      // --- FIX: Set last_message_at on creation to ensure correct sorting
      last_message_at: now, 
      updated_at: now,
    };
    
    const { data, error } = await supabase
      .from('conversations')
      .insert(insertData)
      .select()
      .single();
      
    if (error) {
      console.error("[conversationService] Error creating conversation:", error);
      throw error;
    }
    return mapToAppConversation(data);
  },

  renameConversation: async (
    conversationId: string,
    newName: string,
    userId: string
  ): Promise<void> => { 
    const updatePayload: Partial<ConversationDBUpdate> = {
        title: newName,
        updated_at: new Date().toISOString(),
    };
    
    const { error } = await supabase
      .from('conversations')
      .update(updatePayload)
      .eq('id', conversationId)
      .eq('user_id', userId);
      
    if (error) {
      console.error("[conversationService] Error renaming conversation:", error);
      throw error;
    }
  },

  deleteConversation: async (
    conversationId: string,
    userId: string
  ): Promise<void> => {
    const { error: messagesError } = await supabase
      .from('chat_messages')
      .delete()
      .eq('conversation_id', conversationId)
      .eq('user_id', userId);
      
    if (messagesError) {
      console.error(`[conversationService] Error deleting messages for conversation ${conversationId}:`, messagesError);
      throw messagesError;
    }

    const { error: conversationError } = await supabase
      .from('conversations')
      .delete()
      .eq('id', conversationId)
      .eq('user_id', userId);
      
    if (conversationError) {
      console.error(`[conversationService] Error deleting conversation ${conversationId}:`, conversationError);
      throw conversationError;
    }
  },
  
  updateConversationTimestamp: async (conversationId: string, userId: string, timestamp: Date): Promise<AppConversation> => {
    const { data, error } = await supabase
      .from('conversations')
      .update({ last_message_at: timestamp.toISOString() })
      .eq('id', conversationId)
      .eq('user_id', userId)
      .select()
      .single();
      
    if (error) {
      console.error(`[conversationService] Error updating timestamp for conversation ${conversationId}:`, error);
      throw error;
    }
    return mapToAppConversation(data);
  }
};

================
File: src/services/fileService.ts
================
// src/services/fileService.ts
import { supabase } from "@/integrations/supabase/client";
import { FolderType, FileType } from "@/features/files/types";

export const fileService = {
  // --- Create Operations ---
  createClass: async (className: string) => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) throw new Error("User not authenticated.");
    const { data, error } = await supabase
      .from('classes')
      .insert({ class_name: className, user_id: user.id })
      .select()
      .single();
    if (error) { console.error("Error creating class:", error); throw error; }
    return data;
  },

  createFolder: async (folderName: string, classId: string, parentFolderId: string | null) => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) throw new Error("User not authenticated.");
    const { data, error } = await supabase
      .from('folders')
      .insert({ name: folderName, user_id: user.id, class_id: classId, parent_id: parentFolderId })
      .select()
      .single();
    if (error) { console.error("Error creating folder:", error); throw error; }
    return data;
  },

  uploadFiles: async (files: File[], classId: string, folderId: string | null) => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) throw new Error("User not authenticated.");
    const uploadPromises = files.map(async (file) => {
        const filePath = `${user.id}/${classId}/${folderId || 'root'}/${Date.now()}-${file.name}`;
        const { data: storageData, error: uploadError } = await supabase.storage.from('file_storage').upload(filePath, file);
        if (uploadError) throw new Error(`Storage upload failed for ${file.name}: ${uploadError.message}`);
        const { data: urlData } = supabase.storage.from('file_storage').getPublicUrl(storageData.path);
        const { data: dbFile, error: dbError } = await supabase.from('files').insert({
                name: file.name, size: file.size, type: file.type, url: urlData.publicUrl,
                user_id: user.id, class_id: classId, folder_id: folderId,
            }).select().single();
        if (dbError) throw new Error(`Database insert failed for ${file.name}: ${dbError.message}`);
        if (dbFile) {
            await supabase.functions.invoke('upload-to-vector-store', {
                body: JSON.stringify({ files: [{...dbFile, file_id: dbFile.file_id}], class_id: classId }),
            });
        }
    });
    await Promise.all(uploadPromises);
  },

  // --- Read Operations ---
  getFolders: async (classId: string, parentFolderId: string | null): Promise<FolderType[]> => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) throw new Error("User not authenticated.");
    let query = supabase.from('folders').select('*').eq('user_id', user.id).eq('class_id', classId);
    if (parentFolderId) {
      query = query.eq('parent_id', parentFolderId);
    } else {
      query = query.is('parent_id', null);
    }
    const { data, error } = await query.order('name', { ascending: true });
    if (error) { console.error("Error fetching folders:", error); throw error; }
    return data as FolderType[];
  },

  getFiles: async (classId: string, parentFolderId: string | null): Promise<FileType[]> => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) throw new Error("User not authenticated.");
    let query = supabase.from('files').select('*').eq('user_id', user.id).eq('class_id', classId);
    if (parentFolderId) {
      query = query.eq('folder_id', parentFolderId);
    } else {
      query = query.is('folder_id', null);
    }
    const { data, error } = await query.order('folder_id').order('name', { ascending: true });
    if (error) { console.error("Error fetching files:", error); throw error; }
    return data as FileType[];
  },
  
  getAllFoldersForUser: async (): Promise<FolderType[]> => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) return [];
    const { data, error } = await supabase
      .from('folders')
      .select('*')
      .eq('user_id', user.id);
    if (error) { console.error("Error fetching all folders for user:", error); throw error; }
    return data as FolderType[];
  },
  
  getAllFilesForClass: async (classId: string): Promise<FileType[]> => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) return [];
    const { data, error } = await supabase
      .from('files')
      .select('*')
      .eq('user_id', user.id)
      .eq('class_id', classId);
    if (error) { console.error("Error fetching all files for class:", error); throw error; }
    return data as FileType[];
  },

  getAllFilesWithClass: async (): Promise<unknown[]> => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) throw new Error("User not authenticated.");
    const { data, error } = await supabase.from('files').select(`*, classes (class_name)`).eq('user_id', user.id);
    if (error) {
      console.error("Error fetching all files with class names:", error);
      throw error;
    }
    return (data || []).map(file => ({ ...file, class: file.classes?.class_name || 'Unknown Class' }));
  },

  deleteFile: async (file: FileType): Promise<void> => {
    if (!file || !file.file_id || !file.url) {
        throw new Error("Invalid file object provided for deletion.");
    }

    if (file.thumbnail_url) {
        try {
            // FIX: Stringify the body for the function invocation
            await supabase.functions.invoke('delete-from-cloudinary', {
                body: JSON.stringify({ file_id: file.file_id })
            });
        } catch (cloudinaryError) {
            console.error(`Failed to delete Cloudinary thumbnail for file ${file.file_id}:`, cloudinaryError);
        }
    }

    const filePathInStorage = new URL(file.url).pathname.split('/public/file_storage/')[1];
    await supabase.storage.from('file_storage').remove([filePathInStorage]);
    
    // FIX: Stringify the body for the function invocation
    await supabase.functions.invoke('delete-weaviate-chunks-by-file', {
        body: JSON.stringify({ file_id: file.file_id })
    });

    const { error: dbError } = await supabase.from('files').delete().eq('file_id', file.file_id);
    if (dbError) { console.error("Error deleting file from database:", dbError); throw dbError; }
  },

  deleteFolder: async (folderId: string): Promise<void> => {
    const { data: files, error: filesError } = await supabase
        .from('files')
        .select('*')
        .eq('folder_id', folderId);
    if (filesError) {
        console.error(`Error fetching files for folder ${folderId}:`, filesError);
        throw filesError;
    }

    if (files && files.length > 0) {
        await Promise.all(files.map(file => fileService.deleteFile(file as FileType)));
    }

    const { data: subfolders, error: subfoldersError } = await supabase
        .from('folders')
        .select('folder_id')
        .eq('parent_id', folderId);
    if (subfoldersError) {
        console.error(`Error fetching subfolders for folder ${folderId}:`, subfoldersError);
        throw subfoldersError;
    }

    if (subfolders && subfolders.length > 0) {
        await Promise.all(subfolders.map(subfolder => fileService.deleteFolder(subfolder.folder_id)));
    }

    const { error: deleteFolderError } = await supabase
        .from('folders')
        .delete()
        .eq('folder_id', folderId);
    if (deleteFolderError) {
        console.error(`Error deleting folder ${folderId}:`, deleteFolderError);
        throw deleteFolderError;
    }
  },
};

================
File: src/types/oracle.ts
================
// src/types/oracle.ts

import { User } from '@supabase/supabase-js';
import { AppConversation } from '@/services/conversationService';
import { ChatMessageApp, ActiveSource } from '@/services/chatMessageService';
import { ClassConfig } from '@/services/classOpenAIConfig';
import { AttachedFile } from '@/components/chat/AttachedFilePill';
import { FileType } from '@/features/files/types';

export interface ProfileData {
  full_name: string | null;
  avatar_url: string | null;
}

export interface OracleState {
  // State
  input: string;
  isChatLoading: boolean;
  isPageLoading: boolean;
  user: User | null;
  userProfile: ProfileData | null;
  conversations: AppConversation[];
  selectedConversationId: string | null;
  messages: ChatMessageApp[];
  classes: ClassConfig[];
  selectedClassId: string | null;
  isLoadingConversations: boolean;
  isLoadingMessages: boolean;
  selectedMessageId: string | null;
  attachedFiles: AttachedFile[];
  openSourceTabs: ActiveSource[];
  isHistoryCollapsed: boolean;
  selectedSourceNumber: number | null;
  
  // Derived State
  sourcesToDisplay: ActiveSource[];
  selectedFile: FileType | null;

  // Refs
  messagesEndRef: React.RefObject<HTMLDivElement>;
  fileInputRef: React.RefObject<HTMLInputElement>;
  
  // Handlers
  setInput: React.Dispatch<React.SetStateAction<string>>;
  // Replaced direct setter with a new function to handle session storage
  selectConversation: (id: string | null) => void;
  handleClassChange: (id: string | null) => void;
  setAttachedFiles: React.Dispatch<React.SetStateAction<AttachedFile[]>>;
  setIsHistoryCollapsed: React.Dispatch<React.SetStateAction<boolean>>;
  handleSendMessage: () => Promise<void>;
  handleNewChat: () => Promise<void>;
  handleRenameConversation: (id: string, newName: string) => Promise<void>;
  handleDeleteConversation: (conversation: AppConversation) => void;
  handleMessageSelect: (message: ChatMessageApp) => void;
  handleCitationClick: (messageId: string, sourceNumber: number) => void;
  handleSourceSelect: (sourceNumber: number) => void;
  handleClearSourceSelection: () => void;
  handleFileSelect: (event: React.ChangeEvent<HTMLInputElement>) => void;
  handlePaste: (event: React.ClipboardEvent) => void;
  handleRemoveFile: (fileId: string) => void;
  confirmDelete: () => Promise<void>;
  
  // Dialog state
  conversationToDelete: AppConversation | null;
  setConversationToDelete: React.Dispatch<React.SetStateAction<AppConversation | null>>;
  isDeleting: boolean;
}

================
File: src/App.css
================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

================
File: src/App.tsx
================
// src/App.tsx
import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { AuthGuard } from "./components/auth/AuthGuard";
import { HelmetProvider } from 'react-helmet-async';
import { LoaderProvider } from './context/LoaderContext'; 
import { AuthProvider } from './context/AuthContext';

// Import all active page components
import AuthPage from "./pages/AuthPage";
import NotFound from "./pages/NotFound";
import OraclePage from "./pages/OraclePage";
import ClassesPage from "./pages/ClassesPage.tsx";
import ProfilePage from "./pages/ProfilePage";
import DashboardPage from "./pages/DashboardPage";
import PlaceholderPage from "./pages/PlaceholderPage";
import PrivacyPolicyPage from "./pages/PrivacyPolicyPage";
import TermsOfServicePage from "./pages/TermsOfServicePage";
import CalendarPage from "./pages/CalendarPage"; // Import the new CalendarPage

const queryClient = new QueryClient();
const App = () => (
  <HelmetProvider>
    <QueryClientProvider client={queryClient}>
      <TooltipProvider>
        <Toaster />
        <Sonner />
        <AuthProvider>
          <BrowserRouter>
            <LoaderProvider>
              <Routes>
                {/* Public routes */}
                <Route path="/" element={<DashboardPage />} />
                <Route path="/auth" element={<AuthPage />} />
                <Route path="/privacy" element={<PrivacyPolicyPage />} />
                <Route path="/terms" element={<TermsOfServicePage />} />

                {/* Protected routes */}
                <Route element={<AuthGuard />}>
                  <Route path="/profile" element={<ProfilePage />} />
                  <Route path="/oracle" element={<OraclePage />} />
                  <Route path="/classes" element={<ClassesPage/>} />
                  {/* MODIFIED: Replaced PlaceholderPage with CalendarPage */}
                  <Route path="/calendar" element={<CalendarPage />} />
                  
                  {/* Placeholder routes */}
                  <Route path="/command" element={<PlaceholderPage pageName="Command" />} />
                  <Route path="/billing" element={<PlaceholderPage pageName="Billing" />} />
                  <Route path="/chrono" element={<PlaceholderPage pageName="Chrono" />} />
                  <Route path="/codex" element={<PlaceholderPage pageName="Codex" />} />
                </Route>

                {/* Catch-all 404 route */}
                <Route path="*" element={<NotFound />} />
              </Routes>
            </LoaderProvider>
          </BrowserRouter>
        </AuthProvider>
      </TooltipProvider>
    </QueryClientProvider>
  </HelmetProvider>
);
export default App;

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 38 56% 96%;
    --foreground: 220 10% 22%;

    --card: 0 0% 100%;
    --card-foreground: 220 10% 22%;

    --popover: 0 0% 100%;
    --popover-foreground: 220 10% 22%;

    --primary: 185 72% 36%;
    --primary-foreground: 210 40% 98%;

    --secondary: 200 40% 25%;
    --secondary-foreground: 210 40% 98%;

    --muted: 220 15% 94%;
    --muted-foreground: 220 10% 40%;

    --accent: 185 72% 36%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 220 13% 91%;
    --input: 220 13% 91%;
    --ring: 185 72% 36%;

    --radius: 0.5rem; /* MODIFIED: Was 0.75rem */

    --sidebar-background: 220 30% 18%;
    --sidebar-foreground: 210 40% 98%;
    --sidebar-primary: 185 72% 36%;
    --sidebar-primary-foreground: 210 40% 98%;
    --sidebar-accent: 220 20% 25%;
    --sidebar-accent-foreground: 210 40% 98%;
    --sidebar-border: 220 20% 25%;
    --sidebar-ring: 185 72% 36%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
  }
}

@layer components {
  .gradient-background {
    @apply bg-gradient-to-br from-cybercoach-blue-light/10 to-cybercoach-teal-light/10;
  }
  
  .cyber-card {
    @apply bg-white rounded-lg shadow-md p-6 border border-slate-200 hover:border-slate-300 transition-all;
  }

  .chat-message {
    @apply p-4 rounded-lg my-2 max-w-[85%];
  }

  .user-message {
    @apply chat-message bg-cybercoach-blue-light/20 ml-auto;
  }

  .ai-message {
    @apply chat-message bg-gray-100 mr-auto;
  }

  .policy-card {
    @apply bg-white rounded-lg shadow-md p-6 border border-slate-200 hover:shadow-lg transition-all duration-300;
  }

  
  .section-header {
    @apply text-2xl font-semibold text-cybercoach-blue-dark mb-4;
  }
}

================
File: src/main.tsx
================
// src/main.tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css'; // or your global stylesheet
import { HelmetProvider } from 'react-helmet-async';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <HelmetProvider>
      <App />
    </HelmetProvider>
  </React.StrictMode>
);

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

interface ImportMetaEnv {
  readonly VITE_SUPABASE_URL: string
  readonly VITE_SUPABASE_ANON_KEY: string
}

interface ImportMeta {
  readonly env: ImportMetaEnv
}

================
File: supabase/.branches/_current_branch
================
main

================
File: supabase/.temp/cli-latest
================
v2.31.8

================
File: supabase/.temp/gotrue-version
================
v2.176.1

================
File: supabase/.temp/pooler-url
================
postgresql://postgres.uzdtqomtbrccinrkhzme:[YOUR-PASSWORD]@aws-0-us-west-1.pooler.supabase.com:6543/postgres

================
File: supabase/.temp/postgres-version
================
15.8.1.082

================
File: supabase/.temp/project-ref
================
uzdtqomtbrccinrkhzme

================
File: supabase/.temp/rest-version
================
v12.2.3

================
File: supabase/.temp/storage-version
================
custom-metadata

================
File: supabase/functions/_shared/cors.ts
================
export const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

================
File: supabase/functions/check-env-vars/index.ts
================
// supabase/functions/check-env-vars/index.ts

import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import weaviate, { WeaviateClient, ApiKey } from 'npm:weaviate-ts-client@2.0.0';
import { corsHeaders } from "../_shared/cors.ts";

serve(async (_req) => {
  // This function checks environment variables and connectivity to Weaviate.
  console.log("Running diagnostic check...");

  try {
    const weaviateHost = Deno.env.get("WEAVIATE_URL");
    const weaviateApiKey = Deno.env.get("WEAVIATE_API_KEY");
    const openAIApiKey = Deno.env.get("OPENAI_API_KEY");

    const secretsReport = {
      WEAVIATE_URL_SET: !!weaviateHost,
      WEAVIATE_API_KEY_SET: !!weaviateApiKey,
      OPENAI_API_KEY_SET: !!openAIApiKey,
    };

    let connectionReport = {
      weaviateConnectionSuccessful: false,
      error: "Not attempted due to missing secrets.",
    };

    // Only attempt to connect if the required secrets are present.
    if (weaviateHost && weaviateApiKey && openAIApiKey) {
      try {
        const weaviateClient: WeaviateClient = weaviate.client({
          scheme: 'https',
          host: weaviateHost,
          apiKey: new ApiKey(weaviateApiKey),
          headers: { 'X-OpenAI-Api-Key': openAIApiKey },
        });

        // The .misc.liveChecker() is a built-in way to check if the Weaviate instance is running.
        const isLive = await weaviateClient.misc.liveChecker();
        if (isLive) {
          connectionReport = {
            weaviateConnectionSuccessful: true,
            error: "null",
          };
          console.log("Diagnostic check: Successfully connected to Weaviate.");
        } else {
           throw new Error("liveChecker returned false. Instance may be unhealthy.");
        }
      } catch (e) {
        console.error("Diagnostic check: Weaviate connection failed.", e);
        connectionReport = {
          weaviateConnectionSuccessful: false,
          error: e.message,
        };
      }
    }

    const allGood = Object.values(secretsReport).every(Boolean) && connectionReport.weaviateConnectionSuccessful;

    return new Response(
      JSON.stringify({
        success: true,
        message: allGood ? "All checks passed." : "One or more checks failed.",
        report: {
          secrets: secretsReport,
          connectivity: connectionReport,
        }
      }),
      { headers: { ...corsHeaders, "Content-Type": "application/json" }, status: 200 }
    );
  } catch (error) {
    console.error("Critical error in check-env-vars function:", error);
    return new Response(
      JSON.stringify({ success: false, error: error.message }),
      { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }
});

================
File: supabase/functions/create-recurring-event/index.ts
================
// supabase/functions/create-recurring-event/index.ts
import { serve } from 'https://deno.land/std@0.177.0/http/server.ts';
import { createClient, SupabaseClient } from 'npm:@supabase/supabase-js@2';
import { addDays, addMonths, addWeeks } from 'npm:date-fns@3.6.0';
import { corsHeaders } from '../_shared/cors.ts';

// Type for the incoming event data from the client
type NewCalendarEvent = {
  class_id?: string | null;
  title: string;
  event_start: string;
  event_end?: string | null;
  location?: string | null;
  notes?: string | null;
  event_type?: string | null;
  repeat_pattern?: string | null;
};

// FIX: Define the shape of the object we are inserting into the database
type CalendarEventInsert = NewCalendarEvent & {
    user_id: string;
};


const getSupabaseClient = (req: Request): SupabaseClient => {
  return createClient(
    Deno.env.get('SUPABASE_URL')!,
    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!,
    { global: { headers: { Authorization: req.headers.get('Authorization')! } } }
  );
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const supabase = getSupabaseClient(req);
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) throw new Error('Authentication required.');

    const eventData: NewCalendarEvent = await req.json();
    
    if (!eventData.repeat_pattern || eventData.repeat_pattern === 'none') {
        const { data: singleEvent, error } = await supabase
            .from('calendar_events')
            .insert({ ...eventData, user_id: user.id })
            .select()
            .single();
        if (error) throw error;
        return new Response(JSON.stringify([singleEvent]), { headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
    }

    // FIX: Initialize the array with the correct type
    const eventsToInsert: CalendarEventInsert[] = [];
    const initialStartDate = new Date(eventData.event_start);
    const initialEndDate = eventData.event_end ? new Date(eventData.event_end) : null;
    const duration = initialEndDate ? initialEndDate.getTime() - initialStartDate.getTime() : 0;
    
    const recurrenceLimit = addDays(new Date(), 365); 

    let currentDate = initialStartDate;
    while (currentDate <= recurrenceLimit) {
        const newEndDate = duration ? new Date(currentDate.getTime() + duration) : null;
        
        eventsToInsert.push({
            ...eventData,
            user_id: user.id,
            event_start: currentDate.toISOString(),
            event_end: newEndDate ? newEndDate.toISOString() : null,
        });

        switch (eventData.repeat_pattern) {
            case 'daily':
                currentDate = addDays(currentDate, 1);
                break;
            case 'weekly':
                currentDate = addWeeks(currentDate, 1);
                break;
            case 'monthly':
                currentDate = addMonths(currentDate, 1);
                break;
            default:
                currentDate = addDays(recurrenceLimit, 1); 
                break;
        }
    }
    
    if (eventsToInsert.length > 0) {
        const { data: createdEvents, error } = await supabase
            .from('calendar_events')
            .insert(eventsToInsert)
            .select();
        
        if (error) throw error;
        return new Response(JSON.stringify(createdEvents), { headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
    }
    
    return new Response(JSON.stringify([]), { headers: { ...corsHeaders, 'Content-Type': 'application/json' } });

  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500,
    });
  }
});

================
File: supabase/functions/debug-weaviate-chunks/index.ts
================
import { serve } from 'https://deno.land/std@0.177.0/http/server.ts';
import weaviate, { WeaviateClient, ApiKey } from 'npm:weaviate-ts-client@2.0.0';
import { corsHeaders } from '../_shared/cors.ts';

serve(async (req: Request) => {
  if (req.method === 'OPTIONS') return new Response('ok', { headers: corsHeaders });

  try {
    const { user_id, class_id, includeVectors = false } = await req.json();

    if (!user_id) throw new Error("Missing 'user_id' in request.");
    
    const client: WeaviateClient = weaviate.client({
      scheme: 'https',
      host: Deno.env.get('WEAVIATE_URL')!,
      apiKey: new ApiKey(Deno.env.get('WEAVIATE_API_KEY')!),
      headers: { 'X-OpenAI-Api-Key': Deno.env.get('OPENAI_API_KEY')! },
    });

    const query = client.graphql.get()
      .withClassName('DocumentChunk')
      .withLimit(10)
      .withFields('source_file_name page_number text_chunk user_id class_id source_file_id');

    const whereClause: any = {
      operator: 'And',
      operands: [
        { path: ['user_id'], operator: 'Equal', valueText: user_id },
        ...(class_id ? [{ path: ['class_id'], operator: 'Equal', valueText: class_id }] : []),
      ],
    };

    query.withWhere(whereClause);

    if (includeVectors) {
      query.withFields('_additional { vector }');
    }

    const response = await query.do();
    const results = response?.data?.Get?.DocumentChunk ?? [];

    const schema = await client.schema.classGetter().withClassName('DocumentChunk').do();

    return new Response(JSON.stringify({
      count: results.length,
      chunks: results,
      schema,
    }, null, 2), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (err) {
    console.error('[DEBUG-WEAVIATE-CHUNKS ERROR]:', err);
    return new Response(JSON.stringify({ error: err.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500,
    });
  }
});

================
File: supabase/functions/delete-from-cloudinary/index.ts
================
// supabase/functions/delete-from-cloudinary/index.ts
import { serve } from 'https://deno.land/std@0.177.0/http/server.ts';
import { createClient } from 'npm:@supabase/supabase-js@2';
import { corsHeaders } from '../_shared/cors.ts';

const CLOUDINARY_CLOUD_NAME = Deno.env.get("CLOUDINARY_CLOUD_NAME");
const CLOUDINARY_API_KEY = Deno.env.get("CLOUDINARY_API_KEY");
const CLOUDINARY_API_SECRET = Deno.env.get("CLOUDINARY_API_SECRET");

async function deleteFromCloudinary(publicId: string) {
    const endpoint = `https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/image/destroy`;
    const timestamp = Math.round((new Date()).getTime() / 1000);

    const paramsToSign = {
        public_id: publicId,
        timestamp: timestamp.toString(),
    };

    const signatureString = `public_id=${paramsToSign.public_id}&timestamp=${paramsToSign.timestamp}${CLOUDINARY_API_SECRET!}`;
    const signature = await crypto.subtle.digest('SHA-1', new TextEncoder().encode(signatureString))
        .then(hash => Array.from(new Uint8Array(hash)).map(b => b.toString(16).padStart(2, '0')).join(''));

    const formData = new FormData();
    formData.append('public_id', publicId);
    formData.append('api_key', CLOUDINARY_API_KEY!);
    formData.append('timestamp', timestamp.toString());
    formData.append('signature', signature);

    const response = await fetch(endpoint, {
        method: 'POST',
        body: formData,
    });

    if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`Cloudinary deletion failed: ${JSON.stringify(errorData)}`);
    }

    return await response.json();
}

serve(async (req: Request) => {
    if (req.method === 'OPTIONS') {
        return new Response('ok', { headers: corsHeaders });
    }

    try {
        if (!CLOUDINARY_CLOUD_NAME || !CLOUDINARY_API_KEY || !CLOUDINARY_API_SECRET) {
            throw new Error("Cloudinary environment variables are not properly configured.");
        }

        const { file_id } = await req.json();
        if (!file_id) {
            throw new Error("Missing 'file_id' in the request body.");
        }

        const publicId = `thumbnails/${file_id}`;
        console.log(`[CLOUDINARY-DELETE] Attempting to delete public_id: ${publicId}`);

        const result = await deleteFromCloudinary(publicId);

        console.log(`[CLOUDINARY-DELETE] Successfully deleted public_id: ${publicId}. Result:`, result);

        return new Response(JSON.stringify({ success: true, result }), {
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
            status: 200,
        });
    } catch (error) {
        console.error('[CRITICAL-ERROR] in delete-from-cloudinary function:', error);
        return new Response(JSON.stringify({ error: error.message }), {
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
            status: 500,
        });
    }
});

================
File: supabase/functions/delete-recurring-event/index.ts
================
// supabase/functions/delete-recurring-event/index.ts
import { serve } from 'https://deno.land/std@0.177.0/http/server.ts';
import { createClient } from 'npm:@supabase/supabase-js@2';
import { corsHeaders } from '../_shared/cors.ts';

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL')!,
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!,
      { global: { headers: { Authorization: req.headers.get('Authorization')! } } }
    );
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) throw new Error('Authentication required.');

    const { event, scope } = await req.json();
    if (!event || !event.id || !scope) {
      throw new Error('Event ID and deletion scope are required.');
    }

    let query = supabase.from('calendar_events').delete().eq('user_id', user.id);

    // To delete 'all' events of a recurring series, we need a way to group them.
    // A simple way is by title and original start time properties if a 'series_id' isn't present.
    // For this implementation, we'll assume events with the same title and start time components (hour, minute) are part of a series.
    // A more robust solution would involve adding a `series_id` to your `calendar_events` table.
    
    const originalStartDate = new Date(event.event_start);

    switch (scope) {
      case 'this':
        query = query.eq('id', event.id);
        break;
      case 'following':
        query = query
          .eq('title', event.title)
          .gte('event_start', event.event_start);
        break;
      case 'all':
        query = query.eq('title', event.title);
        // This is a simplification. A true "all" would need a series_id.
        // This will delete all events with the same title.
        break;
      default:
        throw new Error('Invalid deletion scope.');
    }

    const { error } = await query;
    if (error) throw error;

    return new Response(JSON.stringify({ success: true }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500,
    });
  }
});

================
File: supabase/functions/delete-user-account/index.ts
================
// supabase/functions/delete-user-account/index.ts
import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import { createClient, SupabaseClient } from "npm:@supabase/supabase-js@2";
import weaviate, { WeaviateClient, ApiKey } from 'npm:weaviate-ts-client@2.0.0';
import { corsHeaders } from "../_shared/cors.ts";

console.log("[delete-user-account] Function cold start.");

/**
 * Deletes all data associated with a user across Supabase DB, Storage, Auth,
 * Weaviate, and Cloudinary.
 */
serve(async (req: Request) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    // --- 1. Initialize Admin Clients ---
    const supabaseAdminClient: SupabaseClient = createClient(
      Deno.env.get("SUPABASE_URL")!,
      Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!,
      { auth: { persistSession: false } }
    );

    const weaviateClient: WeaviateClient = weaviate.client({
        scheme: 'https',
        host: Deno.env.get("WEAVIATE_URL")!,
        apiKey: new ApiKey(Deno.env.get("WEAVIATE_API_KEY")!),
    });
    console.log("[INIT] Admin clients for Supabase and Weaviate initialized.");

    // --- 2. Authenticate the User and Get User ID ---
    const authHeader = req.headers.get("Authorization");
    if (!authHeader) throw new Error("Authentication required: No token provided.");
    
    const token = authHeader.replace("Bearer ", "");
    const { data: { user }, error: userError } = await supabaseAdminClient.auth.getUser(token);

    if (userError || !user) {
      throw new Error(userError?.message || "Authentication failed: Invalid token.");
    }
    const userIdToDelete = user.id;
    console.log(`[AUTH] Authenticated user for deletion: ${userIdToDelete}`);

    // --- 3. Fetch All User-Owned Resources ---
    console.log(`[FETCH] Fetching all files for user ${userIdToDelete}...`);
    const { data: userFiles, error: filesError } = await supabaseAdminClient
      .from('files')
      .select('file_id, url, thumbnail_url')
      .eq('user_id', userIdToDelete);

    if (filesError) throw new Error(`Failed to fetch user files: ${filesError.message}`);
    console.log(`[FETCH] Found ${userFiles.length} files to process for deletion.`);

    // --- 4. Perform Deletion Across All Services (in parallel where possible) ---
    const deletionPromises = [];

    // 4a. Delete from Supabase Storage
    if (userFiles.length > 0) {
      const storagePaths = userFiles
        .map(file => file.url ? new URL(file.url).pathname.split('/public/file_storage/')[1] : null)
        .filter((path): path is string => path !== null);
      
      if (storagePaths.length > 0) {
        console.log(`[STORAGE] Queuing deletion of ${storagePaths.length} files from Supabase Storage.`);
        deletionPromises.push(
          supabaseAdminClient.storage.from('file_storage').remove(storagePaths)
        );
      }
    }

    // 4b. Delete from Cloudinary
    if (userFiles.length > 0) {
        const cloudinaryPublicIds = userFiles
            .map(file => file.thumbnail_url ? `thumbnails/${file.file_id}` : null)
            .filter((id): id is string => id !== null);

        if (cloudinaryPublicIds.length > 0) {
            console.log(`[CLOUDINARY] Queuing deletion of ${cloudinaryPublicIds.length} thumbnails.`);
            // Note: Cloudinary's API might not support bulk deletion by public_id in the same way.
            // Invoking the function for each is a safe approach.
            for (const publicId of cloudinaryPublicIds) {
                deletionPromises.push(
                    supabaseAdminClient.functions.invoke('delete-from-cloudinary', {
                        body: JSON.stringify({ public_id: publicId })
                    })
                );
            }
        }
    }

    // 4c. Delete from Weaviate
    console.log(`[WEAVIATE] Queuing deletion of all document chunks for user ${userIdToDelete}.`);
    deletionPromises.push(
      weaviateClient.batch.deleter()
        .withClassName('DocumentChunk')
        .withWhere({
          operator: 'Equal',
          path: ['user_id'],
          valueText: userIdToDelete,
        })
        .do()
    );

    // --- Execute all parallel deletions and wait for them to complete ---
    const results = await Promise.allSettled(deletionPromises);
    results.forEach((result, i) => {
        if (result.status === 'rejected') {
            console.warn(`[CLEANUP-WARN] A non-critical deletion task (task #${i}) failed:`, result.reason);
        }
    });
    console.log("[CLEANUP] External services cleanup complete.");

    // --- 5. Delete from Supabase Database ---
    // Deleting the user from the 'profiles' table. If you have set up 'ON DELETE CASCADE'
    // for foreign keys in other tables (like classes, folders, files), this will automatically
    // clean them up. This is the recommended approach.
    console.log(`[DB] Deleting user record from 'profiles' table for user ${userIdToDelete}.`);
    const { error: dbError } = await supabaseAdminClient
      .from('profiles')
      .delete()
      .eq('user_id', userIdToDelete);

    if (dbError) {
      // If this fails, we stop before deleting the auth user to allow for investigation.
      throw new Error(`Failed to delete user data from database: ${dbError.message}`);
    }
    console.log("[DB] ✅ Database records deleted successfully.");

    // --- 6. Final Step: Delete the Auth User ---
    // This is the last and most critical step.
    console.log(`[AUTH] Deleting user ${userIdToDelete} from Supabase Auth service.`);
    const { error: deleteError } = await supabaseAdminClient.auth.admin.deleteUser(userIdToDelete);

    if (deleteError) {
      // This is a critical failure. The user's data might be gone but their login remains.
      // This requires manual intervention.
      console.error(`[AUTH] CRITICAL FAILURE: Could not delete user from Auth. Manual cleanup required.`, deleteError);
      throw new Error(`Failed to delete user from authentication service: ${deleteError.message}`);
    }
    console.log(`[SUCCESS] ✅ Successfully deleted user ${userIdToDelete} from all systems.`);

    // --- 7. Return Success Response ---
    return new Response(
      JSON.stringify({
        success: true,
        message: "User account and all associated data have been successfully deleted.",
      }),
      { headers: { ...corsHeaders, "Content-Type": "application/json" }, status: 200 }
    );

  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : "An unknown error occurred.";
    console.error('[CRITICAL-ERROR] in delete-user-account function:', errorMessage, error);
    return new Response(
      JSON.stringify({ success: false, error: errorMessage }),
      { 
        status: (error instanceof Error && error.message.includes("Authentication")) ? 401 : 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" } 
      }
    );
  }
});

================
File: supabase/functions/delete-weaviate-chunks-by-file/index.ts
================
// supabase/functions/delete-weaviate-chunks-by-file/index.ts
import { serve } from 'https://deno.land/std@0.177.0/http/server.ts';
import weaviate, { WeaviateClient, ApiKey } from 'npm:weaviate-ts-client@2.0.0';
import { corsHeaders } from '../_shared/cors.ts';

serve(async (req: Request) => {
  // This block handles CORS preflight requests.
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const bodyText = await req.text();
    const { file_id } = JSON.parse(bodyText);

    if (!file_id) {
      throw new Error("Missing 'file_id' in request body.");
    }

    const client: WeaviateClient = weaviate.client({
      scheme: 'https',
      host: Deno.env.get('WEAVIATE_URL')!,
      apiKey: new ApiKey(Deno.env.get('WEAVIATE_API_KEY')!),
    });

    // FIX: The correct method for batch deletion with a filter in this client version
    // is `objectsBatchDeleter`, which takes the class and filter as an argument object.
    const result = await client.batch.objectsBatchDeleter({
      className: 'DocumentChunk',
      where: {
        operator: 'Equal',
        path: ['source_file_id'],
        valueText: file_id,
      },
    });

    // Check for errors in the batch deletion result
    const errors = result.results?.objects?.filter(obj => obj.errors) ?? [];
    if (errors.length > 0) {
        console.error('Weaviate deletion errors:', JSON.stringify(errors, null, 2));
        throw new Error(`Failed to delete some chunks for file_id: ${file_id}`);
    }

    return new Response(JSON.stringify({ success: true, deletedCount: result.results?.matches }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (err) {
    console.error('[DELETE-WEAVIATE-CHUNKS ERROR]:', err);
    return new Response(JSON.stringify({ error: err.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500,
    });
  }
});

================
File: supabase/functions/generate-flashcards/index.ts
================
// supabase/functions/generate-flashcards/index.ts
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { corsHeaders } from "../_shared/cors.ts"; // Ensure this path is correct

const ASSISTANT_RUN_TIMEOUT = 60000; 

interface FlashcardContent {
  front: string;
  back: string;
}

interface RequestBody {
  title: string;
  cardCount?: number;
  openAIConfig?: {
    assistantId?: string;
  };
}

interface OpenAIThread { id: string; }
interface OpenAIRun {
  id: string;
  status: 'queued' | 'in_progress' | 'cancelling' | 'completed' | 'failed' | 'expired' | 'requires_action';
  last_error?: { message?: string } | null;
}
interface OpenAIMessageContentText { type: "text"; text: { value: string; annotations: unknown[]; };}
interface OpenAIMessage { id: string; role: 'user' | 'assistant'; content: OpenAIMessageContentText[]; }
interface OpenAIMessagesList { data?: OpenAIMessage[]; }
interface OpenAIChatCompletionChoice { message: { content: string; }; }
interface OpenAIChatCompletion { choices: OpenAIChatCompletionChoice[]; }
interface ParsedFlashcardResponse { flashcards: FlashcardContent[]; }
type ParsedFlashcardArrayResponse = FlashcardContent[];

serve(async (req: Request) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { title, cardCount = 10, openAIConfig = {} }: RequestBody = await req.json();
    
    const openaiApiKey = Deno.env.get("OPENAI_API_KEY");
    if (!openaiApiKey) {
      console.error("generate-flashcards: OPENAI_API_KEY env var not set.");
      throw new Error('Server configuration error: OpenAI API key is missing.');
    }

    const assistantId = openAIConfig.assistantId;

    if (!assistantId) {
      console.warn("generate-flashcards: No assistantId provided. Using fallback Chat Completions.");
      const genericPrompt = `You are a flashcard generator. Create ${cardCount} flashcards for the topic "${title}". Format each flashcard as a JSON object with "front" and "back" properties. Your response must be a valid JSON object containing a single key "flashcards" which is an array of these objects. Example: {"flashcards": [{"front": "Question 1", "back": "Answer 1"}, {"front": "Question 2", "back": "Answer 2"}]}`;
      
      const fallbackResponse = await fetch('https://api.openai.com/v1/chat/completions', {
          method: 'POST',
          headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'Content-Type': 'application/json' },
          body: JSON.stringify({ model: 'gpt-4o-mini', messages: [{ role: 'system', content: "You output JSON." },{ role: 'user', content: genericPrompt }], temperature: 0.5, response_format: { type: "json_object" } }),
      });

      if (!fallbackResponse.ok) {
          const errorText = await fallbackResponse.text();
          console.error('generate-flashcards: Fallback OpenAI API error:', fallbackResponse.status, errorText);
          throw new Error(`Fallback OpenAI API error: ${fallbackResponse.status}. ${errorText}`);
      }
      const fallbackData = await fallbackResponse.json() as OpenAIChatCompletion;
      let flashcards: FlashcardContent[] = [];
      try {
          const messageContent = fallbackData.choices[0]?.message?.content;
          if (!messageContent) {
            throw new Error("No content in fallback AI response.");
          }
          const parsedContent = JSON.parse(messageContent) as ParsedFlashcardResponse | ParsedFlashcardArrayResponse;

          if ('flashcards' in parsedContent && Array.isArray(parsedContent.flashcards)) {
               flashcards = parsedContent.flashcards.map((card: FlashcardContent) => ({
                  front: card.front || `Question about ${title}`,
                  back: card.back || "Answer not available"
              }));
          } else if (Array.isArray(parsedContent)) { 
               flashcards = parsedContent.map((card: FlashcardContent) => ({
                  front: card.front || `Question about ${title}`,
                  back: card.back || "Answer not available"
              }));
          } else {
            throw new Error("Fallback AI response did not follow the expected JSON format (expected an object with a 'flashcards' array or a direct array of flashcards).");
          }
      } catch (e) {
          const error = e as Error;
          console.error("generate-flashcards: Error parsing fallback JSON", error.message, fallbackData.choices[0]?.message?.content);
          throw new Error(`Could not parse flashcards from fallback AI response: ${error.message}`);
      }
      return new Response(JSON.stringify({ flashcards }), { headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
    }

    console.log(`generate-flashcards: Using Assistant ID: ${assistantId} for topic: "${title}", count: ${cardCount}`);

    const threadResponse = await fetch('https://api.openai.com/v1/threads', {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'Content-Type': 'application/json', 'OpenAI-Beta': 'assistants=v2' },
      body: JSON.stringify({}),
    });
    if (!threadResponse.ok) throw new Error(`Failed to create assistant thread: ${await threadResponse.text()}`);
    const thread = await threadResponse.json() as OpenAIThread;
    const threadId = thread.id;
    console.log(`generate-flashcards: Created thread ID: ${threadId}`);

    const userMessageContent = `Generate ${cardCount} flashcards on the topic "${title}".
The flashcards should be based on the materials provided for this class.
Format your response as a valid JSON object containing a single key "flashcards" which is an array of objects.
Each object in the "flashcards" array should have two properties: "front" (for the question or term) and "back" (for the answer or definition).
Example: {"flashcards": [{"front": "What is the capital of France?", "back": "Paris"}, {"front": "Define mitosis.", "back": "A type of cell division..."}]}`;

    await fetch(`https://api.openai.com/v1/threads/${threadId}/messages`, {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'Content-Type': 'application/json', 'OpenAI-Beta': 'assistants=v2' },
      body: JSON.stringify({ role: 'user', content: userMessageContent }),
    });
    console.log(`generate-flashcards: Added message to thread ${threadId}`);

    const runResponse = await fetch(`https://api.openai.com/v1/threads/${threadId}/runs`, {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'Content-Type': 'application/json', 'OpenAI-Beta': 'assistants=v2' },
      body: JSON.stringify({
        assistant_id: assistantId,
        instructions: `You are an expert flashcard generator. Please generate ${cardCount} flashcards for the topic "${title}" based on the provided class materials. Output the flashcards in the specified JSON format: {"flashcards": [{"front": "...", "back": "..."}, ...]}. Ensure the content is accurate and relevant to the topic, drawing from the documents you have access to.`
      }),
    });
    if (!runResponse.ok) throw new Error(`Failed to run assistant: ${await runResponse.text()}`);
    let run = await runResponse.json() as OpenAIRun;
    console.log(`generate-flashcards: Created run ID: ${run.id} for thread ${threadId}`);

    const startTime = Date.now();
    while (['queued', 'in_progress', 'cancelling'].includes(run.status)) {
      if (Date.now() - startTime > ASSISTANT_RUN_TIMEOUT) {
        await fetch(`https://api.openai.com/v1/threads/${threadId}/runs/${run.id}/cancel`, {
          method: 'POST',
          headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'OpenAI-Beta': 'assistants=v2' }
        });
        throw new Error('Flashcard generation timed out.');
      }
      await new Promise(resolve => setTimeout(resolve, 2000));
      const runStatusResponse = await fetch(`https://api.openai.com/v1/threads/${threadId}/runs/${run.id}`, {
        headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'OpenAI-Beta': 'assistants=v2' }
      });
      if (!runStatusResponse.ok) throw new Error(`Failed to check assistant run status: ${await runStatusResponse.text()}`);
      run = await runStatusResponse.json() as OpenAIRun;
      console.log(`generate-flashcards: Run ${run.id} status: ${run.status}`);
    }

    if (run.status !== 'completed') {
      throw new Error(`Flashcard generation failed. Status: ${run.status}. ${run.last_error?.message || ''}`);
    }

    const messagesResponse = await fetch(`https://api.openai.com/v1/threads/${threadId}/messages?order=desc&limit=1`, {
      headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'OpenAI-Beta': 'assistants=v2' },
    });
    if (!messagesResponse.ok) throw new Error(`Failed to get assistant messages: ${await messagesResponse.text()}`);
    const messagesData = await messagesResponse.json() as OpenAIMessagesList;
    
    const assistantMessages = messagesData.data?.filter((msg: OpenAIMessage) => msg.role === 'assistant');
    if (!assistantMessages || assistantMessages.length === 0 || !assistantMessages[0].content[0]?.text?.value) {
      throw new Error('No response content from assistant.');
    }

    const rawOutputFromAssistant = assistantMessages[0].content[0].text.value;
    console.log("generate-flashcards: Raw output from assistant:", rawOutputFromAssistant);

    let flashcards: FlashcardContent[] = [];
    // **MODIFICATION: Initialize jsonStringToParse at declaration**
    let jsonStringToParse: string = rawOutputFromAssistant; // Default to raw output, will be refined

    try {
      const jsonRegex = /```json\s*([\s\S]*?)\s*```/; 
      const match = rawOutputFromAssistant.match(jsonRegex);
      
      if (match && match[1]) {
        jsonStringToParse = match[1]; // Assign extracted JSON if match found
        console.log("generate-flashcards: Extracted JSON string:", jsonStringToParse);
      } else {
        // If no markdown block is found, jsonStringToParse already holds rawOutputFromAssistant (from initialization)
        console.warn("generate-flashcards: Markdown JSON block not found in assistant response. Attempting to parse entire response.");
      }

      const parsedJson = JSON.parse(jsonStringToParse) as ParsedFlashcardResponse | ParsedFlashcardArrayResponse;
      if ('flashcards' in parsedJson && Array.isArray(parsedJson.flashcards)) { 
        flashcards = parsedJson.flashcards.map((card: FlashcardContent) => ({ 
            front: card.front || `Question about ${title}`, 
            back: card.back || "Answer not available"     
        }));
      } else if (Array.isArray(parsedJson)) { 
        flashcards = parsedJson.map((card: FlashcardContent) => ({ 
            front: card.front || `Question about ${title}`,
            back: card.back || "Answer not available"
        }));
      }
      else {
        console.error("generate-flashcards: Parsed JSON does not contain a 'flashcards' array or is not an array itself.", parsedJson);
        throw new Error("AI response did not follow the expected JSON format after extraction.");
      }
    } catch (e) {
      const error = e as Error;
      // jsonStringToParse will have a value here for logging
      console.error("generate-flashcards: Error parsing JSON from assistant response:", error.message, "\nAttempted to parse:", jsonStringToParse);
      throw new Error(`Could not parse flashcards from AI response. The format might be incorrect: ${error.message}`);
    }
    
    console.log(`generate-flashcards: Successfully generated and parsed ${flashcards.length} flashcards.`);
    return new Response(
      JSON.stringify({ flashcards }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error: unknown) {
    console.error('generate-flashcards: Critical error in function:', error);
    const errorMessage = error instanceof Error ? error.message : "An unknown error occurred.";
    return new Response(
      JSON.stringify({ error: errorMessage }),
      { 
        status: errorMessage.includes("required") || errorMessage.includes("OpenAI API key") || errorMessage.includes("assistantId") ? 400 : 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});

================
File: supabase/functions/generate-previews/index.ts
================
// supabase/functions/generate-previews/index.ts
import { serve } from 'https://deno.land/std@0.177.0/http/server.ts';
import { createClient } from 'npm:@supabase/supabase-js@2';
import { corsHeaders } from '../_shared/cors.ts';

// Get Cloudinary config from environment variables
const CLOUDINARY_CLOUD_NAME = Deno.env.get("CLOUDINARY_CLOUD_NAME");
const CLOUDINARY_API_KEY = Deno.env.get("CLOUDINARY_API_KEY");
const CLOUDINARY_API_SECRET = Deno.env.get("CLOUDINARY_API_SECRET");

interface PreviewQueueRecord {
  id: number;
  file_id: string;
}

// MODIFIED: This is the corrected helper function for uploading to Cloudinary.
async function uploadToCloudinary(publicUrl: string, fileId: string) {
    const endpoint = `https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/image/upload`;
    const timestamp = Math.round((new Date()).getTime() / 1000);

    // 1. Define ALL parameters for the upload, including eager transformations.
    // This ensures every parameter is part of the signature string.
    const params: Record<string, string> = {
        public_id: `thumbnails/${fileId}`,
        timestamp: timestamp.toString(),
        // Eagerly apply transformations upon upload. This is the best practice.
        // f_auto: automatically select the best image format (e.g., webp, jpg).
        // q_auto: automatically adjust quality.
        // w_800: resize width to 800px. This creates a reasonably sized thumbnail.
        eager: 'f_auto,q_auto,w_800',
        overwrite: 'true', // Ensures that re-processing a file updates the thumbnail.
    };

    // 2. Create the string to sign by sorting the parameters alphabetically.
    const sortedParamsToSign = Object.keys(params)
        .sort()
        .map(key => `${key}=${params[key]}`)
        .join('&');
    const signatureString = `${sortedParamsToSign}${CLOUDINARY_API_SECRET!}`;
    
    // 3. Generate the SHA-1 signature.
    const signature = await crypto.subtle.digest('SHA-1', new TextEncoder().encode(signatureString))
        .then(hash => Array.from(new Uint8Array(hash)).map(b => b.toString(16).padStart(2, '0')).join(''));

    // 4. Build the FormData payload.
    const formData = new FormData();
    formData.append('file', publicUrl);
    formData.append('api_key', CLOUDINARY_API_KEY!);
    formData.append('signature', signature);
    // Add all the signed parameters to the form data
    for (const key in params) {
        formData.append(key, params[key]);
    }
    
    // 5. Make the API call.
    const response = await fetch(endpoint, {
        method: 'POST',
        body: formData,
    });

    if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`Cloudinary upload failed: ${JSON.stringify(errorData)}`);
    }

    const responseData = await response.json();
    
    // 6. Get the secure URL of the *eagerly transformed* image.
    if (!responseData.eager || !responseData.eager[0]?.secure_url) {
        throw new Error("Cloudinary did not return an eager transformation URL.");
    }

    return responseData.eager[0].secure_url;
}


serve(async (req: Request) => {
  console.log(`[VISUAL-ENGINE START] 'generate-previews' invoked.`);
  try {
    if (!CLOUDINARY_CLOUD_NAME || !CLOUDINARY_API_KEY || !CLOUDINARY_API_SECRET) {
      throw new Error("Cloudinary environment variables are not set.");
    }

    const { record: queueRecord }: { record: PreviewQueueRecord } = await req.json();
    const { id: queueId, file_id } = queueRecord;
    
    console.log(`[JOB] Received preview job #${queueId} for file_id: ${file_id}`);

    const adminSupabaseClient = createClient(Deno.env.get('SUPABASE_URL')!, Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!);

    await adminSupabaseClient.from('preview_queue').update({ status: 'processing' }).eq('id', queueId);

    try {
      const { data: file, error: fetchError } = await adminSupabaseClient.from('files').select('name, type, url').eq('file_id', file_id).single();
      if (fetchError || !file || !file.url) throw new Error(`Failed to fetch file data for ${file_id}: ${fetchError?.message}`);
      
      let generatedThumbnailUrl: string | null = null;
      
      console.log(`  [PROCESS] Starting visual processing for ${file.name} (${file.type})`);
      if (file.type === 'application/pdf' || file.type.startsWith('image/')) {
        console.log(`  [CLOUDINARY] Uploading ${file.url} to Cloudinary...`);
        // MODIFICATION: Call the corrected helper function.
        generatedThumbnailUrl = await uploadToCloudinary(file.url, file_id);
        console.log(`  [CLOUDINARY] ✅ Thumbnail successfully generated: ${generatedThumbnailUrl}`);
      } else {
        console.log(`  [PROCESS] ⚠️ No visual processing logic for this file type: ${file.type}.`);
      }

      console.log(`  [DB-UPDATE] Saving generated thumbnail to 'files' table...`);
      await adminSupabaseClient
        .from('files')
        .update({ thumbnail_url: generatedThumbnailUrl, status: 'complete' }) // Also update status to complete
        .eq('file_id', file_id);
      
      await adminSupabaseClient.from('preview_queue').update({ status: 'completed' }).eq('id', queueId);
      console.log(`  [DB-UPDATE] ✅ Thumbnail saved for file_id: ${file_id}.`);

      return new Response(JSON.stringify({ success: true }), { headers: { ...corsHeaders, 'Content-Type': 'application/json' }});
    } catch(error) {
      console.error(`[JOB-ERROR] Failed to process preview job #${queueId}:`, error);
      await adminSupabaseClient.from('preview_queue').update({ status: 'failed', error_message: error.message }).eq('id', queueId);
      await adminSupabaseClient.from('files').update({ status: 'error' }).eq('file_id', file_id);
      throw error;
    }
  } catch (error) {
    console.error('[CRITICAL-ERROR] in generate-previews function:', error);
    return new Response(JSON.stringify({ error: error.message }), { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 });
  }
});

================
File: supabase/functions/generate-quiz/index.ts
================
// supabase/functions/generate-quiz/index.ts
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { corsHeaders } from "../_shared/cors.ts"; // Ensure this path is correct

const ASSISTANT_RUN_TIMEOUT = 90000; // Increased timeout, quiz generation can be complex

// --- Type Definitions ---
interface QuizQuestion {
  question_text: string; // Ensure this matches the expected output from AI
  options: string[];
  correct_answer_index: number;
  explanation: string;
}

interface RequestBody {
  topic: string;
  questionCount?: number;
  difficulty?: string;
  coverage?: string;
  openAIConfig?: {
    assistantId?: string;
    // vectorStoreId is implicitly used by the assistant if configured
  };
  useRAG?: boolean; // This might be redundant if assistantId implies RAG
}

interface OpenAIThread { id: string; }
interface OpenAIRun {
  id: string;
  status: 'queued' | 'in_progress' | 'cancelling' | 'completed' | 'failed' | 'expired' | 'requires_action';
  last_error?: { message?: string } | null;
}
interface OpenAIMessageContentText { type: "text"; text: { value: string; annotations: unknown[]; };}
interface OpenAIMessage { id: string; role: 'user' | 'assistant'; content: OpenAIMessageContentText[]; }
interface OpenAIMessagesList { data?: OpenAIMessage[]; }

// For Chat Completions fallback
interface OpenAIChatCompletionChoice { message: { content: string; }; }
interface OpenAIChatCompletion { choices: OpenAIChatCompletionChoice[]; }

// Expected structure from AI (for both Assistant and fallback)
interface AIParsedQuizResponse {
    questions: QuizQuestion[];
    // The AI might not directly return timeEstimate, we calculate it.
}


serve(async (req: Request) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { 
      topic, 
      questionCount = 10, 
      difficulty = "medium", 
      coverage = "comprehensive", 
      openAIConfig = {} 
    }: RequestBody = await req.json();
    
    if (!topic) {
      throw new Error('Topic is required');
    }

    const openaiApiKey = Deno.env.get("OPENAI_API_KEY");
    if (!openaiApiKey) {
      console.error("generate-quiz: OPENAI_API_KEY env var not set.");
      throw new Error('Server configuration error: OpenAI API key is missing.');
    }

    const assistantId = openAIConfig.assistantId;
    let generatedQuestions: QuizQuestion[] = [];
    let usedAssistantFlow = false;

    if (assistantId) {
      usedAssistantFlow = true;
      console.log(`generate-quiz: Using Assistant ID: ${assistantId} for topic: "${topic}", count: ${questionCount}`);

      // 1. Create a Thread
      const threadResponse = await fetch('https://api.openai.com/v1/threads', {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'Content-Type': 'application/json', 'OpenAI-Beta': 'assistants=v2' },
        body: JSON.stringify({}),
      });
      if (!threadResponse.ok) throw new Error(`Failed to create assistant thread: ${await threadResponse.text()}`);
      const thread = await threadResponse.json() as OpenAIThread;
      const threadId = thread.id;
      console.log(`generate-quiz: Created thread ID: ${threadId}`);

      // 2. Add a Message to the Thread
      const userMessageContent = `Generate ${questionCount} multiple-choice quiz questions on the topic "${topic}".
The difficulty should be ${difficulty} and the coverage should be ${coverage}.
The questions should be based on the materials provided for this class.
Format your response as a valid JSON object containing a single key "questions" which is an array of objects.
Each object in the "questions" array should have these properties: "question_text", "options" (an array of 4 strings), "correct_answer_index" (0-3), and "explanation".
Example: {"questions": [{"question_text": "What is...", "options": ["A", "B", "C", "D"], "correct_answer_index": 0, "explanation": "Because..."}]}`;

      await fetch(`https://api.openai.com/v1/threads/${threadId}/messages`, {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'Content-Type': 'application/json', 'OpenAI-Beta': 'assistants=v2' },
        body: JSON.stringify({ role: 'user', content: userMessageContent }),
      });
      console.log(`generate-quiz: Added message to thread ${threadId}`);

      // 3. Create a Run
      const runResponse = await fetch(`https://api.openai.com/v1/threads/${threadId}/runs`, {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'Content-Type': 'application/json', 'OpenAI-Beta': 'assistants=v2' },
        body: JSON.stringify({
          assistant_id: assistantId,
          instructions: `You are an expert quiz generator. Please generate ${questionCount} ${difficulty} quiz questions about "${topic}" with ${coverage} coverage, based on the provided class materials. Output the questions in the specified JSON format: {"questions": [...]}. Ensure content is accurate and relevant.`
        }),
      });
      if (!runResponse.ok) throw new Error(`Failed to run assistant: ${await runResponse.text()}`);
      let run = await runResponse.json() as OpenAIRun;
      console.log(`generate-quiz: Created run ID: ${run.id} for thread ${threadId}`);

      // 4. Poll for Run completion
      const startTime = Date.now();
      while (['queued', 'in_progress', 'cancelling'].includes(run.status)) {
        if (Date.now() - startTime > ASSISTANT_RUN_TIMEOUT) {
          await fetch(`https://api.openai.com/v1/threads/${threadId}/runs/${run.id}/cancel`, {
            method: 'POST',
            headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'OpenAI-Beta': 'assistants=v2' }
          });
          throw new Error('Quiz generation (Assistant API) timed out.');
        }
        await new Promise(resolve => setTimeout(resolve, 3000)); // Poll every 3 seconds
        const runStatusResponse = await fetch(`https://api.openai.com/v1/threads/${threadId}/runs/${run.id}`, {
          headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'OpenAI-Beta': 'assistants=v2' }
        });
        if (!runStatusResponse.ok) throw new Error(`Failed to check assistant run status: ${await runStatusResponse.text()}`);
        run = await runStatusResponse.json() as OpenAIRun;
        console.log(`generate-quiz: Run ${run.id} status: ${run.status}`);
      }

      if (run.status !== 'completed') {
        throw new Error(`Quiz generation (Assistant API) failed. Status: ${run.status}. ${run.last_error?.message || ''}`);
      }

      // 5. Retrieve Messages from the Thread
      const messagesResponse = await fetch(`https://api.openai.com/v1/threads/${threadId}/messages?order=desc&limit=1`, {
        headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'OpenAI-Beta': 'assistants=v2' },
      });
      if (!messagesResponse.ok) throw new Error(`Failed to get assistant messages: ${await messagesResponse.text()}`);
      const messagesData = await messagesResponse.json() as OpenAIMessagesList;
      
      const assistantMessages = messagesData.data?.filter((msg: OpenAIMessage) => msg.role === 'assistant');
      if (!assistantMessages || assistantMessages.length === 0 || !assistantMessages[0].content[0]?.text?.value) {
        throw new Error('No response content from assistant.');
      }

      const rawOutputFromAssistant = assistantMessages[0].content[0].text.value;
      console.log("generate-quiz: Raw output from assistant:", rawOutputFromAssistant);
      
      let jsonStringToParse: string = rawOutputFromAssistant;
      try {
        const jsonRegex = /```json\s*([\s\S]*?)\s*```/;
        const match = rawOutputFromAssistant.match(jsonRegex);
        if (match && match[1]) {
          jsonStringToParse = match[1];
        } else {
          console.warn("generate-quiz: Markdown JSON block not found in assistant response. Attempting to parse entire response.");
        }
        const parsedJson = JSON.parse(jsonStringToParse) as AIParsedQuizResponse;
        if (parsedJson.questions && Array.isArray(parsedJson.questions)) {
          generatedQuestions = parsedJson.questions;
        } else {
          throw new Error("AI response did not follow the expected JSON format (missing 'questions' array).");
        }
      } catch (e) {
        const error = e as Error;
        console.error("generate-quiz: Error parsing JSON from assistant response:", error.message, "\nAttempted to parse:", jsonStringToParse);
        throw new Error(`Could not parse quiz questions from AI response: ${error.message}`);
      }

    } else { // Fallback to Chat Completions API
      usedAssistantFlow = false;
      console.warn("generate-quiz: No assistantId provided. Using fallback Chat Completions API.");
      const systemPrompt = `You are a quiz generator. Create ${questionCount} multiple-choice quiz questions about "${topic}" with ${difficulty} difficulty. For each question, provide 4 answer options with exactly one correct option. Format your response as a valid JSON object containing a single key "questions" which is an array of objects. Each object in the "questions" array should have these properties: "question_text", "options" (an array of 4 strings), "correct_answer_index" (0-3), and "explanation". Example: {"questions": [{"question_text": "What is...", "options": ["A", "B", "C", "D"], "correct_answer_index": 0, "explanation": "Because..."}]}`;
      const userContent = `Generate ${questionCount} ${difficulty} multiple-choice quiz questions about "${topic}" with a ${coverage} coverage of the subject.`;

      const fallbackResponse = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'Content-Type': 'application/json' },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [{ role: 'system', content: systemPrompt }, { role: 'user', content: userContent }],
          temperature: 0.7,
          response_format: { type: "json_object" }
        }),
      });

      if (!fallbackResponse.ok) {
        const errorText = await fallbackResponse.text();
        console.error('generate-quiz: Fallback OpenAI API error:', fallbackResponse.status, errorText);
        throw new Error(`Fallback OpenAI API error: ${fallbackResponse.status}. ${errorText}`);
      }
      const fallbackData = await fallbackResponse.json() as OpenAIChatCompletion;
      const messageContent = fallbackData.choices[0]?.message?.content;
      if (!messageContent) throw new Error("No content in fallback AI response.");
      
      try {
        const parsedJson = JSON.parse(messageContent) as AIParsedQuizResponse;
        if (parsedJson.questions && Array.isArray(parsedJson.questions)) {
          generatedQuestions = parsedJson.questions;
        } else {
          throw new Error("Fallback AI response did not follow the expected JSON format (missing 'questions' array).");
        }
      } catch (e) {
        const error = e as Error;
        console.error("generate-quiz: Error parsing fallback JSON", error.message, messageContent);
        throw new Error(`Could not parse quiz questions from fallback AI response: ${error.message}`);
      }
    }

    // Validate and format questions
    const validatedQuestions = generatedQuestions.map((q, index) => {
      if (!q.question_text) q.question_text = `Question ${index + 1} about ${topic}`;
      if (!Array.isArray(q.options) || q.options.length !== 4) {
        q.options = ["Option A", "Option B", "Option C", "Option D"]; // Default if options are bad
      }
      if (typeof q.correct_answer_index !== 'number' || q.correct_answer_index < 0 || q.correct_answer_index > 3) {
        q.correct_answer_index = 0; // Default if index is bad
      }
      if (!q.explanation) q.explanation = "No explanation provided.";
      return q;
    });

    const difficultyMultiplier: { [key: string]: number } = { easy: 0.8, medium: 1.0, hard: 1.2 };
    const timeEstimate = Math.ceil(questionCount * (difficultyMultiplier[difficulty.toLowerCase()] || 1.0) * 0.75); // Adjusted time estimate

    console.log(`generate-quiz: Successfully generated ${validatedQuestions.length} questions. Used Assistant: ${usedAssistantFlow}`);
    return new Response(
      JSON.stringify({
        questions: validatedQuestions,
        timeEstimate,
        assistantId: openAIConfig.assistantId, // Return the ID used, if any
        vectorStoreId: null, // vectorStoreId is part of assistant config, not directly returned here unless needed
        usedAssistant: usedAssistantFlow,
        usedFallback: !usedAssistantFlow
      }),
      { headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );

  } catch (error: unknown) {
    console.error('generate-quiz: Critical error in function:', error);
    const errorMessage = error instanceof Error ? error.message : "An unknown error occurred.";
    return new Response(
      JSON.stringify({ error: errorMessage }),
      { 
        status: errorMessage.includes("required") || errorMessage.includes("OpenAI API key") ? 400 : 500, 
        headers: { ...corsHeaders, "Content-Type": "application/json" } 
      }
    );
  }
});

================
File: supabase/functions/generate-title/index.ts
================
// supabase/functions/generate-title/index.ts

import { serve } from 'https://deno.land/std@0.177.0/http/server.ts'
import { createClient } from 'npm:@supabase/supabase-js@2'
import { OpenAI } from "https://deno.land/x/openai/mod.ts";
import { corsHeaders } from '../_shared/cors.ts'

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    // Authenticate the user
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL')!,
      Deno.env.get('SUPABASE_ANON_KEY')!,
      { global: { headers: { Authorization: req.headers.get('Authorization')! } } }
    )
    const { data: { user } } = await supabaseClient.auth.getUser();
    if (!user) throw new Error("User not authenticated");

    // Correctly parse the JSON body
    const { query } = await req.json();
    if (!query) {
      throw new Error("Missing 'query' in request body.");
    }

    const openai = new OpenAI(Deno.env.get("OPENAI_API_KEY")!);

    const chatCompletion = await openai.chat.completions.create({
      messages: [
        { 
          role: 'system', 
          content: 'You are an expert at creating short, concise, 3-4 word titles for chat conversations based on the user\'s first message. Do not use quotes in the title. Be direct and relevant.' 
        },
        { 
          role: 'user', 
          content: `Generate a title for a conversation starting with: "${query}"` 
        },
      ],
      model: 'gpt-3.5-turbo',
      max_tokens: 20,
      temperature: 0.3,
    });

    const title = chatCompletion.choices[0].message.content?.trim().replace(/"/g, '') || "New Chat";

    return new Response(JSON.stringify({ title }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  }
})

================
File: supabase/functions/hard-reset-weaviate-schema/index.ts
================
// supabase/functions/hard-reset-weaviate-schema/index.ts

import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import weaviate, { WeaviateClient, ApiKey } from 'npm:weaviate-ts-client@2.0.0';
import { corsHeaders } from "../_shared/cors.ts";

serve(async (_req) => {
  console.log("--- [HARD RESET] Function invoked. Attempting to delete Weaviate class... ---");
  try {
    const weaviateHost = Deno.env.get("WEAVIATE_URL");
    const weaviateApiKey = Deno.env.get("WEAVIATE_API_KEY");
    if (!weaviateHost || !weaviateApiKey) {
      throw new Error('Weaviate secrets are not configured.');
    }

    const weaviateClient: WeaviateClient = weaviate.client({
      scheme: 'https',
      host: weaviateHost,
      apiKey: new ApiKey(weaviateApiKey),
    });

    const className = "DocumentChunk";
    
    // Check if the class exists before trying to delete
    try {
      await weaviateClient.schema.classGetter().withClassName(className).do();
      console.log(`--- [HARD RESET] Found class "${className}". Proceeding with deletion. ---`);
      // MODIFIED: Corrected variable name from 'client' to 'weaviateClient'
      await weaviateClient.schema.classDeleter().withClassName(className).do();
      console.log(`--- [HARD RESET] Successfully deleted class "${className}". ---`);
    } catch (e) {
      // If classGetter() throws, it means the class doesn't exist, which is also a success state for our purpose.
      console.log(`--- [HARD RESET] Class "${className}" does not exist. No action needed. ---`);
    }

    return new Response(
      JSON.stringify({ success: true, message: `Schema for "${className}" has been cleared.` }),
      { headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );

  } catch (error) {
    console.error("--- [HARD RESET] Critical error:", error);
    return new Response(
      JSON.stringify({ success: false, error: error.message }),
      { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }
});

================
File: supabase/functions/inspect-weaviate-schema/index.ts
================
// supabase/functions/inspect-weaviate-schema/index.ts

import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import weaviate, { WeaviateClient, ApiKey } from 'npm:weaviate-ts-client@2.0.0';
import { corsHeaders } from "../_shared/cors.ts";

serve(async (_req) => {
  if (_req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    console.log("--- [INSPECT] Function invoked. ---");

    const weaviateHost = Deno.env.get("WEAVIATE_URL");
    const weaviateApiKey = Deno.env.get("WEAVIATE_API_KEY");
    if (!weaviateHost || !weaviateApiKey) {
      throw new Error('Weaviate secrets are not configured.');
    }

    const weaviateClient: WeaviateClient = weaviate.client({
      scheme: 'https',
      host: weaviateHost,
      apiKey: new ApiKey(weaviateApiKey),
    });

    console.log("--- [INSPECT] Weaviate client initialized. Fetching schema for 'DocumentChunk'... ---");

    const schema = await weaviateClient.schema.classGetter().withClassName("DocumentChunk").do();

    console.log("--- [INSPECT] Successfully retrieved schema. ---");

    return new Response(
      JSON.stringify(schema, null, 2), // Pretty-print the JSON response
      { headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : "An unknown error occurred";
    console.error("--- [INSPECT] Error fetching Weaviate schema:", errorMessage);
    
    if (errorMessage.includes("404")) {
       return new Response(
        JSON.stringify({ success: false, error: "Schema 'DocumentChunk' does not exist. This is good, it means the reset worked. Please re-upload a file to recreate it." }),
        { status: 404, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    return new Response(
      JSON.stringify({ success: false, error: errorMessage }),
      { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }
});

================
File: supabase/functions/oracle-chat/index.ts
================
// supabase/functions/oracle-chat/index.ts
import { serve } from 'https://deno.land/std@0.177.0/http/server.ts';
import { createClient, SupabaseClient } from 'npm:@supabase/supabase-js@2';
import weaviate, { WeaviateClient, ApiKey } from 'npm:weaviate-ts-client@2.0.0';
import { corsHeaders } from '../_shared/cors.ts';

const WEAVIATE_URL = Deno.env.get('WEAVIATE_URL');
const WEAVIATE_API_KEY = Deno.env.get('WEAVIATE_API_KEY');
const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY');

interface FileType {
  file_id: string;
  name: string;
  type: string;
  url: string | null;
}

interface ActiveSource {
  number: number;
  file: FileType;
  pageNumber: number | null;
  content: string;
  file_id?: string;
}

interface ProcessedResult {
  question: string;
  answer: string;
  sources: ActiveSource[];
}

async function processSingleQuery(
  query: string, 
  weaviateClient: WeaviateClient, 
  adminSupabaseClient: SupabaseClient, 
  user_id: string, 
  class_id: string | null
): Promise<ProcessedResult> {
  
  console.log(`[RAG-STEP] Processing query: "${query}"`);

  const embeddingResponse = await fetch("https://api.openai.com/v1/embeddings", {
    method: "POST",
    headers: { "Content-Type": "application/json", "Authorization": `Bearer ${OPENAI_API_KEY!}` },
    body: JSON.stringify({ input: query, model: "text-embedding-3-small" }),
  });
  if (!embeddingResponse.ok) throw new Error(`Failed to create embedding for query: "${query}"`);
  const embeddingData = await embeddingResponse.json();
  const queryVector = embeddingData.data[0].embedding;

  const weaviateResponse = await weaviateClient.graphql
    .get()
    .withClassName('DocumentChunk')
    .withNearVector({ vector: queryVector })
    .withLimit(10)
    .withWhere({
        operator: 'And',
        operands: [
            { path: ['user_id'], operator: 'Equal', valueText: user_id },
            ...(class_id ? [{ path: ['class_id'], operator: 'Equal', valueText: class_id }] : []),
        ],
    })
    .withFields('source_file_id page_number text_chunk source_file_name')
    .do();
  
  const retrievedChunks = weaviateResponse.data.Get.DocumentChunk || [];
  
  console.log(`\n--- BEGIN RETRIEVAL VERIFICATION (Query: "${query}") ---\nTotal Chunks Retrieved: ${retrievedChunks.length}\n`);
  console.log(JSON.stringify(retrievedChunks, null, 2));
  console.log(`\n--- END RETRIEVAL VERIFICATION ---\n`);


  if (retrievedChunks.length === 0) {
    return { question: query, answer: "I could not find any information on this topic in the provided documents.", sources: [] };
  }
  
  const uniqueFileIds = [...new Set(retrievedChunks.map((chunk: any) => chunk.source_file_id))];
  const { data: filesData } = await adminSupabaseClient.from('files').select('file_id, name, type, url').in('file_id', uniqueFileIds);
  const fileMap = new Map(filesData?.map(file => [file.file_id, file]) || []);
  
  const sourcesForLLM: ActiveSource[] = [];
  const contextForLLM = retrievedChunks.map((chunk: any, index: number) => {
    const fileInfo = fileMap.get(chunk.source_file_id);
    if (fileInfo) {
      sourcesForLLM.push({
        number: index + 1,
        file: fileInfo as FileType,
        pageNumber: chunk.page_number,
        content: chunk.text_chunk,
        file_id: chunk.source_file_id,
      });
      return `Source [${index + 1}]: From page ${chunk.page_number} of "${chunk.source_file_name}":\n"${chunk.text_chunk}"`;
    }
    return "";
  }).filter(Boolean).join('\n\n---\n\n');

  const systemPrompt = `You are an academic assistant. Your primary goal is to answer the user's question using ONLY the information from the provided sources.
- Synthesize a detailed answer based on the text in the sources.
- You MUST cite every piece of information you use with the corresponding source number, like [Source X].
- If the sources only partially answer the question, provide the information you can find and then you can mention what information is missing.
- Be resourceful. Connect concepts from the sources to the user's question where possible. Only if the sources contain absolutely no relevant information should you state that you cannot answer.
- Do not make up information. Your entire answer must be derived from the provided sources.`;
  
  const openAIResponse = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: { "Content-Type": "application/json", "Authorization": `Bearer ${OPENAI_API_KEY!}` },
      body: JSON.stringify({
          model: "gpt-4o-mini",
          messages: [
              { role: "system", content: systemPrompt },
              { role: "user", content: `User Question: "${query}"\n\nSources:\n${contextForLLM}` }
          ],
          temperature: 0.2,
      }),
  });
  if (!openAIResponse.ok) throw new Error(`OpenAI API error: ${await openAIResponse.text()}`);
  
  const completion = await openAIResponse.json();
  const answer = completion.choices[0].message.content;

  console.log(`[RAG-STEP] Synthesized answer for query.`);
  return { question: query, answer, sources: sourcesForLLM };
}


serve(async (req: Request) => {
  if (req.method === 'OPTIONS') return new Response('ok', { headers: corsHeaders });

  try {
    const adminSupabaseClient = createClient(Deno.env.get('SUPABASE_URL')!, Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!);
    const weaviateClient = weaviate.client({
      scheme: 'https', host: WEAVIATE_URL!, apiKey: new ApiKey(WEAVIATE_API_KEY!),
      headers: { 'X-OpenAI-Api-Key': OPENAI_API_KEY! },
    });
    const { data: { user } } = await createClient(
      Deno.env.get('SUPABASE_URL')!, Deno.env.get('SUPABASE_ANON_KEY')!,
      { global: { headers: { Authorization: req.headers.get('Authorization')! } } }
    ).auth.getUser();
    if (!user) throw new Error('Authentication error.');

    const { message, class_id } = await req.json();
    if (!message) throw new Error("Missing 'message' in request body.");

    const instructionalPhrases = ["answer the following questions:", "answer these questions:"];
    const questions = message
        .trim()
        .split('\n')
        .map((q: string) => q.trim().replace(/^[•\\*\\-]\s*/, ''))
        .filter((q: string) => q.length > 5 && !instructionalPhrases.includes(q.toLowerCase()));

    if (questions.length === 0) {
        questions.push(message.trim());
    }

    console.log(`[MAIN] Detected ${questions.length} distinct question(s). Processing in parallel...`);
    
    const processingPromises = questions.map((q: string) => processSingleQuery(q, weaviateClient, adminSupabaseClient, user.id, class_id));
    const results = await Promise.all(processingPromises);

    let finalResponseText = "";
    const finalSources: ActiveSource[] = [];
    const sourceMap = new Map<string, number>();
    let nextSourceNumber = 1;

    for (const result of results) {
        // --- FIX START: This logic now correctly renumbers citations without the cascading replacement bug ---
        const localCitations = [...result.answer.matchAll(/\[Source (\d+)]/g)];
        const oldToNewSourceNumberMap = new Map<number, number>();

        // Step 1: Discover all unique sources cited in this specific answer and build the renumbering map.
        for (const match of localCitations) {
            const localNumber = parseInt(match[1]);
            if (oldToNewSourceNumberMap.has(localNumber)) continue; 

            const originalSource = result.sources.find(s => s.number === localNumber);
            if (originalSource) {
                const sourceKey = `${originalSource.file_id}-${originalSource.pageNumber}-${originalSource.content.slice(0, 50)}`;
                let finalNumber;
                if (sourceMap.has(sourceKey)) {
                    finalNumber = sourceMap.get(sourceKey)!;
                } else {
                    finalNumber = nextSourceNumber++;
                    sourceMap.set(sourceKey, finalNumber);
                    finalSources.push({ ...originalSource, number: finalNumber });
                }
                oldToNewSourceNumberMap.set(localNumber, finalNumber);
            }
        }

        // Step 2: Replace all citations in a single pass using the completed map and a replacer function.
        // This avoids the cascading replacement problem.
        const renumberedAnswer = result.answer.replace(/\[Source (\d+)]/g, (match, oldNumberStr) => {
            const oldNum = parseInt(oldNumberStr, 10);
            const newNum = oldToNewSourceNumberMap.get(oldNum);
            return newNum !== undefined ? `[Source ${newNum}]` : match;
        });
        // --- FIX END ---
        
        finalResponseText += `${renumberedAnswer}\n\n`;
    }

    console.log(`[MAIN] ✅ Finished processing all questions.`);
    return new Response(JSON.stringify({
      response: finalResponseText.trim(),
      sources: finalSources.sort((a, b) => a.number - b.number),
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200,
    });

  } catch (error) {
    console.error('[CRITICAL-ERROR] in oracle-chat function:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500,
    });
  }
});

================
File: supabase/functions/parse-syllabus/index.ts
================
// supabase/functions/parse-syllabus/index.ts

import { serve } from 'https://deno.land/std@0.177.0/http/server.ts'
import { corsHeaders } from '../_shared/cors.ts'
import * as pdfjs from 'npm:pdfjs-dist@4.4.168/legacy/build/pdf.mjs';

// Helper function to decode base64 string to a Uint8Array
const base64ToUint8Array = (base64: string) => {
  const binaryString = atob(base64);
  const len = binaryString.length;
  const bytes = new Uint8Array(len);
  for (let i = 0; i < len; i++) {
    bytes[i] = binaryString.charCodeAt(i);
  }
  return bytes;
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    console.log("[INFO] 'parse-syllabus' function invoked.");
    const { files, class_id } = await req.json();

    if (!files || !Array.isArray(files) || files.length === 0) {
      console.error("[ERROR] No files provided in the request.");
      throw new Error('No files provided for parsing.');
    }
    if (!class_id) {
      console.error("[ERROR] No class_id provided in the request.");
      throw new Error('A class must be selected.');
    }
    console.log(`[INFO] Received ${files.length} files for class_id: ${class_id}`);

    const apiKey = Deno.env.get("OPENAI_API_KEY");
    if (!apiKey) {
      console.error("[ERROR] OPENAI_API_KEY environment variable is not set.");
      throw new Error("OPENAI_API_KEY is not set in environment variables.");
    }
    console.log("[INFO] OpenAI API key found.");
    
    // Define the type for the parts of the multimodal content
    type ContentPart = 
      | { type: "text"; text: string }
      | { type: "image_url"; image_url: { url: string } };

    // Explicitly type the 'userContent' array
    const userContent: ContentPart[] = [
      {
        type: "text",
        text: `
          You are an expert academic assistant specializing in parsing course syllabi.
          Analyze the following file(s) (which could be text from documents or screenshots of a syllabus) and extract all calendar-worthy events.
          For each event, identify its title, type, start date, and start time.
          The possible event types are: 'assignment', 'exam', or 'event'.
          If you cannot determine a specific detail (like the time), return null for that field.
          Be meticulous and accurate. The user is relying on you to build their schedule.
          Return the data in a valid JSON object with a single key "events" which is an array of the extracted event objects.
          Each event object must have the following properties: "title" (string), "event_type" (string: 'assignment', 'exam', or 'event'), "date" (string: "YYYY-MM-DD" or null), "time" (string: "HH:MM" 24-hour format or null), "location" (string or null), "notes" (string or null).
        `,
      },
    ];

    let processedFileCount = 0;
    for (const file of files) {
      if (file.type && file.type.startsWith('image/')) {
        userContent.push({
          type: "image_url",
          image_url: {
            "url": `data:${file.type};base64,${file.content}`
          }
        });
        processedFileCount++;
        console.log(`[INFO] Added image file to prompt: ${file.name}`);
      } else if (file.type === 'application/pdf') {
        console.log(`[INFO] Processing PDF file: ${file.name}`);
        const pdfData = base64ToUint8Array(file.content);
        const pdfDoc = await pdfjs.getDocument(pdfData).promise;
        let fullText = '';
        for (let i = 1; i <= pdfDoc.numPages; i++) {
            const page = await pdfDoc.getPage(i);
            const textContent = await page.getTextContent();
            const pageText = textContent.items.map((item: any) => item.str).join(' ');
            fullText += pageText + '\n\n';
        }
        userContent.push({ type: 'text', text: `--- PDF Content from ${file.name} ---\n${fullText}` });
        processedFileCount++;
        console.log(`[INFO] Extracted and added text from PDF: ${file.name}`);
      } else {
        console.log(`[WARN] Skipping unsupported file type: ${file.name} (type: ${file.type})`);
      }
    }

    if (processedFileCount === 0) {
      console.error("[ERROR] No processable files found in the upload (only PNG, JPG, and PDF are supported).");
      throw new Error("No processable files found. Please upload syllabus screenshots (PNG, JPG) or PDF documents.");
    }
    console.log(`[INFO] Prepared ${processedFileCount} file(s) for OpenAI API.`);

    const payload = {
      model: "gpt-4o", // Use the more advanced gpt-4o model
      messages: [
        {
          role: "user",
          content: userContent,
        },
      ],
      max_tokens: 3000,
      response_format: { type: "json_object" },
    };

    console.log("[INFO] Sending request to OpenAI API...");
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
        const errorText = await response.text();
        console.error(`[ERROR] OpenAI API request failed with status ${response.status}: ${errorText}`);
        throw new Error(`OpenAI API request failed: ${errorText}`);
    }
    console.log("[INFO] Successfully received response from OpenAI API.");

    const result = await response.json();
    const responseText = result.choices[0].message.content;
    const parsedEvents = JSON.parse(responseText);
    console.log("[INFO] Successfully parsed JSON response from AI.");

    return new Response(JSON.stringify(parsedEvents), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200,
    });

  } catch (error) {
    console.error("[FATAL] An error occurred in the function:", error.message);
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500,
    });
  }
});

================
File: supabase/functions/request-previews/index.ts
================
// supabase/functions/request-previews/index.ts
import { serve } from 'https://deno.land/std@0.177.0/http/server.ts';
import { createClient } from 'npm:@supabase/supabase-js@2';
import { corsHeaders } from '../_shared/cors.ts';

serve(async (req: Request) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    // This function can be called by another function, so we use the service role key
    const adminSupabaseClient = createClient(
      Deno.env.get('SUPABASE_URL')!,
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    );
    
    const { file_id } = await req.json();
    if (!file_id) throw new Error("Missing 'file_id' in request body.");

    console.log(`[REQUEST-PREVIEWS] Received request to generate previews for file_id: ${file_id}`);

    const { error } = await adminSupabaseClient
      .from('preview_queue')
      .insert({ file_id: file_id, status: 'pending' });

    if (error) throw error;

    console.log(`[REQUEST-PREVIEWS] ✅ Successfully queued preview generation for file_id: ${file_id}`);

    return new Response(JSON.stringify({ success: true, message: "Preview generation job has been queued." }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 202,
    });

  } catch (error) {
    console.error('[CRITICAL-ERROR] in request-previews function:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500,
    });
  }
});

================
File: supabase/functions/semantic-search/index.ts
================
// supabase/functions/semantic-search/index.ts
import { serve } from 'https://deno.land/std@0.177.0/http/server.ts';
import { createClient } from 'npm:@supabase/supabase-js@2';
import weaviate, { WeaviateClient, ApiKey } from 'npm:weaviate-ts-client@2.0.0';
import { corsHeaders } from '../_shared/cors.ts';

// Initialize clients and environment variables
const WEAVIATE_URL = Deno.env.get('WEAVIATE_URL');
const WEAVIATE_API_KEY = Deno.env.get('WEAVIATE_API_KEY');
const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY');

if (!WEAVIATE_URL || !WEAVIATE_API_KEY || !OPENAI_API_KEY) {
  console.error("Missing environment variables for Weaviate or OpenAI.");
}

// Define the shape of a search result we'll return to the frontend
interface SearchResult {
  file_id: string;
  file_name: string;
  folder_id: string | null;
  page_number: number;
  snippet: string; // The matching text chunk
  class_id: string;
}

serve(async (req: Request) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    // 1. Authenticate the user and get the search query from the request body
    const { query, class_id } = await req.json();
    if (!query) throw new Error("A 'query' parameter is required.");

    const userSupabaseClient = createClient(
      Deno.env.get('SUPABASE_URL')!,
      Deno.env.get('SUPABASE_ANON_KEY')!,
      { global: { headers: { Authorization: req.headers.get('Authorization')! } } }
    );
    const { data: { user } } = await userSupabaseClient.auth.getUser();
    if (!user) throw new Error('Authentication failed.');

    // Initialize Weaviate and Admin Supabase clients
    const weaviateClient: WeaviateClient = weaviate.client({
      scheme: 'https',
      host: WEAVIATE_URL!,
      apiKey: new ApiKey(WEAVIATE_API_KEY!),
    });
    const adminSupabaseClient = createClient(Deno.env.get('SUPABASE_URL')!, Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!);

    // 2. Create a vector embedding for the user's search query using OpenAI
    console.log(`[SEARCH] Creating embedding for query: "${query}"`);
    const embeddingResponse = await fetch("https://api.openai.com/v1/embeddings", {
      method: "POST",
      headers: { "Content-Type": "application/json", "Authorization": `Bearer ${OPENAI_API_KEY!}` },
      body: JSON.stringify({
        input: query,
        model: "text-embedding-3-small", // A powerful and cost-effective model for embeddings
      }),
    });
    if (!embeddingResponse.ok) {
        const errorBody = await embeddingResponse.json();
        throw new Error(`Failed to create query embedding: ${errorBody.error.message}`);
    }
    const embeddingData = await embeddingResponse.json();
    const queryVector = embeddingData.data[0].embedding;
    console.log(`[SEARCH] Embedding created successfully.`);

    // 3. Perform the semantic search in Weaviate using the query vector
    console.log(`[SEARCH] Performing nearVector search in Weaviate...`);
    
    // Construct the 'where' filter to scope the search
    const whereOperands = [
        { path: ['user_id'], operator: 'Equal', valueText: user.id },
    ];
    if (class_id) {
        whereOperands.push({ path: ['class_id'], operator: 'Equal', valueText: class_id });
    }

    const weaviateResponse = await weaviateClient.graphql
      .get()
      .withClassName('DocumentChunk')
      .withNearVector({ vector: queryVector }) // Use the vector to find similar chunks
      .withLimit(10) // Return the top 10 most relevant results
      .withWhere({
          operator: 'And',
          operands: whereOperands,
      })
      .withFields('source_file_id source_file_name folder_id page_number text_chunk class_id')
      .do();

    const retrievedChunks = weaviateResponse.data.Get.DocumentChunk;
    console.log(`[SEARCH] Found ${retrievedChunks?.length || 0} relevant chunks.`);

    // 4. Format the results for the frontend
    const searchResults: SearchResult[] = (retrievedChunks || []).map((chunk: any) => ({
      file_id: chunk.source_file_id,
      file_name: chunk.source_file_name,
      folder_id: chunk.folder_id,
      page_number: chunk.page_number,
      snippet: chunk.text_chunk, // This is the actual text content that matched the search
      class_id: chunk.class_id,
    }));

    // 5. Return the results
    return new Response(JSON.stringify(searchResults), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200,
    });

  } catch (error) {
    console.error('[SEARCH] Critical error:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500,
    });
  }
});

================
File: supabase/functions/serve-file/index.ts
================
// supabase/functions/serve-file/index.ts
import { serve } from 'https://deno.land/std@0.177.0/http/server.ts';
import { createClient } from 'npm:@supabase/supabase-js@2';
import { corsHeaders } from '../_shared/cors.ts';

serve(async (req: Request) => {
  // This function handles preflight requests for CORS
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const adminSupabase = createClient(
      Deno.env.get('SUPABASE_URL')!,
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    );

    // 1. Get the file_id from the request URL (e.g., /serve-file?id=...)
    const url = new URL(req.url);
    const fileId = url.searchParams.get('id');
    if (!fileId) {
      throw new Error('File ID is required.');
    }

    // 2. Fetch the file's metadata from the 'files' table to get its storage path and MIME type
    const { data: fileMeta, error: metaError } = await adminSupabase
      .from('files')
      .select('url, type, name')
      .eq('file_id', fileId)
      .single();

    if (metaError || !fileMeta || !fileMeta.url) {
      throw new Error(`File not found or has no URL: ${metaError?.message || 'Unknown error'}`);
    }

    // 3. Extract the storage path from the full public URL
    const storagePath = new URL(fileMeta.url).pathname.split('/public/file_storage/')[1];
    if (!storagePath) {
        throw new Error("Could not parse storage path from file URL.");
    }

    // 4. Download the file from Supabase Storage
    const { data: fileBlob, error: downloadError } = await adminSupabase.storage
      .from('file_storage')
      .download(storagePath);

    if (downloadError) {
      throw new Error(`Failed to download file from storage: ${downloadError.message}`);
    }

    // 5. Return the file content directly to the user
    const headers = {
      ...corsHeaders,
      'Content-Type': fileMeta.type || 'application/octet-stream',
      // This header suggests a filename to the browser if the user decides to save it
      'Content-Disposition': `inline; filename="${encodeURIComponent(fileMeta.name)}"`,
    };

    return new Response(fileBlob, { headers });

  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 400,
    });
  }
});

================
File: supabase/functions/upload-file/index.ts
================
// supabase/functions/upload-file/index.ts
import { serve } from 'https://deno.land/std@0.177.0/http/server.ts';
import { createClient } from 'npm:@supabase/supabase-js@2';
import { corsHeaders } from '../_shared/cors.ts';

// This interface matches what the frontend will send for each file.
interface FilePayload {
  storage_path: string;
  original_name: string;
  mime_type: string;
  size: number;
  class_id: string;
  folder_id: string | null;
}

serve(async (req: Request) => {
  console.log(`[START] 'upload-file' invoked with method: ${req.method}`);
  
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    // 1. Authenticate the user
    console.log(`[AUTH] Checking user authentication...`);
    const userSupabaseClient = createClient(
      Deno.env.get('SUPABASE_URL')!,
      Deno.env.get('SUPABASE_ANON_KEY')!,
      { global: { headers: { Authorization: req.headers.get('Authorization')! } } }
    );
    const { data: { user } } = await userSupabaseClient.auth.getUser();
    if (!user) throw new Error('Authentication error: User not found.');
    console.log(`[AUTH] ✅ User authenticated: ${user.id}`);

    // 2. Get the file payload from the request
    const filePayload: FilePayload = await req.json();
    if (!filePayload || !filePayload.storage_path || !filePayload.class_id) {
      throw new Error('Invalid request body. Missing required file payload information.');
    }

    // 3. Create an admin client to insert into the queue
    const adminSupabaseClient = createClient(
      Deno.env.get('SUPABASE_URL')!,
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    );
    
    // 4. Insert a new job into the processing_queue table
    console.log(`[QUEUE] Adding job for file: ${filePayload.original_name}`);
    const { error } = await adminSupabaseClient
      .from('processing_queue')
      .insert({
        user_id: user.id,
        class_id: filePayload.class_id,
        folder_id: filePayload.folder_id,
        storage_path: filePayload.storage_path,
        original_name: filePayload.original_name,
        mime_type: filePayload.mime_type,
        size: filePayload.size,
        status: 'pending' // Initial status
      });

    if (error) {
      console.error(`[QUEUE] ❌ Failed to insert job into queue:`, error);
      throw new Error(`Database error: ${error.message}`);
    }

    console.log(`[QUEUE] ✅ Job successfully added to queue for file: ${filePayload.original_name}`);
    
    // 5. Return immediate success to the user
    return new Response(JSON.stringify({ success: true, message: "File upload acknowledged. Processing has started." }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 202, // 202 Accepted: The request has been accepted for processing, but the processing has not been completed.
    });

  } catch (error) {
    console.error('[CRITICAL-ERROR] in upload-file function:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: error.message.includes('Authentication') ? 401 : 500,
    });
  }
});

================
File: supabase/functions/upload-to-vector-store/index.ts
================
// supabase/functions/upload-to-vector-store/index.ts
import { serve } from 'https://deno.land/std@0.177.0/http/server.ts';
import { createClient } from 'npm:@supabase/supabase-js@2';
import weaviate, { WeaviateClient, ApiKey } from 'npm:weaviate-ts-client@2.0.0';
import * as pdfjs from 'npm:pdfjs-dist@4.4.168/legacy/build/pdf.mjs';
import { corsHeaders } from '../_shared/cors.ts';

interface QueueRecord {
  id: number;
  user_id: string;
  class_id: string;
  folder_id: string | null;
  storage_path: string;
  original_name: string;
  mime_type: string;
  size: number;
}

async function getTextFromPdfPage(page: any): Promise<string> {
  const textContent = await page.getTextContent();
  let lastY = -1;
  let text = '';
  const items = textContent.items.sort((a: any, b: any) => {
    if (a.transform[5] < b.transform[5]) return 1;
    if (a.transform[5] > b.transform[5]) return -1;
    if (a.transform[4] < b.transform[4]) return -1;
    if (a.transform[4] > b.transform[4]) return 1;
    return 0;
  });

  for (const item of items) {
    if (lastY !== -1 && Math.abs(item.transform[5] - lastY) > 5) {
      text += '\n';
    }
    text += item.str;
    lastY = item.transform[5];
  }
  return text;
}


function chunkText(text: string, chunkSize = 1000, overlap = 100): string[] {
  const chunks: string[] = [];
  let i = 0;
  while (i < text.length) {
    const end = Math.min(i + chunkSize, text.length);
    chunks.push(text.slice(i, end));
    i += chunkSize - overlap;
    if (end === text.length) break;
  }
  return chunks;
}

async function getEmbedding(text: string): Promise<number[]> {
  const res = await fetch('https://api.openai.com/v1/embeddings', {
    method: 'POST',
    headers: {
      Authorization: `Bearer ${Deno.env.get('OPENAI_API_KEY')}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      input: text,
      // --- FIX: Upgraded the embedding model ---
      model: 'text-embedding-3-small',
    }),
  });
  if (!res.ok) {
    const error = await res.text();
    throw new Error(`OpenAI embedding failed: ${error}`);
  }

  const data = await res.json();
  return data.data[0].embedding;
}

serve(async (req: Request) => {
  console.log(`[TEXT-ENGINE START] 'upload-to-vector-store' invoked.`);

  try {
    const { record }: { record: QueueRecord } = await req.json();
    const { id: queueId, original_name, mime_type, storage_path, class_id, folder_id, user_id, size } = record;
    console.log(`[JOB] Received job #${queueId} for file: ${original_name}`);

    const adminSupabaseClient = createClient(
      Deno.env.get('SUPABASE_URL')!,
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    );

    const weaviateClient: WeaviateClient = weaviate.client({
      scheme: 'https',
      host: Deno.env.get('WEAVIATE_URL')!,
      apiKey: new ApiKey(Deno.env.get('WEAVIATE_API_KEY')!),
      headers: { 'X-OpenAI-Api-Key': Deno.env.get('OPENAI_API_KEY')! },
    });

    await adminSupabaseClient.from('processing_queue').update({ status: 'processing' }).eq('id', queueId);

    let fileId = '';

    try {
      const documentTitle = original_name.substring(0, original_name.lastIndexOf('.')) || original_name;
      const { data: newFileRecord, error: insertError } = await adminSupabaseClient
        .from('files')
        .insert({
          name: original_name,
          size,
          type: mime_type,
          user_id,
          class_id,
          folder_id,
          status: 'processing',
          document_title: documentTitle,
        })
        .select('file_id')
        .single();
      if (insertError) throw insertError;
      fileId = newFileRecord.file_id;
      console.log(`  [DB-INSERT] ✅ Record created with file_id: ${fileId}`);
      const { data: fileData, error: downloadError } = await adminSupabaseClient.storage
        .from('file_storage')
        .download(storage_path);
      if (downloadError) throw downloadError;

      const fileBuffer = await fileData.arrayBuffer();
      const { data: { publicUrl } } = adminSupabaseClient.storage.from('file_storage').getPublicUrl(storage_path);
      const allTextChunks: { page_number: number; text_chunk: string }[] = [];
      let pageCount = 0;
      console.log(`  [PARSE] Parsing content for MIME type: ${mime_type}`);
      if (mime_type === 'application/pdf') {
        const pdfDoc = await pdfjs.getDocument(fileBuffer).promise;
        pageCount = pdfDoc.numPages;

        for (let i = 1; i <= pageCount; i++) {
          const page = await pdfDoc.getPage(i);
          const pageText = await getTextFromPdfPage(page);
          
          const cleanedText = pageText
            .replace(/\s+/g, ' ')
            .trim();

          chunkText(cleanedText).forEach(chunk => allTextChunks.push({ page_number: i, text_chunk: chunk }));
        }

        console.log(`  [PARSE] ✅ Extracted text from ${pageCount} PDF pages.`);
      } else if (mime_type.startsWith('text/')) {
        const textContent = new TextDecoder().decode(fileBuffer);
        pageCount = 1;
        chunkText(textContent).forEach(chunk => allTextChunks.push({ page_number: 1, text_chunk: chunk }));
        console.log(`  [PARSE] ✅ Extracted text from plain text file.`);
      } else {
        console.log(`  [PARSE] ⚠️ No text extraction logic for this file type: ${mime_type}. File will be tracked, but its content won't be searchable via text.`);
        pageCount = 1; 
      }

      if (allTextChunks.length > 0) {
        console.log(`\n--- BEGIN CHUNK VERIFICATION (File: ${original_name}) ---\nTotal Chunks: ${allTextChunks.length}\n`);
        console.log(JSON.stringify(allTextChunks, null, 2));
        console.log(`\n--- END CHUNK VERIFICATION ---\n`);

        console.log(`  [WEAVIATE-INGEST] Indexing ${allTextChunks.length} total text chunks...`);
        let batcher = weaviateClient.batch.objectsBatcher();

        for (let i = 0; i < allTextChunks.length; i++) {
          const chunkData = allTextChunks[i];
          try {
            const vector = await getEmbedding(chunkData.text_chunk);
            batcher = batcher.withObject({
              class: 'DocumentChunk',
              properties: {
                text_chunk: chunkData.text_chunk,
                source_file_id: fileId,
                source_file_name: original_name,
                user_id,
                class_id,
                folder_id,
                page_number: chunkData.page_number,
                content_type: 'text_chunk',
                chunk_index: i,
              },
              vector: vector,
            });
          } catch (embeddingErr) {
            console.error(`  [EMBEDDING-FAIL] Failed on chunk ${i}: ${embeddingErr.message}`);
          }
        }

        await batcher.do();
        console.log(`  [WEAVIATE-INGEST] ✅ Successfully indexed text chunks.`);
      }

      console.log(`  [DB-UPDATE] Finalizing file record...`);
      await adminSupabaseClient
        .from('files')
        .update({ status: 'processed_text', url: publicUrl, page_count: pageCount })
        .eq('file_id', fileId);
      await adminSupabaseClient.from('processing_queue').update({ status: 'completed' }).eq('id', queueId);
      console.log(`  [DB-UPDATE] ✅ Record finalized for file_id: ${fileId}. Text processing is complete.`);
      
      console.log(`  [JOB-CHAIN] Requesting preview generation for file_id: ${fileId}`);
      const { error: previewRequestError } = await adminSupabaseClient.functions.invoke('request-previews', {
        body: { file_id: fileId },
      });
      if (previewRequestError) {
        console.error(`  [JOB-CHAIN] ⚠️ Failed to queue preview generation:`, previewRequestError);
      } else {
        console.log(`  [JOB-CHAIN] ✅ Successfully queued preview generation.`);
      }

      return new Response(
        JSON.stringify({ success: true, message: `Successfully processed text for job #${queueId}` }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    } catch (error) {
      console.error(`[JOB-ERROR] Failed to process job #${queueId}:`, error);
      if (fileId) await adminSupabaseClient.from('files').update({ status: 'error' }).eq('file_id', fileId);
      await adminSupabaseClient
        .from('processing_queue')
        .update({ status: 'failed', error_message: error.message })
        .eq('id', queueId);
      throw error;
    }

  } catch (error) {
    console.error('[CRITICAL-ERROR] in text-engine function:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500,
    });
  }
});

================
File: supabase/functions/import_map.json
================
{
  "imports": {
    "std/": "https://deno.land/std@0.177.0/",
    "npm:@supabase/supabase-js@2": "https://esm.sh/@supabase/supabase-js@2",
    "npm:weaviate-ts-client@2.0.0": "https://esm.sh/weaviate-ts-client@2.0.0",
    "npm:mammoth@1.7.0": "https://esm.sh/mammoth@1.7.0",
    "npm:pdfjs-dist@4.4.168": "https://esm.sh/pdfjs-dist@4.4.168"
  }
}

================
File: supabase/config.toml
================
# supabase/config.toml
project_id = "uzdtqomtbrccinrkhzme"

[api]
enabled = true
port = 54321
schemas = ["public", "storage", "graphql_public"]

[db]
port = 54322

[studio]
enabled = true
port = 54323
api_url = "http://localhost" # This is for local dev, ensure it's correct for your setup

[inbucket]
enabled = true
port = 54324

[auth]
enabled = true
site_url = "http://localhost:8080"

[storage]
enabled = true

[analytics]
enabled = true
port = 54327

# Functions configuration

# Removed: [functions.generate-flashcards]
# Removed: verify_jwt = true

# Removed: [functions.generate-quiz]
# Removed: verify_jwt = true

[functions.upload-to-vector-store]
verify_jwt = true 

[functions.check-env-vars]
verify_jwt = true

[functions.generate-title]
verify_jwt = true

[functions.generate-previews]
verify_jwt = true

[functions.request-previews]
verify_jwt = true

[functions.oracle-chat]
verify_jwt = true

[functions.debug-weaviate-chunks]
verify_jwt = true

[functions.serve-file]
verify_jwt = true

[functions.semantic-search]
verify_jwt = true

[functions.delete-from-cloudinary]
verify_jwt = true

[functions.delete-user-account]
verify_jwt = true

[functions.delete-weaviate-chunks-by-file]
verify_jwt = true

[functions.parse-syllabus]
verify_jwt = true

[functions.create-recurring-event]
verify_jwt = true

[functions.delete-recurring-event]
verify_jwt = true

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local
.env

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}

================
File: eslint.config.js
================
import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";

export default tseslint.config(
  { ignores: ["dist"] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
      "@typescript-eslint/no-unused-vars": "off",
    },
  }
);

================
File: index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Eido AI: Your Personal Education Copilot</title>
    <meta name="description" content="Eido - The AI Copilot for Elevated Education" />
    <meta name="author" content="Eido" />

    <meta property="og:title" content="Eido - The AI Copilot for Elevated Education" />
    <meta property="og:description" content="Educating and supporting employees on cybersecurity topics" />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="/eido-landing.png" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@cybercoach" />
    <meta name="twitter:image" content="/eido-landing.png" />
    
    <!-- Updated favicon -->
    <link rel="icon" href="/eido-icon.ico" type="image/png">
  </head>

  <body>
    <div id="root"></div>
    <!-- IMPORTANT: DO NOT REMOVE THIS SCRIPT TAG OR THIS VERY COMMENT! -->
    <script src="https://cdn.gpteng.co/gptengineer.js" type="module"></script>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "vite_react_shadcn_ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "build:dev": "vite build --mode development",
    "build:extension": "vite build --config vite.config.extension.ts",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@cloudinary/react": "^1.14.3",
    "@cloudinary/url-gen": "^1.21.0",
    "@hookform/resolvers": "^3.9.0",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-context-menu": "^2.2.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.2.2",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.11",
    "@radix-ui/react-toast": "^1.2.13",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.4",
    "@supabase/supabase-js": "^2.49.4",
    "@tanstack/react-query": "^5.56.2",
    "class-variance-authority": "^0.7.1",
    "cloudinary": "^2.7.0",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "date-fns": "^3.6.0",
    "embla-carousel-react": "^8.3.0",
    "framer-motion": "^11.3.12",
    "input-otp": "^1.2.4",
    "lucide-react": "^0.462.0",
    "next-cloudinary": "^6.16.0",
    "next-themes": "^0.3.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-helmet-async": "^2.0.5",
    "react-hook-form": "^7.53.0",
    "react-intersection-observer": "^9.16.0",
    "react-pdf": "^9.2.1",
    "react-resizable-panels": "^2.1.3",
    "react-router-dom": "^6.30.0",
    "react-top-loading-bar": "^3.0.2",
    "recharts": "^2.12.7",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.3",
    "weaviate-client": "^3.6.0",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@tailwindcss/typography": "^0.5.15",
    "@types/chrome": "^0.0.268",
    "@types/node": "^22.5.5",
    "@types/react": "^18.3.21",
    "@types/react-dom": "^18.3.7",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "lovable-tagger": "^1.1.7",
    "postcss": "^8.4.47",
    "supabase": "^2.22.12",
    "tailwindcss": "^3.4.11",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^5.4.1"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# Welcome to your Lovable project

## Project info

**URL**: https://lovable.dev/projects/7176c51d-cd4b-4a84-821b-97c3c43fc432

## How can I edit this code?

There are several ways of editing your application.

**Use Lovable**

Simply visit the [Lovable Project](https://lovable.dev/projects/7176c51d-cd4b-4a84-821b-97c3c43fc432) and start prompting.

Changes made via Lovable will be committed automatically to this repo.

**Use your preferred IDE**

If you want to work locally using your own IDE, you can clone this repo and push changes. Pushed changes will also be reflected in Lovable.

The only requirement is having Node.js & npm installed - [install with nvm](https://github.com/nvm-sh/nvm#installing-and-updating)

Follow these steps:

```sh
# Step 1: Clone the repository using the project's Git URL.
git clone <YOUR_GIT_URL>

# Step 2: Navigate to the project directory.
cd <YOUR_PROJECT_NAME>

# Step 3: Install the necessary dependencies.
npm i

# Step 4: Start the development server with auto-reloading and an instant preview.
npm run dev
```

**Edit a file directly in GitHub**

- Navigate to the desired file(s).
- Click the "Edit" button (pencil icon) at the top right of the file view.
- Make your changes and commit the changes.

**Use GitHub Codespaces**

- Navigate to the main page of your repository.
- Click on the "Code" button (green button) near the top right.
- Select the "Codespaces" tab.
- Click on "New codespace" to launch a new Codespace environment.
- Edit files directly within the Codespace and commit and push your changes once you're done.

## What technologies are used for this project?

This project is built with:

- Vite
- TypeScript
- React
- shadcn-ui
- Tailwind CSS

## How can I deploy this project?

Simply open [Lovable](https://lovable.dev/projects/7176c51d-cd4b-4a84-821b-97c3c43fc432) and click on Share -> Publish.

## Can I connect a custom domain to my Lovable project?

Yes, you can!

To connect a domain, navigate to Project > Settings > Domains and click Connect Domain.

Read more here: [Setting up a custom domain](https://docs.lovable.dev/tips-tricks/custom-domain#step-by-step-guide)
test

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";
import animate from "tailwindcss-animate";

export default {
	darkMode: ["class"],
	content: [
		"./pages/**/*.{ts,tsx}",
		"./components/**/*.{ts,tsx}",
		"./app/**/*.{ts,tsx}",
		"./src/**/*.{ts,tsx}",
	],
	prefix: "",
	theme: {
		container: {
			center: true,
			padding: '2rem',
			screens: {
				'2xl': '1400px'
			}
		},
		extend: {
			colors: {
				border: 'hsl(var(--border))',
				input: 'hsl(var(--input))',
				ring: 'hsl(var(--ring))',
				background: 'hsl(var(--background))',
				foreground: 'hsl(var(--foreground))',
				primary: {
					DEFAULT: 'hsl(var(--primary))',
					foreground: 'hsl(var(--primary-foreground))'
				},
				secondary: {
					DEFAULT: 'hsl(var(--secondary))',
					foreground: 'hsl(var(--secondary-foreground))'
				},
				destructive: {
					DEFAULT: 'hsl(var(--destructive))',
					foreground: 'hsl(var(--destructive-foreground))'
				},
				muted: {
					DEFAULT: 'hsl(var(--muted))',
					foreground: 'hsl(var(--muted-foreground))'
				},
				accent: {
					DEFAULT: 'hsl(var(--accent))',
					foreground: 'hsl(var(--accent-foreground))'
				},
				popover: {
					DEFAULT: 'hsl(var(--popover))',
					foreground: 'hsl(var(--popover-foreground))'
				},
				card: {
					DEFAULT: 'hsl(var(--card))',
					foreground: 'hsl(var(--card-foreground))'
				},
				sidebar: {
					DEFAULT: 'hsl(var(--sidebar-background))',
					foreground: 'hsl(var(--sidebar-foreground))',
					primary: 'hsl(var(--sidebar-primary))',
					'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
					accent: 'hsl(var(--sidebar-accent))',
					'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
					border: 'hsl(var(--sidebar-border))',
					ring: 'hsl(var(--sidebar-ring))'
				},
				cybercoach: {
					teal: '#1A9F9F',
					'teal-light': '#63C5C5',
					'teal-dark': '#0E7575',
					blue: '#005780',
					'blue-light': '#3A89AD',
					'blue-dark': '#003A56',
					grey: '#8E9196',
					'grey-light': '#F6F6F7',
					'grey-dark': '#403E43'
				},
                volcanic: '#212121' /* Added dark charcoal color */
			},
			borderRadius: {
				lg: 'var(--radius)',
				md: 'calc(var(--radius) - 2px)',
				sm: 'calc(var(--radius) - 4px)'
			},
			keyframes: {
				'accordion-down': {
					from: {
						height: '0'
					},
					to: {
						height: 'var(--radix-accordion-content-height)'
					}
				},
				'accordion-up': {
					from: {
						height: 'var(--radix-accordion-content-height)'
					},
					to: {
						height: '0'
					}
				},
				'fade-in': {
					from: {
						opacity: '0'
					},
					to: {
						opacity: '1'
					}
				}
			},
			animation: {
				'accordion-down': 'accordion-down 0.2s ease-out',
				'accordion-up': 'accordion-up 0.2s ease-out',
				'fade-in': 'fade-in 0.5s ease-out'
			}
		}
	},
	plugins: [animate],
} satisfies Config;

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": false,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noImplicitAny": false,
    "noFallthroughCasesInSwitch": false,

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "types": ["chrome"]
  },
  "include": ["src", "extension"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "noImplicitAny": false,
    "noUnusedParameters": false,
    "skipLibCheck": true,
    "allowJs": true,
    "noUnusedLocals": false,
    "strictNullChecks": false
  }
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}

================
File: vercel.json
================
{
  "rewrites": [
    {
      "source": "/((?!api/|assets/|robots.txt|favicon.ico|eido-icon.png|eido-icon.ico|placeholder.svg|_next/static/|_next/image/|sitemap.xml|manifest.json|sw.js|workbox-.*.js).*)",
      "destination": "/index.html"
    }
  ]
}

================
File: vite.config.extension.ts
================
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";

// This is a separate Vite configuration for building the Chrome extension.
export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
  publicDir: 'extension/public',
  build: {
    outDir: "dist-extension",
    rollupOptions: {
      input: {
        // Correctly point to popup.html, which is now OUTSIDE the public directory.
        popup: path.resolve(__dirname, "extension/popup.html"),
        background: path.resolve(__dirname, "extension/background.js"),
        content: path.resolve(__dirname, "extension/content.js"),
      },
      output: {
        entryFileNames: `assets/[name].js`,
        chunkFileNames: `assets/[name].js`,
        assetFileNames: (assetInfo) => {
          // --- FIX START ---
          // This logic checks if the asset is the popup.html file.
          // If it is, it places it in the root of the output directory.
          // Otherwise, it proceeds with the original logic for images and other assets.
          if (assetInfo.name === 'popup.html') {
            return '[name].[ext]';
          }
          // --- FIX END ---
          if (assetInfo.name?.endsWith('.png') || assetInfo.name?.endsWith('.ico')) {
            return 'images/[name].[ext]';
          }
          return `assets/[name].[ext]`;
        },
      },
    },
  },
});

================
File: vite.config.ts
================
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
import { componentTagger } from "lovable-tagger";

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => {
  const isDevelopment = mode === 'development';

  return {
    // --- FIX: Conditionally apply server config only in development ---
    server: isDevelopment ? {
      host: "::",
      port: 8080,
    } : undefined,
    plugins: [
      react(),
      // --- FIX: Conditionally apply componentTagger only in development ---
      isDevelopment && componentTagger(),
    ].filter(Boolean),
    resolve: {
      alias: {
        "@": path.resolve(__dirname, "./src"),
      },
    },
    // --- FIX: Add build configuration to remove console logs in production ---
    build: {
      sourcemap: false, // Optional: disable sourcemaps for production
      terserOptions: {
        compress: {
          drop_console: !isDevelopment, // Remove console.log in production
        },
      },
    },
  };
});



================================================================
End of Codebase
================================================================
