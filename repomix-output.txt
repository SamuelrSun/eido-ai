This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
public/
  placeholder.svg
  robots.txt
src/
  components/
    auth/
      Auth.tsx
      AuthGuard.tsx
      PasswordChangeForm.tsx
      UserProfile.tsx
    chat/
      AttachedFilePill.tsx
      ChatBot.tsx
      ChatInput.tsx
      ChatMessage.tsx
      FileUpload.tsx
      HighlightedText.tsx
      MarkdownRenderer.tsx
      WebChatBot.tsx
    datasets/
      ClassCard.tsx
      CreateClassDialog.tsx
      FileCard.tsx
      FolderCard.tsx
      NewFolderDialog.tsx
      UploadDialog.tsx
    layout/
      sidebar/
        SidebarAccount.tsx
        SidebarHeader.tsx
        SidebarNavigation.tsx
        SidebarWidgets.tsx
      AppLayout.tsx
      AppSidebar.tsx
      MainLayout.tsx
      OracleLayout.tsx
      PageHeader.tsx
    oracle/
      HistorySidebar.tsx
    ui/
      accordion.tsx
      alert-dialog.tsx
      alert.tsx
      aspect-ratio.tsx
      avatar.tsx
      badge.tsx
      breadcrumb.tsx
      button.tsx
      card.tsx
      carousel.tsx
      chart.tsx
      checkbox.tsx
      collapsible.tsx
      command.tsx
      context-menu.tsx
      dialog.tsx
      drawer.tsx
      dropdown-menu.tsx
      form.tsx
      hover-card.tsx
      index.ts
      input-otp.tsx
      input.tsx
      label.tsx
      menubar.tsx
      navigation-menu.tsx
      pagination.tsx
      popover.tsx
      progress.tsx
      radio-group.tsx
      resizable.tsx
      scroll-area.tsx
      select.tsx
      separator.tsx
      sheet.tsx
      sidebar.tsx
      skeleton.tsx
      slider.tsx
      sonner.tsx
      switch.tsx
      table.tsx
      tabs.tsx
      textarea.tsx
      toast.tsx
      toaster.tsx
      toggle-group.tsx
      toggle.tsx
      tooltip.tsx
      use-toast.ts
  features/
    files/
      components/
        FileGrid.tsx
        NewFolderDialog.tsx
        StorageUsage.tsx
        UploadDialog.tsx
        VectorStoreUploadDialog.tsx
      pages/
        FilesPage.tsx
      types.ts
  hooks/
    use-mobile.tsx
    use-sidebar-state.ts
    use-toast.ts
  integrations/
    supabase/
      client.ts
      types.ts
  lib/
    utils.ts
  pages/
    AuthPage.tsx
    DashboardPage.tsx
    DatasetsPage.tsx
    NotFound.tsx
    OraclePage.tsx
    PlaceholderPage.tsx
    PrivacyPolicyPage.tsx
    ProfilePage.tsx
    TermsOfServicePage.tsx
  services/
    chatMessageService.ts
    classOpenAIConfig.ts
    conversationService.ts
    fileService.ts
  App.css
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
supabase/
  .branches/
    _current_branch
  .temp/
    cli-latest
    gotrue-version
    pooler-url
    postgres-version
    project-ref
    rest-version
    storage-version
  functions/
    _shared/
      cors.ts
    check-env-vars/
      index.ts
    generate-flashcards/
      index.ts
    generate-quiz/
      index.ts
    generate-title/
      index.ts
    hard-reset-weaviate-schema/
      index.ts
    inspect-weaviate-schema/
      index.ts
  config.toml
.gitignore
components.json
eslint.config.js
index.html
package.json
postcss.config.js
README.md
tailwind.config.ts
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vercel.json
vite.config.ts

================================================================
Files
================================================================

================
File: public/placeholder.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>

================
File: public/robots.txt
================
User-agent: Googlebot
Allow: /

User-agent: Bingbot
Allow: /

User-agent: Twitterbot
Allow: /

User-agent: facebookexternalhit
Allow: /

User-agent: *
Allow: /

================
File: src/components/auth/Auth.tsx
================
import { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { Loader2, ArrowRight, Eye, EyeOff } from "lucide-react";
import { useNavigate, Link } from 'react-router-dom'; // Import Link

const GoogleIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="currentColor" className="mr-2">
    <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" />
    <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" />
    <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" />
    <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" />
    <path d="M1 1h22v22H1z" fill="none" />
  </svg>
);

export function Auth() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [googleLoading, setGoogleLoading] = useState(false);
  const [authMode, setAuthMode] = useState<'signin' | 'signup'>('signin');
  const [showPassword, setShowPassword] = useState(false);
  const { toast } = useToast();
  const navigate = useNavigate();

  const handleEmailAuth = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    try {
      if (authMode === 'signup') {
        if (password.length < 10) {
          throw new Error("Password should be at least 10 characters long.");
        }
        const generatedName = email.split('@')[0];
        const { error } = await supabase.auth.signUp({
          email,
          password,
          options: {
            emailRedirectTo: `${window.location.origin}/`,
            data: {
              full_name: generatedName
            }
          }
        });
        if (error) throw error;
        toast({
          title: "Account created successfully",
          description: "We've sent you a confirmation link to complete your signup.",
        });
      } else { // 'signin'
        const { error } = await supabase.auth.signInWithPassword({ email, password });
        if (error) throw error;
        navigate('/');
      }
    } catch (error) {
      console.error('Email auth error:', error);
      let errorMessage = "An error occurred during authentication";
      if (error instanceof Error) {
        if (error.message.includes("Email not confirmed")) errorMessage = "Please check your email and confirm your address.";
        else if (error.message.includes("Invalid login credentials")) errorMessage = "Invalid email or password.";
        else if (error.message.includes("User already registered")) errorMessage = "An account with this email already exists. Please sign in or use a different email.";
        else if (error.message.includes("Password should be")) errorMessage = "Password must be at least 10 characters long.";
        else errorMessage = error.message;
      }
      toast({ title: "Authentication Error", description: errorMessage, variant: "destructive" });
    } finally {
      setLoading(false);
    }
  };

  const handleGoogleSignIn = async () => {
    setGoogleLoading(true);
    try {
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: { redirectTo: `${window.location.origin}/` },
      });
      if (error) throw error;
    } catch (error) {
      console.error('Google Sign-In error:', error);
      toast({
        title: "Google Sign-In Error",
        description: error instanceof Error ? error.message : "Could not sign in with Google. Please try again.",
        variant: "destructive",
      });
    } finally {
      setGoogleLoading(false);
    }
  };

  const toggleAuthMode = () => {
    setAuthMode(prevMode => (prevMode === 'signin' ? 'signup' : 'signin'));
  };

  const toggleShowPassword = () => {
    setShowPassword(!showPassword);
  };

  return (
    <div className="w-full">
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold text-gray-900 font-serif">
          {authMode === 'signin' ? 'Log in' : 'Sign Up'}
        </h1>
        <p className="text-sm text-gray-600 mt-2">
          {authMode === 'signin' 
            ? 'Welcome back to Eido! What will you study today?' 
            : 'Get started with your personal, educational copilot.'}
        </p>
      </div>

      <div className="space-y-6">
        <div className="grid grid-cols-1 gap-3">
          <Button
            variant="outline"
            onClick={handleGoogleSignIn}
            disabled={loading || googleLoading}
            className="w-full justify-center py-3 text-xs h-11 text-gray-700 hover:text-gray-700 hover:bg-gray-100 hover:ring-1 hover:ring-gray-800"
          >
            {googleLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <GoogleIcon />}
            Continue with Google
          </Button>
        </div>

        <div className="relative">
            <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-300" />
            </div>
            <div className="relative flex justify-center text-xs">
                <span className="bg-white px-2 text-gray-500">OR</span>
            </div>
        </div>

        <form className="space-y-6" onSubmit={handleEmailAuth}>
          <div className="space-y-4">
            {/* CORRECTED EMAIL INPUT */}
            <div className="rounded-md border border-gray-300 px-3 py-2 focus-within:ring-1 focus-within:border-primary focus-within:ring-primary">
              <Label htmlFor="email" className="block text-xs font-medium text-gray-500 uppercase">
                Email
              </Label>
              <input
                id="email"
                name="email"
                type="email"
                autoComplete="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                className="w-full p-0 border-none bg-transparent focus:outline-none focus:ring-0 text-sm placeholder:text-muted-foreground h-auto"
                placeholder="yourname@email.com"
              />
            </div>

            {/* CORRECTED PASSWORD INPUT */}
            <div className="rounded-md border border-gray-300 px-3 py-2 focus-within:ring-1 focus-within:border-primary focus-within:ring-primary">
              <div className="flex justify-between items-center">
                <Label htmlFor="password" className="block text-xs font-medium text-gray-500 uppercase">
                  Password
                </Label>
                {authMode === 'signin' && (
                  <a href="#" className="text-xs font-medium text-primary hover:underline">
                    Forgot Password?
                  </a>
                )}
              </div>
              <div className="flex items-center">
                <input
                  id="password"
                  name="password"
                  type={showPassword ? "text" : "password"}
                  autoComplete="current-password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  required
                  minLength={authMode === 'signup' ? 10 : undefined}
                  className="w-full p-0 border-none bg-transparent focus:outline-none focus:ring-0 text-sm placeholder:text-muted-foreground h-auto"
                  placeholder="••••••••••"
                />
                <button
                  type="button"
                  onClick={toggleShowPassword}
                  className="flex items-center text-gray-400 hover:text-gray-600 pl-2"
                >
                  {showPassword ? <EyeOff className="h-5 w-5" /> : <Eye className="h-5 w-5" />}
                </button>
              </div>
            </div>
          </div>

          <div>
            <Button
              type="submit"
              className="w-full flex justify-center items-center py-3 px-4 text-xs font-semibold rounded-md text-white bg-gray-800 hover:bg-gray-900 h-11"
              disabled={loading || googleLoading}
            >
              {loading ? (
                <Loader2 className="h-5 w-5 animate-spin" />
              ) : (
                <>
                  {authMode === 'signin' ? 'Log in' : 'Create Account'}
                  <ArrowRight className="ml-2 h-5 w-5" />
                </>
              )}
            </Button>
          </div>
        </form>
      </div>

      <div className="mt-8 space-y-2 text-center text-xs">
        <p className="text-gray-500">
          By signing up, you agree to the{' '}
          <Link to="/terms" className="font-medium text-gray-900 hover:underline" target="_blank">Terms of Service</Link> and{' '}
          <Link to="/privacy" className="font-medium text-gray-900 hover:underline" target="_blank">Privacy Policy</Link>.
        </p>
        <p className="text-gray-500">
          {authMode === 'signin' ? 'New user? ' : 'Already have an account? '}
          <button
            onClick={toggleAuthMode}
            className="font-medium text-gray-700 hover:text-black"
            disabled={loading || googleLoading}
          >
            {authMode === 'signin' ? 'Sign up' : 'Log in'}
          </button>
        </p>
      </div>
    </div>
  );
}

================
File: src/components/auth/AuthGuard.tsx
================
import { ReactNode, useEffect, useState } from "react";
import { Navigate, useLocation, Outlet } from "react-router-dom";
import { supabase } from "@/integrations/supabase/client";
import { Loader2 } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface AuthGuardProps {
  children?: ReactNode;
}

export function AuthGuard({ children }: AuthGuardProps) {
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);
  const [isChecking, setIsChecking] = useState(true);
  const location = useLocation();
  const { toast } = useToast();

  useEffect(() => {
    // onAuthStateChange is the most reliable way to get the session,
    // especially after an OAuth redirect. It fires when the session is ready.
    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((_event, session) => {
      setIsAuthenticated(!!session);
      // We stop checking ONLY after this initial event has fired.
      setIsChecking(false);

      if (_event === "SIGNED_IN") {
        toast({
          title: "Signed in successfully",
          description: "Welcome back!",
        });
      }
    });

    return () => {
      subscription.unsubscribe();
    };
  }, [toast]);

  // While we wait for the first auth event, show a loading indicator.
  if (isChecking) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <Loader2 className="h-12 w-12 animate-spin text-primary" />
      </div>
    );
  }

  // Once checking is complete, if the user is not authenticated, redirect them.
  if (!isAuthenticated) {
    return <Navigate to="/auth" state={{ from: location }} replace />;
  }

  // If authenticated, show the protected page content.
  return children ? <>{children}</> : <Outlet />;
}

================
File: src/components/auth/PasswordChangeForm.tsx
================
import { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { Loader2, Eye, EyeOff } from "lucide-react";

export function PasswordChangeForm() {
  const [currentPassword, setCurrentPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [showCurrentPassword, setShowCurrentPassword] = useState(false);
  const [showNewPassword, setShowNewPassword] = useState(false);
  const { toast } = useToast();

  const toggleShowCurrentPassword = () => {
    setShowCurrentPassword(!showCurrentPassword);
  };

  const toggleShowNewPassword = () => {
    setShowNewPassword(!showNewPassword);
  };

  const handlePasswordChange = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validate passwords
    if (newPassword.length < 10) {
      toast({
        title: "Password Error",
        description: "New password should be at least 10 characters long.",
        variant: "destructive",
      });
      return;
    }

    if (newPassword !== confirmPassword) {
      toast({
        title: "Password Error",
        description: "New passwords do not match.",
        variant: "destructive",
      });
      return;
    }

    setLoading(true);
    try {
      // First authenticate with current password to verify user
      const { error: signInError } = await supabase.auth.signInWithPassword({
        email: (await supabase.auth.getUser()).data.user?.email || '',
        password: currentPassword,
      });

      if (signInError) {
        throw new Error("Current password is incorrect");
      }

      // Then update to new password
      const { error: updateError } = await supabase.auth.updateUser({ 
        password: newPassword 
      });

      if (updateError) throw updateError;

      // Clear form
      setCurrentPassword('');
      setNewPassword('');
      setConfirmPassword('');
      
      toast({
        title: "Success",
        description: "Your password has been updated successfully.",
      });
    } catch (error) {
      console.error('Password change error:', error);
      toast({
        title: "Password Change Failed",
        description: error instanceof Error ? error.message : "Failed to update password. Please try again.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Change Password</CardTitle>
        <CardDescription>
          Update your account password
        </CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handlePasswordChange} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="currentPassword">Current Password</Label>
            <div className="relative">
              <Input
                id="currentPassword"
                type={showCurrentPassword ? "text" : "password"}
                value={currentPassword}
                onChange={(e) => setCurrentPassword(e.target.value)}
                required
                className="pr-10"
                placeholder="Enter current password"
              />
              <Button 
                type="button" 
                variant="ghost" 
                size="icon" 
                className="absolute right-1 top-1 h-8 w-8 text-muted-foreground"
                onClick={toggleShowCurrentPassword}
              >
                {showCurrentPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
              </Button>
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="newPassword">New Password</Label>
            <div className="relative">
              <Input
                id="newPassword"
                type={showNewPassword ? "text" : "password"}
                value={newPassword}
                onChange={(e) => setNewPassword(e.target.value)}
                required
                minLength={10}
                className="pr-10"
                placeholder="Enter new password"
              />
              <Button 
                type="button" 
                variant="ghost" 
                size="icon" 
                className="absolute right-1 top-1 h-8 w-8 text-muted-foreground"
                onClick={toggleShowNewPassword}
              >
                {showNewPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
              </Button>
            </div>
            <p className="text-xs text-muted-foreground">
              Password must be at least 10 characters long
            </p>
          </div>

          <div className="space-y-2">
            <Label htmlFor="confirmPassword">Confirm New Password</Label>
            <Input
              id="confirmPassword"
              type="password"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              required
              placeholder="Confirm new password"
            />
          </div>

          <Button 
            type="submit" 
            className="w-full"
            disabled={loading}
          >
            {loading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
            {loading ? 'Updating...' : 'Update Password'}
          </Button>
        </form>
      </CardContent>
    </Card>
  );
}

================
File: src/components/auth/UserProfile.tsx
================
// src/components/auth/UserProfile.tsx
import { useState, useEffect, useCallback } from 'react'; // Added useCallback
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { Loader2, Camera } from "lucide-react";
// useNavigate is not used in this component's current logic.
// import { useNavigate } from 'react-router-dom'; 
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"; 
import type { User } from "@supabase/supabase-js";

interface ProfileData {
  user_id: string;
  full_name: string | null;
  avatar_url: string | null;
  updated_at?: string; // Added to match potential DB schema and for optimistic updates
}

export function UserProfile() {
  const [user, setUser] = useState<User | null>(null);
  const [profile, setProfile] = useState<ProfileData | null>(null);
  const [loadingProfile, setLoadingProfile] = useState(true); // Specific loading state for profile
  const [uploadingPhoto, setUploadingPhoto] = useState(false);
  const { toast } = useToast();
  // const navigate = useNavigate(); // Can be removed if not used

  const fetchProfileForUser = useCallback(async (authUser: User | null) => {
    if (!authUser?.id) {
      setProfile(null);
      setLoadingProfile(false);
      return;
    }

    setLoadingProfile(true);
    console.log("UserProfile: Fetching profile for user_id:", authUser.id);
    try {
      const { data: profileData, error: profileError } = await supabase
        .from('profiles')
        .select('user_id, full_name, avatar_url, updated_at') // Ensure to select all needed fields
        .eq('user_id', authUser.id)
        .single(); 
            
      if (profileError) {
        if (profileError.code === 'PGRST116') {
          console.log("UserProfile: No profile found for user_id:", authUser.id);
          setProfile(null);
        } else {
          console.error("UserProfile: Error fetching profile:", profileError);
          toast({ title: "Error", description: "Could not fetch profile information.", variant: "destructive" });
          setProfile(null);
        }
      } else {
        setProfile(profileData as ProfileData);
        console.log("UserProfile: Profile data loaded:", profileData);
      }
    } catch (error) {
      console.error('UserProfile: Exception in fetchProfileForUser:', error);
      toast({ title: "Error", description: "An unexpected error occurred while fetching profile.", variant: "destructive" });
      setProfile(null);
    } finally {
      setLoadingProfile(false);
    }
  }, [toast]); // toast is a stable dependency from useToast

  useEffect(() => {
    // Initial fetch of session and profile
    const initialFetch = async () => {
        const { data: { session }, error: sessionError } = await supabase.auth.getSession();
        if (sessionError) {
            console.error("Error fetching initial session:", sessionError);
            setLoadingProfile(false); // Ensure loading stops
            return;
        }
        const authUser = session?.user || null;
        setUser(authUser);
        await fetchProfileForUser(authUser);
    };
    initialFetch();

    // Listen for auth state changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (_event, session) => {
        console.log("UserProfile: Auth state changed, event:", _event);
        const authUser = session?.user || null;
        setUser(authUser);
        // Re-fetch profile when user state changes (e.g., sign-in, sign-out, token refresh)
        await fetchProfileForUser(authUser);
      }
    );

    return () => {
      subscription?.unsubscribe();
    };
  }, [fetchProfileForUser]); // fetchProfileForUser is memoized with useCallback

  const handleProfilePhotoChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file || !user) return;

    if (file.size > 5 * 1024 * 1024) {
      toast({ title: "File too large", description: "Profile photo must be less than 5MB", variant: "destructive" });
      return;
    }
    if (!file.type.startsWith('image/')) {
      toast({ title: "Invalid file type", description: "Please upload an image file", variant: "destructive" });
      return;
    }
    
    setUploadingPhoto(true);
    try {
      const fileExt = file.name.split('.').pop();
      const fileName = `${user.id}-${Date.now()}.${fileExt}`;
      const filePath = `${fileName}`;
      
      const { error: uploadError } = await supabase.storage
        .from('profiles') 
        .upload(filePath, file, { cacheControl: '3600', upsert: true });
        
      if (uploadError) throw uploadError;
      
      const { data: publicUrlData } = supabase.storage
        .from('profiles') 
        .getPublicUrl(filePath);
      
      const publicUrl = publicUrlData.publicUrl;
      const newUpdatedAt = new Date().toISOString();
      
      const { error: updateError } = await supabase
        .from('profiles')
        .update({ avatar_url: publicUrl, updated_at: newUpdatedAt }) 
        .eq('user_id', user.id); 
        
      if (updateError) throw updateError;
      
      setProfile(prevProfile => ({
        ...(prevProfile || { user_id: user.id, full_name: null, avatar_url: null }), 
        avatar_url: publicUrl,
        updated_at: newUpdatedAt
      }));
      
      toast({ title: "Profile photo updated", description: "Your new photo is now active." });
    } catch (error: any) {
      console.error('UserProfile: Error uploading photo:', error);
      toast({
        title: "Upload failed",
        description: error.message || "Failed to upload profile photo. Please try again.",
        variant: "destructive",
      });
    } finally {
      setUploadingPhoto(false);
    }
  };

  if (loadingProfile) {
    return (
      <div className="flex justify-center items-center p-4">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    );
  }

  if (!user) {
    return <p className="p-4 text-sm text-muted-foreground">Please sign in to view your profile.</p>; 
  }

  const userInitials = profile?.full_name 
    ? profile.full_name.split(' ').map((n: string) => n[0]).join('').toUpperCase()
    : user.email?.charAt(0).toUpperCase() || "?";

  return (
    <Card>
      <CardHeader>
        <CardTitle>User Profile</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex flex-col items-center gap-2">
          <div className="relative group">
            <Avatar className="h-24 w-24 border-2 border-white shadow-md">
              {profile?.avatar_url && (
                <AvatarImage src={`${profile.avatar_url}?t=${profile.updated_at || Date.now()}`} alt={profile?.full_name || user.email || "User Avatar"} />
              )}
              <AvatarFallback className="text-xl">{userInitials}</AvatarFallback>
            </Avatar>
            <label 
              htmlFor="avatar-upload"
              className="absolute bottom-0 right-0 p-1 bg-primary text-primary-foreground rounded-full cursor-pointer shadow-md hover:bg-primary/90 transition-colors"
            >
              <Camera className="h-4 w-4" />
              <span className="sr-only">Upload profile photo</span>
            </label>
            <input 
              type="file" 
              id="avatar-upload" 
              className="hidden" 
              accept="image/*"
              onChange={handleProfilePhotoChange}
              disabled={uploadingPhoto}
            />
          </div>
          {uploadingPhoto && (
            <div className="flex items-center gap-1 text-sm text-muted-foreground">
              <Loader2 className="h-3 w-3 animate-spin" />
              <span>Uploading...</span>
            </div>
          )}
        </div>
        
        {profile?.full_name && (
          <div>
            <p className="text-sm font-medium text-muted-foreground">Name</p>
            <p>{profile.full_name}</p>
          </div>
        )}
        
        <div>
          <p className="text-sm font-medium text-muted-foreground">Email</p>
          <p>{user.email}</p>
        </div>
      </CardContent>
    </Card>
  );
}

================
File: src/components/chat/AttachedFilePill.tsx
================
// src/components/chat/AttachedFilePill.tsx
import React from 'react';
import { FileText, Image as ImageIcon, X } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';

export interface AttachedFile {
  id: string;
  name: string;
  type: string; // Keep as string to handle various MIME types
  content: string; // Base64 encoded content
}

interface AttachedFilePillProps {
  file: AttachedFile;
  onRemove: (fileId: string) => void;
}

export const AttachedFilePill: React.FC<AttachedFilePillProps> = ({ file, onRemove }) => {
  const isImage = file.type.startsWith('image/');
  
  return (
    <div className="group relative flex items-center gap-2 pl-2 pr-1 py-1 rounded-md bg-stone-100 border border-stone-200 max-w-[200px] h-8">
      {isImage ? (
        <ImageIcon className="h-4 w-4 text-stone-500 flex-shrink-0" />
      ) : (
        <FileText className="h-4 w-4 text-stone-500 flex-shrink-0" />
      )}
      <span className="text-sm text-stone-700 truncate flex-grow" title={file.name}>
        {file.name}
      </span>
      <Button
        variant="ghost"
        size="icon"
        className="h-6 w-6 rounded-md flex-shrink-0 text-stone-400 hover:text-stone-700 hover:bg-stone-200 opacity-50 group-hover:opacity-100 transition-opacity"
        onClick={(e) => {
          e.stopPropagation(); // Prevent any parent onClick handlers
          onRemove(file.id);
        }}
      >
        <X className="h-4 w-4" />
        <span className="sr-only">Remove {file.name}</span>
      </Button>
    </div>
  );
};

================
File: src/components/chat/ChatBot.tsx
================
// src/components/chat/ChatBot.tsx
import { useState, useRef, useEffect } from "react";
import { Bot, AlertCircle } from "lucide-react";
import { Button } from "@/components/ui/button";
import { ChatMessage } from "./ChatMessage";
import { ChatInput } from "./ChatInput";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import type { OpenAIConfig } from "@/services/classOpenAIConfig";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { ScrollArea } from "@/components/ui/scroll-area";
import { cn } from "@/lib/utils";
import { User } from "@supabase/supabase-js";

export interface Message {
  role: "user" | "assistant" | "system";
  content: string;
}

interface ProfileData {
  full_name: string | null;
  avatar_url: string | null;
}

interface ChatBotProps {
  placeholder?: string;
  suggestions?: string[];
  knowledgeBase?: string;
  openAIConfig?: OpenAIConfig;
  classId?: string;
  disableToasts?: boolean;
  loadingIndicator?: React.ReactNode;
  onResponseGenerationStateChange?: (isGenerating: boolean) => void;
  messages?: Message[];
  onMessagesChange?: (messagesOrUpdater: Message[] | ((prevMessages: Message[]) => Message[])) => void;
  className?: string;
  disabled?: boolean;
}

export function ChatBot({
  placeholder = "Ask about your class materials...",
  suggestions = [],
  knowledgeBase,
  openAIConfig,
  classId,
  disableToasts = false,
  loadingIndicator,
  onResponseGenerationStateChange,
  messages: externalMessages,
  onMessagesChange,
  className,
  disabled,
}: ChatBotProps) {
  const [internalMessages, setInternalMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [userProfile, setUserProfile] = useState<ProfileData | null>(null);
  const [user, setUser] = useState<User | null>(null);

  const messages = externalMessages !== undefined ? externalMessages : internalMessages;
  
  const setMessagesWrapper = (newMessagesOrFn: Message[] | ((prevMessages: Message[]) => Message[])) => {
    const newMessages = typeof newMessagesOrFn === 'function'
      ? newMessagesOrFn(messages)
      : newMessagesOrFn;

    if (onMessagesChange) {
      onMessagesChange(newMessages);
    } else {
      setInternalMessages(newMessages);
    }
  };

  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  useEffect(() => {
    const fetchUserAndProfile = async () => {
        const { data: { session } } = await supabase.auth.getSession();
        const currentUser = session?.user;
        setUser(currentUser || null);

        if (currentUser) {
            const { data: profileData, error } = await supabase
                .from('profiles')
                .select('full_name, avatar_url')
                .eq('user_id', currentUser.id)
                .single();

            if (error) {
                console.error("Error fetching profile for chat:", error);
            } else if (profileData) {
                setUserProfile(profileData);
            }
        }
    };
    fetchUserAndProfile();
  }, []);


  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
    }
  }, [messages]);

  useEffect(() => {
    onResponseGenerationStateChange?.(isLoading);
  }, [isLoading, onResponseGenerationStateChange]);

  const handleSendMessage = async (messageText: string) => {
    if (disabled || !messageText.trim()) return;

    setErrorMessage(null);
    const userMessage: Message = { role: "user", content: messageText };

    const messagesWithUserQuery = [...messages, userMessage];
    
    setMessagesWrapper(messagesWithUserQuery);
    setIsLoading(true);

    try {
      const { data, error: functionError } = await supabase.functions.invoke("chat", {
        body: {
          message: messageText,
          history: messages,
          openAIConfig: openAIConfig,
          knowledgeBase: knowledgeBase,
          class_id: classId
        }
      });

      if (functionError) throw new Error(`Service connection error: ${functionError.message}`);
      if (data.error) {
        setErrorMessage(data.error);
        const aiErrorMessage: Message = { role: "assistant", content: `Sorry, I encountered an issue: ${data.error}` };
        setMessagesWrapper([...messagesWithUserQuery, aiErrorMessage]);
        if (!disableToasts) toast({ title: "AI Response Error", description: data.error, variant: "destructive" });
        return;
      }
      const aiMessage: Message = { role: "assistant", content: data.response };

      setMessagesWrapper([...messagesWithUserQuery, aiMessage]);

    } catch (error: unknown) {
      let friendlyErrorMessage = "Failed to get a response. Please try again.";
      if (error instanceof Error) {
        if (error.message.includes("Service connection error")) friendlyErrorMessage = "Could not connect to the AI service.";
        else if (error.message.includes("Assistant run timed out")) friendlyErrorMessage = "The AI took too long to respond.";
        else friendlyErrorMessage = error.message;
      }
      setErrorMessage(friendlyErrorMessage);
      const aiErrorMessage: Message = { role: "assistant", content: `Sorry, I couldn't process your request. ${friendlyErrorMessage}` };
      setMessagesWrapper([...messagesWithUserQuery, aiErrorMessage]);
      if (!disableToasts) toast({ title: "Chat Error", description: friendlyErrorMessage, variant: "destructive" });
    } finally {
      setIsLoading(false);
    }
  };
  
  const getUserName = () => {
    if (userProfile?.full_name) return userProfile.full_name;
    if (user?.email) return user.email.split('@')[0];
    return "You";
  }

  return (
    <div className={cn("flex flex-col h-full", className)}>
      <div className="flex-1 h-0 overflow-hidden">
        <ScrollArea className="h-full p-4">
          <div className="space-y-4">
            {messages.map((message, index) => (
              <ChatMessage
                key={index}
                content={message.content}
                isUser={message.role === "user"}
                senderName={message.role === 'user' ? getUserName() : 'Eido AI'}
                avatarUrl={message.role === 'user' ? userProfile?.avatar_url : undefined}
              />
            ))}

            {errorMessage && !isLoading && (
              <Alert variant="destructive" className="my-2">
                <AlertCircle className="h-4 w-4" />
                <AlertTitle>Error</AlertTitle>
                <AlertDescription>{errorMessage}</AlertDescription>
              </Alert>
            )}

            {isLoading && loadingIndicator}

            {messages.length === 0 && !isLoading && (
              <div className="text-center py-4">
                <p className="text-sm text-muted-foreground mb-4">
                  {knowledgeBase ? `I can help answer questions about ${knowledgeBase}.` : "How can I help you today?"}
                </p>
                {suggestions.length > 0 && (
                  <div className="space-y-2">
                    <p className="text-sm font-medium">Try asking:</p>
                    <div className="flex flex-wrap gap-2 justify-center">
                      {suggestions.map((suggestion, i) => (
                        <Button
                          key={i}
                          variant="outline"
                          size="sm"
                          onClick={() => handleSendMessage(suggestion)}
                          className="text-xs"
                          disabled={isLoading || disabled}
                        >
                          {suggestion}
                        </Button>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>
        </ScrollArea>
      </div>

      <div className="p-4 border-t mt-auto flex-shrink-0">
        <ChatInput
          onSend={handleSendMessage}
          isLoading={isLoading}
          placeholder={placeholder}
          disabled={disabled}
        />
      </div>
    </div>
  );
}

================
File: src/components/chat/ChatInput.tsx
================
// src/components/chat/ChatInput.tsx
import { useState, FormEvent } from "react";
import { SendHorizontal } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";

interface ChatInputProps {
  onSend: (message: string) => void;
  suggestions?: string[];
  isLoading?: boolean;
  placeholder?: string; // Added placeholder prop
  disabled?: boolean;
}

export function ChatInput({
  onSend,
  suggestions = [], 
  isLoading = false,
  placeholder = "Type your message here..." // Added placeholder with a default
}: ChatInputProps) {
  const [input, setInput] = useState("");

  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();
    if (input.trim()) {
      onSend(input);
      setInput("");
    }
  };

  const handleSuggestionClick = (suggestion: string) => {
    onSend(suggestion);
  };

  return (
    <div className="mt-4">
      {/* This suggestions block was in your original ChatInput.tsx, keeping it. */}
      {suggestions.length > 0 && (
        <div className="mb-3 flex flex-wrap gap-2">
          {suggestions.map((suggestion, index) => (
            <Button
              key={index}
              variant="outline"
              size="sm"
              onClick={() => handleSuggestionClick(suggestion)}
              className="text-sm bg-white" // Style from your original
            >
              {suggestion}
            </Button>
          ))}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="flex items-center gap-2">
        <Input
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder={placeholder} // Use the placeholder prop here
          className="flex-grow"
          disabled={isLoading}
        />
        <Button type="submit" disabled={isLoading || !input.trim()}>
          <SendHorizontal className="h-5 w-5 mr-1" />
          Send
        </Button>
      </form>
    </div>
  );
}

================
File: src/components/chat/ChatMessage.tsx
================
// src/components/chat/ChatMessage.tsx
import React, { forwardRef } from 'react';
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { MarkdownRenderer } from './MarkdownRenderer';
import { cn } from '@/lib/utils';
import { FileText, Image as ImageIcon } from 'lucide-react';

interface ChatMessageProps {
  content: string;
  isUser: boolean;
  senderName: string;
  avatarUrl?: string | null;
  isSelected?: boolean;
  onClick?: () => void;
  onCitationClick?: (sourceNumber: number) => void;
  attachedFiles?: { name: string; type: string; }[];
}

export const ChatMessage = forwardRef<HTMLDivElement, ChatMessageProps>(({
    content,
    isUser,
    senderName,
    avatarUrl,
    isSelected,
    onClick,
    onCitationClick,
    attachedFiles,
}, ref) => {
  
  const userInitials = senderName.split(' ').map(n => n[0]).join('').toUpperCase();

  return (
    <div 
        ref={ref}
        onClick={onClick}
        className={cn(
            "group flex h-fit w-full flex-col gap-2 rounded-md p-2 text-left md:flex-row transition-all duration-200 ease-in-out",
            !isUser && "cursor-pointer",
            isSelected 
                ? "bg-stone-100 border border-stone-400"
                : "border border-transparent hover:bg-stone-100"
        )}
    >
        {/* Avatar Section */}
        <div className="flex h-9 w-9 flex-shrink-0 items-center justify-center rounded">
            <Avatar className="h-9 w-9">
                {isUser && avatarUrl ? (
                    <AvatarImage src={avatarUrl} alt={senderName} />
                ) : !isUser ? (
                    <AvatarImage src="/chatboteido.png" alt="Eido AI Avatar" />
                ) : null}
                <AvatarFallback className="text-xs bg-stone-200">{userInitials}</AvatarFallback>
            </Avatar>
        </div>

        {/* Message Content Section */}
        <div className="max-w-message items-left flex w-full flex-1 flex-col flex-wrap gap-x-1 md:flex-nowrap">
            <div className="flex w-full flex-col gap-y-1 py-1">
                {/* Render Attached File Pills for User Messages if they exist */}
                {isUser && attachedFiles && attachedFiles.length > 0 && (
                    <div className="flex flex-wrap gap-2 mb-2">
                        {attachedFiles.map((file, index) => (
                            <div key={index} className="flex items-center gap-1.5 pl-2 pr-2 py-1 rounded-md bg-stone-100 border border-stone-200 max-w-[180px]">
                                {file.type.startsWith('image/') ? 
                                    <ImageIcon className="h-3.5 w-3.5 text-stone-500 flex-shrink-0" /> : 
                                    <FileText className="h-3.5 w-3.5 text-stone-500 flex-shrink-0" />
                                }
                                <span className="text-xs text-stone-600 truncate" title={file.name}>
                                    {file.name}
                                </span>
                            </div>
                        ))}
                    </div>
                )}
                
                {/* Render the main text content */}
                {content && (
                    <div className="text-sm text-stone-700 flex flex-col gap-y-1 whitespace-pre-wrap [overflow-wrap:anywhere] md:max-w-4xl">
                       <MarkdownRenderer content={content} onCitationClick={onCitationClick} />
                    </div>
                )}
            </div>
        </div>
    </div>
  );
});

================
File: src/components/chat/FileUpload.tsx
================
import { useState } from "react";
import { Upload, X, FileUp } from "lucide-react";
import { Button } from "@/components/ui/button";

interface FileUploadProps {
  onFileUpload: (file: File) => void;
  compact?: boolean;
}

export function FileUpload({ onFileUpload, compact = false }: FileUploadProps) {
  const [file, setFile] = useState<File | null>(null);
  const [isDragOver, setIsDragOver] = useState(false);

  const handleFileDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      const uploadedFile = e.dataTransfer.files[0];
      setFile(uploadedFile);
      onFileUpload(uploadedFile);
    }
  };
  
  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const uploadedFile = e.target.files[0];
      setFile(uploadedFile);
      onFileUpload(uploadedFile);
    }
  };
  
  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(true);
  };
  
  const handleDragLeave = () => {
    setIsDragOver(false);
  };
  
  const removeFile = () => {
    setFile(null);
  };

  if (compact) {
    return (
      <div>
        {!file ? (
          <div
            className={`border-2 border-dashed rounded-lg p-2 text-center ${
              isDragOver ? "border-cybercoach-teal bg-cybercoach-teal/5" : "border-gray-300"
            }`}
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
            onDrop={handleFileDrop}
          >
            <p className="text-xs text-gray-500">
              <span className="font-semibold">Drop file</span> or 
              <label htmlFor="compact-file-upload" className="text-cybercoach-teal cursor-pointer ml-1">
                browse
              </label>
            </p>
            <input
              type="file"
              className="hidden"
              id="compact-file-upload"
              accept=".pdf,.docx,.pptx,.txt"
              onChange={handleFileSelect}
            />
          </div>
        ) : (
          <div className="flex items-center justify-between bg-cybercoach-teal/10 p-2 rounded-lg">
            <div className="flex items-center overflow-hidden">
              <FileUp className="h-4 w-4 text-cybercoach-teal flex-shrink-0 mr-2" />
              <span className="text-xs font-medium truncate max-w-[120px]">
                {file.name}
              </span>
            </div>
            <Button
              variant="ghost"
              size="icon"
              className="h-6 w-6"
              onClick={removeFile}
            >
              <X className="h-3 w-3" />
            </Button>
          </div>
        )}
      </div>
    );
  }

  return (
    <div className="mb-6">
      {!file ? (
        <div
          className={`border-2 border-dashed rounded-lg p-6 text-center ${
            isDragOver ? "border-cybercoach-teal bg-cybercoach-teal/5" : "border-gray-300"
          }`}
          onDragOver={handleDragOver}
          onDragLeave={handleDragLeave}
          onDrop={handleFileDrop}
        >
          <FileUp className="mx-auto h-10 w-10 text-gray-400 mb-2" />
          <p className="mb-2 text-sm text-gray-500">
            <span className="font-semibold">Click to upload</span> or drag and drop
          </p>
          <p className="text-xs text-gray-500">
            PDF, DOCX, PPTX or TXT (MAX. 10MB)
          </p>
          <input
            type="file"
            className="hidden"
            id="file-upload"
            accept=".pdf,.docx,.pptx,.txt"
            onChange={handleFileSelect}
          />
          <label htmlFor="file-upload">
            <Button variant="outline" className="mt-4" size="sm" asChild>
              <span>
                <Upload className="h-4 w-4 mr-2" />
                Select File
              </span>
            </Button>
          </label>
        </div>
      ) : (
        <div className="flex items-center justify-between bg-cybercoach-teal/10 p-3 rounded-lg">
          <div className="flex items-center">
            <FileUp className="h-5 w-5 text-cybercoach-teal mr-2" />
            <span className="text-sm font-medium truncate max-w-[200px]">
              {file.name}
            </span>
            <span className="text-xs text-gray-500 ml-2">
              {(file.size / 1024).toFixed(1)} KB
            </span>
          </div>
          <Button
            variant="ghost"
            size="icon"
            className="h-8 w-8"
            onClick={removeFile}
          >
            <X className="h-4 w-4" />
          </Button>
        </div>
      )}
    </div>
  );
}

================
File: src/components/chat/HighlightedText.tsx
================
// src/components/chat/HighlightedText.tsx
import React from 'react';

interface HighlightedTextProps {
  text?: string;
  keywords?: string[];
}

export const HighlightedText = ({ text = '', keywords = [] }: HighlightedTextProps) => {
  if (keywords.length === 0 || !text) {
    return <p className="whitespace-pre-wrap">{text}</p>;
  }

  // Escape special characters for each keyword and join them with '|' for the regex
  const escapedKeywords = keywords.map(kw => kw.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'));
  const regex = new RegExp(`(${escapedKeywords.join('|')})`, 'gi');
  const parts = text.split(regex);

  return (
    <p className="whitespace-pre-wrap">
      {parts.map((part, index) => {
        // Check if the part is one of the keywords (case-insensitive)
        const isHighlight = keywords.some(kw => kw.toLowerCase() === part.toLowerCase());
        if (isHighlight) { 
          return (
            <mark key={index} className="bg-yellow-300/60 text-black/90 px-1 rounded-sm">
              {part}
            </mark>
          );
        } else {
          return <span key={index}>{part}</span>;
        }
      })}
    </p>
  );
};

================
File: src/components/chat/MarkdownRenderer.tsx
================
// src/components/chat/MarkdownRenderer.tsx
import React, { useEffect, useRef } from 'react';

interface MarkdownRendererProps {
  content: string;
  onCitationClick?: (sourceNumber: number) => void;
}

export function MarkdownRenderer({ content, onCitationClick }: MarkdownRendererProps) {
  
  const renderMarkdown = (text: string) => {
    let rendered = text;

    rendered = rendered.replace(/(\*\*|__)(.*?)\1/g, '<strong>$2</strong>');
    rendered = rendered.replace(/(?<!\S)(\*|_)(?!\s)((?:(?!\1).)+)(?<!\s)\1(?!\S)/g, '<em>$2</em>');
    rendered = rendered.replace(/(?:^\s*-\s+(.+)$\n?)+/gm, match => `<ul class="list-disc pl-5 my-2 space-y-0.5">${match.split('\n').filter(Boolean).map(line => `<li>${line.replace(/^\s*-\s+/, '')}</li>`).join('')}</ul>`);
    rendered = rendered.replace(/(?:^\s*\d+\.\s+(.+)$\n?)+/gm, match => `<ol class="list-decimal pl-5 my-2 space-y-0.5">${match.split('\n').filter(Boolean).map(line => `<li>${line.replace(/^\s*\d+\.\s+/, '')}</li>`).join('')}</ol>`);
    rendered = rendered.replace(/`([^`]+)`/g, '<code class="bg-gray-100 dark:bg-gray-800 px-1 rounded text-sm">$1</code>');
    
    // Render citations as "[SOURCE #]"
    rendered = rendered.replace(/\(SOURCE (\d+)\)/g, (match, numberStr) => {
      return `<span class="source-citation" data-source-number="${numberStr}">[SOURCE ${numberStr}]</span>`;
    });

    rendered = rendered.replace(/\n/g, '<br />');
    
    return rendered;
  };

  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const container = containerRef.current;
    if (container && onCitationClick) {
      const handleClick = (event: MouseEvent) => {
        const target = event.target as HTMLElement;
        if (target.classList.contains('source-citation')) {
          const sourceNumber = target.getAttribute('data-source-number');
          if (sourceNumber) {
            event.preventDefault();
            onCitationClick(parseInt(sourceNumber, 10));
          }
        }
      };
      container.addEventListener('click', handleClick);
      return () => {
        if (container) {
          container.removeEventListener('click', handleClick);
        }
      };
    }
  }, [content, onCitationClick]);
  
  const citationStyles = `
    .source-citation {
      font-size: 0.75em;
      vertical-align: super;
      color: #005780;
      font-weight: 600;
      cursor: pointer;
      padding: 0 2px;
      text-decoration: none;
      border-radius: 4px;
    }
    .source-citation:hover {
      background-color: #e0f2fe;
      text-decoration: underline;
    }
  `;

  return (
    <>
      <style>{citationStyles}</style>
      <div 
        ref={containerRef}
        className="markdown-content prose dark:prose-invert prose-sm max-w-none"
        dangerouslySetInnerHTML={{ __html: renderMarkdown(content) }}
      />
    </>
  );
}

================
File: src/components/chat/WebChatBot.tsx
================
// src/components/chat/WebChatBot.tsx
import { useState, useRef, useEffect } from "react";
import { Send, Globe, AlertCircle } from "lucide-react";
import { Button } from "@/components/ui/button";
import { ChatMessage } from "./ChatMessage";
import { ChatInput } from "./ChatInput";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { ScrollArea } from "@/components/ui/scroll-area";
import { cn } from "@/lib/utils";

export interface Message { 
  role: "user" | "assistant" | "system";
  content: string;
}

interface WebChatBotProps {
  placeholder?: string;
  suggestions?: string[];
  disableToasts?: boolean;
  loadingIndicator?: React.ReactNode;
  onResponseGenerationStateChange?: (isGenerating: boolean) => void;
  messages?: Message[]; 
  onMessagesChange?: (messagesOrUpdater: Message[] | ((prevMessages: Message[]) => Message[])) => void;
  className?: string;
  disabled?: boolean;
}

export function WebChatBot({
  placeholder = "Search the web...",
  suggestions = [],
  disableToasts = false,
  loadingIndicator,
  onResponseGenerationStateChange,
  messages: externalMessages,
  onMessagesChange,
  className,
  disabled,
}: WebChatBotProps) {
  const [internalMessages, setInternalMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);

  const messages = externalMessages !== undefined ? externalMessages : internalMessages;
  
  const setMessagesWrapper = (newMessagesOrFn: Message[] | ((prevMessages: Message[]) => Message[])) => {
    if (onMessagesChange) {
      if (typeof newMessagesOrFn === 'function' && externalMessages) {
        onMessagesChange(newMessagesOrFn(externalMessages));
      } else if (Array.isArray(newMessagesOrFn)) {
        onMessagesChange(newMessagesOrFn);
      }
    } else { 
      setInternalMessages(newMessagesOrFn);
    }
  };

  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
    }
  }, [messages]);

  useEffect(() => {
    onResponseGenerationStateChange?.(isLoading);
  }, [isLoading, onResponseGenerationStateChange]);

  const handleSendMessage = async (messageText: string) => {
    if (disabled || !messageText.trim()) return;
    setErrorMessage(null);
    const userMessage: Message = { role: "user", content: messageText };
    
    const currentMessagesForAPI = externalMessages ? [...externalMessages, userMessage] : [...internalMessages, userMessage];
    setMessagesWrapper(prevMessages => [...prevMessages, userMessage]);
    setIsLoading(true);

    try {
      const { data, error: functionError } = await supabase.functions.invoke("web-chat", {
        body: { message: messageText, history: currentMessagesForAPI.slice(0, -1) } // Pass history without the latest message
      });

      if (functionError) throw new Error(`Service connection error: ${functionError.message}`);
      if (data.error) {
        setErrorMessage(data.error);
        const aiErrMsg: Message = { role: "assistant", content: `Sorry, an issue occurred: ${data.error}` };
        setMessagesWrapper(prev => [...prev, aiErrMsg]);
        if (!disableToasts) toast({ title: "AI Error", description: data.error, variant: "destructive" });
        return;
      }
      const aiMessage: Message = { role: "assistant", content: data.response };
      setMessagesWrapper(prev => [...prev, aiMessage]);
    } catch (error: unknown) {
      let friendlyMsg = "Failed to get response.";
      if (error instanceof Error) friendlyMsg = error.message.includes("Service connection") ? "Connection issue." : error.message;
      setErrorMessage(friendlyMsg);
      const aiErrMsg: Message = { role: "assistant", content: `Sorry, couldn't process: ${friendlyMsg}` };
      setMessagesWrapper(prev => [...prev, aiErrMsg]);
      if (!disableToasts) toast({ title: "Chat Error", description: friendlyMsg, variant: "destructive" });
    } finally { setIsLoading(false); }
  };

  return (
    <div className={cn("flex flex-col h-full w-full", className)}>
      <div className="flex-1 h-0 overflow-hidden">
        <ScrollArea className="h-full p-4">
          <div className="space-y-4">
            {messages.map((message, index) => (
              <ChatMessage key={index} content={message.content} isUser={message.role === "user"} />
            ))}
            {errorMessage && !isLoading && (
              <Alert variant="destructive" className="my-2">
                <AlertCircle className="h-4 w-4" /> <AlertTitle>Error</AlertTitle> <AlertDescription>{errorMessage}</AlertDescription>
              </Alert>
            )}
            {isLoading && loadingIndicator}
            {messages.length === 0 && !isLoading && (
              <div className="text-center py-4">
                <p className="text-sm text-muted-foreground mb-4">I can search the web for information for you.</p>
                {suggestions.length > 0 && (
                  <div className="space-y-2">
                    <p className="text-sm font-medium">Try asking:</p>
                    <div className="flex flex-wrap gap-2 justify-center">
                      {suggestions.map((suggestion, i) => (
                        <Button key={i} variant="outline" size="sm" onClick={() => handleSendMessage(suggestion)} className="text-xs" disabled={isLoading || disabled}>
                          {suggestion}
                        </Button>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>
        </ScrollArea>
      </div>

      <div className="p-4 border-t flex-shrink-0">
        <ChatInput onSend={handleSendMessage} isLoading={isLoading} placeholder={placeholder} disabled={disabled} />
      </div>
    </div>
  );
}

================
File: src/components/datasets/ClassCard.tsx
================
// src/components/datasets/ClassCard.tsx
import React from 'react';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { MoreHorizontal, Trash2 } from 'lucide-react';

interface ClassCardProps {
  id: string;
  className: string; // Renamed from 'name'
  files: number;
  size: string;
  isSelected: boolean;
  onClick: () => void;
  onDelete: (id: string, className: string) => void; // Renamed 'name' to 'className'
}

export const ClassCard: React.FC<ClassCardProps> = ({ id, className, files, size, isSelected, onClick, onDelete }) => { // Renamed 'name' to 'className'
  const handleDeleteClick = (e: React.MouseEvent) => {
    e.stopPropagation(); // Prevent the card's onClick from firing
    onDelete(id, className); // Renamed 'name' to 'className'
  };

  return (
    <div
      onClick={onClick}
      className={cn(
        "group p-3 rounded-lg cursor-pointer transition-all border relative",
        isSelected
          ? 'bg-stone-200 border-stone-400'
          : 'bg-stone-100 border-stone-200 hover:bg-stone-200 hover:border-stone-300'
    )}>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button
            variant="ghost"
            size="icon"
            className="absolute top-2 right-2 h-7 w-7 opacity-0 group-hover:opacity-100 transition-opacity"
            onClick={(e) => e.stopPropagation()}
          >
            <MoreHorizontal className="h-4 w-4" />
            <span className="sr-only">Class Options</span>
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end">
          <DropdownMenuItem
            onClick={handleDeleteClick}
            className="text-destructive focus:text-destructive focus:bg-destructive/10"
          >
            <Trash2 className="mr-2 h-4 w-4" />
            Delete Class
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>

      <div className="mb-2">
        <h3 className="font-semibold text-sm text-stone-700 truncate pr-8" title={className}>{className}</h3> {/* Renamed 'name' to 'className' */}
      </div>
      <div className="text-xs text-muted-foreground">
        <span>{files} Files</span>
        <span className="mx-2">•</span>
        <span>{size}</span>
      </div>
    </div>
  );
};

================
File: src/components/datasets/CreateClassDialog.tsx
================
// src/components/datasets/CreateClassDialog.tsx
import React, { useState } from 'react';
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Loader2 } from 'lucide-react';

interface CreateClassDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (className: string) => void;
  isLoading: boolean;
}

export const CreateClassDialog: React.FC<CreateClassDialogProps> = ({ isOpen, onClose, onSubmit, isLoading }) => {
  const [className, setClassName] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (className.trim()) {
      onSubmit(className.trim());
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[425px]">
        <form onSubmit={handleSubmit}>
          <DialogHeader>
            <DialogTitle>Create New Class</DialogTitle>
            <DialogDescription>
              Classes are the top-level containers for your course materials. Give your new class a name to get started.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="name" className="text-right">
                Name
              </Label>
              <Input
                id="name"
                value={className}
                onChange={(e) => setClassName(e.target.value)}
                className="col-span-3"
                placeholder="e.g., ITP-216: Applied Python"
                disabled={isLoading}
              />
            </div>
          </div>
          <DialogFooter>
            <Button type="button" variant="ghost" onClick={onClose} disabled={isLoading}>Cancel</Button>
            <Button type="submit" disabled={isLoading || !className.trim()}>
              {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              {isLoading ? 'Creating...' : 'Create Class'}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
};

================
File: src/components/datasets/FileCard.tsx
================
// src/components/datasets/FileCard.tsx
import React from 'react';
import { FileText } from 'lucide-react';

interface FileCardProps {
  name: string;
  date: string;
  size: string;
}

export const FileCard: React.FC<FileCardProps> = ({ name, date, size }) => {
  return (
    <div className="bg-stone-50 p-3 rounded-lg border border-stone-200 hover:border-stone-300 cursor-pointer transition-colors">
        <div className="flex items-start mb-2">
            <div className="p-2 bg-white rounded-md border border-stone-200 mr-3">
                 <FileText className="h-5 w-5 text-stone-600" />
            </div>
            <h3 className="font-semibold text-sm text-stone-700 truncate" title={name}>{name}</h3>
        </div>
        <div className="text-xs text-muted-foreground">
            <span>{date}</span>
            <span className="mx-2">•</span>
            <span>{size}</span>
        </div>
    </div>
  );
};

================
File: src/components/datasets/FolderCard.tsx
================
// src/components/datasets/FolderCard.tsx
import React from 'react';
import { cn } from '@/lib/utils';
import { Folder } from 'lucide-react';

interface FolderCardProps {
  folderName: string; // Renamed from 'name'
  files: number;
  size: string;
  isSelected: boolean;
  onClick: () => void;
}

export const FolderCard: React.FC<FolderCardProps> = ({ folderName, files, size, isSelected, onClick }) => { // Renamed 'name' to 'folderName'
  return (
    <div
        onClick={onClick}
        className={cn(
        "p-3 rounded-lg cursor-pointer transition-all border",
        isSelected ? 'bg-stone-200 border-stone-400' : 'bg-stone-100 border-stone-200 hover:bg-stone-200 hover:border-stone-300'
    )}>
      <div className="flex items-center mb-2">
        <Folder className="h-5 w-5 mr-2 text-stone-600 flex-shrink-0" />
        <h3 className="font-semibold text-sm text-stone-700 truncate" title={folderName}>{folderName}</h3> {/* Renamed 'name' to 'folderName' */}
      </div>
      <div className="text-xs text-muted-foreground pl-7">
        <span>{files} Files</span>
        <span className="mx-2">•</span>
        <span>{size}</span>
      </div>
    </div>
  );
};

================
File: src/components/datasets/NewFolderDialog.tsx
================
// src/components/datasets/NewFolderDialog.tsx
import React, { useState } from 'react';
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Loader2 } from 'lucide-react';

interface NewFolderDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (folderName: string) => void;
  isLoading: boolean;
}

export const NewFolderDialog: React.FC<NewFolderDialogProps> = ({ isOpen, onClose, onSubmit, isLoading }) => {
  const [folderName, setFolderName] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (folderName.trim()) {
      onSubmit(folderName.trim());
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[425px]">
        <form onSubmit={handleSubmit}>
          <DialogHeader>
            <DialogTitle>Create New Folder</DialogTitle>
            <DialogDescription>
              Enter a name for your new folder within this class.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="name" className="text-right">
                Name
              </Label>
              <Input
                id="name"
                value={folderName}
                onChange={(e) => setFolderName(e.target.value)}
                className="col-span-3"
                placeholder="e.g., Lecture Notes"
                disabled={isLoading}
              />
            </div>
          </div>
          <DialogFooter>
             <Button type="button" variant="ghost" onClick={onClose} disabled={isLoading}>Cancel</Button>
            <Button type="submit" disabled={isLoading || !folderName.trim()}>
              {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              {isLoading ? 'Creating...' : 'Create Folder'}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
};

================
File: src/components/datasets/UploadDialog.tsx
================
// src/components/datasets/UploadDialog.tsx
import React, { useState, useCallback } from 'react';
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { UploadCloud, File, X, Loader2 } from 'lucide-react';

interface UploadDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onUpload: (files: File[]) => void;
  isUploading: boolean;
}

export const UploadDialog: React.FC<UploadDialogProps> = ({ isOpen, onClose, onUpload, isUploading }) => {
  const [files, setFiles] = useState<File[]>([]);

  const onDrop = useCallback((acceptedFiles: File[]) => {
    setFiles(prev => [...prev, ...acceptedFiles]);
  }, []);

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => e.preventDefault();
  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    onDrop(Array.from(e.dataTransfer.files));
  };
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      onDrop(Array.from(e.target.files));
    }
  };
  const removeFile = (index: number) => {
    setFiles(prev => prev.filter((_, i) => i !== index));
  };

  const handleUploadClick = () => {
    onUpload(files);
  };
  
  // Reset state when dialog is closed
  const handleOpenChange = (open: boolean) => {
      if (!open) {
          setFiles([]);
          onClose();
      }
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Upload Files</DialogTitle>
          <DialogDescription>
            Add files to the current directory. PDF, DOCX, and TXT are supported for indexing.
          </DialogDescription>
        </DialogHeader>
        
        <div 
          onDragOver={handleDragOver}
          onDrop={handleDrop}
          className="mt-4 border-2 border-dashed border-stone-300 rounded-lg p-8 text-center"
        >
          <UploadCloud className="mx-auto h-12 w-12 text-stone-400" />
          <p className="mt-2 text-sm text-muted-foreground">
            Drag & drop files here, or{' '}
            <label htmlFor="file-upload" className="text-primary font-semibold cursor-pointer hover:underline">
              browse
            </label>
          </p>
          <input id="file-upload" type="file" className="hidden" multiple onChange={handleFileChange} />
        </div>

        {files.length > 0 && (
          <div className="mt-4 space-y-2 max-h-48 overflow-y-auto">
            <h4 className="text-sm font-medium">Files to upload:</h4>
            {files.map((file, i) => (
              <div key={i} className="flex items-center justify-between bg-stone-100 p-2 rounded-md">
                <div className="flex items-center gap-2 overflow-hidden">
                    <File className="h-4 w-4 flex-shrink-0"/>
                    <span className="text-sm truncate">{file.name}</span>
                </div>
                <Button variant="ghost" size="icon" className="h-6 w-6" onClick={() => removeFile(i)}>
                  <X className="h-4 w-4" />
                </Button>
              </div>
            ))}
          </div>
        )}
        
        <DialogFooter>
          <Button variant="ghost" onClick={onClose} disabled={isUploading}>Cancel</Button>
          <Button onClick={handleUploadClick} disabled={files.length === 0 || isUploading}>
            {isUploading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {isUploading ? "Uploading..." : `Upload ${files.length} File(s)`}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

================
File: src/components/layout/sidebar/SidebarAccount.tsx
================
// src/components/layout/sidebar/SidebarAccount.tsx
import { NavLink } from "react-router-dom";
import { LogIn } from "lucide-react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { useEffect, useState } from "react";
import { supabase } from "@/integrations/supabase/client";
import type { User } from "@supabase/supabase-js"; // Ensure User type is imported

interface ProfileData {
  full_name: string | null;
  avatar_url: string | null;
  // Add other fields from your 'profiles' table if needed
}

interface SidebarAccountProps {
  loading: boolean; // This prop comes from useSidebarState
  user: User | null;    // This prop comes from useSidebarState
}

export function SidebarAccount({ loading, user }: SidebarAccountProps) {
  const [profile, setProfile] = useState<ProfileData | null>(null);
  
  useEffect(() => {
    const fetchProfile = async () => {
      if (!user || !user.id) { // Check if user and user.id exist
        setProfile(null); // Clear profile if no user
        return;
      }
      
      try {
        // MODIFICATION: Querying 'profiles' table using 'user_id' column
        const { data, error } = await supabase
          .from('profiles')
          .select('full_name, avatar_url') // Select only needed fields
          .eq('user_id', user.id) // Match against the 'user_id' column in 'profiles' table
          .single(); // Expecting a single profile per user
          
        if (error) {
          // PGRST116 means no row was found, which is not necessarily an error if profile creation is optional/deferred
          if (error.code === 'PGRST116') {
            console.log("SidebarAccount: No profile found for user:", user.id);
            setProfile(null);
          } else {
            console.error("SidebarAccount: Error fetching profile:", error);
            setProfile(null); // Set profile to null on error
          }
        } else {
          setProfile(data as ProfileData);
        }
      } catch (error) {
        console.error("SidebarAccount: Exception in profile fetch:", error);
        setProfile(null); // Set profile to null on exception
      }
    };
    
    if (user) { // Only fetch if user object exists
        fetchProfile();
    } else {
        setProfile(null); // Clear profile if user is null (e.g., on logout)
    }

  }, [user]); // Depend on user object

  if (loading) {
    return null; 
  }
  
  if (!user) {
    return (
      <NavLink
        to="/auth"
        className={({ isActive }) => 
          `flex items-center px-4 py-2 rounded-md transition-colors ${
            isActive 
              ? "bg-sidebar-accent text-sidebar-accent-foreground font-medium" 
              : "text-sidebar-foreground hover:bg-sidebar-accent/50"
          }`
        }
      >
        <LogIn className="mr-2 h-5 w-5" />
        <span>Sign In</span>
      </NavLink>
    );
  }
  
  const userInitials = profile?.full_name
    ? profile.full_name.split(' ').map((n: string) => n[0]).join('').toUpperCase()
    : user.email?.charAt(0).toUpperCase() || "U";
    
  return (
    <NavLink 
      to="/account"
      className={({ isActive }) => 
        `flex items-center p-2 rounded-md transition-colors ${
          isActive 
            ? "bg-sidebar-accent text-sidebar-accent-foreground font-medium" 
            : "text-sidebar-foreground hover:bg-sidebar-accent/50"
        }`
      }
    >
      <Avatar className="w-8 h-8 rounded-full bg-sidebar-accent">
        {profile?.avatar_url && (
          <AvatarImage src={profile.avatar_url} alt={profile?.full_name || user.email || "User Avatar"} />
        )}
        <AvatarFallback className="text-xs font-medium">{userInitials}</AvatarFallback>
      </Avatar>
      <div className="ml-2 overflow-hidden">
        <p className="font-medium truncate">{user.email || "User"}</p>
        <p className="text-xs opacity-70 truncate">Signed In</p>
      </div>
    </NavLink>
  );
}

================
File: src/components/layout/sidebar/SidebarHeader.tsx
================
import { X, GraduationCap } from "lucide-react";
import { Button } from "@/components/ui/button";

interface SidebarHeaderProps {
  onClose: () => void;
  activeClassName: string | null;
}

export function SidebarHeader({ onClose, activeClassName }: SidebarHeaderProps) {
  return (
    <div className="flex flex-col p-4 border-b border-sidebar-border">
      <div className="flex items-center justify-between mb-2">
        <div className="flex items-center">
          <div className="w-8 h-8 rounded-md flex items-center justify-center mr-2">
            <img
              src="/eido-icon.png"
              alt="Eido AI Logo"
              className="h-8 w-8 object-contain"
            />
          </div>
          <span className="font-semibold text-xl">Eido</span>
        </div>
        <Button
          variant="ghost"
          size="icon"
          onClick={onClose}
          className="md:hidden text-sidebar-foreground hover:bg-sidebar-accent"
        >
          <X className="h-5 w-5" />
        </Button>
      </div>

      {/* Display active class at the top under Eido */}
      {activeClassName && (
        <div className="py-1 px-1">
          <div className="text-sm font-medium text-sidebar-foreground truncate">
            {activeClassName}
          </div>
        </div>
      )}
    </div>
  );
}

================
File: src/components/layout/sidebar/SidebarNavigation.tsx
================
import { ReactNode } from "react";
import { NavLink } from "react-router-dom";

interface NavItem {
  icon: ReactNode;
  label: string;
  to: string;
  exact?: boolean;
}

interface SidebarNavigationProps {
  navItems: NavItem[];
}

export function SidebarNavigation({ navItems }: SidebarNavigationProps) {
  return (
    <ul className="space-y-2 px-2">
      {navItems.map((item) => (
        <li key={item.to}>
          <NavLink
            to={item.to}
            end={item.exact}
            className={({ isActive }) => 
              `flex items-center px-4 py-2 rounded-md transition-colors ${
                isActive 
                  ? "bg-sidebar-accent text-sidebar-accent-foreground font-medium" 
                  : "text-sidebar-foreground hover:bg-sidebar-accent/50"
              }`
            }
          >
            {item.icon}
            <span>{item.label}</span>
          </NavLink>
        </li>
      ))}
    </ul>
  );
}

================
File: src/components/layout/sidebar/SidebarWidgets.tsx
================
import { ReactNode } from "react";
import { NavLink } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { LayoutGrid, Loader2 } from "lucide-react";
import { WidgetType } from "@/hooks/use-widgets";

interface WidgetNavItem {
  icon: ReactNode;
  label: string;
  to: string;
  widgetId: WidgetType;
}

interface SidebarWidgetsProps {
  activeClassName: string | null;
  widgetNavItems: WidgetNavItem[];
  isLoading: boolean;
  onAddWidgetsClick: () => void;
}

export function SidebarWidgets({
  activeClassName,
  widgetNavItems,
  isLoading,
  onAddWidgetsClick
}: SidebarWidgetsProps) {
  return (
    <div className="pt-4">
      <div className="px-4 py-2 flex justify-between items-center">
        <h3 className="text-xs font-semibold text-sidebar-foreground/70 uppercase">
          {activeClassName ? "Class Widgets" : "Available Widgets"}
        </h3>
        {activeClassName && (
          <Button 
            onClick={onAddWidgetsClick}
            variant="ghost"
            size="sm"
            className="flex items-center gap-1 h-7 text-sidebar-foreground hover:text-primary hover:bg-sidebar-accent/80"
          >
            <LayoutGrid className="h-4 w-4" />
            <span>Add</span>
          </Button>
        )}
      </div>
      
      {isLoading ? (
        <div className="flex items-center justify-center p-4">
          <Loader2 className="h-4 w-4 mr-2 animate-spin" />
          <span className="text-xs text-muted-foreground">Loading...</span>
        </div>
      ) : widgetNavItems.length > 0 ? (
        <ul className="space-y-2 px-2">
          {widgetNavItems.map((item) => (
            <li key={item.to}>
              <NavLink
                to={item.to}
                className={({ isActive }) => 
                  `flex items-center px-4 py-2 rounded-md transition-colors ${
                    isActive 
                      ? "bg-sidebar-accent text-sidebar-accent-foreground font-medium" 
                      : "text-sidebar-foreground hover:bg-sidebar-accent/50"
                  }`
                }
              >
                {item.icon}
                <span>{item.label}</span>
              </NavLink>
            </li>
          ))}
        </ul>
      ) : (
        <p className="text-xs text-muted-foreground px-4 py-2">
          {activeClassName 
            ? "No widgets added yet" 
            : "Select a class to use widgets"}
        </p>
      )}
    </div>
  );
}

================
File: src/components/layout/AppLayout.tsx
================
// src/components/layout/AppLayout.tsx

import { useState, useEffect } from "react";
import { Outlet, useLocation } from "react-router-dom";
import { AppSidebar } from "./AppSidebar";
import { Menu } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Toaster } from "@/components/ui/toaster";
// Removed: import { WidgetsProvider } from "@/hooks/use-widgets";
// Removed: import { ClassWidgetsProvider } from "@/hooks/use-class-widgets";

export function AppLayout() {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  // Store activeClass with its 'class_name' and 'class_id'
  const [activeClass, setActiveClass] = useState<{ class_id: string; class_name: string; } | null>(null);
  const location = useLocation();

  // Load active class from session storage and handle homepage clearing
  useEffect(() => {
    if (location.pathname === '/') {
      // Clear active class when on homepage
      setActiveClass(null);
      sessionStorage.removeItem('activeClass');
    } else {
      // Get active class from session storage on other pages
      const storedActiveClass = sessionStorage.getItem('activeClass');
      if (storedActiveClass) {
        try {
          // Parse the stored class data, expecting 'class_name' now
          const parsedClass: { class_id: string; class_name: string; } = JSON.parse(storedActiveClass);
          setActiveClass(parsedClass);
        } catch (e: unknown) { // Catch as unknown
          console.error("Error parsing stored active class", e);
        }
      }
    }
  }, [location.pathname]);

  return (
    // Removed WidgetsProvider and ClassWidgetsProvider
    <div className="flex h-screen overflow-hidden bg-background">
      {/* Mobile sidebar */}
      <div className="md:hidden">
        {isSidebarOpen && (
          <div
            className="fixed inset-0 z-40 bg-background/80 backdrop-blur-sm"
            onClick={() => setIsSidebarOpen(false)}
          />
        )}

        <div className={`fixed inset-y-0 left-0 z-50 w-64 transform transition-transform duration-200 ${
          isSidebarOpen ? 'translate-x-0' : '-translate-x-full'
        }`}>
          <AppSidebar onClose={() => setIsSidebarOpen(false)} />
        </div>
      </div>

      {/* Desktop sidebar */}
      <div className="hidden md:block">
        <AppSidebar onClose={() => {}} />
      </div>

      {/* Main content */}
      <div className="flex-1 flex flex-col overflow-hidden">
        {/* Mobile header */}
        <header className="flex items-center px-4 py-2 border-b md:hidden">
          <Button
            variant="ghost"
            size="icon"
            onClick={() => setIsSidebarOpen(true)}
          >
            <Menu className="h-6 w-6" />
          </Button>
          <div className="flex items-center mx-auto">
            <div className="w-8 h-8 rounded-md flex items-center justify-center mr-2">
              <img
                src="/eido-icon.png"
                alt="Eido AI Logo"
                className="h-8 w-8 object-contain"
              />
            </div>
            <h1 className="text-lg font-semibold">Eido</h1>
          </div>
          <div className="w-9"></div> {/* Empty div for centering */}
        </header>

        {/* Content area */}
        <main className="flex-1 overflow-auto p-4 md:p-8">
          <Outlet />
          <Toaster />
        </main>
      </div>
    </div>
  );
}

================
File: src/components/layout/AppSidebar.tsx
================
// src/components/layout/AppSidebar.tsx
import {
  Home,
  CalendarDays,
  Terminal
} from "lucide-react";
// Removed: import { Search, Database } from "lucide-react"; // No longer needed for widgets
// Removed: import { AddWidgetsDialog } from "@/components/widgets/AddWidgetsDialog";
// Removed: import { WidgetType } from "@/hooks/use-widgets";
import { useSidebarState } from "@/hooks/use-sidebar-state";
import { SidebarHeader } from "./sidebar/SidebarHeader";
import { SidebarNavigation } from "./sidebar/SidebarNavigation";
// Removed: import { SidebarWidgets } from "./sidebar/SidebarWidgets";
import { SidebarAccount } from "./sidebar/SidebarAccount";

interface AppSidebarProps {
  onClose: () => void;
}

export function AppSidebar({ onClose }: AppSidebarProps) {
  const {
    user,
    loading,
    // Removed: isWidgetsDialogOpen,
    // Removed: setIsWidgetsDialogOpen,
    activeClassName,
    // Removed: enabledWidgets,
    // Removed: widgetsLoading
  } = useSidebarState();

  const coreNavItems = [
    {
      icon: <Home className="mr-2 h-5 w-5" />,
      label: "Home",
      to: "/",
      exact: true
    },
    {
      icon: <CalendarDays className="mr-2 h-5 w-5" />,
      label: "Calendar",
      to: "/calendar",
      exact: false
    },
    {
      icon: <Terminal className="mr-2 h-5 w-5" />,
      label: "Console",
      to: "/console",
      exact: false
    }
  ];

  // Removed: widgetNavItems array definition (as widgets are obsolete)
  // Removed: visibleWidgetNavItems array definition

  return (
    <div className="flex flex-col h-screen w-64 bg-sidebar text-sidebar-foreground border-r border-sidebar-border">
      <SidebarHeader onClose={onClose} activeClassName={activeClassName} />

      <nav className="flex-1 overflow-auto py-4">
        <SidebarNavigation navItems={coreNavItems} />

        {/* Removed SidebarWidgets component and its usage */}
        {/* As widgets are obsolete, this section of the sidebar is no longer dynamic based on widgets. */}
        {/* If you want to hardcode tools like "Oracle" here, you'd add them to coreNavItems. */}
        <div className="pt-4">
          <div className="px-4 py-2">
            <h3 className="text-xs font-semibold text-sidebar-foreground/70 uppercase">
              Tools
            </h3>
          </div>
          <ul className="space-y-2 px-2">
            <li>
              <a
                href="/oracle" // Hardcode link to Oracle
                className="flex items-center px-4 py-2 rounded-md transition-colors text-sidebar-foreground hover:bg-sidebar-accent/50"
              >
                {/* Assuming Search icon was for Super Tutor, can reuse or remove */}
                <Search className="mr-2 h-5 w-5" />
                <span>Oracle</span>
              </a>
            </li>
            {/* Add other tools here if needed, e.g., Database, etc., but they will be static links */}
            {/* If Oracle is the *only* tool, you can remove the "Tools" heading and just have Oracle under Platform, or keep it. */}
          </ul>
        </div>
      </nav>

      <div className="mt-auto border-t border-sidebar-border/50 px-2 py-4">
        <SidebarAccount loading={loading} user={user} />
      </div>

      {/* Removed AddWidgetsDialog component */}
    </div>
  );
}

================
File: src/components/layout/MainLayout.tsx
================
import * as React from "react"

interface PageHeaderProps {
  title: string
  description?: string
}

export function PageHeader({ title, description }: PageHeaderProps) {
  return (
    <div className="space-y-1">
      <h1 className="text-2xl font-semibold tracking-tight">{title}</h1>
      {description && (
        <p className="text-sm text-muted-foreground">{description}</p>
      )}
    </div>
  )
}

================
File: src/components/layout/OracleLayout.tsx
================
// src/components/layout/OracleLayout.tsx
import React from 'react';

interface OracleLayoutProps {
  children: React.ReactNode;
}

const OracleLayout = ({ children }: OracleLayoutProps) => {
  return (
    // This outer div provides the overall light gray background for the entire page
    <div className="h-full w-full bg-stone-100 p-3">
      {/* This inner div is the main white container with the border and rounded corners */}
      <div className="mx-auto flex h-full w-full flex-1 flex-col rounded-lg border bg-white">
        {children}
      </div>
    </div>
  );
};

export default OracleLayout;

================
File: src/components/layout/PageHeader.tsx
================
import * as React from "react"

interface PageHeaderProps {
  title: string
  description?: string
}

export function PageHeader({ title, description }: PageHeaderProps) {
  return (
    <div className="space-y-1">
      <h1 className="text-2xl font-semibold tracking-tight">{title}</h1>
      {description && (
        <p className="text-sm text-muted-foreground">{description}</p>
      )}
    </div>
  )
}

================
File: src/components/oracle/HistorySidebar.tsx
================
// src/components/oracle/HistorySidebar.tsx
import React, { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { 
  DropdownMenu, 
  DropdownMenuContent, 
  DropdownMenuItem, 
  DropdownMenuTrigger 
} from '@/components/ui/dropdown-menu';
import { MoreHorizontal, Edit, Trash2, Loader2 } from 'lucide-react';
import { cn } from '@/lib/utils';
import { ScrollArea } from '../ui/scroll-area';
import { AppConversation } from '@/services/conversationService'; // Original import is correct
import { Input } from '../ui/input';

// FIX: Export the AppConversation type so other components can import it
export type { AppConversation };

interface HistoryItemProps {
  conversation: AppConversation;
  isSelected: boolean;
  onSelect: (id: string) => void;
  onRename: (id: string, newName: string) => Promise<void>;
  onDelete: (conversation: AppConversation) => void;
}

const HistoryItem: React.FC<HistoryItemProps> = ({ conversation, isSelected, onSelect, onRename, onDelete }) => {
    const [isRenaming, setIsRenaming] = useState(false);
    const [name, setName] = useState(conversation.name);
    const inputRef = useRef<HTMLInputElement>(null);

    useEffect(() => {
        if (isRenaming) {
            inputRef.current?.focus();
            inputRef.current?.select();
        }
    }, [isRenaming]);

    const handleRenameSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        e.stopPropagation();
        if (name.trim() && name.trim() !== conversation.name) {
            onRename(conversation.id, name.trim());
        }
        setIsRenaming(false);
    };

  return (
    <div
      onClick={() => !isRenaming && onSelect(conversation.id)}
      className={cn('flex items-center justify-between p-2 my-0.5 rounded-md cursor-pointer group relative transition-colors duration-150', isSelected ? 'bg-stone-200' : 'hover:bg-stone-100')}
      title={name}
    >
      <div className="flex items-center overflow-hidden flex-grow">
        {isRenaming ? (
            <form onSubmit={handleRenameSubmit} className="w-full">
                <Input ref={inputRef} value={name} onChange={(e) => setName(e.target.value)} onBlur={handleRenameSubmit} className="h-7 text-sm" onClick={(e) => e.stopPropagation()} />
            </form>
        ) : (
             <p className={cn('text-sm truncate pl-1', isSelected ? 'text-stone-800 font-semibold' : 'text-stone-700')}>{name}</p>
        )}
      </div>

      {!isRenaming && (
        <DropdownMenu>
            <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="icon" className="h-7 w-7 opacity-0 group-hover:opacity-100 transition-opacity" onClick={(e) => e.stopPropagation()}><MoreHorizontal size={18} /></Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={(e) => { e.stopPropagation(); setIsRenaming(true); }}>
                <Edit className="mr-2 h-4 w-4" /><span>Rename</span>
            </DropdownMenuItem>
            <DropdownMenuItem className="text-destructive" onClick={(e) => { e.stopPropagation(); onDelete(conversation); }}>
                <Trash2 className="mr-2 h-4 w-4" /><span>Delete</span>
            </DropdownMenuItem>
            </DropdownMenuContent>
        </DropdownMenu>
      )}
    </div>
  );
};

interface HistorySidebarProps {
    conversations: AppConversation[];
    selectedConversationId: string | null;
    onSelectConversation: (id: string) => void;
    onRenameConversation: (id: string, newName: string) => Promise<void>;
    onDeleteConversation: (conversation: AppConversation) => void;
    isLoading: boolean;
}

export const HistorySidebar: React.FC<HistorySidebarProps> = ({ conversations, selectedConversationId, onSelectConversation, onRenameConversation, onDeleteConversation, isLoading }) => {
    if (isLoading) {
        return <div className="flex justify-center items-center h-full"><Loader2 className="h-6 w-6 animate-spin text-muted-foreground" /></div>;
    }

    if (conversations.length === 0) {
        return <div className="flex flex-col items-center justify-center h-full text-center p-4"><p className="text-sm text-muted-foreground">No chat history yet.</p></div>;
    }
    
    return (
        <div className="flex flex-col h-full bg-marble-100">
            <ScrollArea className="flex-grow">
                <div className="space-y-0.5 p-2">
                    {conversations.map((convo) => (
                        <HistoryItem 
                            key={convo.id} 
                            conversation={convo}
                            isSelected={convo.id === selectedConversationId} 
                            onSelect={onSelectConversation}
                            onRename={onRenameConversation}
                            onDelete={onDeleteConversation}
                        />
                    ))}
                </div>
            </ScrollArea>
        </div>
    );
};

================
File: src/components/ui/accordion.tsx
================
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

================
File: src/components/ui/alert-dialog.tsx
================
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

================
File: src/components/ui/alert.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

================
File: src/components/ui/aspect-ratio.tsx
================
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

================
File: src/components/ui/avatar.tsx
================
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-md",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-md bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: src/components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: src/components/ui/breadcrumb.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

================
File: src/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:border-volcanic disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default:
          "bg-stone-700 text-stone-50 shadow hover:bg-stone-800",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-[#e6e6e6] shadow-sm hover:bg-stone-300 text-stone-900",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-8 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-8 w-8",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: src/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: src/components/ui/carousel.tsx
================
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

================
File: src/components/ui/chart.tsx
================
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

================
File: src/components/ui/checkbox.tsx
================
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

================
File: src/components/ui/collapsible.tsx
================
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

================
File: src/components/ui/command.tsx
================
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

================
File: src/components/ui/context-menu.tsx
================
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

================
File: src/components/ui/dialog.tsx
================
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: src/components/ui/drawer.tsx
================
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

================
File: src/components/ui/dropdown-menu.tsx
================
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: src/components/ui/form.tsx
================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: src/components/ui/hover-card.tsx
================
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

================
File: src/components/ui/index.ts
================
// Export all UI components for easier imports
export { Button } from "./button";
export { Input } from "./input";
export { Label } from "./label";
export { Popover, PopoverTrigger, PopoverContent } from "./popover";

================
File: src/components/ui/input-otp.tsx
================
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

================
File: src/components/ui/input.tsx
================
import * as React from "react"
import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: src/components/ui/label.tsx
================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: src/components/ui/menubar.tsx
================
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

================
File: src/components/ui/navigation-menu.tsx
================
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

================
File: src/components/ui/pagination.tsx
================
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}

================
File: src/components/ui/popover.tsx
================
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

================
File: src/components/ui/progress.tsx
================
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

================
File: src/components/ui/radio-group.tsx
================
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

================
File: src/components/ui/resizable.tsx
================
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

================
File: src/components/ui/scroll-area.tsx
================
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: src/components/ui/select.tsx
================
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-8 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:border-volcanic disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
     "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: src/components/ui/separator.tsx
================
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: src/components/ui/sheet.tsx
================
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  VariantProps<typeof sheetVariants> { }

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}

================
File: src/components/ui/sidebar.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

================
File: src/components/ui/skeleton.tsx
================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: src/components/ui/slider.tsx
================
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

================
File: src/components/ui/sonner.tsx
================
import { useTheme } from "next-themes"
import { Toaster as Sonner, toast } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster, toast }

================
File: src/components/ui/switch.tsx
================
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:border-2 focus-visible:border-volcanic disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: src/components/ui/table.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

================
File: src/components/ui/tabs.tsx
================
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:border focus-visible:border-volcanic disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:border-volcanic",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: src/components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

export type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:border-volcanic disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }

================
File: src/components/ui/toast.tsx
================
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: src/components/ui/toaster.tsx
================
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"
import { useToast } from "@/components/ui/use-toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: src/components/ui/toggle-group.tsx
================
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

================
File: src/components/ui/toggle.tsx
================
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-stone-700 data-[state=on]:text-stone-50",
  {
    variants: {
      variant: {
        default: "bg-transparent text-muted-foreground",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-8 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    onKeyDown={(e) => {
      if (e.key === 'Enter') {
        e.preventDefault();
      }
    }}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

================
File: src/components/ui/tooltip.tsx
================
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: src/components/ui/use-toast.ts
================
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_VALUE
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: src/features/files/components/FileGrid.tsx
================
// src/features/files/components/FileGrid.tsx
import React from "react";
import { File as FileIcon, Folder as FolderIcon, MoreHorizontal, Trash2 as TrashIcon } from "lucide-react";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Button } from "@/components/ui/button";
import { FileType, FolderType, SelectedItem } from "@/features/files/types";
import { Card } from "@/components/ui/card";
import { Checkbox } from "@/components/ui/checkbox";
import { formatFileSize } from "@/lib/utils";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { Progress } from "@/components/ui/progress";

interface FileGridProps {
  files: FileType[];
  folders: FolderType[];
  loading: boolean;
  selectionMode: boolean;
  selectedItems: SelectedItem[];
  onFileSelect: (file: FileType) => void;
  onFolderClick: (folder: FolderType) => void;
  onDeleteItem: (id: string, itemType: 'file' | 'folder', name: string) => void; // Corrected prop signature
  onFileOpen: (url: string) => void;
  currentFolderId: string | null;
}

export function FileGrid({
  files,
  folders,
  loading,
  selectionMode,
  selectedItems,
  onFileSelect,
  onFolderClick,
  onDeleteItem,
  onFileOpen,
  currentFolderId,
}: FileGridProps) {
  if (loading) {
    return (
      <div className="flex flex-col items-center justify-center h-full py-10">
        <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-gray-900" />
        <p className="text-gray-500 mt-4">Loading your files...</p>
      </div>
    );
  }

  if (files.length === 0 && folders.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center h-full text-center py-10">
        <FolderIcon className="h-16 w-16 text-gray-300 dark:text-gray-600 mb-4" />
        <h3 className="text-lg font-medium text-gray-700">This folder is empty</h3>
        <p className="text-gray-500 mb-4 max-w-md">
          Drag and drop files here or use the upload button.
        </p>
      </div>
    );
  }

  return (
    <ScrollArea className="h-full">
      <div className="space-y-4">
        {folders.length > 0 && (
          <div>
            <h3 className="text-sm font-medium text-muted-foreground mb-2 px-1">Folders</h3>
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-3">
              {folders.map((folder) => (
                <Card
                  key={folder.folder_id}
                  className={`p-3 transition-all hover:shadow-md cursor-pointer border-border`}
                  onClick={() => onFolderClick(folder)}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2 truncate">
                      <FolderIcon className="h-6 w-6 text-yellow-500 flex-shrink-0" />
                      <span className="text-sm font-medium truncate" title={folder.name}>{folder.name}</span>
                    </div>
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild onClick={(e) => e.stopPropagation()}>
                        <Button variant="ghost" size="icon" className="h-7 w-7 flex-shrink-0">
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuItem
                          onClick={(e) => {
                            e.stopPropagation();
                            // Correctly passing 'folder' as a string
                            onDeleteItem(folder.folder_id, 'folder', folder.name);
                          }}
                          className="text-destructive focus:text-destructive focus:bg-destructive/10"
                        >
                          <TrashIcon className="h-4 w-4 mr-2" /> Delete
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </div>
                </Card>
              ))}
            </div>
          </div>
        )}

        {files.length > 0 && (
          <div className={folders.length > 0 ? "mt-6" : ""}>
            <h3 className="text-sm font-medium text-muted-foreground mb-2 px-1">Files</h3>
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-3">
              {files.map((file) => (
                <Card
                  key={file.file_id}
                  className={`p-3 transition-all hover:shadow-md cursor-pointer ${
                    selectedItems.some((item) => item.id === file.file_id && item.type === 'file')
                      ? "ring-2 ring-primary border-primary"
                      : "border-border"
                  }`}
                  onClick={() => {
                    if (selectionMode) {
                      onFileSelect(file);
                    } else if (file.url) {
                      onFileOpen(file.url);
                    }
                  }}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2 truncate">
                      {selectionMode && (
                        <Checkbox
                          id={`select-file-${file.file_id}`}
                          checked={selectedItems.some((item) => item.id === file.file_id && item.type === 'file')}
                          onCheckedChange={() => onFileSelect(file)}
                          onClick={(e) => { e.stopPropagation(); onFileSelect(file); }}
                          aria-label={`Select file ${file.name}`}
                        />
                      )}
                      <FileIcon className="h-6 w-6 text-blue-500 flex-shrink-0" />
                      <span className="text-sm font-medium truncate" title={file.name}>{file.name}</span>
                    </div>
                  </div>
                  {file.status === 'uploading' && file.progress !== undefined ? (
                    <div className="mt-2">
                      <Progress value={file.progress || 0} className="h-1 w-full" />
                      <p className="text-xs text-muted-foreground mt-1 text-right">{file.progress || 0}%</p>
                    </div>
                  ) : file.status === 'error' ? (
                    <p className="text-xs text-destructive mt-1">Upload failed</p>
                  ) : (
                    <p className="text-xs text-muted-foreground mt-1 truncate">{formatFileSize(file.size)}</p>
                  )}
                </Card>
              ))}
            </div>
          </div>
        )}
      </div>
    </ScrollArea>
  );
}

================
File: src/features/files/components/NewFolderDialog.tsx
================
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";

interface NewFolderDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (folderName: string) => void;
}

export const NewFolderDialog = ({
  isOpen,
  onClose,
  onSubmit,
}: NewFolderDialogProps) => {
  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    const folderName = formData.get("folderName") as string;
    if (folderName.trim()) {
      onSubmit(folderName.trim());
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Create New Folder</DialogTitle>
          <DialogDescription>
            Enter a name for your new folder.
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="grid gap-4 py-4">
          <Input
            name="folderName"
            placeholder="Folder Name"
            autoFocus
          />
        </form>

        <DialogFooter>
          <Button variant="outline" onClick={onClose}>
            Cancel
          </Button>
          <Button type="submit" form="new-folder-form">
            Create Folder
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

================
File: src/features/files/components/StorageUsage.tsx
================
import { Progress } from "@/components/ui/progress";
import { UserStorage } from "../types";

interface StorageUsageProps {
  storage: UserStorage;
}

export const StorageUsage = ({ storage }: StorageUsageProps) => {
  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return "0 Bytes";
    const k = 1024;
    const sizes = ["Bytes", "KB", "MB", "GB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
  };

  const usagePercentage = (storage.storage_used / storage.storage_limit) * 100;

  return (
    <div className="mt-2">
      <div className="flex justify-between items-center text-sm mb-1">
        <span>Storage usage</span>
        <span>{usagePercentage.toFixed(1)}% used</span>
      </div>
      <Progress value={usagePercentage} className="h-2" />
      <div className="flex justify-end mt-1">
        <span className="text-xs text-gray-500">
          {formatFileSize(storage.storage_used)} of{" "}
          {formatFileSize(storage.storage_limit)}
        </span>
      </div>
    </div>
  );
};

================
File: src/features/files/components/UploadDialog.tsx
================
// src/features/files/components/UploadDialog.tsx
import { useState, ChangeEvent } from "react";
import { Upload } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { toast } from "@/components/ui/use-toast";
import { ScrollArea } from "@/components/ui/scroll-area";

interface UploadDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onFileSelect: (files: FileList) => void;
}

export const UploadDialog = ({
  isOpen,
  onClose,
  onFileSelect,
}: UploadDialogProps) => {
  const [selectedFiles, setSelectedFiles] = useState<FileList | null>(null);

  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      setSelectedFiles(e.target.files);
    } else {
      setSelectedFiles(null);
    }
  };

  const handleUploadClick = () => {
    if (selectedFiles && selectedFiles.length > 0) {
      onFileSelect(selectedFiles); 
      onClose(); 
      setSelectedFiles(null); 
    } else {
      toast({
        title: "No files selected",
        description: "Please select one or more files to upload.",
        variant: "destructive",
      });
    }
  };

  const handleDialogStateChange = (open: boolean) => {
    if (!open) {
      setSelectedFiles(null); 
    }
    onClose(); 
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleDialogStateChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Upload Files</DialogTitle>
          <DialogDescription>
            Upload files to your current folder. Supported formats include PDF,
            DOCX, PPTX, TXT, JPG, and PNG.
          </DialogDescription>
        </DialogHeader>

        <div className="grid gap-4 py-4">
          <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
            <Upload className="mx-auto h-12 w-12 text-gray-400 mb-2" />
            <p className="mb-2 text-gray-600">
              <span className="font-semibold">Drop files here</span> or click to
              upload
            </p>
            <p className="text-xs text-gray-500 mb-4">Maximum 50MB per file</p>
            <input
              type="file"
              className="hidden"
              id="file-upload-input" // Using the ID from user's provided code
              onChange={handleFileChange}
              multiple
            />
            <label htmlFor="file-upload-input">
              <Button variant="outline" className="mt-2" asChild>
                <span>
                  <Upload className="h-4 w-4 mr-2" />
                  Select Files
                </span>
              </Button>
            </label>
          </div>
          
          {selectedFiles && selectedFiles.length > 0 && (
            <div className="mt-2 text-sm">
              <p className="font-medium mb-1">Selected files ({selectedFiles.length}):</p>
              <ScrollArea className="max-h-24 overflow-y-auto bg-muted/50 p-2 rounded-md">
                <ul className="list-disc pl-5">
                  {Array.from(selectedFiles).map((file, index) => (
                    <li key={`${file.name}-${index}`} className="truncate" title={file.name}>
                      {file.name}
                    </li>
                  ))}
                </ul>
              </ScrollArea>
            </div>
          )}
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={() => handleDialogStateChange(false)}>
            Cancel
          </Button>
          <Button 
            onClick={handleUploadClick} 
            disabled={!selectedFiles || selectedFiles.length === 0}
          >
            <Upload className="h-4 w-4 mr-2" />
            Upload Selected Files
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

================
File: src/features/files/components/VectorStoreUploadDialog.tsx
================
import { File, Upload } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { SelectedItem } from "../types";

interface VectorStoreUploadDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: () => void;
  selectedItems: SelectedItem[];
  isUploading: boolean;
  uploadProgress: number;
}

export const VectorStoreUploadDialog = ({
  isOpen,
  onClose,
  onConfirm,
  selectedItems,
  isUploading,
  uploadProgress,
}: VectorStoreUploadDialogProps) => {
  const filesToUpload = selectedItems.filter(
    (item) => item.type === "file" && item.url
  );

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Upload to Vector Store</DialogTitle>
          <DialogDescription>
            You are about to upload {filesToUpload.length} files to the OpenAI
            Vector Store. These files will be available for AI-powered features.
          </DialogDescription>
        </DialogHeader>

        {isUploading ? (
          <div className="py-6">
            <div className="mb-2 flex justify-between text-xs">
              <span>Uploading to Vector Store...</span>
              <span>{uploadProgress}%</span>
            </div>
            <Progress value={uploadProgress} className="h-2 mb-4" />
            <p className="text-xs text-gray-500 text-center">
              This may take a few moments depending on the file size.
            </p>
          </div>
        ) : (
          <div className="py-4">
            <ul className="max-h-40 overflow-y-auto border rounded-lg divide-y">
              {filesToUpload.map((file) => (
                <li key={file.id} className="p-2 flex items-center">
                  <File className="h-4 w-4 text-blue-500 mr-2" />
                  <span className="text-sm truncate">{file.name}</span>
                </li>
              ))}
            </ul>
          </div>
        )}

        <DialogFooter>
          {!isUploading && (
            <>
              <Button variant="outline" onClick={onClose}>
                Cancel
              </Button>
              <Button onClick={onConfirm}>
                <Upload className="h-4 w-4 mr-2" />
                Upload to Vector Store
              </Button>
            </>
          )}
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

================
File: src/features/files/pages/FilesPage.tsx
================
// src/features/files/pages/FilesPage.tsx
import React, { useState, useEffect, useCallback } from "react";
import { useNavigate } from "react-router-dom";
import {
  Search, FolderPlus, Upload, File as FileIcon, Folder as FolderIcon,
  MoreHorizontal, Trash2 as TrashIcon, ArrowUp, Loader2, ChevronRight, CloudLightning, Check
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Input } from "@/components/ui/input";
import { useToast } from "@/hooks/use-toast";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
  DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger
} from "@/components/ui/dropdown-menu";
import {
  Dialog, DialogContent, DialogDescription as DialogDescriptionComponent, 
  DialogFooter, DialogHeader as DialogHeaderComponent, DialogTitle as DialogTitleComponent,
} from "@/components/ui/dialog";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription, 
  AlertDialogFooter, 
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import {
  Breadcrumb, BreadcrumbItem, BreadcrumbLink, BreadcrumbList, BreadcrumbSeparator, BreadcrumbPage
} from "@/components/ui/breadcrumb";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Checkbox } from "@/components/ui/checkbox";
import { supabase } from "@/integrations/supabase/client";
import {
  FileType as FileTypeDb,
  FolderType as FolderTypeDb,
  SelectedItem, UserStorage as UserStorageType, VectorStoreFileType
} from "@/features/files/types";
import { StorageUsage } from "../components/StorageUsage";
import { UploadDialog } from "../components/UploadDialog";
import type { User } from "@supabase/supabase-js";
import { formatFileSize } from "@/lib/utils";
import type { OpenAIConfig } from "@/services/classOpenAIConfig";
import { FileGrid } from "../components/FileGrid"; 
import { cn } from "@/lib/utils"; 

interface ActiveClassData {
  class_id: string;
  title: string;
  openAIConfig?: OpenAIConfig;
}

interface FileWithProgress extends FileTypeDb {
  progress?: number;
}

const FilesPage = () => {
  const [files, setFiles] = useState<FileWithProgress[]>([]);
  const [folders, setFolders] = useState<FolderTypeDb[]>([]);
  const [currentFolderId, setCurrentFolderId] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [userStorage, setUserStorage] = useState<UserStorageType | null>(null);
  const [breadcrumbs, setBreadcrumbs] = useState<{ id: string | null; name: string }[]>([{ id: null, name: "Main" }]);
  const [isUploadDialogOpen, setIsUploadDialogOpen] = useState(false);
  const [isNewFolderDialogOpen, setIsNewFolderDialogOpen] = useState(false);
  const [newFolderName, setNewFolderName] = useState('');
  const [dragging, setDragging] = useState(false);
  const [loading, setLoading] = useState(true);
  const [user, setUser] = useState<User | null>(null);
  const navigate = useNavigate();
  const { toast } = useToast();
  const [vectorStoreFiles, setVectorStoreFiles] = useState<VectorStoreFileType[]>([]);
  const [isLoadingVectorFiles, setIsLoadingVectorFiles] = useState(false);
  const [activeTab, setActiveTab] = useState("myFiles");
  const [selectionMode, setSelectionMode] = useState(false);
  const [selectedItems, setSelectedItems] = useState<SelectedItem[]>([]);
  const [isUploadingToVectorStore, setIsUploadingToVectorStore] = useState(false);
  const [vectorStoreUploadProgress, setVectorStoreUploadProgress] = useState(0);
  const [isVectorUploadDialogOpen, setIsVectorUploadDialogOpen] = useState(false);
  const [activeClass, setActiveClass] = useState<ActiveClassData | null>(null);
  const [showDeleteConfirmDialog, setShowDeleteConfirmDialog] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<{ id: string; name: string; type: 'file' | 'folder' }[]>([]);


  useEffect(() => {
    const initializePage = async () => {
      const { data: { session } } = await supabase.auth.getSession();
      const currentUser = session?.user || null;
      setUser(currentUser);
      if (!currentUser) {
        toast({ title: "Authentication Required", description: "Please sign in.", variant: "destructive" });
        navigate("/auth");
        return;
      }

      const activeClassDataString = sessionStorage.getItem('activeClass');
      if (activeClassDataString) {
        try {
          const parsedClass: ActiveClassData = JSON.parse(activeClassDataString);
          setActiveClass(parsedClass);
        }
        catch (e) {
          toast({ title: "Error", description: "Could not load class data. Please re-select from Home.", variant: "destructive" });
          navigate("/");
        }
      } else {
        toast({ title: "No Class Selected", description: "Please select a class from the homepage.", variant: "default" });
        navigate("/");
      }
    };
    initializePage();
  }, [navigate, toast]);

  useEffect(() => {
    const fetchUserStorage = async () => {
      if (!user) return;
      try {
        const { data, error } = await supabase.from('user_storage').select('*').eq('user_id', user.id).single();
        if (error && error.code !== 'PGRST116') throw error;
        if (data) {
          setUserStorage(data as UserStorageType);
        } else if (user) {
          const { data: newStorage, error: insertError } = await supabase
            .from('user_storage')
            .insert({ user_id: user.id, storage_used: 0, storage_limit: 1024 * 1024 * 1024 }) 
            .select()
            .single();
          if (insertError) throw insertError;
          if (newStorage) setUserStorage(newStorage as UserStorageType);
        }
      } catch (err) {
        let message = "Could not load storage info.";
        if (err instanceof Error) message = err.message;
        toast({ title: "Storage Error", description: message, variant: "destructive" });
      }
    };
    if (user) fetchUserStorage();
  }, [user, toast]);

  const fetchCurrentFolderContents = useCallback(async () => {
    if (!user || !activeClass?.class_id) {
      setLoading(false);
      return;
    }
    setLoading(true);
    try {
      let folderQuery = supabase
        .from('file_folders')
        .select('*')
        .eq('user_id', user.id)
        .eq('class_id', activeClass.class_id);
      if (currentFolderId === null) {
        folderQuery = folderQuery.is('parent_id', null);
      } else {
        folderQuery = folderQuery.eq('parent_id', currentFolderId);
      }
      const { data: folderData, error: folderError } = await folderQuery;
      if (folderError) throw folderError;
      setFolders((folderData || []) as FolderTypeDb[]);

      let fileQuery = supabase
        .from('files')
        .select('*')
        .eq('user_id', user.id)
        .eq('class_id', activeClass.class_id);
      if (currentFolderId === null) {
        fileQuery = fileQuery.is('folder_id', null);
      } else {
        fileQuery = fileQuery.eq('folder_id', currentFolderId);
      }
      const { data: fileData, error: fileError } = await fileQuery;
      if (fileError) throw fileError;
      setFiles((fileData || []).map(f => ({ ...f, status: f.status || 'complete', progress: (f.status === 'complete' ? 100 : 0) })) as FileWithProgress[]);
    } catch (error) {
      const message = error instanceof Error ? error.message : "Unknown error loading files.";
      toast({ title: "Error Loading Files", description: message, variant: "destructive" });
      setFiles([]); setFolders([]);
    } finally {
      setLoading(false);
    }
  }, [user, activeClass?.class_id, currentFolderId, toast]);

  useEffect(() => {
    if(activeClass?.class_id) {
      fetchCurrentFolderContents();
    }
  }, [fetchCurrentFolderContents, activeClass?.class_id, currentFolderId]);

  const fetchVectorStoreFiles = useCallback(async () => {
    if (!user || !activeClass?.class_id) {
      setVectorStoreFiles([]);
      return;
    }
    setIsLoadingVectorFiles(true);
    try {
        const { data: indexedFiles, error } = await supabase
            .from('files')
            .select('*')
            .eq('user_id', user.id)
            .eq('class_id', activeClass.class_id)
            .not('document_title', 'is', null);

        if (error) throw error;
        
        const mappedFiles: VectorStoreFileType[] = (indexedFiles || []).map(file => ({
            id: file.file_id,
            filename: file.name,
            document_title: file.document_title,
            usage_bytes: file.size,
            created_at: new Date(file.created_at).getTime() / 1000,
            status: 'completed',
            object: "vector_store.file",
            vector_store_id: "weaviate_global_store",
            last_error: null,
        }));

        setVectorStoreFiles(mappedFiles);
    } catch (error) {
        const message = error instanceof Error ? error.message : "Unknown error.";
        toast({ title: "Vector Store Error", description: `Failed to fetch files: ${message}`, variant: "destructive" });
        setVectorStoreFiles([]);
    } finally {
        setIsLoadingVectorFiles(false);
    }
  }, [user, activeClass, toast]);

  useEffect(() => { if (activeTab === "vectorStore") { fetchVectorStoreFiles(); } }, [activeTab, fetchVectorStoreFiles]);

  const toggleSelectItem = (item: SelectedItem) => {
    if (item.type === 'folder') {
      toast({
        title: "Selection Info",
        description: "Folders cannot be selected for this operation. Please select files.",
        variant: "default",
      });
      return;
    }
    setSelectedItems(prevItems =>
      prevItems.some(i => i.id === item.id && i.type === item.type)
        ? prevItems.filter(i => !(i.id === item.id && i.type === item.type))
        : [...prevItems, item]
    );
  };


  const navigateToFolder = (folderId: string | null, folderName: string) => {
    setCurrentFolderId(folderId);
    if (folderId === null) {
      setBreadcrumbs([{ id: null, name: "Main" }]);
    } else {
      const currentBreadcrumbs = [...breadcrumbs];
      const existingIndex = currentBreadcrumbs.findIndex(b => b.id === folderId);
      if (existingIndex !== -1) {
        setBreadcrumbs(currentBreadcrumbs.slice(0, existingIndex + 1));
      } else {
        setBreadcrumbs([...currentBreadcrumbs, { id: folderId, name: folderName }]);
      }
    }
    setSelectionMode(false);
    setSelectedItems([]);
  };

  // MODIFIED: This is the robust one-by-one upload function.
  const handleFileUpload = async (uploadedFiles: FileList) => {
    if (!user || !activeClass?.class_id) {
      toast({ title: "Upload Failed", description: "Missing user or class information.", variant: "destructive" });
      return;
    }

    const filesToUpload = Array.from(uploadedFiles);
    
    const tempFileEntries: FileWithProgress[] = filesToUpload.map((file, index) => ({
      file_id: `temp-upload-${Date.now()}-${index}`, name: file.name, size: file.size, type: file.type,
      folder_id: currentFolderId, user_id: user.id, class_id: activeClass.class_id,
      last_modified: new Date().toISOString(), created_at: new Date().toISOString(), status: 'uploading', progress: 0,
      url: null, category: null, tags: null, database_id: null, openai_file_id: null, document_title: null,
    }));
    setFiles(prev => [...prev, ...tempFileEntries]);

    toast({ title: `Starting upload for ${filesToUpload.length} file(s)...`, description: "Processing files one by one for reliability." });
    
    let successCount = 0;
    let errorCount = 0;

    for (let i = 0; i < filesToUpload.length; i++) {
        const file = filesToUpload[i];
        const tempFileId = tempFileEntries[i].file_id;
        try {
            setFiles(prev => prev.map(f => f.file_id === tempFileId ? { ...f, progress: 15 } : f));
            const sanitizedName = file.name.replace(/[^a-zA-Z0-9._-]/g, '_');
            const storagePath = `public/${user.id}/${activeClass.class_id}/${currentFolderId || 'root'}/${Date.now()}_${sanitizedName}`;
            
            const { data: storageData, error: uploadError } = await supabase.storage.from('file_storage').upload(storagePath, file);
            if (uploadError) throw new Error(`Storage Error: ${uploadError.message}`);

            setFiles(prev => prev.map(f => f.file_id === tempFileId ? { ...f, progress: 50, status: 'processing' } : f));
            
            const processingPayload = {
                storage_path: storageData!.path,
                original_name: file.name,
                mime_type: file.type,
                size: file.size,
                class_id: activeClass.class_id,
                folder_id: currentFolderId,
            };

            const { data: functionResponse, error: functionError } = await supabase.functions.invoke('upload-to-vector-store', {
                body: { files: [processingPayload] }
            });

            if (functionError) throw new Error(`Processing Error: ${functionError.message}`);

            const result = functionResponse.results?.[0];
            if (!result || !result.success) {
                throw new Error(result?.error || `Server failed to process ${file.name}`);
            }
            
            setFiles(prev => prev.map(f => f.file_id === tempFileId ? { ...f, status: 'complete', progress: 100 } : f));
            successCount++;
        } catch (error) {
            errorCount++;
            setFiles(prev => prev.map(f => f.file_id === tempFileId ? { ...f, status: 'error' } : f));
            toast({ title: `Error processing ${file.name}`, description: (error as Error).message, variant: "destructive" });
        }
    }
    
    toast({ title: "Upload Session Finished", description: `${successCount} successful, ${errorCount} failed.`});
    fetchCurrentFolderContents();
  };

  const createNewFolder = async () => {
    if (!user || !activeClass?.class_id || !newFolderName.trim()) {
      toast({ title: "Error", description: "Folder name, user, or class information is missing.", variant: "destructive" });
      return;
    }
    try {
      const { data, error } = await supabase
        .from('file_folders')
        .insert({
          name: newFolderName.trim(),
          parent_id: currentFolderId,
          user_id: user.id,
          class_id: activeClass.class_id,
        })
        .select()
        .single();
      if (error) throw error;
      setFolders(prev => [...prev, data as FolderTypeDb]);
      setIsNewFolderDialogOpen(false);
      setNewFolderName('');
      toast({ title: "Folder Created", description: `"${data.name}" has been created.` });
    } catch (error) {
      console.error("Error creating folder:", error);
      toast({ title: "Failed to Create Folder", description: error instanceof Error ? error.message : "Unknown error", variant: "destructive"});
    }
  };

  const handleDeleteItem = (itemId: string, itemType: 'file' | 'folder', itemName: string) => {
    setItemsToDelete([{ id: itemId, name: itemName, type: itemType }]);
    setShowDeleteConfirmDialog(true);
  };

  const confirmDeleteItems = async () => {
    if (!user) return;
    setShowDeleteConfirmDialog(false);
    
    let successCount = 0;
    let failCount = 0;
    
    for (const item of itemsToDelete) {
        try {
            if (item.type === 'folder') {
                const { error } = await supabase.from('file_folders').delete().eq('folder_id', item.id).eq('user_id', user.id);
                if (error) throw error;
            } else {
                const fileToDelete = files.find(f => f.file_id === item.id) || selectedItems.find(f => f.id === item.id);
                if (fileToDelete?.url) {
                    const filePathParts = fileToDelete.url.split('/');
                    const storagePath = filePathParts.slice(filePathParts.indexOf('public')).join('/');
                    await supabase.storage.from('file_storage').remove([storagePath]);
                }
              
                const { error: weaviateError } = await supabase.functions.invoke('delete-weaviate-chunks-by-file', {
                    body: { file_id: item.id }
                });

                if (weaviateError) {
                    console.error(`Failed to delete Weaviate chunks for file ${item.id}:`, weaviateError);
                    toast({
                        title: "Partial Deletion",
                        description: `Could not clear AI memory for ${item.name}. Please try deleting again or contact support.`,
                        variant: "destructive"
                    });
                }

                const { error } = await supabase.from('files').delete().eq('file_id', item.id).eq('user_id', user.id);
                if (error) throw error;
                if (fileToDelete && userStorage) {
                    const newStorageUsed = Math.max(0, userStorage.storage_used - (fileToDelete.size || 0));
                    setUserStorage(prev => ({ ...prev!, storage_used: newStorageUsed }));
                    await supabase.from('user_storage').update({ storage_used: newStorageUsed }).eq('user_id', user.id);
                }
            }
            successCount++;
        } catch (error) {
            failCount++;
            console.error(`Failed to delete ${item.type} ${item.name}:`, error);
        }
    }
    
    if (successCount > 0) toast({ title: "Items Deleted", description: `${successCount} item(s) successfully deleted.` });
    if (failCount > 0) toast({ title: "Deletion Error", description: `${failCount} item(s) could not be deleted.`, variant: "destructive" });
    
    setSelectedItems([]);
    setItemsToDelete([]);
    fetchCurrentFolderContents();
  };

  const handleFileDrop = (e: React.DragEvent<HTMLDivElement>) => {
     e.preventDefault();
     setDragging(false);
     if (!user) {
       toast({ title: "Authentication Required", description: "Please sign in to upload files.", variant: "destructive" });
       return;
     }
     if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
       handleFileUpload(e.dataTransfer.files);
     }
  };

  const pushToVectorStore = () => {
    const filesToUpload = selectedItems.filter(item => item.type === 'file' && item.url);
    if (filesToUpload.length === 0) {
      toast({ title: "No Files Selected", description: "Please select one or more files to sync with the AI.", variant: "default" });
      return;
    }
    setIsVectorUploadDialogOpen(true);
  };
  
  const confirmVectorUpload = async () => {
    if (!user || !activeClass?.class_id) {
      toast({ title: "Sync Error", description: "Missing user or class information.", variant: "destructive" });
      setIsVectorUploadDialogOpen(false);
      return;
    }

    const filesToUpload = selectedItems.filter(item => item.type === 'file' && item.url);
    if (filesToUpload.length === 0) {
      toast({ title: "No Files to Upload", description: "Please select valid files with URLs.", variant: "default" });
      setIsVectorUploadDialogOpen(false);
      return;
    }

    setIsUploadingToVectorStore(true);
    setVectorStoreUploadProgress(10); 

    try {
      const payloadFiles = filesToUpload.map(f => ({
        file_id: f.id,
        folder_id: currentFolderId,
        name: f.name,
        url: f.url!,
        size: f.size,
        type: f.fileMimeType!,
      }));

      const { data, error } = await supabase.functions.invoke('upload-to-vector-store', {
        body: {
          files: payloadFiles,
          class_id: activeClass.class_id
        },
      });

      if (error) throw error;
      
      if (!data.success) {
        throw new Error(data.message || 'One or more files failed to process during sync.');
      }
      
      setVectorStoreUploadProgress(100);
      toast({ title: "AI Sync Complete", description: data.message || `${filesToUpload.length} file(s) have been processed.` });
      
      if (activeTab === "vectorStore") {
        fetchVectorStoreFiles();
      }

    } catch (error) {
      console.error("Error syncing files with Weaviate:", error);
      toast({ title: "AI Sync Failed", description: error instanceof Error ? error.message : "An unknown error occurred.", variant: "destructive" });
    } finally {
      setIsUploadingToVectorStore(false);
      setIsVectorUploadDialogOpen(false);
      setSelectionMode(false);
      setSelectedItems([]);
      setVectorStoreUploadProgress(0);
    }
  };

  const filteredFolders = folders.filter(folder => folder.name && folder.name.toLowerCase().includes(searchQuery.toLowerCase()));
  const filteredFiles = files.filter(file => file.name && file.name.toLowerCase().includes(searchQuery.toLowerCase()));
  const selectedFileCount = selectedItems.filter(item => item.type === 'file').length;

  if (!user || !activeClass) {
    return (<div className="flex flex-col items-center justify-center min-h-screen p-4"> <Loader2 className="h-12 w-12 animate-spin text-primary mb-4" /> <p className="text-muted-foreground">Loading class information...</p> </div>);
  }

  return (
    <div className="space-y-6">
        <div className="bg-card p-4 sm:p-6 rounded-xl shadow-sm border">
            <div className="mb-6 space-y-4">
                <div className="relative"> <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" /> <Input type="search" placeholder="Search files and folders..." className="pl-10" value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} /> </div>
                {userStorage && <StorageUsage storage={userStorage} />}
            </div>
            <Tabs value={activeTab} onValueChange={setActiveTab} className="mb-6">
                <TabsList className="grid w-full max-w-md grid-cols-2">
                    <TabsTrigger value="myFiles">My Files</TabsTrigger>
                    <TabsTrigger value="vectorStore">Vector Store <Badge variant="outline" className="ml-2 bg-blue-100 text-blue-700">AI</Badge></TabsTrigger>
                </TabsList>
                <TabsContent value="myFiles" className="mt-6">
                    <div className="flex flex-wrap gap-2 mb-6 mt-4 items-center">
                    {!selectionMode ? (
                        <>
                        <Button onClick={() => setIsUploadDialogOpen(true)}> <Upload className="h-4 w-4 mr-2" /> Upload Files </Button>
                        <Button variant="outline" onClick={() => setIsNewFolderDialogOpen(true)}> <FolderPlus className="h-4 w-4 mr-2" /> New Folder </Button>
                        <Button variant="outline" onClick={() => setSelectionMode(true)} className="ml-auto"> <Check className="h-4 w-4 mr-2" /> Select Items </Button>
                        </>
                    ) : (
                        <>
                        <Button onClick={pushToVectorStore} disabled={selectedFileCount === 0 || isUploadingToVectorStore}>
                            {isUploadingToVectorStore ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <ArrowUp className="h-4 w-4 mr-2" />} 
                            Sync with AI ({selectedFileCount})
                        </Button>
                        <Button variant="destructive" onClick={() => handleDeleteItem(selectedItems.map(i=>i.id).join(), 'file', `${selectedItems.length} files`)} disabled={selectedFileCount === 0}>
                            <TrashIcon className="h-4 w-4 mr-2" /> Delete Selected ({selectedFileCount})
                        </Button>
                        <Button variant="outline" onClick={() => { setSelectionMode(false); setSelectedItems([]); }}> Cancel Selection </Button>
                        </>
                    )}
                    </div>
                    <Breadcrumb className="mb-4">
                        <BreadcrumbList>
                            {breadcrumbs.map((crumb, index) => (
                            <div key={crumb.id || 'root-crumb'}> 
                                <BreadcrumbItem>
                                    {index === breadcrumbs.length - 1 ? (<BreadcrumbPage>{crumb.name}</BreadcrumbPage>) : (<BreadcrumbLink href="#" onClick={(e) => { e.preventDefault(); navigateToFolder(crumb.id, crumb.name); }} className="cursor-pointer hover:text-primary">{crumb.name}</BreadcrumbLink>)}
                                </BreadcrumbItem>
                                {index < breadcrumbs.length - 1 && <BreadcrumbSeparator />}
                            </div>
                            ))}
                        </BreadcrumbList>
                    </Breadcrumb>
                    <div className={`min-h-[300px] border-2 border-dashed rounded-lg p-4 ${dragging ? "border-primary bg-primary/10" : "border-input"}`}
                        onDragOver={(e) => { e.preventDefault(); setDragging(true); }}
                        onDragLeave={() => setDragging(false)}
                        onDrop={handleFileDrop}>
                        <FileGrid files={filteredFiles} folders={filteredFolders} loading={loading} selectionMode={selectionMode} selectedItems={selectedItems}
                            onFileSelect={(file) => setSelectedItems(prev => prev.some(i => i.id === file.file_id) ? prev.filter(i => i.id !== file.file_id) : [...prev, { id: file.file_id, name: file.name, type: 'file', url: file.url, size: file.size, fileMimeType: file.type }])}
                            onFolderClick={(folder) => navigateToFolder(folder.folder_id, folder.name)}
                            onDeleteItem={handleDeleteItem}
                            onFileOpen={(url) => window.open(url, "_blank")} currentFolderId={currentFolderId} />
                    </div>
                </TabsContent>
                <TabsContent value="vectorStore" className="mt-6">
                    <div className="mb-6">
                    <div className="flex justify-between items-center"><h3 className="text-lg font-medium">Indexed Files</h3><Button variant="outline" size="sm" onClick={fetchVectorStoreFiles} disabled={isLoadingVectorFiles}>{isLoadingVectorFiles ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : null}Refresh List</Button></div>
                    <div className="text-muted-foreground text-sm mt-1">Files indexed in Weaviate are available to your AI assistants.</div>
                    </div>
                    {isLoadingVectorFiles ?
                    (<div className="flex flex-col items-center justify-center h-full py-10"><Loader2 className="h-10 w-10 text-primary animate-spin mb-4" /><p className="text-muted-foreground">Loading indexed files...</p></div>) :
                    vectorStoreFiles.length === 0 ?
                        (<div className="flex flex-col items-center justify-center h-full text-center py-10"><CloudLightning className="h-16 w-16 text-gray-300 dark:text-gray-600 mb-4" /><h3 className="text-lg font-medium">No Files Indexed for this Class</h3><p className="text-muted-foreground mb-4">Select files from the "My Files" tab and sync them with the AI.</p><Button onClick={() => { setActiveTab("myFiles"); setSelectionMode(true); }}>Select Files to Sync</Button></div>) :
                        (<ScrollArea className="h-[400px] sm:h-[500px]">
                        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                            {vectorStoreFiles.map((file) => (
                            <Card key={file.id} className="p-3">
                                <div className="flex items-center gap-2 mb-2"><FileIcon className="h-6 w-6 text-indigo-500 flex-shrink-0" /> <span className="text-sm font-medium truncate" title={file.filename}>{file.filename}</span></div>
                                <div className="text-xs text-muted-foreground">Size: {formatFileSize(file.usage_bytes || 0)}</div>
                                <div className="text-xs text-muted-foreground flex items-center gap-1">
                                    <span>Status:</span>
                                    <Badge variant={file.status === 'completed' ? 'default' : 'secondary'} className={file.status === 'completed' ? 'bg-green-100 text-green-700' : 'bg-yellow-100 text-yellow-700'}>{file.status}</Badge>
                                </div>
                            </Card>))}
                        </div>
                    </ScrollArea>)}
                </TabsContent>
            </Tabs>
        </div>
        <UploadDialog isOpen={isUploadDialogOpen} onClose={() => setIsUploadDialogOpen(false)} onFileSelect={handleFileUpload} />
        <Dialog open={isNewFolderDialogOpen} onOpenChange={(open) => { setIsNewFolderDialogOpen(open); if (!open) setNewFolderName(''); }}>
            <DialogContent>
                <DialogHeaderComponent><DialogTitleComponent>Create New Folder</DialogTitleComponent><DialogDescriptionComponent>Enter a name for your new folder.</DialogDescriptionComponent></DialogHeaderComponent>
                <Input placeholder="Folder Name" value={newFolderName} onChange={(e) => setNewFolderName(e.target.value)} autoFocus className="my-4" />
                <DialogFooter>
                    <Button variant="outline" onClick={() => { setIsNewFolderDialogOpen(false); setNewFolderName(''); }}>Cancel</Button>
                    <Button onClick={createNewFolder}>Create Folder</Button>
                </DialogFooter>
            </DialogContent>
        </Dialog>
        <Dialog open={isVectorUploadDialogOpen} onOpenChange={setIsVectorUploadDialogOpen}>
            <DialogContent>
                <DialogHeaderComponent><DialogTitleComponent>Sync with AI</DialogTitleComponent><DialogDescriptionComponent>Confirm syncing {selectedFileCount} file(s) with your AI knowledge base.</DialogDescriptionComponent></DialogHeaderComponent>
                {isUploadingToVectorStore ?
                    (<div className="py-6 text-center"><Loader2 className="h-8 w-8 animate-spin text-primary mx-auto mb-2" /><p>Processing & Indexing... {vectorStoreUploadProgress}%</p></div>) :
                    (<ScrollArea className="max-h-60 my-4"><ul className="space-y-1">{selectedItems.map(file => (<li key={file.id} className="text-sm p-1 border-b truncate">{file.name}</li>))}</ul></ScrollArea>)}
                <DialogFooter>
                    <Button variant="outline" onClick={() => setIsVectorUploadDialogOpen(false)} disabled={isUploadingToVectorStore}>Cancel</Button>
                    <Button onClick={confirmVectorUpload} disabled={isUploadingToVectorStore || selectedFileCount === 0}>
                        {isUploadingToVectorStore ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : <ArrowUp className="h-4 w-4 mr-2" />}
                        Confirm & Sync
                    </Button>
                </DialogFooter>
            </DialogContent>
        </Dialog>
        <AlertDialog open={showDeleteConfirmDialog} onOpenChange={setShowDeleteConfirmDialog}>
            <AlertDialogContent>
                <AlertDialogHeader>
                    <AlertDialogTitle>Confirm Deletion</AlertDialogTitle>
                    <AlertDialogDescription>
                    Are you sure you want to delete {itemsToDelete.length} item(s)? This action cannot be undone.
                    </AlertDialogDescription>
                </AlertDialogHeader>
                <AlertDialogFooter>
                    <AlertDialogCancel onClick={() => { setShowDeleteConfirmDialog(false); setItemsToDelete([]); }}>Cancel</AlertDialogCancel>
                    <AlertDialogAction onClick={confirmDeleteItems} className="bg-destructive text-destructive-foreground hover:bg-destructive/90">Delete</AlertDialogAction>
                </AlertDialogFooter>
            </AlertDialogContent>
        </AlertDialog>
    </div>
  );
};

export default FilesPage;

================
File: src/features/files/types.ts
================
// src/features/files/types.ts

// Type definitions for folder and file objects in the application

export interface FolderType {
  folder_id: string;
  folder_name: string; // Renamed from 'name' 
  parent_id: string | null;
  user_id: string;
  created_at: string;
  class_id: string | null;
  // Deleted: database_id 

  // For UI convenience (derived, not directly from DB row) - assuming these were for display
  files?: number; // Made optional if derived
  size?: string; // Made optional if derived
}

export interface FileType {
  file_id: string; // PK
  name: string;
  size: number;
  type: string; // This is the file's MIME type
  url?: string | null;
  folder_id: string | null;
  user_id: string;
  last_modified: string;
  created_at: string;
  category: string | null;
  tags: string[] | null;
  status: string | null;
  progress?: number; // <<-- FIX: Added optional progress property (kept as per your original provided code for this file)
  class_id: string | null;
  // Deleted: database_id 
  // Deleted: openai_file_id 
  document_title?: string | null;
}

export interface SelectedItem {
  id: string; 
  name: string;
  type: 'file' | 'folder';
  url?: string | null;
  size?: number;
  fileMimeType?: string;
}

export interface UserStorage {
  user_id: string;
  storage_used: number;
  storage_limit: number;
}

// This interface is likely related to OpenAI's Vector Store Files API,
// which might not be directly used if openai_file_id was removed and
// vector_store_id is no longer on the classes table.
// Keeping it for now, but its relevance will need to be re-evaluated
// when rebuilding the file ingestion/vectorization workflow.
export interface VectorStoreFileType {
  id: string; 
  object: "vector_store.file";
  usage_bytes: number;
  created_at: number; 
  vector_store_id: string;
  status: "in_progress" | "completed" | "failed" | "cancelled";
  last_error: { code: string; message: string } | null;
  filename?: string;       
  document_title?: string; 
}

================
File: src/hooks/use-mobile.tsx
================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

================
File: src/hooks/use-sidebar-state.ts
================
// src/hooks/use-sidebar-state.ts
import { useState, useEffect } from "react";
import { useLocation } from "react-router-dom";
import { supabase } from "@/integrations/supabase/client";
// Removed: import { useClassWidgets } from "@/hooks/use-class-widgets";
// Removed: import { WidgetType } from "@/hooks/use-widgets";
import type { User } from "@supabase/supabase-js";

export function useSidebarState() {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  // Removed: const [isWidgetsDialogOpen, setIsWidgetsDialogOpen] = useState(false);
  const [activeClassName, setActiveClassName] = useState<string | null>(null);
  const location = useLocation();
  // Removed: const { enabledWidgets, isLoading: widgetsLoading } = useClassWidgets(); // No longer used

  // Load user and auth state
  useEffect(() => {
    const fetchUser = async () => {
      try {
        const { data } = await supabase.auth.getSession();
        setUser(data.session?.user || null);
      } finally {
        setLoading(false);
      }
    };
    
    fetchUser();
    
    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      setUser(session?.user || null);
    });
    
    // Get active class name from session storage
    const activeClass = sessionStorage.getItem('activeClass');
    if (activeClass) {
      try {
        const parsedClass: { class_id: string; class_name: string; } = JSON.parse(activeClass);
        setActiveClassName(parsedClass.class_name);
      } catch (e: unknown) {
        console.error("Error parsing active class:", e);
      }
    }
    
    return () => subscription.unsubscribe();
  }, []);

  // Update active class name when location changes
  useEffect(() => {
    if (location.pathname === '/') {
      setActiveClassName(null);
    } else {
      const activeClass = sessionStorage.getItem('activeClass');
      if (activeClass) {
        try {
          const parsedClass: { class_id: string; class_name: string; } = JSON.parse(activeClass);
          setActiveClassName(parsedClass.class_name);
        } catch (e: unknown) {
          console.error("Error parsing active class:", e);
        }
      }
    }
  }, [location.pathname]);

  return {
    user,
    loading,
    // Removed: isWidgetsDialogOpen,
    // Removed: setIsWidgetsDialogOpen,
    activeClassName,
    // Removed: enabledWidgets,
    // Removed: widgetsLoading
  };
}

================
File: src/hooks/use-toast.ts
================
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: src/integrations/supabase/client.ts
================
// src/integrations/supabase/client.ts
import { createClient, SupabaseClient } from '@supabase/supabase-js';
import type { Database } from './types'; // This is the auto-generated types

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!SUPABASE_URL) {
  console.error('Error: SUPABASE_URL is not defined. Please check your .env file.');
  throw new Error('SUPABASE_URL is not defined.');
}
if (!SUPABASE_PUBLISHABLE_KEY) {
  console.error('Error: SUPABASE_PUBLISHABLE_KEY is not defined. Please check your .env file.');
  throw new Error('SUPABASE_PUBLISHABLE_KEY is not defined.');
}

// Define the CustomDatabase interface which extends the auto-generated Database type.
export interface CustomDatabase extends Database {
  public: Database['public'] & {
    Tables: Database['public']['Tables'] & {
      // Ensure all your existing tables are listed here, referencing Database['public']['Tables']
      profiles: Database['public']['Tables']['profiles'];
      classes: Database['public']['Tables']['classes'];
      folders: Database['public']['Tables']['folders']; // Changed from file_folders to folders
      files: Database['public']['Tables']['files']; 
      "flashcard-decks": Database['public']['Tables']['flashcard-decks'];
      flashcards: Database['public']['Tables']['flashcards'];
      quiz_questions: Database['public']['Tables']['quiz_questions'];
      quizzes: Database['public']['Tables']['quizzes'];
      user_storage: Database['public']['Tables']['user_storage'];
      embeddings: Database['public']['Tables']['embeddings'];
      // Keep embeddings as optional if it was, or remove if not used.
      // The 'database' table has been removed.
      chat_messages: Database['public']['Tables']['chat_messages'];
    };
    // Views and Functions can also be extended here if needed
    Views: Database['public']['Views'];
    Functions: Database['public']['Functions'];
  };
}

export const supabase: SupabaseClient<CustomDatabase> = createClient<CustomDatabase>(
  SUPABASE_URL,
  SUPABASE_PUBLISHABLE_KEY,
  { auth: { persistSession: true, autoRefreshToken: true } }
);

================
File: src/integrations/supabase/types.ts
================
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  public: {
    Tables: {
      chat_messages: {
        Row: {
          chat_mode: string
          class_id: string | null
          content: string
          conversation_id: string | null
          created_at: string
          id: string
          role: string
          attached_files: Json | null // VERIFIED
          user_id: string // User ID is explicitly not nullable
        }
        Insert: {
          chat_mode: string
          class_id?: string | null
          content: string
          conversation_id?: string | null
          created_at?: string
          id?: string
          role: string
          attached_files?: Json | null // VERIFIED
          user_id: string // User ID is explicitly not nullable
        }
        Update: {
          chat_mode?: string
          class_id?: string | null
          content?: string
          conversation_id?: string | null
          created_at?: string
          id?: string
          role?: string
          attached_files?: Json | null // VERIFIED
          user_id?: string // User ID is explicitly not nullable
        }
        Relationships: [
          {
            foreignKeyName: "chat_messages_class_id_fkey"
            columns: ["class_id"]
            isOneToOne: false
            referencedRelation: "classes"
            referencedColumns: ["class_id"]
          },
          {
            foreignKeyName: "chat_messages_conversation_id_fkey"
            columns: ["conversation_id"]
            isOneToOne: false
            referencedRelation: "conversations"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "chat_messages_user_id_fkey_cascade"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["user_id"]
          },
        ]
      }
      classes: {
        Row: {
          class_id: string
          class_name: string // Renamed from class_title
          user_id: string | null // Keep user_id as it's a FK 
          created_at: string | null // Keep created_at 
          updated_at: string | null // Keep updated_at 
          // Deleted: assistant_id, class_time, classroom, emoji, enabled_widgets, professor, vector_store_id
        }
        Insert: {
          class_id?: string
          class_name: string // Renamed from class_title
          user_id?: string | null // Keep user_id as it's a FK 
          created_at?: string | null // Keep created_at 
          updated_at?: string | null // Keep updated_at 
          // Deleted: assistant_id, class_time, classroom, emoji, enabled_widgets, professor, vector_store_id
        }
        Update: {
          class_id?: string
          class_name?: string // Renamed from class_title
          user_id?: string | null // Keep user_id as it's a FK 
          created_at?: string | null // Keep created_at 
          updated_at?: string | null // Keep updated_at 
          // Deleted: assistant_id, class_time, classroom, emoji, enabled_widgets, professor, vector_store_id
        }
        Relationships: [
          {
            foreignKeyName: "classes_user_id_fkey_cascade"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["user_id"]
          },
        ]
      }
      conversations: {
        Row: {
          chat_mode: string | null
          chatbot_type: string
          class_id: string | null
          created_at: string | null
          id: string
          last_message_at: string | null
          title: string | null
          updated_at: string | null
          user_id: string
        }
        Insert: {
          chat_mode?: string | null
          chatbot_type: string
          class_id?: string | null
          created_at?: string | null
          id?: string
          last_message_at?: string | null
          title?: string | null
          updated_at?: string | null
          user_id: string
        }
        Update: {
          chat_mode?: string | null
          chatbot_type?: string
          class_id?: string | null
          created_at?: string | null
          id?: string
          last_message_at?: string | null
          title?: string | null
          updated_at?: string | null
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "conversations_class_id_fkey"
            columns: ["class_id"]
            isOneToOne: false
            referencedRelation: "classes"
            referencedColumns: ["class_id"]
          },
          {
            foreignKeyName: "conversations_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["user_id"]
          },
        ]
      }
      // The 'database' table has been entirely removed from here.
      embeddings: {
        Row: {
          content: string
          created_at: string
          embedding: string | null
          id: string
          user_id: string | null
        }
        Insert: {
          content: string
          created_at?: string
          embedding?: string | null
          id?: string
          user_id?: string | null
        }
        Update: {
          content?: string
          created_at?: string
          embedding?: string | null
          id?: string
          user_id?: string | null
        }
        Relationships: []
      }
      folders: { // Renamed from file_folders
        Row: {
          class_id: string | null
          created_at: string
          folder_id: string
          folder_name: string // Renamed from name
          parent_id: string | null
          user_id: string
          // Deleted: database_id
        }
        Insert: {
          class_id?: string | null
          created_at?: string
          folder_id?: string
          folder_name: string // Renamed from name
          parent_id?: string | null
          user_id: string
          // Deleted: database_id
        }
        Update: {
          class_id?: string | null
          created_at?: string
          folder_id?: string
          folder_name?: string // Renamed from name
          parent_id?: string | null
          user_id?: string
          // Deleted: database_id
        }
        Relationships: [
          {
            foreignKeyName: "file_folders_class_id_fkey" // Keep old FK name unless migrated
            columns: ["class_id"]
            isOneToOne: false
            referencedRelation: "classes"
            referencedColumns: ["class_id"]
          },
          // Deleted: file_folders_database_id_fkey relationship
          {
            foreignKeyName: "file_folders_parent_id_fkey" // Keep old FK name unless migrated
            columns: ["parent_id"]
            isOneToOne: false
            referencedRelation: "folders" // Self-referencing
            referencedColumns: ["folder_id"]
          },
          {
            foreignKeyName: "file_folders_user_id_fkey" // Keep old FK name unless migrated
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["user_id"]
          },
        ]
      }
      files: {
        Row: {
          category: string | null
          class_id: string | null
          created_at: string
          document_title: string | null
          file_id: string
          folder_id: string | null
          last_modified: string
          name: string
          size: number
          status: string | null
          tags: string[] | null
          type: string
          url: string | null
          user_id: string
          // Deleted: openai_file_id, database_id
        }
        Insert: {
          category?: string | null
          class_id?: string | null
          created_at?: string
          document_title?: string | null
          file_id?: string
          folder_id?: string | null
          last_modified?: string
          name: string
          size: number
          status?: string | null
          tags?: string[] | null
          type: string
          url?: string | null
          user_id: string
          // Deleted: openai_file_id, database_id
        }
        Update: {
          category?: string | null
          class_id?: string | null
          created_at?: string
          document_title?: string | null
          file_id?: string
          folder_id?: string | null
          last_modified?: string
          name?: string
          size?: number
          status?: string | null
          tags?: string[] | null
          type?: string
          url?: string | null
          user_id?: string
          // Deleted: openai_file_id, database_id
        }
        Relationships: [
          {
            foreignKeyName: "files_class_id_fkey"
            columns: ["class_id"]
            isOneToOne: false
            referencedRelation: "classes"
            referencedColumns: ["class_id"]
          },
          // Deleted: files_database_id_fkey relationship
          {
            foreignKeyName: "files_folder_id_fkey"
            columns: ["folder_id"]
            isOneToOne: false
            referencedRelation: "folders" // Changed from file_folders
            referencedColumns: ["folder_id"]
          },
          {
            foreignKeyName: "files_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["user_id"]
          },
        ]
      }
      "flashcard-decks": {
        Row: {
          card_count: number
          class_id: string | null
          class_title: string | null
          color: string
          created_at: string
          description: string
          due_cards: number
          flashcard_deck_id: string
          new_cards: number
          title: string
          updated_at: string
          user_id: string | null
        }
        Insert: {
          card_count?: number
          class_id?: string | null
          class_title?: string | null
          color: string
          created_at?: string
          description: string
          due_cards?: number
          flashcard_deck_id?: string
          new_cards?: number
          title: string
          updated_at?: string
          user_id?: string | null
        }
        Update: {
          card_count?: number
          class_id?: string | null
          class_title?: string | null
          color?: string
          created_at?: string
          description?: string
          due_cards?: number
          flashcard_deck_id?: string
          new_cards?: number
          title?: string
          updated_at?: string
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "flashcard-decks_class_id_fkey"
            columns: ["class_id"]
            isOneToOne: false
            referencedRelation: "classes"
            referencedColumns: ["class_id"]
          },
          {
            foreignKeyName: "flashcard-decks_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["user_id"]
          },
        ]
      }
      flashcards: {
        Row: {
          back: string
          class_id: string | null
          created_at: string
          difficulty: string
          flashcard_deck_id: string
          flashcard_id: string
          front: string
          last_reviewed: string | null
          next_review: string
          review_count: number | null
          updated_at: string
          user_id: string | null
        }
        Insert: {
          back: string
          class_id?: string | null
          created_at?: string
          difficulty?: string
          flashcard_deck_id: string
          flashcard_id?: string
          front: string
          last_reviewed?: string | null
          next_review?: string
          review_count?: number | null
          updated_at?: string
          user_id?: string | null
        }
        Update: {
          back?: string
          class_id?: string | null
          created_at?: string
          difficulty?: string
          flashcard_deck_id?: string
          flashcard_id?: string
          front?: string
          last_reviewed?: string | null
          next_review?: string
          review_count?: number | null
          updated_at?: string
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "flashcards_class_id_fkey"
            columns: ["class_id"]
            isOneToOne: false
            referencedRelation: "classes"
            referencedColumns: ["class_id"]
          },
          {
            foreignKeyName: "flashcards_flashcard_deck_id_fkey"
            columns: ["flashcard_deck_id"]
            isOneToOne: false
            referencedRelation: "flashcard-decks"
            referencedColumns: ["flashcard_deck_id"]
          },
          {
            foreignKeyName: "flashcards_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["user_id"]
          },
        ]
      }
      message_sources: {
        Row: {
          id: string
          message_id: string
          source_number: number
          name: string | null
          url: string | null
          content: string | null
          created_at: string
          highlight: string | null
          page_number: number | null
        }
        Insert: {
          id?: string
          message_id: string
          source_number: number
          name?: string | null
          url?: string | null
          content?: string | null
          created_at?: string
          highlight?: string | null
          page_number?: number | null // Added back page_number based on previous analysis of repomix
        }
        Update: {
          id?: string
          message_id?: string
          source_number?: number
          name?: string | null
          url?: string | null
          content?: string | null
          created_at?: string
          highlight?: string | null
          page_number?: number | null // Added back page_number based on previous analysis of repomix
        }
        Relationships: [
          {
            foreignKeyName: "message_sources_message_id_fkey"
            columns: ["message_id"]
            isOneToOne: false
            referencedRelation: "chat_messages"
            referencedColumns: ["id"]
          }
        ]
      }
      profiles: {
        Row: {
          avatar_url: string | null
          created_at: string
          email: string | null
          full_name: string | null
          updated_at: string
          usage_description: string | null
          user_id: string
        }
        Insert: {
          avatar_url?: string | null
          created_at?: string
          email?: string | null
          full_name?: string | null
          updated_at?: string
          usage_description?: string | null
          user_id: string
        }
        Update: {
          avatar_url?: string | null
          created_at?: string
          email?: string | null
          full_name?: string | null
          updated_at?: string
          usage_description?: string | null
          user_id?: string
        }
        Relationships: []
      }
      quiz_questions: {
        Row: {
          class_id: string | null
          correct_answer_index: number
          created_at: string
          explanation: string
          options: string[]
          question_text: string
          quiz_id: string
          quiz_questions_id: string
          user_id: string | null
        }
        Insert: {
          class_id?: string | null
          correct_answer_index: number
          created_at?: string
          explanation: string
          options: string[]
          question_text: string
          quiz_id: string
          quiz_questions_id?: string
          user_id?: string | null
        }
        Update: {
          class_id?: string | null
          correct_answer_index?: number
          created_at?: string
          explanation?: string
          options?: string[]
          question_text?: string
          quiz_id?: string
          quiz_questions_id?: string
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "quiz_questions_class_id_fkey"
            columns: ["class_id"]
            isOneToOne: false
            referencedRelation: "classes"
            referencedColumns: ["class_id"]
          },
          {
            foreignKeyName: "quiz_questions_quiz_id_fkey"
            columns: ["quiz_id"]
            isOneToOne: false
            referencedRelation: "quizzes"
            referencedColumns: ["quiz_id"]
          },
          {
            foreignKeyName: "quiz_questions_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["user_id"]
          },
        ]
      }
      quizzes: {
        Row: {
          class_id: string | null
          coverage: string
          created_at: string
          description: string
          difficulty: string
          question_count: number
          quiz_id: string
          time_estimate: number
          title: string
          updated_at: string
          user_id: string | null
        }
        Insert: {
          class_id?: string | null
          coverage: string
          created_at?: string
          description: string
          difficulty?: string
          question_count?: number
          quiz_id?: string
          time_estimate?: number
          title: string
          updated_at?: string
          user_id?: string | null
        }
        Update: {
          class_id?: string | null
          coverage?: string
          created_at?: string
          description?: string
          difficulty?: string
          question_count?: number
          quiz_id?: string
          time_estimate?: number
          title?: string
          updated_at?: string
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "quizzes_class_id_fkey"
            columns: ["class_id"]
            isOneToOne: false
            referencedRelation: "classes"
            referencedColumns: ["class_id"]
          },
        ]
      }
      user_storage: {
        Row: {
          storage_limit: number
          storage_used: number
          user_id: string
        }
        Insert: {
          storage_limit?: number
          storage_used?: number
          user_id: string
        }
        Update: {
          storage_limit?: number
          storage_used?: number
          user_id?: string
        }
        Relationships: []
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      binary_quantize: {
        Args: { "": string } | { "": unknown }
        Returns: unknown
      }
      halfvec_avg: {
        Args: { "": number[] }
        Returns: unknown
      }
      halfvec_out: {
        Args: { "": unknown }
        Returns: unknown
      }
      halfvec_send: {
        Args: { "": unknown }
        Returns: string
      }
      halfvec_typmod_in: {
        Args: { "": unknown[] }
        Returns: number
      }
      hnsw_bit_support: {
        Args: { "": unknown }
        Returns: unknown
      }
      hnsw_halfvec_support: {
        Args: { "": unknown }
        Returns: unknown
      }
      hnsw_sparsevec_support: {
        Args: { "": unknown }
        Returns: unknown
      }
      hnswhandler: {
        Args: { "": unknown }
        Returns: unknown
      }
      ivfflat_bit_support: {
        Args: { "": unknown }
        Returns: unknown
      }
      ivfflat_halfvec_support: {
        Args: { "": unknown }
        Returns: unknown
      }
      ivfflathandler: {
        Args: { "": unknown }
        Returns: unknown
      }
      l2_norm: {
        Args: { "": unknown } | { "": unknown }
        Returns: number
      }
      l2_normalize: {
        Args: { "": string } | { "": unknown } | { "": unknown }
        Returns: string
      }
      sparsevec_out: {
        Args: { "": unknown }
        Returns: unknown
      }
      sparsevec_send: {
        Args: { "": unknown }
        Returns: string
      }
      sparsevec_typmod_in: {
        Args: { "": unknown[] }
        Returns: number
      }
      vector_avg: {
        Args: { "": number[] }
        Returns: string
      }
      vector_dims: {
        Args: { "": string } | { "": unknown }
        Returns: number
      }
      vector_norm: {
        Args: { "": string }
        Returns: number
      }
      vector_out: {
        Args: { "": string }
        Returns: unknown
      }
      vector_send: {
        Args: { "": string }
        Returns: string
      }
      vector_typmod_in: {
        Args: { "": unknown[] }
        Returns: number
      }
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

type DefaultSchema = Database[Extract<keyof Database, "public">]

export type Tables<
  DefaultSchemaTableNameOrOptions extends
    | keyof (DefaultSchema["Tables"] & DefaultSchema["Views"])
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof (Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
        Database[DefaultSchemaTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? (Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
      Database[DefaultSchemaTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema["Tables"] &
        DefaultSchema["Views"])
    ? (DefaultSchema["Tables"] &
        DefaultSchema["Views"])[DefaultSchemaTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  DefaultSchemaEnumNameOrOptions extends
    | keyof DefaultSchema["Enums"]
    | { schema: keyof Database },
  EnumName extends DefaultSchemaEnumNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema["Enums"]
    ? DefaultSchema["Enums"][DefaultSchemaEnumNameOrOptions]
    : never

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof DefaultSchema["CompositeTypes"]
    | { schema: keyof Database },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
    : never = never,
> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }
  ? Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema["CompositeTypes"]
    ? DefaultSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
    : never

export const Constants = {
  public: {
    Enums: {},
  },
} as const

================
File: src/lib/utils.ts
================
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function formatFileSize(bytes: number): string {
  if (bytes === 0) return "0 Bytes";
  const k = 1024;
  const sizes = ["Bytes", "KB", "MB", "GB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
}

================
File: src/pages/AuthPage.tsx
================
// src/pages/AuthPage.tsx
import { Auth } from "@/components/auth/Auth";

const AuthPage = () => {
  return (
    // This root div creates the full-screen container
    <div 
      className="min-h-screen w-full bg-gray-50 flex items-center justify-center p-4" 
      style={{ 
        backgroundImage: "url('/auth-background.png')",
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        backgroundRepeat: 'no-repeat'
      }}
    >
      {/* This is the white card that contains the authentication form.
        It's centered by the flex properties on the parent div.
        It has a max-width, rounded corners, a shadow, and padding.
      */}
      <div className="w-full max-w-xl bg-white rounded-2xl shadow-xl p-8 sm:p-12">
        <Auth />
      </div>
    </div>
  );
};

export default AuthPage;

================
File: src/pages/DashboardPage.tsx
================
// src/pages/DashboardPage.tsx
import React, { useState, useEffect } from 'react';
import { Helmet } from 'react-helmet-async';
import { useNavigate } from 'react-router-dom';
import { supabase } from '@/integrations/supabase/client';
import type { User } from '@supabase/supabase-js';

const Footer = () => (
  <footer className="w-full mt-auto px-4 py-6 md:px-9 lg:px-10 border-t border-marble-400 bg-marble-100">
    <div className="flex flex-col md:flex-row justify-between items-center text-sm text-volcanic-800">
      <span>© 2025 Eido AI. All rights reserved.</span>
      <div className="flex gap-x-4 mt-4 md:mt-0">
        <a href="/privacy" target="_blank" rel="noopener noreferrer" className="hover:text-volcanic-900 hover:underline">Privacy Policy</a>
        <a href="/terms" target="_blank" rel="noopener noreferrer" className="hover:text-volcanic-900 hover:underline">Terms of Service</a>
      </div>
    </div>
  </footer>
);

const DashboardPage = () => {
  const [user, setUser] = useState<User | null>(null);
  const navigate = useNavigate();

  // Fetch the current user on component mount to see if they are logged in
  useEffect(() => {
    const fetchUser = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      setUser(user);
    };
    fetchUser();

    // Listen for authentication changes (login/logout)
    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      setUser(session?.user ?? null);
    });

    return () => {
      subscription.unsubscribe();
    };
  }, []);

  // This function checks for a user before navigating to a protected route
  const handleProtectedLinkClick = (path: string) => {
    if (user) {
      navigate(path);
    } else {
      navigate('/auth'); // Redirect to login page if no user
    }
  };

  return (
    <>
      <Helmet>
           <title>Dashboard | Eido AI</title>
        <meta name="viewport" content="initial-scale=1.0, width=device-width, viewport-fit=cover, maximum-scale=1.0" />
        <link rel="icon" href="/favicon.ico" />
        <style type="text/css">{`
          :root {
           --volcanic: #212121; --marble: #fafafa; --green: #39594d; --coral: #ff7759;
          }
          html, body { font-family: "Trebuchet MS", sans-serif; }
           .bg-mushroom-100 { background-color: #75909C; } .mx-auto { margin-left: auto; margin-right: auto; }
           .flex { display: flex; } .h-screen { height: 100vh; } .w-screen { width: 100vw; }
           .max-w-page { max-width: 1440px; } .flex-1 { flex: 1 1 0%; } .flex-col { flex-direction: column; }
          .overflow-y-auto { overflow-y: auto; } .m-3 { margin: 0.75rem; } .z-navigation { z-index: 50; }
           .w-full { width: 100%; } .items-center { align-items: center; } .justify-between { justify-content: space-between; }
           .rounded-lg { border-radius: 0.5rem; } .border { border-width: 1px; } .px-4 { padding-left: 1rem; padding-right: 1rem; }
           .py-3 { padding-top: 0.75rem; padding-bottom: 0.75rem; } .border-marble-400 { border-color:rgb(176, 197, 206); }
           .bg-marble-100 { background-color: #F8F7F4; } .mr-3 { margin-right: 0.75rem; } .h-full { height: 100%; }
           .text-logo { font-size: 1.125rem; line-height: 1.75rem; } .lowercase { text-transform: lowercase; }
           .font-variable { font-family: "Trebuchet MS", sans-serif; } .ml-1 { margin-left: 0.25rem; } .font-light { font-weight: 300; }
           .text-green-700 { color: #39594D; } .text-dark-blue { color: #0F2A47; } .gap-x-4 { column-gap: 1rem; }
           .text-overline { font-size: 0.875rem; line-height: 1.25rem; letter-spacing: 0.05em; } .uppercase { text-transform: uppercase; }
           .font-code { font-family: monospace; } .font-medium { font-weight: 500; } .font-bold { font-weight: 700; }
           .text-volcanic-900 { color: #212121; } .text-volcanic-800 { color: #6B7280; }
           .hover\\:text-volcanic-900:hover { color: #212121; } .flex-grow { flex-grow: 1; } .pb-3 { padding-bottom: 0.75rem; }
           .main-content { min-height: calc(100vh - 74px); } .mb-8 { margin-bottom: 2rem; } .border-b { border-bottom-width: 1px; }
           .bg-cover { background-size: cover; } .flex-shrink-0 { flex-shrink: 0; }
           .bg-\\[url\\(\\/images\\/whiteCellBackground\\.svg\\)\\] { background-image: url(/background1.png); }
           .oracle-background-image { background-image: url(/background2.png); background-size: cover; background-repeat: no-repeat; background-position: center; }
           .pt-10 { padding-top: 2.5rem; } .px-9 { padding-left: 2.25rem; padding-right: 2.25rem; }
           .px-10 { padding-left: 2.5rem; padding-right: 2.5rem; } .text-h3-m { font-size: 2.25rem; line-height: 2.5rem; }
           .font-\\[420\\] { font-weight: 420; } .mb-6 { margin-bottom: 1.5rem; } .text-h5-m { font-size: 1.5rem; line-height: 2rem; }
           .mb-3 { margin-bottom: 0.75rem; } .text-p { font-size: 1rem; line-height: 1.5rem; } .pb-10 { padding-bottom: 2.5rem; }
           .items-end { align-items: flex-end; } .gap-y-6 { row-gap: 1.5rem; } .p-4 { padding: 1rem; }
           .p-8 { padding: 2rem; } .border-blue-200 { border-color:rgb(189, 197, 212); }
           .gap-y-3 { row-gap: 0.75rem; } .text-label { font-size: 0.875rem; line-height: 1.25rem; } .text-blue-700 { color:rgb(167, 175, 192); }
           .bg-white { background-color: #ffffff; } .w-fit { width: fit-content; } .px-2 { padding-left: 0.5rem; padding-right: 0.5rem; }
           .py-1 { padding-top: 0.25rem; padding-bottom: 0.25rem; } .inline-block { display: inline-block; }
           .cursor-pointer { cursor: pointer; } .pt-7 { padding-top: 1.75rem; }
           .min-h-cell-md { min-height: 40px; } .max-h-cell-md { max-height: 40px; }
           .transition-all { transition-property: all; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 150ms; }
           .bg-blue-500 { background-color: #75909C; } .-mr-0\\.5 { margin-right: -0.125rem; }
           .w-3 { width: 0.75rem; } .rounded-l-\\[6px\\] { border-top-left-radius: 6px; border-bottom-left-radius: 6px; }
           .text-white { color: #ffffff; } .truncate { overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }
           .-skew-x-\\[21deg\\] { transform: skewX(-21deg); } .w-6 { width: 1.5rem; } .rounded-tr-\\[10px\\] { border-top-right-radius: 10px; }
           .rounded-br-\\[4px\\] { border-bottom-right-radius: 4px; }
           .bg-coral-500 { background-color: #0F2A47; } .bg-quartz-700 { background-color: #6B6960; }
           @media (min-width: 768px) { .md\\:hidden { display: none; } .md\\:flex { display: flex; }
           .md\\:max-w-\\[680px\\] { max-width: 680px; } .md\\:gap-x-3 { column-gap: 0.75rem; } .md\\:ml-0 { margin-left: 0; }
           .md\\:rounded-lg { border-radius: 0.5rem; } .md\\:border { border-width: 1px; } .md\\:w-42 { width: 10.5rem; }
           .md\\:py-6 { padding-top: 1.5rem; padding-bottom: 1.5rem; } .md\\:mb-10 { margin-bottom: 2.5rem; }
           .md\\:flex-row { flex-direction: row; } .md\\:w-2\\/3 { width: 66.666667%; } .md\\:w-1\\/3 { width: 33.333333%; }
           .md\\:px-9 { padding-left: 2.25rem; padding-right: 2.25rem; } .md\\:flex-wrap { flex-wrap: wrap; }
           .md\\:p-8 { padding: 2rem; } .md\\:items-end { align-items: flex-end; } }
           @media (min-width: 1024px) { .lg\\:gap-x-6 { column-gap: 1.5rem; } .lg\\:max-w-\\[820px\\] { max-width: 820px; }
           .lg\\:w-56 { width: 14rem; } .lg\\:text-h5 { font-size: 1.875rem; line-height: 2.25rem; } }
         `}</style>
       </Helmet>
       
       <div className="h-full w-full bg-mushroom-100">
         <div className="mx-auto flex h-screen w-screen max-w-page flex-1 flex-col">
           
           <div className="m-3">
             <nav className="z-navigation flex w-full items-center justify-between rounded-lg border border-marble-400 bg-marble-100 px-4 py-3">
               <a href="/">
                  <div className="mr-3 flex items-baseline">
                   <span className="text-logo lowercase font-variable ml-1 font-light text-green-700">eido ai</span>
                  </div>
               </a>
                <div className="hidden md:flex flex-row items-center gap-x-4 lg:gap-x-6">
                 <p className="text-overline uppercase font-bold text-volcanic-900 cursor-pointer">Dashboard</p>
                 <p onClick={() => handleProtectedLinkClick('/datasets')} className="text-overline uppercase font-code text-volcanic-800 hover:text-volcanic-900 cursor-pointer">Datasets</p>
                 <a target="_blank" rel="noopener noreferrer" href="https://docs.cohere.com/"><p className="text-overline uppercase font-code text-volcanic-800 hover:text-volcanic-900">Docs</p></a>
                 <a target="_blank" rel="noopener noreferrer" href="#"><p className="text-overline uppercase font-code text-volcanic-800 hover:text-volcanic-900">Community</p></a>
                </div>
             </nav>
            </div>
           <div className="flex w-full flex-grow justify-self-center pb-3 md:gap-x-3 main-content">
             <div className="ml-3 hidden md:flex">
               <div className="flex flex-col justify-between overflow-auto border-marble-400 bg-marble-100 md:rounded-lg md:border md:w-42 w-full lg:w-56 px-4 md:py-6">
                  <nav className="hidden w-full flex-col gap-y-8 md:flex">
                  <div className="flex flex-col gap-y-1">
                    <span className="text-overline uppercase font-code font-bold text-dark-blue">Platform</span>
                    <span onClick={() => handleProtectedLinkClick('/')} className="text-p font-body flex items-center py-0.5 text-volcanic-900 cursor-pointer"><div className="mr-3 h-2 w-2 rounded-full bg-coral-500"></div><span className="font-medium">Dashboard</span></span>
                     <span onClick={() => handleProtectedLinkClick('/command')} className="text-p font-body flex items-center py-0.5 text-volcanic-800 hover:text-volcanic-900 cursor-pointer"><span>Command</span></span>
                    <span onClick={() => handleProtectedLinkClick('/datasets')} className="text-p font-body flex items-center py-0.5 text-volcanic-800 hover:text-volcanic-900 cursor-pointer"><span>Datasets</span></span>
                    <span onClick={() => handleProtectedLinkClick('/calendar')} className="text-p font-body flex items-center py-0.5 text-volcanic-800 hover:text-volcanic-900 cursor-pointer"><span>Calendar</span></span>
                   </div>
                   <div className="flex flex-col gap-y-1">
                    <span className="text-overline uppercase font-code font-bold text-dark-blue">Tools</span>
                    <span onClick={() => handleProtectedLinkClick('/oracle')} className="text-p font-body flex items-center py-0.5 text-volcanic-800 hover:text-volcanic-900 cursor-pointer"><span>Oracle</span></span>
                    <span onClick={() => handleProtectedLinkClick('/chrono')} className="text-p font-body flex items-center py-0.5 text-volcanic-800 hover:text-volcanic-900 cursor-pointer"><span>Chrono</span></span>
                    <span onClick={() => handleProtectedLinkClick('/codex')} className="text-p font-body flex items-center py-0.5 text-volcanic-800 hover:text-volcanic-900 cursor-pointer"><span>Codex</span></span>
                  </div>
                   <div className="flex flex-col gap-y-1">
                  <span className="text-overline uppercase font-code font-bold text-dark-blue">Settings</span>
                  <span onClick={() => handleProtectedLinkClick('/billing')} className="text-p font-body flex items-center py-0.5 text-volcanic-800 hover:text-volcanic-900 cursor-pointer"><span>Billing</span></span>
                     <span onClick={() => handleProtectedLinkClick('/profile')} className="text-p font-body flex items-center py-0.5 text-volcanic-800 hover:text-volcanic-900 cursor-pointer"><span>Profile</span></span>
                   </div>
                 </nav>
               </div>
             </div>
              <main className="mx-3 flex h-full w-full flex-grow flex-col overflow-y-auto rounded-lg border border-marble-400 bg-marble-100 md:ml-0">
               <div className="mb-8 border-b border-marble-400 bg-cover md:mb-10 flex-shrink-0 bg-mushroom-50 bg-[url(/images/whiteCellBackground.svg)]">
                 <div className="flex w-full flex-col overflow-hidden md:flex-row">
                 <div className="flex flex-col px-4 pt-10 pb-4 md:w-2/3 md:px-9 md:pt-16 lg:px-10">
                     <p className="text-h3-m lg:text-h2 font-variable font-[420] mb-6 text-volcanic-700">Welcome{user ? `, ${user.email?.split('@')[0] || 'User'}` : ''}!</p>
                     <h1 className="text-h5-m lg:text-h4 font-variable font-[420] mb-3 text-volcanic-900">What is Eido AI?</h1>
                    <p className="text-p font-body pb-6 text-volcanic-900 md:pb-10">Eido AI is your educational copilot, allowing you to create smart, searchable knowledge bases built on your coursework. Get started with Eido AI by exploring the tools below.</p>
                   </div>
                   <div className="hidden items-end md:flex md:w-1/3">
                      <div className="relative max-h-[250px] min-w-[300px] items-end ">
                      <span style={{boxSizing: "border-box", display: "inline-block", overflow: "hidden", width: "initial", height: "initial", background: "none", opacity: 1, border: 0, margin: 0, padding: 0, position: "relative", maxWidth: "100%"}}>
                          <img alt="" src="https://dashboard.cohere.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FdashboardPebbles.73d9a103.png&w=3840&q=75" decoding="async" style={{position: "absolute", top: 0, left: 0, bottom: 0, right: 0, boxSizing: "border-box", padding: 0, border: "none", margin: "auto", display: "block", width: 0, height: 0, minWidth: "100%", maxWidth: "100%", minHeight: "100%", maxHeight: "100%"}} />
                        </span>
                      </div>
                   </div>
                  </div>
               </div>
               <div className="flex-grow px-4 pb-10 md:px-9 lg:px-10">
                 <div className="flex h-full w-full flex-col gap-y-6">
                   <section className="flex flex-col rounded-lg p-4 md:flex-wrap md:p-8 xl:flex-row overflow-hidden border oracle-background-image border-blue-200">
                     <div className="flex flex-col gap-y-3 w-full xl:w-1/2">
                        <div className="text-label uppercase font-code">
                          <span className="text-blue-700 bg-white border border-blue-200 flex w-fit items-center rounded px-2 py-1">New</span>
                      </div>
                       <h2 className="text-h5-m lg:text-h5 font-variable font-[420]">Oracle</h2>
                       <p className="text-p font-body">Eido's central AI chat interface, featuring different modes to assist with your studies. You can ask questions about your uploaded class materials using the RAG-powered "Class AI" or perform general queries with the "Web AI" for supplemental information. </p>
                       <div onClick={() => handleProtectedLinkClick('/oracle')} className="w-fit pb-3 pt-7 focus:outline-none disabled:cursor-not-allowed inline-block cursor-pointer">
                          <div className="relative flex grow">
                              <div className="z-10 flex grow gap-x-2.5">
                                  <div className="h-full min-h-cell-md max-h-cell-md flex grow group/cell transition-all">
                                      <span className="bg-blue-500 h-full min-h-cell-md max-h-cell-md transition-all bg-clip-padding origin-top-right -mr-0.5 w-3 rounded-l-[6px] border-transparent"></span>
                                      <div className="bg-blue-500 text-white h-full min-h-cell-md max-h-cell-md truncate flex grow justify-between items-center transition-colors bg-clip-padding">
                                          <div className="z-10 w-full"><span className="px-2 justify-center flex w-full items-center transition-all"><span className="text-p font-body">Go to Oracle</span></span></div>
                                      </div>
                                      <span className="bg-blue-500 h-full min-h-cell-md max-h-cell-md transition-all bg-clip-padding origin-top-right w-6 -skew-x-[21deg] rounded-tr-[10px] rounded-br-[4px] border-transparent"></span>
                                  </div>
                              </div>
                          </div>
                      </div>
                     </div>
                     {/* Decorative image section for Oracle */}
                     <div className="hidden items-end md:flex md:w-1/3">
                        <div className="relative max-h-[250px] min-w-[300px] items-end ">
                            <span style={{boxSizing: "border-box", display: "inline-block", overflow: "hidden", width: "initial", height: "initial", background: "none", opacity: 1, border: 0, margin: 0, padding: 0, position: "relative", maxWidth: "100%"}}>
                                {/* You can replace this src with your specific Oracle related image if you have one */}
                                <img alt="" src="https://dashboard.cohere.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FdashboardPebbles.73d9a103.png&w=3840&q=75" decoding="async" style={{position: "absolute", top: 0, left: 0, bottom: 0, right: 0, boxSizing: "border-box", padding: 0, border: "none", margin: "auto", display: "block", width: 0, height: 0, minWidth: "100%", maxWidth: "100%", minHeight: "100%", maxHeight: "100%"}} />
                            </span>
                        </div>
                   </div>
                   </section>
                   {/* Removed Flashcards Section
                   <section className="flex flex-col rounded-lg p-4 md:flex-wrap md:p-8 xl:flex-row overflow-hidden border bg-flashcards-section bg-[url(/images/coralCellBackground.svg)] border-coral-200">
                     <div className="flex flex-col gap-y-3 w-full xl:w-1/2">
                        <h2 className="text-h5-m lg:text-h5 font-variable font-[420]">Flashcards</h2>
                       <p className="text-p font-body">Generate and review flashcard decks from your course materials to test your knowledge and reinforce key concepts.</p>
                        <div onClick={() => handleProtectedLinkClick('/flashcards')} className="w-fit pb-3 pt-7 focus:outline-none disabled:cursor-not-allowed inline-block cursor-pointer">
                           <div className="relative flex grow">
                              <div className="z-10 flex grow gap-x-2.5">
                                 <div className="h-full min-h-cell-md max-h-cell-md flex grow group/cell transition-all">
                                      <span className="bg-coral-500 h-full min-h-cell-md max-h-cell-md transition-all bg-clip-padding origin-top-right -mr-0.5 w-3 rounded-l-[6px] border-transparent"></span>
                                      <div className="bg-coral-500 text-white h-full min-h-cell-md max-h-cell-md truncate flex grow justify-between items-center transition-colors bg-clip-padding">
                                         <div className="z-10 w-full"><span className="px-2 justify-center flex w-full items-center transition-all"><span className="text-p font-body">Go to Flashcards</span></span></div>
                                      </div>
                                      <span className="bg-coral-500 h-full min-h-cell-md max-h-cell-md transition-all bg-clip-padding origin-top-right w-6 -skew-x-[21deg] rounded-tr-[10px] rounded-br-[4px] border-transparent"></span>
                                  </div>
                              </div>
                           </div>
                       </div>
                     </div>
                     <div className="hidden items-end md:flex md:w-1/3">
                        <div className="relative max-h-[250px] min-w-[300px] items-end ">
                            <span style={{boxSizing: "border-box", display: "inline-block", overflow: "hidden", width: "initial", height: "initial", background: "none", opacity: 1, border: 0, margin: 0, padding: 0, position: "relative", maxWidth: "100%"}}>
                                <img alt="" src="https://dashboard.cohere.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FdashboardPebbles.73d9a103.png&w=3840&q=75" decoding="async" style={{position: "absolute", top: 0, left: 0, bottom: 0, right: 0, boxSizing: "border-box", padding: 0, border: "none", margin: "auto", display: "block", width: 0, height: 0, minWidth: "100%", maxWidth: "100%", minHeight: "100%", maxHeight: "100%"}} />
                            </span>
                        </div>
                   </div>
                   </section>
                   */}

                   {/* Removed Quizzes Section
                    <section className="flex flex-col rounded-lg p-4 md:flex-wrap md:p-8 xl:flex-row overflow-hidden border bg-quizzes-section bg-[url(/images/quartzCellBackground.svg)] border-quartz-200">
                      <div className="flex flex-col gap-y-3 w-full xl:w-1/2">
                       <h2 className="text-h5-m lg:text-h5 font-variable font-[420]">Quizzes</h2>
                        <p className="text-p font-body">Create quizzes from your documents to challenge yourself and measure your understanding of the material.</p>
                        <div onClick={() => handleProtectedLinkClick('/quizzes')} className="w-fit pb-3 pt-7 focus:outline-none disabled:cursor-not-allowed inline-block cursor-pointer">
                           <div className="relative flex grow">
                            <div className="z-10 flex grow gap-x-2.5">
                               <div className="h-full min-h-cell-md max-h-cell-md flex grow group/cell transition-all">
                                   <span className="bg-quartz-700 h-full min-h-cell-md max-h-cell-md transition-all bg-clip-padding origin-top-right -mr-0.5 w-3 rounded-l-[6px] border-transparent"></span>
                                 <div className="bg-quartz-700 text-white h-full min-h-cell-md max-h-cell-md truncate flex grow justify-between items-center transition-colors bg-clip-padding">
                                     <div className="z-10 w-full"><span className="px-2 justify-center flex w-full items-center transition-all"><span className="text-p font-body">Go to Quizzes</span></span></div>
                                   </div>
                                 <span className="bg-quartz-700 h-full min-h-cell-md max-h-cell-md transition-all bg-clip-padding origin-top-right w-6 -skew-x-[21deg] rounded-tr-[10px] rounded-br-[4px] border-transparent"></span>
                               </div>
                            </div>
                           </div>
                       </div>
                     </div>
                     <div className="hidden items-end md:flex md:w-1/3">
                        <div className="relative max-h-[250px] min-w-[300px] items-end ">
                            <span style={{boxSizing: "border-box", display: "inline-block", overflow: "hidden", width: "initial", height: "initial", background: "none", opacity: 1, border: 0, margin: 0, padding: 0, position: "relative", maxWidth: "100%"}}>
                                <img alt="" src="https://dashboard.cohere.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FdashboardPebbles.73d9a103.png&w=3840&q=75" decoding="async" style={{position: "absolute", top: 0, left: 0, bottom: 0, right: 0, boxSizing: "border-box", padding: 0, border: "none", margin: "auto", display: "block", width: 0, height: 0, minWidth: "100%", maxWidth: "100%", minHeight: "100%", maxHeight: "100%"}} />
                            </span>
                        </div>
                   </div>
                   </section>
                   */}
                 </div>
               </div>
              </main>
           </div>
           <Footer />
         </div>
       </div>
    </>
  );
};

export default DashboardPage;

================
File: src/pages/DatasetsPage.tsx
================
// src/pages/DatasetsPage.tsx
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { FolderPlus, FileText, MoreHorizontal, Download, Trash2, X, Loader2 } from 'lucide-react';
import { FolderCard } from '@/components/datasets/FolderCard';
import { ClassCard } from '@/components/datasets/ClassCard';
import { CreateClassDialog } from '@/components/datasets/CreateClassDialog';
import { NewFolderDialog } from '@/components/datasets/NewFolderDialog';
import { UploadDialog } from '@/components/datasets/UploadDialog';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow
} from "@/components/ui/table";
import { Separator } from '@/components/ui/separator';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Checkbox } from "@/components/ui/checkbox";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb";
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { User } from '@supabase/supabase-js';
import { ClassConfig, classOpenAIConfigService } from '@/services/classOpenAIConfig';
import { fileService } from '@/services/fileService';
import { FolderType, FileType } from '@/features/files/types';
import { cn, formatFileSize } from '@/lib/utils';
import { Helmet } from 'react-helmet-async';

const DatasetsPage = () => {
    // State
    const [user, setUser] = useState<User | null>(null);
    const [classes, setClasses] = useState<ClassConfig[]>([]);
    const [folders, setFolders] = useState<FolderType[]>([]);
    const [allUserFolders, setAllUserFolders] = useState<FolderType[]>([]);
    const [files, setFiles] = useState<FileType[]>([]);
    const [allClassFiles, setAllClassFiles] = useState<FileType[]>([]);
    // Corrected type for allFiles to match the structure returned by getAllFilesWithClass
    const [allFiles, setAllFiles] = useState<(FileType & { class: string })[]>([]);

    const [recentFiles, setRecentFiles] = useState<FileType[]>(() => {
        try {
            const item = window.localStorage.getItem('eidoRecentFiles');
            return item ? JSON.parse(item) as FileType[] : []; // Cast to FileType[]
        } catch (error: unknown) {
            console.error("Error parsing recent files from localStorage", error);
            return [];
        }
    });
    const [selectedClass, setSelectedClass] = useState<ClassConfig | null>(null);
    const [currentFolderId, setCurrentFolderId] = useState<string | null>(null);
    const [breadcrumbs, setBreadcrumbs] = useState<{ name: string; id: string | null }[]>([{ name: 'Home', id: null }]);
    const [isLoading, setIsLoading] = useState(true);
    const [selectionMode, setSelectionMode] = useState(false);
    const [selectedFileIds, setSelectedFileIds] = useState<string[]>([]);
    const { toast } = useToast();
    const [isDeleting, setIsDeleting] = useState(false);
    const [filesToDelete, setFilesToDelete] = useState<FileType[]>([]);
    const [isCreateClassOpen, setIsCreateClassOpen] = useState(false);
    const [isNewFolderOpen, setIsNewFolderOpen] = useState(false);
    const [isUploadOpen, setIsUploadOpen] = useState(false);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [previewedFile, setPreviewedFile] = useState<FileType | null>(null);
    const [isDeleteClassConfirmationOpen, setIsDeleteClassConfirmationOpen] = useState(false);
    const [classToDelete, setClassToDelete] = useState<ClassConfig | null>(null);
    const [isDeletingClass, setIsDeletingClass] = useState(false);

    useEffect(() => {
        const fetchUserAndInitialData = async () => {
            const { data: { session } } = await supabase.auth.getSession();
            const currentUser = session?.user ?? null;
            setUser(currentUser);
            if (currentUser) {
                const allFolders = await fileService.getAllFoldersForUser();
                setAllUserFolders(allFolders);
            }
        };
        fetchUserAndInitialData();
    }, []);

    const fetchData = useCallback(async () => {
        if (!user) return;
        setIsLoading(true);
        try {
            if (selectedClass) {
                 const [fetchedFolders, fetchedFiles, fetchedAllClassFiles] = await Promise.all([
                    fileService.getFolders(selectedClass.class_id, currentFolderId),
                    fileService.getFiles(selectedClass.class_id, currentFolderId),
                    fileService.getAllFilesForClass(selectedClass.class_id),
                ]);
                setFolders(fetchedFolders);
                setFiles(fetchedFiles);
                setAllClassFiles(fetchedAllClassFiles);
            } else {
                 const [fetchedClasses, fetchedAllFilesResult] = await Promise.all([ // Renamed variable to avoid conflict
                    classOpenAIConfigService.getAllClasses(),
                    fileService.getAllFilesWithClass()
                ]);
                setClasses(fetchedClasses);
                setAllFiles(fetchedAllFilesResult); // Corrected assignment for fetchedAllFiles
                setFolders([]);
                setFiles([]);
            }
        } catch (error: unknown) { // Use unknown for error type
            toast({ title: 'Error fetching data', description: (error instanceof Error) ? error.message : "An unknown error occurred.", variant: 'destructive' });
        } finally {
            setIsLoading(false);
        }
    }, [user, selectedClass, currentFolderId, toast]);

    useEffect(() => {
        try { localStorage.setItem('eidoRecentFiles', JSON.stringify(recentFiles)); }
        catch (error: unknown) { console.error("Error saving recent files to localStorage", error); }
    }, [recentFiles]);

    const handleClassClick = (classData: ClassConfig) => {
        setSelectedClass(classData);
        setBreadcrumbs([{ name: 'Home', id: null }, { name: classData.class_name, id: classData.class_id }]); // Use class_name
        // Update session storage for active class
        sessionStorage.setItem('activeClass', JSON.stringify({ class_id: classData.class_id, class_name: classData.class_name })); // Store class_name
    };

    const handleFolderClick = (folderData: FolderType) => {
        setCurrentFolderId(folderData.folder_id);
        setBreadcrumbs([...breadcrumbs, { name: folderData.folder_name, id: folderData.folder_id }]); // Use folder_name
    };

    const handleBreadcrumbClick = (index: number) => {
        if (index === 0) {
            setSelectedClass(null);
            setCurrentFolderId(null);
            sessionStorage.removeItem('activeClass'); // Clear active class from session storage
        }
        else {
            const clickedCrumb = breadcrumbs[index];
            if (clickedCrumb.id === selectedClass?.class_id) {
                setCurrentFolderId(null);
            }
            else {
                setCurrentFolderId(clickedCrumb.id);
            }
            // Update session storage if navigating back to a class
            if (index === 1 && classes.find(c => c.class_id === clickedCrumb.id)) {
                const classData = classes.find(c => c.class_id === clickedCrumb.id);
                if (classData) {
                    sessionStorage.setItem('activeClass', JSON.stringify({ class_id: classData.class_id, class_name: classData.class_name })); // Store class_name
                }
            } else if (index < 1) { // If navigating before class level (e.g., to Home)
                sessionStorage.removeItem('activeClass');
            }
        }
        setBreadcrumbs(breadcrumbs.slice(0, index + 1));
    };

    const getFolderPath = useCallback((file: FileType): string => {
        if (!file.folder_id) return '/';
        let path = '';
        let currentId: string | null = file.folder_id;
        while (currentId) {
            const folder = allUserFolders.find(f => f.folder_id === currentId && f.class_id === file.class_id);
            if (folder) { path = `/${folder.folder_name}${path}`; currentId = folder.parent_id; } // Use folder.folder_name
            else { break; }
        }
        return path || '/';
    }, [allUserFolders]);

    const handleFileRowClick = (file: FileType) => {
        setPreviewedFile(file);
        setRecentFiles(prev => {
            const newRecent = [file, ...prev.filter(f => f.file_id !== file.file_id)];
            return newRecent.slice(0, 10);
        });
    };

    const handleDownload = () => {
        if (!previewedFile || !previewedFile.url) return;
        const link = document.createElement('a');
        link.href = previewedFile.url;
        link.download = previewedFile.name;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    const handleDeleteClick = (files: FileType[]) => { setFilesToDelete(files); };

    const confirmDelete = async () => {
        if (filesToDelete.length === 0) return;
        setIsDeleting(true);
        try {
            await Promise.all(filesToDelete.map(file => fileService.deleteFile(file)));
            toast({ title: "Files Deleted", description: `${filesToDelete.length} file(s) deleted.` });
            if (filesToDelete.some(f => f.file_id === previewedFile?.file_id)) { setPreviewedFile(null); }
            fetchData();
            if (selectionMode) { toggleSelectionMode(); }
        } catch (error: unknown) { // Use unknown for error type
            toast({ title: "Deletion Failed", description: (error instanceof Error) ? error.message : "An unknown error occurred.", variant: "destructive" });
        } finally {
            setFilesToDelete([]);
            setIsDeleting(false);
        }
    };

    const toggleSelectionMode = () => { setSelectionMode(!selectionMode); setSelectedFileIds([]); };

    const handleFileSelect = (fileId: string) => { setSelectedFileIds(prev => prev.includes(fileId) ? prev.filter(id => id !== fileId) : [...prev, fileId]); };

    const handleCreateClass = async (className: string) => {
        setIsSubmitting(true);
        try {
             // fileService.createClass now expects 'className'
             await fileService.createClass(className);
            toast({ title: "Class Created", description: `"${className}" created.` });
            fetchData();
        } catch (error: unknown) { // Use unknown for error type
            toast({ title: "Error", description: (error instanceof Error) ? error.message : "An unknown error occurred.", variant: "destructive" });
        } finally {
            setIsSubmitting(false);
            setIsCreateClassOpen(false);
        }
    };

    const handleDeleteClassClick = (classData: ClassConfig) => {
        setClassToDelete(classData);
        setIsDeleteClassConfirmationOpen(true);
    };

    const confirmDeleteClass = async () => {
        if (!classToDelete) return;

        setIsDeletingClass(true);
        try {
            // classOpenAIConfigService.deleteClass now only takes class_id
            await classOpenAIConfigService.deleteClass(classToDelete.class_id);
            toast({
                title: "Class Deleted",
                description: `"${classToDelete.class_name}" and all its associated data have been permanently removed.`, // Use class_name
            });
            setRecentFiles(prev => prev.filter(file => file.class_id !== classToDelete.class_id));
            fetchData();
            setSelectedClass(null); // Deselect class after deletion
            setCurrentFolderId(null); // Clear current folder
            setBreadcrumbs([{ name: 'Home', id: null }]); // Reset breadcrumbs
            sessionStorage.removeItem('activeClass'); // Clear from session storage
        } catch (error: unknown) { // Use unknown for error type
            toast({
                title: "Deletion Failed",
                description: (error instanceof Error) ? error.message : "An unknown error occurred.",
                variant: "destructive",
            });
        } finally {
            setIsDeletingClass(false);
            setIsDeleteClassConfirmationOpen(false);
            setClassToDelete(null);
        }
    };

    const handleCreateFolder = async (folderName: string) => {
        if (!selectedClass) return;
        setIsSubmitting(true);
        try {
            // fileService.createFolder now expects folderName
            await fileService.createFolder(folderName, selectedClass.class_id, currentFolderId);
            toast({ title: "Folder Created", description: `"${folderName}" created.` });
            fetchData();
        } catch (error: unknown) { // Use unknown for error type
            toast({ title: "Error", description: (error instanceof Error) ? error.message : "An unknown error occurred.", variant: "destructive" });
        } finally {
            setIsSubmitting(false);
            setIsNewFolderOpen(false);
        }
    };

    const handleUploadFiles = async (filesToUpload: File[]) => {
        if (!user) {
             toast({ title: "Authentication Error", description: "You must be logged in to upload files.", variant: "destructive" });
             return;
        }
        // This is the critical check.
        // We ensure a class/container is selected before proceeding.
        if (!selectedClass) {
            toast({
                title: "No Destination Selected",
                description: "Please select a Class/Container from the list before uploading files.",
                variant: "default",
            });
            return;
        }

        setIsSubmitting(true);
        setIsUploadOpen(false);

        let successCount = 0;
        let errorCount = 0;
        toast({ title: `Starting upload for ${filesToUpload.length} file(s)...`, description: "Processing files one by one for reliability." });
        for (const file of filesToUpload) {
            try {
                const sanitizedName = file.name.replace(/[^a-zA-Z0-9._-]/g, '_');
                // The selectedClass.class_id is now guaranteed to exist here
                const storagePath = `${user.id}/${selectedClass.class_id}/${currentFolderId || 'root'}/${Date.now()}-${sanitizedName}`;

                const { data: storageData, error: uploadError } = await supabase.storage.from('file_storage').upload(storagePath, file);
                if (uploadError) throw new Error(`Storage Error: ${uploadError.message}`);
                
                // Construct payload without openai_file_id or database_id
                const processingPayload = {
                    storage_path: storageData.path, // Non-null assertion is fine after check
                    original_name: file.name,
                    mime_type: file.type,
                    size: file.size,
                    class_id: selectedClass.class_id,
                    folder_id: currentFolderId,
                    // Note: If the backend 'upload-to-vector-store' function
                    // still expects openai_file_id or vector_store_id,
                    // its implementation needs to be re-evaluated to handle their absence
                    // or retrieve them differently (e.g., from a config service/DB table)
                };

                const { data: functionResponse, error: functionError } = await supabase.functions.invoke('upload-to-vector-store', {
                    body: { files: [processingPayload] }
                });
                // Corrected typing for functionResponse
                const uploadToVectorStoreResult: { success?: boolean; error?: string; results?: Array<{ success: boolean; error?: string }> } = functionResponse as { success?: boolean; error?: string; results?: Array<{ success: boolean; error?: string }> };


                if (functionError) throw new Error(`Processing Error: ${functionError.message}`);
                
                // Assuming uploadToVectorStoreResult.results is now typed correctly by Edge Function
                const result = uploadToVectorStoreResult.results?.[0]; // Access results array
                if (!result || !result.success) {
                    throw new Error(result?.error || `Server failed to process ${file.name}`);
                }
                
                successCount++;
            } catch (error: unknown) { // Use unknown for error type
                errorCount++;
                toast({ title: `Error processing ${file.name}`, description: (error instanceof Error) ? error.message : "An unknown error occurred.", variant: "destructive" });
            }
        }
        
        toast({ title: "Upload Session Finished", description: `${successCount} successful, ${errorCount} failed.`});
        setIsSubmitting(false);
        fetchData();
    };

    const handleHeaderButtonClick = () => {
        if (selectedClass) { setIsUploadOpen(true); }
        else { setIsCreateClassOpen(true); }
    };

    const classesWithStats = useMemo(() => {
        if (!classes || !allFiles) return [];
        return classes.map(cls => {
            const filesForClass = allFiles.filter(file => file.class_id === cls.class_id);
            const totalSize = filesForClass.reduce((acc, file) => acc + (file.size || 0), 0);
            return { ...cls, files: filesForClass.length, size: formatFileSize(totalSize) };
        });
    }, [classes, allFiles]);

    const foldersWithStats = useMemo(() => {
        if (!folders.length) return [];
        // folder.name is now folder.folder_name, and file_folders is now folders
        const folderMap = new Map<string, FolderType>(allUserFolders.map(f => [f.folder_id, f]));
        const fileMapByFolder = new Map<string, FileType[]>();
        
        allClassFiles.forEach(file => {
            const folderId = file.folder_id || 'root';
            if (!fileMapByFolder.has(folderId)) {
                fileMapByFolder.set(folderId, []);
            }
            fileMapByFolder.get(folderId)?.push(file); // Use optional chaining
        });

        const statsCache = new Map<string, { count: number; size: number }>();
        const getFolderStats = (folderId: string): { count: number; size: number } => {
            if (statsCache.has(folderId)) return statsCache.get(folderId)!;
            let count = fileMapByFolder.get(folderId)?.length || 0;
            let size = (fileMapByFolder.get(folderId) || []).reduce((acc, file) => acc + (file.size || 0), 0);
            const subFolders = allUserFolders.filter(f => f.parent_id === folderId);
            for (const subFolder of subFolders) {
                const subStats = getFolderStats(subFolder.folder_id);
                count += subStats.count;
                size += subStats.size;
            }
            statsCache.set(folderId, { count, size });
            return { count, size };
        };

        return folders.map(folder => {
            const stats = getFolderStats(folder.folder_id);
            return {...folder, files: stats.count, size: formatFileSize(stats.size), folderName: folder.folder_name} // Explicitly pass folderName
        });
    }, [folders, allClassFiles, allUserFolders]);

    const renderFilePreview = () => {
        if (!previewedFile) {
            return (
                 <div className="w-full h-full flex items-center justify-center p-4 bg-cover bg-center" style={{backgroundImage: "url('/background6.png')"}}>
                    <div className="p-4 bg-black/10 backdrop-blur-sm rounded-lg">
                        <p className="font-medium text-white drop-shadow-md">Select a file to preview</p>
                    </div>
                </div>
            );
        }
        const fileType = previewedFile.type || '';
        const fileUrl = previewedFile.url || '';
        if (fileType.startsWith('image/')) { return <img src={fileUrl} alt={previewedFile.name} className="max-w-full max-h-full object-contain" />; }
        if (fileType === 'application/pdf') { return <iframe src={`${fileUrl}#toolbar=0`} className="w-full h-full" title={previewedFile.name}></iframe>; }
        return <pre className="w-full h-full text-sm whitespace-pre-wrap p-4">{`Preview for this file type is not supported.`}</pre>;
    };

    const renderContent = () => {
        if (isLoading) { return <div className="flex justify-center items-center h-full"><Loader2 className="h-8 w-8 animate-spin text-muted-foreground" /></div>; }
        const filesForTable = selectedClass ? files : recentFiles;
        return (
            <div className="p-6 md:p-8 space-y-8 overflow-y-auto">
                <div className="flex justify-between items-center">
                    <Breadcrumb>
                        <BreadcrumbList>
                            {breadcrumbs.map((crumb, index) => (
                                <div key={crumb.id || 'home'} className="flex items-center">
                                    <BreadcrumbItem>
                                        {index < breadcrumbs.length - 1 ? (
                                            <BreadcrumbLink href="#" onClick={(e) => { e.preventDefault(); handleBreadcrumbClick(index); }} className="text-muted-foreground hover:text-stone-800">{crumb.name}</BreadcrumbLink>
                                        ) : (
                                            <BreadcrumbPage className="font-semibold text-stone-800">{crumb.name}</BreadcrumbPage>
                                        )}
                                    </BreadcrumbItem>
                                    {index < breadcrumbs.length - 1 && <BreadcrumbSeparator />}
                                </div>
                            ))}
                        </BreadcrumbList>
                    </Breadcrumb>
                    <div className="flex gap-2">
                        {selectedClass && (<Button variant="outline" onClick={() => setIsNewFolderOpen(true)}><FolderPlus className="mr-2 h-4 w-4" />New Folder</Button>)}
                        <Button onClick={handleHeaderButtonClick}>{selectedClass ? "Upload Files" : "New Class"}</Button>
                    </div>
                </div>
                {selectedClass ? (
                    <div className="space-y-4">
                        <h2 className="text-sm uppercase font-semibold text-muted-foreground">Folders</h2>
                        <Separator className="my-4" />
                        {foldersWithStats.length > 0 ? (
                             <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                                {foldersWithStats.map((folder) => (
                                    <FolderCard key={folder.folder_id} {...folder} isSelected={false} onClick={() => handleFolderClick(folder)} />
                                ))}
                            </div>
                        ) : (<p className="text-sm text-muted-foreground">No folders in this directory.</p>)}
                    </div>
                ) : (
                    <div className="space-y-4">
                        <h2 className="text-sm uppercase font-semibold text-muted-foreground">Classes</h2>
                        <Separator className="my-4" />
                        {classesWithStats.length > 0 ? (
                            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                                {classesWithStats.map((classItem) => (
                                    <ClassCard
                                        key={classItem.class_id}
                                        id={classItem.class_id}
                                        className={classItem.class_name} // Use class_name
                                        files={classItem.files}
                                        size={classItem.size}
                                        isSelected={false}
                                        onClick={() => handleClassClick(classItem)}
                                        onDelete={() => handleDeleteClassClick(classItem)}
                                    />
                                ))}
                            </div>
                        ) : (<p className="text-sm text-muted-foreground">No classes found. Click "New Class" to get started.</p>)}
                    </div>
                )}
                <div className="space-y-4">
                    <div className="flex justify-between items-center">
                        <h2 className="text-sm uppercase font-semibold text-muted-foreground">{selectedClass ? "Files" : "Recent Files"}</h2>
                        {!selectionMode ? (
                             <Button variant="outline" size="sm" onClick={toggleSelectionMode}>Select</Button>
                        ) : (
                            <div className="flex items-center gap-2">
                                <Button variant="destructive" size="sm" onClick={() => handleDeleteClick(filesForTable.filter(f => selectedFileIds.includes(f.file_id)))} disabled={selectedFileIds.length === 0}>
                                    <Trash2 className="h-4 w-4 mr-2" />Delete ({selectedFileIds.length})</Button>
                                <Button variant="ghost" size="sm" onClick={toggleSelectionMode}>Cancel</Button>
                            </div>
                        )}
                    </div>
                    <Separator className="my-4" />
                    <div className="border rounded-lg overflow-hidden">
                        <Table>
                            <TableHeader><TableRow className="bg-stone-50 hover:bg-stone-50">
                                {selectionMode && <TableHead className="w-12"></TableHead>}
                                <TableHead>Name</TableHead>
                                <TableHead>Class</TableHead>
                                <TableHead>Folder Path</TableHead>
                                <TableHead className="text-right w-28">Date Added</TableHead>
                            </TableRow></TableHeader>
                            <TableBody>
                                {filesForTable.length > 0 ? filesForTable.map((file) => (
                                    <TableRow key={file.file_id} onClick={() => handleFileRowClick(file)} className={cn("text-stone-800 h-[60px] cursor-pointer", previewedFile?.file_id === file.file_id && "ring-2 ring-inset ring-stone-400 bg-stone-100", selectedFileIds.includes(file.file_id) && "bg-stone-100")}>
                                        {selectionMode && (<TableCell className="w-12" onClick={(e) => e.stopPropagation()}><Checkbox checked={selectedFileIds.includes(file.file_id)} onCheckedChange={() => handleFileSelect(file.file_id)}/></TableCell>)}
                                        <TableCell className="font-medium"><div className="flex items-center">{file.name}</div></TableCell>
                                        <TableCell className="text-muted-foreground"><div className="[display:-webkit-box] [-webkit-line-clamp:2] [-webkit-box-orient:vertical] overflow-hidden leading-tight">{classes.find(c => c.class_id === file.class_id)?.class_name || '...'}</div></TableCell> {/* Use class_name */}
                                        <TableCell className="text-muted-foreground"><div className="[display:-webkit-box] [-webkit-line-clamp:2] [-webkit-box-orient:vertical] overflow-hidden leading-tight">{getFolderPath(file)}</div></TableCell>
                                        <TableCell className="text-right text-muted-foreground text-sm">{new Date(file.created_at).toLocaleDateString()}</TableCell>
                                    </TableRow>
                                )) : (<TableRow><TableCell colSpan={selectionMode ? 5 : 4} className="h-24 text-center text-muted-foreground">No files to display.</TableCell></TableRow>)}
                            </TableBody>
                        </Table>
                    </div>
                </div>
            </div>
        )
    };

    return (
        <>
        <Helmet>
           <title>Classes | Eido AI</title>
            <style>{`
                html, body, #root { font-family: "Trebuchet MS", sans-serif; height: 100%; }
                .bg-mushroom-100 { background-color: #75909C; } .bg-marble-100 { background-color: #F8F7F4; }
                .border-marble-400 { border-color:rgb(176, 197, 206); } .text-green-700 { color: #39594D; }
                .font-variable { font-family: "Trebuchet MS", sans-serif; } .text-volcanic-800 { color: #6B7280; }
                .hover\\:text-volcanic-900:hover { color: #212121; }
                .text-overline { font-size: 0.875rem; line-height: 1.25rem; letter-spacing: 0.05em; text-transform: uppercase; }
                .text-logo { font-size: 1.125rem; line-height: 1.75rem; } .rounded-lg { border-radius: 0.5rem; }
            `}</style>
        </Helmet>
        <div className="h-screen w-full bg-mushroom-100 flex flex-col">
            <div className="p-3 flex-shrink-0">
                <nav className="z-navigation flex w-full items-center justify-between rounded-lg border border-marble-400 bg-marble-100 px-4 py-3">
                    <a data-element="Link" href="/"><div className="mr-3 flex items-baseline"><span className="text-logo lowercase font-variable ml-1 font-light text-green-700">eido ai</span></div></a>
                    <div className="hidden md:flex flex-row items-center gap-x-4 gap-y-0 lg:gap-x-6 justify-between">
                        <Link to="/"><p className="text-overline uppercase font-code text-volcanic-800 hover:text-volcanic-900">Dashboard</p></Link>
                        <a href="/datasets"><p className="text-overline uppercase font-code text-volcanic-800 hover:text-volcanic-900">Classes</p></a>
                        <a target="_blank" rel="noopener noreferrer" href="https://docs.cohere.com/"><p className="text-overline uppercase font-code text-volcanic-800 hover:text-volcanic-900">Docs</p></a>
                        <a target="_blank" rel="noopener noreferrer" href="#"><p className="text-overline uppercase font-code text-volcanic-800 hover:text-volcanic-900">Community</p></a>
                    </div>
                </nav>
            </div>
            <main className="flex-grow flex flex-row gap-3 px-3 pb-3 min-h-0">
                <div className="w-4/12 flex flex-col rounded-lg border border-marble-400 bg-marble-100 overflow-hidden">
                    <header className="flex items-center justify-between p-4 border-b border-marble-400 flex-shrink-0">
                        <div className="flex items-center gap-2 overflow-hidden"><span className="font-semibold text-sm text-muted-foreground truncate">{previewedFile ? previewedFile.name : "Select a file to preview"}</span></div>
                        <div className="flex items-center">
                            <Button variant="ghost" size="icon" className="text-stone-400 hover:bg-transparent hover:text-stone-900 focus-visible:ring-0 focus-visible:ring-offset-0" onClick={handleDownload} disabled={!previewedFile}><Download className="h-4 w-4" /></Button>
                            <Button variant="ghost" size="icon" className="text-stone-400 hover:bg-transparent hover:text-stone-900 focus-visible:ring-0 focus-visible:ring-offset-0" onClick={() => previewedFile && handleDeleteClick([previewedFile])} disabled={!previewedFile}><Trash2 className="h-4 w-4" /></Button>
                            <Button variant="ghost" size="icon" className="text-stone-400 hover:bg-transparent hover:text-stone-900 focus-visible:ring-0 focus-visible:ring-offset-0" onClick={() => setPreviewedFile(null)} disabled={!previewedFile}><X className="h-4 w-4" /></Button>
                        </div>
                    </header>
                    <div className={cn(
                        "flex-grow m-4 rounded-md border border-marble-400 flex items-center justify-center overflow-hidden transition-all bg-white"
                    )}>
                        {renderFilePreview()}
                    </div>
                </div>
                <div className="w-8/12 flex flex-col rounded-lg border border-marble-400 bg-white overflow-hidden">{renderContent()}</div>
            </main>
            <AlertDialog open={isDeleteClassConfirmationOpen} onOpenChange={setIsDeleteClassConfirmationOpen}>
                <AlertDialogContent>
                    <AlertDialogHeader>
                        <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                        <AlertDialogDescription>
                            This action cannot be undone. This will permanently delete the class
                            <span className="font-bold"> "{classToDelete?.class_name}"</span> {/* Use class_name */}
                            and all of its associated data, including files, folders, and AI memory.
                        </AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                        <AlertDialogCancel disabled={isDeletingClass}>Cancel</AlertDialogCancel>
                        <AlertDialogAction
                            onClick={confirmDeleteClass}
                            className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                            disabled={isDeletingClass}
                        >
                            {isDeletingClass ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Trash2 className="mr-2 h-4 w-4" />}
                            {isDeletingClass ? 'Deleting...' : 'Delete Permanently'}
                        </AlertDialogAction>
                    </AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>
            <AlertDialog open={filesToDelete.length > 0} onOpenChange={(open) => !open && setFilesToDelete([])}>
                <AlertDialogContent>
                    <AlertDialogHeader><AlertDialogTitle>Are you sure?</AlertDialogTitle><AlertDialogDescription>This will permanently delete {filesToDelete.length} file(s). This action cannot be undone.</AlertDialogDescription></AlertDialogHeader>
                    <AlertDialogFooter>
                        <AlertDialogCancel disabled={isDeleting}>Cancel</AlertDialogCancel>
                        <AlertDialogAction onClick={confirmDelete} className="bg-destructive text-destructive-foreground hover:bg-destructive/90" disabled={isDeleting}>
                            {isDeleting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Trash2 className="h-4 w-4" />}
                            {isDeleting ? 'Deleting...' : 'Delete'}
                        </AlertDialogAction>
                    </AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>
            <CreateClassDialog isOpen={isCreateClassOpen} onClose={() => setIsCreateClassOpen(false)} onSubmit={handleCreateClass} isLoading={isSubmitting} />
            <NewFolderDialog isOpen={isNewFolderOpen} onClose={() => setIsNewFolderOpen(false)} onSubmit={handleCreateFolder} isLoading={isSubmitting} />
            <UploadDialog isOpen={isUploadOpen} onClose={() => setIsUploadOpen(false)} onUpload={handleUploadFiles} isUploading={isSubmitting} />
        </div>
        </>
    );
};

export default DatasetsPage;

================
File: src/pages/NotFound.tsx
================
import { useLocation } from "react-router-dom";
import { useEffect } from "react";

const NotFound = () => {
  const location = useLocation();

  useEffect(() => {
    console.error(
      "404 Error: User attempted to access non-existent route:",
      location.pathname
    );
  }, [location.pathname]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">404</h1>
        <p className="text-xl text-gray-600 mb-4">Oops! Page not found</p>
        <a href="/" className="text-blue-500 hover:text-blue-700 underline">
          Return to Home
        </a>
      </div>
    </div>
  );
};

export default NotFound;

================
File: src/pages/OraclePage.tsx
================
// src/pages/OraclePage.tsx
import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';
import { Link } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group'; // Note: ToggleGroup is not currently used in this file but imported
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Loader2, FileText, PlusCircle } from 'lucide-react';
import { HistorySidebar, AppConversation } from '@/components/oracle/HistorySidebar';
import { ChatMessage } from '@/components/chat/ChatMessage';
import { ScrollArea } from '@/components/ui/scroll-area';
import { supabase } from '@/integrations/supabase/client';
import { User } from '@supabase/supabase-js';
import { useToast } from '@/hooks/use-toast';
import { conversationService } from '@/services/conversationService';
import { chatMessageService, ChatMessageApp, ActiveSource } from '@/services/chatMessageService';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';
import { ClassConfig, classOpenAIConfigService } from '@/services/classOpenAIConfig';
import { cn } from '@/lib/utils';
import { HighlightedText } from '@/components/chat/HighlightedText';
import { AttachedFile, AttachedFilePill } from '@/components/chat/AttachedFilePill';

interface ProfileData {
  full_name: string | null;
  avatar_url: string | null;
}

const OraclePage = () => {
    const [input, setInput] = useState("");
    const [isLoading, setIsLoading] = useState(false);
    const messagesEndRef = useRef<HTMLDivElement>(null);
    const fileInputRef = useRef<HTMLInputElement>(null);
    const { toast } = useToast();
    const [user, setUser] = useState<User | null>(null);
    const [userProfile, setUserProfile] = useState<ProfileData | null>(null);
    const [conversations, setConversations] = useState<AppConversation[]>([]);
    const [selectedConversationId, setSelectedConversationId] = useState<string | null>(null);
    const [messages, setMessages] = useState<ChatMessageApp[]>([]);
    const [classes, setClasses] = useState<ClassConfig[]>([]);
    const [selectedClassId, setSelectedClassId] = useState<string | null>(null);
    const [isLoadingConversations, setIsLoadingConversations] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const [isDeleting, setIsDeleting] = useState(false);
    const [conversationToDelete, setConversationToDelete] = useState<AppConversation | null>(null);
    const [selectedMessageId, setSelectedMessageId] = useState<string | null>(null);
    const [highlightedSourceNumber, setHighlightedSourceNumber] = useState<number | null>(null);
    const sourceRefs = useRef(new Map<number, HTMLDivElement | null>());
    const messageRefs = useRef(new Map<string, HTMLDivElement | null>());
    const keysDown = useRef(new Set<string>());
    const [attachedFiles, setAttachedFiles] = useState<AttachedFile[]>([]);

    const handleRemoveFile = (fileId: string) => {
        setAttachedFiles(prev => prev.filter(f => f.id !== fileId));
    };

    const processFiles = (files: FileList | null) => {
        if (!files) return;
        const newFiles: AttachedFile[] = [];
        Array.from(files).forEach(file => {
            const reader = new FileReader();
            reader.onload = (e) => {
                const base64Content = (e.target?.result as string).split(',')[1];
                if (base64Content) {
                    newFiles.push({
                        id: `${file.name}-${Date.now()}`,
                        name: file.name,
                        type: file.type,
                        content: base64Content
                    });
                    setAttachedFiles(prev => [...prev, ...newFiles]);
                }
            };
            reader.readAsDataURL(file);
        });
    };

    const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
        processFiles(event.target.files);
    };

    const handlePaste = (event: React.ClipboardEvent) => {
        processFiles(event.clipboardData.files);
    };

    const activeSources = messages.find(m => m.id === selectedMessageId)?.sources || [];

    const handleMessageSelect = useCallback((message: ChatMessageApp) => {
        if (message.role === 'assistant') {
            setSelectedMessageId(message.id);
        } else {
            setSelectedMessageId(null);
        }
    }, []);

    const highlightKeywords = useMemo(() => {
        if (!selectedMessageId) return [];
        const selectedMessage = messages.find(m => m.id === selectedMessageId);
        if (!selectedMessage || selectedMessage.role !== 'assistant') return [];
        const aiResponseContent = selectedMessage.content;
        const stopWords = new Set(["a", "an", "the", "is", "are", "was", "were", "what", "when", "where", "why", "how", "of", "to", "in", "for", "on", "with", "can", "you", "i", "me", "my", "it", "its", "about", "and", "or", "what", "explain", "summarize", "tell", "me", "about"]);
        return aiResponseContent.toLowerCase().replace(/\(source \d+\)/g, '').replace(/[^\w\s]/g, '').split(/\s+/).filter(word => word.length > 3 && !stopWords.has(word));
    }, [selectedMessageId, messages]);

    useEffect(() => {
        const handleKeyDown = (e: KeyboardEvent) => {
            if (e.key !== "ArrowLeft" && e.key !== "ArrowRight") return;
            if (keysDown.current.has(e.key)) return;
            keysDown.current.add(e.key);
            const aiMessages = messages.filter(m => m.role === 'assistant');
            if (aiMessages.length === 0) return;

            const currentIndex = aiMessages.findIndex(m => m.id === selectedMessageId);
            let nextIndex = currentIndex;
            if (e.key === "ArrowLeft") {
                nextIndex = Math.max(0, currentIndex - 1);
            } else {
                nextIndex = currentIndex === -1 ? 0 : Math.min(aiMessages.length - 1, currentIndex + 1);
            }
            if (aiMessages[nextIndex] && aiMessages[nextIndex].id !== selectedMessageId) {
                handleMessageSelect(aiMessages[nextIndex]);
            }
        };
        const handleKeyUp = (e: KeyboardEvent) => { keysDown.current.delete(e.key); };

        window.addEventListener('keydown', handleKeyDown);
        window.addEventListener('keyup', handleKeyUp);
        return () => {
            window.removeEventListener('keydown', handleKeyDown);
            window.removeEventListener('keyup', handleKeyUp);
        };
    }, [messages, selectedMessageId, handleMessageSelect]);

    useEffect(() => {
        if (selectedMessageId) {
            const element = messageRefs.current.get(selectedMessageId);
            if (element) {
                element.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
        }
    }, [selectedMessageId]);

    useEffect(() => {
        const fetchUserAndClasses = async () => {
            const { data: { session } } = await supabase.auth.getSession();
            const currentUser = session?.user;
            setUser(currentUser || null);
            if (currentUser) {
                const { data: profileData } = await supabase.from('profiles').select('full_name, avatar_url').eq('user_id', currentUser.id).single();
                setUserProfile(profileData);
                const fetchedClasses = await classOpenAIConfigService.getAllClasses();
                setClasses(fetchedClasses);

                // Read from session storage and set the active class
                const activeClassDataString = sessionStorage.getItem('activeClass');
                if (activeClassDataString) {
                    try {
                        // Changed 'title' to 'class_name' in expected parsed object
                        const parsedClass: { class_id: string; class_name: string } = JSON.parse(activeClassDataString);
                        // Ensure the class from session storage actually exists in the user's fetched classes
                        if (fetchedClasses.some(c => c.class_id === parsedClass.class_id)) {
                            setSelectedClassId(parsedClass.class_id);
                            console.log(`OraclePage: Automatically selected active class "${parsedClass.class_name}" from session.`); // Use class_name for logging
                        }
                    } catch (e: unknown) { // Use unknown for error type
                        console.error("OraclePage: Error parsing active class from session storage.", e);
                    }
                }
            }
        };
        fetchUserAndClasses();
    }, []);

    const fetchConversations = useCallback(async () => {
        if (!user) return;
        setIsLoadingConversations(true);
        try {
            // Fetch conversations for the selected class if selectedClassId is not null, otherwise all conversations for user.
            const convos = await conversationService.fetchConversations(user.id, selectedClassId || undefined);
            setConversations(convos);

            if (convos.length > 0) {
                // Try to keep the current selected conversation if it still exists and matches the class
                const currentSelected = convos.find(c => c.id === selectedConversationId && (selectedClassId === null || c.class_id === selectedClassId));
                if (currentSelected) {
                    setSelectedConversationId(currentSelected.id);
                } else {
                    // Otherwise, select the most recent conversation for the current filter
                    setSelectedConversationId(convos[0].id);
                }
            } else {
                setSelectedConversationId(null);
            }
        } catch (error: unknown) { // Use unknown for error type
            toast({ title: "Error", description: (error instanceof Error) ? error.message : "Could not load chat history.", variant: "destructive" });
        } finally {
            setIsLoadingConversations(false);
        }
    }, [user, toast, selectedClassId, selectedConversationId]);

    useEffect(() => { fetchConversations(); }, [user, fetchConversations]);

    useEffect(() => {
        if (!isLoading) {
            messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
        }
    }, [messages, isLoading]);

    useEffect(() => {
        if (!selectedConversationId) {
            setMessages([]);
            setSelectedMessageId(null);
            return;
        }
        const fetchMessages = async () => {
             setIsLoadingMessages(true);
            try {
                const fetchedMessagesWithSources = await chatMessageService.fetchMessagesByConversation(selectedConversationId);
                setMessages(fetchedMessagesWithSources);
                const lastAssistantMessage = fetchedMessagesWithSources.filter(m => m.role === 'assistant').pop();
                if (lastAssistantMessage) {
                    handleMessageSelect(lastAssistantMessage);
                } else {
                    setSelectedMessageId(null);
                }
             } catch (error: unknown) { // Use unknown for error type
                toast({ title: "Error", description: (error instanceof Error) ? error.message : "Could not load messages for this chat.", variant: "destructive" });
            } finally {
                setIsLoadingMessages(false);
            }
        };
        fetchMessages();
    }, [selectedConversationId, toast, handleMessageSelect]);

    const handleNewChat = async () => {
        if (!user) return;
        const newName = 'New Chat';
        try {
            const newConvo = await conversationService.createConversation({ name: newName, class_id: selectedClassId, chat_mode: 'rag', chatbot_type: 'oracle' }, user.id);
            setConversations(prev => [newConvo, ...prev]);
            setSelectedConversationId(newConvo.id);
            setMessages([]);
            setSelectedMessageId(null);
        } catch (error: unknown) { // Use unknown for error type
            toast({ title: "Error", description: (error instanceof Error) ? error.message : "Could not create a new chat.", variant: "destructive" });
        }
    };

    const handleSendMessage = async () => {
        if ((input.trim() === "" && attachedFiles.length === 0) || isLoading || !user) return;
        let activeConversationId = selectedConversationId;
        let isNewConversation = false;

        if (!activeConversationId) {
            isNewConversation = true;
            try {
                const newConvo = await conversationService.createConversation({ name: "New Chat", class_id: selectedClassId, chat_mode: 'rag', chatbot_type: 'oracle' }, user.id);
                setConversations(prev => [newConvo, ...prev]);
                activeConversationId = newConvo.id;
                setSelectedConversationId(newConvo.id);
                setMessages([]);
            } catch (error: unknown) { // Use unknown for error type
                toast({ title: "Error", description: (error instanceof Error) ? error.message : "Could not start a new chat.", variant: "destructive" });
                return;
            }
        }

        const currentInput = input;
        const currentFiles = [...attachedFiles];
        const displayFiles = currentFiles.map(f => ({ name: f.name, type: f.type }));
        setInput("");
        setAttachedFiles([]);
        setIsLoading(true);
        const tempUserMessage: ChatMessageApp = {
            id: `temp-${Date.now()}`, role: 'user', content: currentInput,
            createdAt: new Date(), conversation_id: activeConversationId as string, // Cast to string
            attached_files: displayFiles,
        };
        const updatedMessages = [...messages, tempUserMessage];
        setMessages(updatedMessages);

        const activeConvo = conversations.find(c => c.id === activeConversationId);
        const titleQuery = currentInput || `Chat about ${currentFiles.map(f => f.name).join(', ')}`;
        const shouldGenerateTitle = isNewConversation || (activeConvo?.name === "New Chat");

        try {
            const savedUserMessage = await chatMessageService.saveMessage({
                conversation_id: activeConversationId as string,
                role: 'user',
                content: titleQuery,
                chat_mode: 'rag',
                class_id: selectedClassId, // Pass selectedClassId here for message storage
                attached_files: displayFiles
            });
            setMessages(prev => prev.map(m => m.id === tempUserMessage.id ? savedUserMessage : m));
            if (shouldGenerateTitle) {
                try {
                    const { data } = await supabase.functions.invoke('generate-title', { body: { query: titleQuery } });
                    // Explicitly cast data to expected type
                    const titleData: { title?: string; error?: string } = data as { title?: string; error?: string };
                    if (titleData && titleData.title) {
                        await handleRenameConversation(activeConversationId as string, titleData.title);
                    }
                } catch (titleError: unknown) { // Use unknown for error type
                     console.error("Could not auto-generate title:", titleError);
                }
            }

            const payload = {
                message: currentInput,
                history: updatedMessages.slice(0, -1).map(m => ({role: m.role, content: m.content})),
                class_id: selectedClassId, // Pass selectedClassId to the chat Edge Function
                files: currentFiles.map(({ id, ...rest }) => rest)
                // Removed openAIConfig: openAIConfig (since it's no longer sourced from classes table)
            };
            const { data: aiData, error: aiError } = await supabase.functions.invoke('chat', { body: payload });
            // Explicitly type aiData if possible, or use assertions carefully
            const aiResponse: { response?: string; sources?: ActiveSource[]; error?: string } = aiData as { response?: string; sources?: ActiveSource[]; error?: string };

            if (aiError || !aiResponse || aiResponse.error) { // Check aiResponse.error
                throw new Error(aiError?.message || aiResponse?.error || "Invalid response from AI service.");
            }

            const savedAiMessage = await chatMessageService.saveMessage({
                conversation_id: activeConversationId as string,
                role: 'assistant',
                content: aiResponse.response as string, // Assert as string
                chat_mode: 'rag',
                class_id: selectedClassId,
                sources: aiResponse.sources || []
            });
            if (savedAiMessage) {
                setMessages(prev => [...prev.filter(m => m.id !== savedUserMessage.id), savedUserMessage, savedAiMessage]);
                handleMessageSelect(savedAiMessage);
            }

         } catch (error: unknown) { // Use unknown for error type
            toast({ title: "Error", description: (error instanceof Error) ? `Failed to get a response: ${error.message}` : "Failed to get a response: An unknown error occurred.", variant: "destructive" });
            setMessages(prev => prev.filter(m => m.id !== tempUserMessage.id)); // Remove temporary message
        } finally {
            setIsLoading(false);
        }
    };

    const handleRenameConversation = async (id: string, newName: string) => {
        if (!user) return;
        setConversations(prev => prev.map(c => c.id === id ? { ...c, name: newName } : c));
        try {
            await conversationService.renameConversation(id, newName, user.id);
            toast({ title: "Chat Renamed", description: `Conversation renamed to "${newName}"`});
        }
         catch (error: unknown) { // Use unknown for error type
             toast({ title: "Error", description: (error instanceof Error) ? error.message : "Failed to rename chat.", variant: "destructive" });
             fetchConversations();
        }
    };

    const handleDeleteConversation = (convo: AppConversation) => { setConversationToDelete(convo); };

    const confirmDelete = async () => {
        if (!conversationToDelete || !user) return;
        setIsDeleting(true);
        try {
             await conversationService.deleteConversation(conversationToDelete.id, user.id);
            const newConvos = conversations.filter(c => c.id !== conversationToDelete.id);
            setConversations(newConvos);
            if (selectedConversationId === conversationToDelete.id) {
                setSelectedConversationId(newConvos.length > 0 ? newConvos[0].id : null);
            }
            toast({ title: "Chat Deleted", description: `"${conversationToDelete.name}" was deleted.` });
        } catch (error: unknown) { // Use unknown for error type
            toast({ title: "Error", description: (error instanceof Error) ? error.message : "Failed to delete chat.", variant: "destructive" });
        } finally {
             setIsDeleting(false);
            setConversationToDelete(null);
        }
    };

    const handleCitationClick = (sourceNumber: number) => {
        const sourceElement = sourceRefs.current.get(sourceNumber);
        if (sourceElement) {
            sourceElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
            setHighlightedSourceNumber(sourceNumber);
            setTimeout(() => {
                setHighlightedSourceNumber(null);
            }, 2500);
        }
    };

    const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); handleSendMessage(); } };
    const getUserName = () => userProfile?.full_name || user?.email?.split('@')[0] || "You";

    return (
        <>
            <input type="file" ref={fileInputRef} onChange={handleFileSelect} className="hidden" multiple accept="image/png, image/jpeg, application/pdf" />
            <style>{`
            :root { --volcanic: #212121; --marble: #fafafa; --green: #39594D; }
            html, body, #root { font-family: "Trebuchet MS", sans-serif; height: 100%; }
             .bg-mushroom-100 { background-color: #75909C; } .bg-marble-100 { background-color: #F8F7F4; }
            .border-marble-400 { border-color:rgb(176, 197, 206); } .text-green-700 { color: #39594D; }
            .font-variable { font-family: "Trebuchet MS", sans-serif; } .text-volcanic-800 { color: #6B7280; }
            .hover\\:text-volcanic-900:hover { color: #212121; } .text-volcanic-900 { color: #212121; }
            .font-code { font-family: monospace; }
            .text-overline { font-size: 0.875rem; line-height: 1.25rem; letter-spacing: 0.05em; text-transform: uppercase; }
             .text-logo { font-size: 1.125rem; line-height: 1.75rem; } .rounded-lg { border-radius: 0.5rem; }
            .header-bg-chat { background-image: url('/background4.png'); background-size: cover; background-position: center; }
            .header-bg-other { background-image: url('/background5.png'); background-size: cover; background-position: center; }
             `}</style>
            <div className="h-screen w-full bg-mushroom-100 flex flex-col" onPaste={handlePaste}>
                <div className="p-3">
                    <nav className="z-navigation flex w-full items-center justify-between rounded-lg border border-marble-400 bg-marble-100 px-4 py-3">
                        <a href="/"><div className="mr-3 flex items-baseline"><span className="text-logo lowercase font-variable ml-1 font-light text-green-700">eido ai</span></div></a>
                        <div className="hidden md:flex flex-row items-center gap-x-4 gap-y-0 lg:gap-x-6 justify-between">
                            <Link to="/"><p className="text-overline uppercase font-code text-volcanic-800 hover:text-volcanic-900">Dashboard</p></Link>
                            <a href="/datasets"><p className="text-overline uppercase font-code text-volcanic-800 hover:text-volcanic-900">Datasets</p></a>
                            <a target="_blank" rel="noopener noreferrer" href="https://docs.cohere.com/"><p className="text-overline uppercase font-code text-volcanic-800 hover:text-volcanic-900">Docs</p></a>
                            <a target="_blank" rel="noopener noreferrer" href="#"><p className="text-overline uppercase font-code text-volcanic-800 hover:text-volcanic-900">Community</p></a>
                        </div>
                    </nav>
                </div>
                <main className="flex-grow flex flex-col md:flex-row gap-3 px-3 pb-3 min-h-0">
                    <div className="flex flex-col md:w-1/2 rounded-lg border border-marble-400 bg-white overflow-hidden">
                        <header className="flex items-center justify-between gap-x-2 border-b border-marble-400 px-4 h-14 flex-shrink-0 header-bg-chat">
                            <h3 className="text-sm uppercase font-semibold text-muted-foreground">Chat</h3>
                        </header>
                        <div className="flex-grow p-4 flex flex-col gap-4 overflow-y-auto">
                            <ScrollArea className="flex-grow pr-4 -mr-4">
                                <div className="space-y-4">
                                    {isLoadingMessages ? (<div className="flex items-center justify-center p-4"><Loader2 className="h-6 w-6 animate-spin text-stone-400" /></div>) : messages.map((message) => (
                                        <ChatMessage
                                          ref={(el) => messageRefs.current.set(message.id, el)}
                                          key={message.id}
                                          isUser={message.role === 'user'}
                                          senderName={message.role === 'user' ? getUserName() : 'Eido AI'}
                                          avatarUrl={message.role === 'user' ? userProfile?.avatar_url : undefined}
                                          content={message.content}
                                          isSelected={selectedMessageId === message.id}
                                          onClick={() => handleMessageSelect(message)}
                                          onCitationClick={handleCitationClick}
                                          attachedFiles={message.attached_files}
                                        />
                                    ))}
                                     {isLoading && !isLoadingMessages && (<div className="flex items-center justify-center p-4"><Loader2 className="h-6 w-6 animate-spin text-stone-400" /></div>)}
                                    <div ref={messagesEndRef} />
                                </div>
                            </ScrollArea>
                            <div className="mt-auto pt-4 border-t border-stone-200">
                                {attachedFiles.length > 0 && (
                                    <div className="px-1 pb-2">
                                        <ScrollArea className="w-full whitespace-nowrap">
                                            <div className="flex items-center gap-2 pb-2">
                                                {attachedFiles.map(file => (
                                                    <AttachedFilePill key={file.id} file={file} onRemove={handleRemoveFile} />
                                                ))}
                                            </div>
                                        </ScrollArea>
                                    </div>
                                )}
                                <div className="relative">
                                    <Button variant="ghost" size="icon" className="absolute left-2 bottom-1/2 translate-y-1/2 h-8 w-8 text-stone-500 hover:text-stone-800 hover:bg-stone-100" onClick={() => fileInputRef.current?.click()}>
                                        <PlusCircle className="h-5 w-5" />
                                        <span className="sr-only">Attach file</span>
                                    </Button>
                                    <Textarea
                                        placeholder="Ask about your documents, or attach a file..."
                                        className="min-h-[60px] bg-stone-50 pl-12 pr-24 resize-none"
                                        value={input}
                                        onChange={(e) => setInput(e.target.value)}
                                        onKeyDown={handleKeyDown}
                                        disabled={isLoading}
                                    />
                                    <Button className="absolute bottom-3 right-3" onClick={handleSendMessage} disabled={isLoading || (input.trim() === "" && attachedFiles.length === 0)}>Send</Button>
                                 </div>
                            </div>
                        </div>
                    </div>
                    <div className="flex flex-col md:w-1/4 rounded-lg border border-marble-400 bg-white overflow-hidden">
                        <header className="flex items-center justify-between gap-x-2 border-b border-marble-400 px-4 h-14 flex-shrink-0 header-bg-other">
                            <h3 className="text-sm uppercase font-semibold text-muted-foreground">Sources</h3>
                        </header>
                        <ScrollArea className="flex-grow p-4">
                             <div className="space-y-4">
                                {activeSources.length > 0 ? (
                                    activeSources.map((source) => (
                                         <div
                                             key={source.number}
                                             className={cn("p-3 border rounded-lg bg-stone-50 border-stone-200 transition-all", highlightedSourceNumber === source.number && "border-2 border-gray-400 shadow-md")}
                                             ref={(el) => sourceRefs.current.set(source.number, el)}
                                         >
                                            <div className="mb-2">
                                               <p className="text-xs font-semibold uppercase text-gray-500">SOURCE {source.number}</p>
                                               <div className="flex items-baseline">
                                                     <a href={source.url} target="_blank" rel="noopener noreferrer" className="font-medium text-sm text-stone-700 truncate hover:underline">
                                                        {source.name}
                                                     </a>
                                                </div>
                                             </div>
                                            <div className="border-t border-stone-200 pt-2 mt-2">
                                                 <div className="h-48 bg-stone-100 rounded-md p-3 text-xs text-stone-600 overflow-y-auto">
                                                     <HighlightedText text={source.content} keywords={source.highlight ? [source.highlight] : highlightKeywords} />
                                                 </div>
                                             </div>
                                         </div>
                                     ))
                                ) : (
                                     <div className="flex items-center justify-center h-full">
                                        <p className="text-sm text-muted-foreground text-center">Select an AI message to see its sources.</p>
                                     </div>
                                 )}
                             </div>
                        </ScrollArea>
                    </div>
                    <div className="flex flex-col md:w-1/4 gap-3">
                         <div className="flex flex-col h-1/2 rounded-lg border border-marble-400 bg-white overflow-hidden">
                            <header className="flex items-center justify-between gap-x-2 border-b border-marble-400 px-4 h-14 flex-shrink-0 header-bg-other">
                                <h3 className="text-sm uppercase font-semibold text-muted-foreground">Parameters</h3>
                            </header>
                            <div className="p-4 space-y-4 overflow-y-auto">
                                <div>
                                    <Label className="text-xs font-semibold uppercase text-stone-500">Dataset</Label>
                                     <div className="space-y-2 mt-1">
                                         <Select onValueChange={(value) => {
                                            setSelectedClassId(value === 'all' ? null : value);
                                            setSelectedConversationId(null); // Clear selected conversation when dataset changes
                                            setMessages([]); // Clear messages when dataset changes
                                        }} value={selectedClassId || "all"}>
                                             <SelectTrigger><SelectValue placeholder="Select a Dataset..." /></SelectTrigger>
                                             <SelectContent>
                                                 <SelectItem value="all">All Documents</SelectItem>
                                                 {classes.map(cls => (<SelectItem key={cls.class_id} value={cls.class_id}>{cls.class_name}</SelectItem>))} {/* Use cls.class_name */}
                                             </SelectContent>
                                         </Select>
                                     </div>
                                 </div>
                             </div>
                        </div>
                         <div className="flex flex-col h-1/2 rounded-lg border border-marble-400 bg-white overflow-hidden">
                            <header className="flex items-center justify-between gap-x-2 border-b border-marble-400 px-4 h-14 flex-shrink-0 header-bg-other">
                                <h3 className="text-sm uppercase font-semibold text-muted-foreground">History</h3>
                                <Button size="sm" onClick={handleNewChat}>New Chat</Button>
                            </header>
                            <div className="flex-grow min-h-0">
                                 <HistorySidebar conversations={conversations} selectedConversationId={selectedConversationId} onSelectConversation={setSelectedConversationId} onRenameConversation={handleRenameConversation} onDeleteConversation={handleDeleteConversation} isLoading={isLoadingConversations} />
                             </div>
                        </div>
                    </div>
                 </main>
                <AlertDialog open={!!conversationToDelete} onOpenChange={(open) => !open && setConversationToDelete(null)}>
                    <AlertDialogContent>
                        <AlertDialogHeader><AlertDialogTitle>Delete Chat?</AlertDialogTitle><AlertDialogDescription>Are you sure you want to delete "{conversationToDelete?.name}"? This action cannot be undone.</AlertDialogDescription></AlertDialogHeader>
                         <AlertDialogFooter>
                             <AlertDialogCancel disabled={isDeleting}>Cancel</AlertDialogCancel>
                            <AlertDialogAction onClick={confirmDelete} className="bg-destructive text-destructive-foreground hover:bg-destructive/90" disabled={isDeleting}>
                                {isDeleting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
                                Delete
                            </AlertDialogAction>
                         </AlertDialogFooter>
                    </AlertDialogContent>
                </AlertDialog>
            </div>
        </>
    );
};

export default OraclePage;

================
File: src/pages/PlaceholderPage.tsx
================
// src/pages/PlaceholderPage.tsx
import React from 'react';
import { Button } from "@/components/ui/button";
import { Link } from "react-router-dom";
import { Construction } from "lucide-react"; // Using Construction icon

interface PlaceholderPageProps {
  pageName?: string; // Optional prop to customize the message slightly
}

const PlaceholderPage: React.FC<PlaceholderPageProps> = ({ pageName }) => {
  return (
    <div className="flex flex-col items-center justify-center min-h-[calc(100vh-var(--header-height,60px)-4rem)] text-center p-4">
      <Construction className="w-24 h-24 text-yellow-500 mb-8" strokeWidth={1} />
      <h1 className="text-4xl font-bold mb-4">
        {pageName ? `${pageName} - Coming Soon!` : "New Features Coming Soon!"}
      </h1>
      <p className="text-lg text-muted-foreground mb-8">
        We're working hard to bring you this feature. Stay tuned!
      </p>
      <Button asChild>
        <Link to="/">Return to Home</Link>
      </Button>
    </div>
  );
};

export default PlaceholderPage;

================
File: src/pages/PrivacyPolicyPage.tsx
================
// src/pages/PrivacyPolicyPage.tsx
import React from 'react';
import { Helmet } from 'react-helmet-async';
import { Link } from 'react-router-dom';

const SectionTitle = ({ children }: { children: React.ReactNode }) => (
  <h3 className="text-2xl font-bold text-gray-800 mt-10 mb-4 border-b pb-2">{children}</h3>
);

const PrivacyPolicyPage = () => {
  return (
    <>
      <Helmet>
        <title>Privacy Policy | Eido AI</title>
      </Helmet>
      <div className="bg-gray-50">
        <div className="max-w-4xl mx-auto py-16 px-4 sm:px-6 lg:px-8">
          <div className="bg-white p-8 md:p-12 rounded-2xl shadow-lg">
            <div className="text-center">
              <h1 className="text-4xl font-extrabold tracking-tight text-gray-900 sm:text-5xl">
                Privacy Policy
              </h1>
              <p className="mt-4 text-lg text-gray-500">
                Last Updated: June 18, 2025
              </p>
            </div>
          
            <div className="mt-12 text-gray-700 space-y-6">
              <p className="text-lg leading-relaxed">
                Welcome to Eido AI ("Eido," "we," "our," or "us"). We are committed to protecting your privacy and being transparent about how we handle your data. This Privacy Policy explains what information we collect, how we use and share it, and your rights concerning your data when you use our application (the "Service"). This policy is an integral part of our <Link to="/terms" className="text-blue-600 hover:text-blue-800 underline">Terms of Service</Link>.
              </p>

              <SectionTitle>1. Information We Collect</SectionTitle>
              <p>To provide our Service, we collect the following types of information:</p>
              <ul className="list-disc list-outside space-y-3 pl-6">
                  <li>
                    <strong>Account Information:</strong> When you register, we collect personal information such as your name, email address, and encrypted password. If you sign up using Google OAuth, we receive your name and email address from Google.
                  </li>
                  <li>
                    <strong>User Content:</strong> Any files, documents, text, and images you upload to the Service to create your knowledge bases. You retain full ownership of your User Content.
                  </li>
                  <li>
                    <strong>Service Usage Data:</strong> We collect information about your interactions with the Service, including the questions you ask the AI, the AI-generated responses, flashcards, and quizzes you create. This is stored to provide you with your conversation history and access to your study materials.
                  </li>
              </ul>

              <SectionTitle>2. How We Use Your Information</SectionTitle>
              <p>We use your information for the sole purpose of providing and improving the Eido AI service. This includes:</p>
              <ul className="list-disc list-outside space-y-3 pl-6">
                <li><strong>To Operate the Service:</strong> We use your Account Information to create and manage your account. We process your User Content to power the core features of the app, such as enabling the AI to answer questions about your documents.</li>
                <li><strong>To Provide AI Features:</strong> To generate chat responses, flashcards, and quizzes, we send relevant portions of your User Content to our AI service providers.</li>
                <li><strong>To Improve Our Service:</strong> We may analyze anonymized usage data to understand how our features are being used, diagnose technical issues, and improve the overall user experience. We will never use your personal User Content to train our own models without your explicit consent.</li>
              </ul>
              
              <SectionTitle>3. How We Share and Disclose Information</SectionTitle>
              <p>We do not sell your personal information. We only share your data with the essential third-party service providers (sub-processors) that are required to operate our Service:</p>
              <ul className="list-disc list-outside space-y-3 pl-6">
                  <li>
                    <strong>Supabase:</strong> We use Supabase for our primary database, user authentication, and file storage. Your Account Information, Service Usage Data, and uploaded files are stored securely with Supabase.
                  </li>
                  <li>
                    <strong>Weaviate:</strong> We use Weaviate as our vector database. When you upload a document, we create vector embeddings (numerical representations) of your content, which are stored in Weaviate to enable fast and relevant semantic search.
                  </li>
                  <li>
                    <strong>OpenAI:</strong> As our primary AI model provider, we send relevant text chunks from your User Content, along with your query, to the OpenAI API to generate intelligent responses. Per OpenAI's policy, they do not use data submitted via their API to train their models.
                  </li>
              </ul>
              <p>We may also disclose your information if required by law or to protect the rights, property, or safety of Eido AI, our users, or others.</p>

              <SectionTitle>4. Data Storage, Security, and Retention</SectionTitle>
              <p>We take the security of your data very seriously. We rely on the industry-standard security practices of our cloud providers (Supabase, Weaviate, and OpenAI). All data is encrypted in transit and at rest.</p>
              <p>We retain your data for as long as your account is active. If you choose to delete your account, we will initiate a process to permanently delete all your associated data, including your account information, user content, and usage data from all our systems and those of our sub-processors within 30 days.</p>
              
              <SectionTitle>5. Your Rights and Choices</SectionTitle>
              <p>You have control over your personal information. You have the right to:</p>
              <ul className="list-disc list-outside space-y-3 pl-6">
                <li><strong>Access and Update:</strong> You can access and update your account information at any time through your profile settings.</li>
                <li><strong>Data Portability:</strong> You can download the files you have uploaded to the Service at any time.</li>
                <li><strong>Deletion:</strong> You can delete your account at any time through the "Delete Account" feature in your profile settings. This action is irreversible and will permanently delete all of your data as described in the section above.</li>
              </ul>

              <SectionTitle>6. Children's Privacy</SectionTitle>
              <p>Our Service is not intended for or directed at children under the age of 13. We do not knowingly collect personal information from children under 13. If we become aware that we have collected personal information from a child under 13, we will take steps to delete such information from our files as soon as possible.</p>

              <SectionTitle>7. Contact Us</SectionTitle>
              <p>
                If you have any questions or concerns about this Privacy Policy or our data practices, please contact us at: <a href="mailto:privacy@eido-ai.com" className="text-blue-600 hover:text-blue-800 underline">privacy@eido-ai.com</a>.

              </p>
              <p>Mailing: 17 Moonray, Irvine, CA, 92603</p>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default PrivacyPolicyPage;

================
File: src/pages/ProfilePage.tsx
================
// src/pages/ProfilePage.tsx
import React, { useState } from 'react';
import { Helmet } from 'react-helmet-async';
import { Link } from 'react-router-dom';
import { UserProfile } from "@/components/auth/UserProfile";
import { PasswordChangeForm } from "@/components/auth/PasswordChangeForm";
import { supabase } from "@/integrations/supabase/client";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { Loader2, Trash2 } from "lucide-react";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";

const ProfilePage = () => {
  const [isSignOutLoading, setIsSignOutLoading] = useState(false);
  const [isDeletingAccount, setIsDeletingAccount] = useState(false);
  const { toast } = useToast();

  const handleSignOut = async () => {
    setIsSignOutLoading(true);
    try {
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      // FIX: Clear client-side cache on sign out
      localStorage.removeItem('eidoRecentFiles');
      // Also remove active class from session storage to ensure full logout state
      sessionStorage.removeItem('activeClass');
      toast({
        title: "Signed out successfully",
        description: "You've been signed out of your account",
      });
      // The auth listener in App.tsx will handle the redirect
    } catch (error: unknown) { // Use unknown for error type
      console.error("Error signing out:", error);
      toast({
        title: "Sign out failed",
        description: (error instanceof Error) ? error.message : "There was a problem signing you out. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsSignOutLoading(false);
    }
  };

  const handleDeleteAccount = async () => {
    setIsDeletingAccount(true);
    try {
      // The 'delete-user-account' Edge Function should be updated to handle the new schema
      // and delete all user data from ALL relevant tables (classes, folders, files, etc.).
      const { data, error: functionError } = await supabase.functions.invoke('delete-user-account');
      
      const responseData: { error?: string } = data as { error?: string }; // Cast to specific type

      if (functionError) {
        throw new Error(functionError.message || "Failed to initiate account deletion process.");
      }
      if (responseData.error) {
        throw new Error(responseData.error);
      }

      // FIX: Clear client-side cache on account deletion
      localStorage.removeItem('eidoRecentFiles');
      // Also clear active class from session storage
      sessionStorage.removeItem('activeClass');
      toast({
        title: "Account Deletion Successful",
        description: "Your account and all associated data are being deleted.",
      });
      await supabase.auth.signOut();
    } catch (error: unknown) { // Use unknown for error type
      console.error('Error deleting account:', error);
      toast({
        title: "Account Deletion Failed",
        description: (error instanceof Error) ? error.message : "An unexpected error occurred.",
        variant: "destructive",
      });
    } finally {
      setIsDeletingAccount(false);
    }
  };

  return (
    <>
      <Helmet>
        <title>Profile | Eido AI</title>
        {/* You can include the same styles as DashboardPage here if they aren't global */}
      </Helmet>
      
      <div className="h-full w-full bg-mushroom-100">
        <div className="mx-auto flex h-screen w-screen max-w-page flex-1 flex-col overflow-y-auto md:overflow-y-visible">
          
          <div className="m-3">
            <nav className="z-navigation flex w-full items-center justify-between rounded-lg border border-marble-400 bg-marble-100 px-4 py-3">
              <a data-element="Link" href="/">
                 <div className="mr-3 flex items-baseline" data-component="NavigationLogo">
                  <span className="text-logo lowercase font-variable ml-1 font-light text-green-700">eido ai</span>
                </div>
              </a>
               <div className="hidden md:flex flex-row items-center gap-x-4 gap-y-0 lg:gap-x-6 justify-between md:w-fit md:max-w-[680px] lg:max-w-[820px]">
                <a href="/"><p className="text-overline uppercase font-code text-volcanic-800 hover:text-volcanic-900">Dashboard</p></a>
                 <a href="/datasets"><p className="text-overline uppercase font-code text-volcanic-800 hover:text-volcanic-900">Datasets</p></a>
                <a target="_blank" rel="noopener noreferrer" href="https://docs.cohere.com/"><p className="text-overline uppercase font-code text-volcanic-800 hover:text-volcanic-900">Docs</p></a>
                <a target="_blank" rel="noopener noreferrer" href="#"><p className="text-overline uppercase font-code text-volcanic-800 hover:text-volcanic-900">Community</p></a>
               </div>
            </nav>
           </div>
          <div className="flex w-full flex-grow justify-self-center pb-3 md:gap-x-3 main-content">
            <div className="ml-3 hidden md:flex">
              <div className="flex flex-col justify-between overflow-auto border-marble-400 bg-marble-100 md:rounded-lg md:border md:w-42 w-full lg:w-56 px-4 md:py-6">
                 <nav className="hidden w-full flex-col gap-y-8 md:flex">
                  <div className="flex flex-col gap-y-1">
                    <span className="text-overline uppercase font-code font-bold text-dark-blue">Platform</span>
                    <Link to="/"><span className="text-p font-body flex items-center py-0.5 text-volcanic-800 hover:text-volcanic-900"><span>Dashboard</span></span></Link>
                    <Link to="/datasets"><span className="text-p font-body flex items-center py-0.5 text-volcanic-800 hover:text-volcanic-900"><span>Datasets</span></span></Link>
                  </div>
                  <div className="flex flex-col gap-y-1">
                    <span className="text-overline uppercase font-code font-bold text-dark-blue">Tools</span>
                    <Link to="/oracle"><span className="text-p font-body flex items-center py-0.5 text-volcanic-800 hover:text-volcanic-900"><span>Oracle</span></span></Link>
                  </div>
                   <div className="flex flex-col gap-y-1">
                     <span className="text-overline uppercase font-code font-bold text-dark-blue">Settings</span>
                    <Link to="/billing"><span className="text-p font-body flex items-center py-0.5 text-volcanic-800 hover:text-volcanic-900"><span>Billing</span></span></Link>
                    <Link to="/profile"><span className="text-p font-body flex items-center py-0.5 text-volcanic-900"><div className="mr-3 h-2 w-2 rounded-full bg-coral-500"></div><span className="font-medium">Profile</span></span></Link>
                   </div>
                </nav>
              </div>
            </div>
             <main className="mx-3 flex h-full w-full flex-grow flex-col overflow-y-auto rounded-lg border border-marble-400 bg-marble-100 md:ml-0">
               {/* Main Content Area for Profile */}
                <div className="flex flex-col gap-y-8 p-4 md:p-9 lg:p-10">
                  <div>
                    <h1 className="text-h5-m lg:text-h4 font-variable font-[420] text-volcanic-900">
                      Profile & Settings
                    </h1>
                    <p className="text-p font-body text-volcanic-800 mt-2">
                      Manage your profile, password, and account settings.
                    </p>
                  </div>

                  <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                    <div className="lg:col-span-1">
                      <UserProfile />
                    </div>
                    <div className="lg:col-span-2 space-y-8">
                      <PasswordChangeForm />
                      
                      <Card className="border-red-500/30">
                        <CardHeader>
                          <CardTitle className="text-destructive">Danger Zone</CardTitle>
                          <CardDescription>
                            These actions are permanent and cannot be undone.
                          </CardDescription>
                        </CardHeader>
                        <CardContent>
                          <div className="flex flex-col sm:flex-row gap-4 items-center justify-between p-4 bg-red-500/5 rounded-lg">
                            <div>
                                <h3 className="font-medium text-volcanic-900">Delete Account</h3>
                                <p className="text-sm text-volcanic-800">Permanently delete your account and all of your data.</p>
                            </div>
                            <AlertDialog>
                              <AlertDialogTrigger asChild>
                                <Button
                                  variant="destructive"
                                  disabled={isDeletingAccount}
                                  className="w-full sm:w-auto flex-shrink-0"
                                >
                                  {isDeletingAccount ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Trash2 className="mr-2 h-4 w-4" />}
                                  Delete Account
                                </Button>
                              </AlertDialogTrigger>
                              <AlertDialogContent>
                                <AlertDialogHeader>
                                  <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                                  <AlertDialogDescription>
                                    This will permanently delete your account and remove all associated data from our servers. This action cannot be undone.
                                  </AlertDialogDescription>
                                </AlertDialogHeader>
                                <AlertDialogFooter>
                                  <AlertDialogCancel disabled={isDeletingAccount}>Cancel</AlertDialogCancel>
                                  <AlertDialogAction
                                    onClick={handleDeleteAccount}
                                    disabled={isDeletingAccount}
                                    className="bg-destructive hover:bg-destructive/90 text-destructive-foreground"
                                  >
                                    {isDeletingAccount ? "Deleting..." : "Yes, delete my account"}
                                  </AlertDialogAction>
                                </AlertDialogFooter>
                              </AlertDialogContent>
                            </AlertDialog>
                          </div>
                        </CardContent>
                      </Card>
                    </div>
                  </div>
                  <div className="pt-6 border-t mt-4">
                        <Button
                          variant="outline"
                          onClick={handleSignOut}
                          disabled={isSignOutLoading || isDeletingAccount}
                        >
                          {isSignOutLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
                          Sign Out
                        </Button>
                  </div>
                </div>
            </main>
          </div>
        </div>
      </div>
    </>
  );
};

export default ProfilePage;

================
File: src/pages/TermsOfServicePage.tsx
================
// src/pages/TermsOfServicePage.tsx
import React from 'react';
import { Helmet } from 'react-helmet-async';
import { Link } from 'react-router-dom';

const SectionTitle = ({ children }: { children: React.ReactNode }) => (
  <h3 className="text-2xl font-bold text-gray-800 mt-10 mb-4 border-b pb-2">{children}</h3>
);

const TermsOfServicePage = () => {
  return (
    <>
      <Helmet>
        <title>Terms of Service | Eido AI</title>
      </Helmet>
      <div className="bg-gray-50">
        <div className="max-w-4xl mx-auto py-16 px-4 sm:px-6 lg:px-8">
          <div className="bg-white p-8 md:p-12 rounded-2xl shadow-lg">
            <div className="text-center">
              <h1 className="text-4xl font-extrabold tracking-tight text-gray-900 sm:text-5xl">
                Terms of Service
              </h1>
              <p className="mt-4 text-lg text-gray-500">
                Last Updated: June 18, 2025
              </p>
            </div>
          
            <div className="mt-12 text-gray-700 space-y-6">
              <p className="text-lg leading-relaxed">
                Welcome to Eido AI ("Eido," "we," "our," or "us"). These Terms of Service ("Terms") govern your access to and use of our web application and services (collectively, the "Service"). By accessing or using the Service, you agree to be bound by these Terms and our <Link to="/privacy" className="text-blue-600 hover:text-blue-800 underline">Privacy Policy</Link>.
              </p>

              <SectionTitle>1. Description of Service</SectionTitle>
              <p>Eido AI is an educational copilot designed to help users create smart, searchable knowledge bases from their course materials. The Service uses artificial intelligence to allow users to chat with their documents and generate study aids like flashcards and quizzes ("AI-Generated Content").</p>

              <SectionTitle>2. User Accounts</SectionTitle>
              <p>To access most features of the Service, you must register for an account. You agree to provide accurate, current, and complete information during the registration process and to update such information to keep it accurate, current, and complete. You are responsible for safeguarding your password and for any activities or actions under your account.</p>
              
              <SectionTitle>3. User Content and Data</SectionTitle>
              <p>
                You retain full ownership of all documents, text, and other materials you upload to the Service ("User Content"). By uploading User Content, you grant Eido AI a worldwide, non-exclusive, royalty-free license to use, process, store, and transmit your User Content solely for the purpose of providing and improving the Service for you. This includes:
              </p>
              <ul className="list-disc list-outside space-y-2 pl-6">
                  <li>Processing your documents to create vector embeddings for search and retrieval.</li>
                  <li>Transmitting relevant portions of your User Content to our AI service providers (e.g., OpenAI, Weaviate) to generate responses and other AI-Generated Content.</li>
                  <li>Storing your User Content and AI-Generated Content on our secure cloud infrastructure (e.g., Supabase).</li>
              </ul>
              <p>You are solely responsible for your User Content and you represent and warrant that you own it or have all necessary rights to use it and grant us the license as described in these Terms.</p>

              <SectionTitle>4. Acceptable Use Policy</SectionTitle>
              <p>You agree not to use the Service to upload, create, or share any content that:</p>
              <ul className="list-disc list-outside space-y-2 pl-6">
                <li>Violates any applicable law or regulation.</li>
                <li>Infringes on the intellectual property rights of others (e.g., copyrighted material).</li>
                <li>Is unlawful, defamatory, harmful, obscene, or otherwise objectionable.</li>
                <li>Contains malicious code, viruses, or any other computer code, files, or programs designed to interrupt, destroy, or limit the functionality of any computer software or hardware or telecommunications equipment.</li>
              </ul>
              <p>Violation of this policy may result in the immediate suspension or termination of your account.</p>

              <SectionTitle>5. AI-Generated Content</SectionTitle>
              <p>The Service uses artificial intelligence to generate content such as chat responses, flashcards, and quizzes. While we strive for accuracy, AI-Generated Content may contain errors or inaccuracies. It is provided for educational and informational purposes only. You should independently verify any critical information before relying on it. Eido AI does not guarantee the accuracy, completeness, or usefulness of any AI-Generated Content.</p>
              
              <SectionTitle>6. Intellectual Property</SectionTitle>
              <p>Excluding your User Content, the Service and all materials therein, including, without limitation, software, images, text, graphics, logos, patents, trademarks, service marks, and copyrights (the "Eido AI Content"), and all Intellectual Property Rights related thereto, are the exclusive property of Eido AI. Use of the Eido AI Content for any purpose not expressly permitted by these Terms is strictly prohibited.</p>

              <SectionTitle>7. Termination</SectionTitle>
              <p>We may terminate or suspend your account and bar access to the Service immediately, without prior notice or liability, under our sole discretion, for any reason whatsoever, including but not limited to a breach of the Terms. If you wish to terminate your account, you may do so through the "Delete Account" feature in your profile settings. This action is irreversible.</p>

              <SectionTitle>8. Disclaimer of Warranties; Limitation of Liability</SectionTitle>
              <p>The Service is provided on an "AS IS" and "AS AVAILABLE" basis. Your use of the Service is at your sole risk. The Service is provided without warranties of any kind, whether express or implied. In no event shall Eido AI be liable for any indirect, incidental, special, consequential, or punitive damages arising out of or in connection with your use of the Service.</p>

              <SectionTitle>9. Governing Law</SectionTitle>
              <p>These Terms shall be governed and construed in accordance with the laws of the State of California, United States, without regard to its conflict of law provisions.</p>
              
              <SectionTitle>10. Changes to Terms</SectionTitle>
              <p>We reserve the right, at our sole discretion, to modify or replace these Terms at any time. If a revision is material, we will provide at least 30 days' notice prior to any new terms taking effect. By continuing to access or use our Service after any revisions become effective, you agree to be bound by the revised terms.</p>

              <SectionTitle>11. Contact Us</SectionTitle>
              <p>
                If you have any questions about these Terms, please contact us at: <a href="mailto:support@eido-ai.com" className="text-blue-600 hover:text-blue-800 underline">srwang@usc.edu</a>
              </p>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default TermsOfServicePage;

================
File: src/services/chatMessageService.ts
================
// src/services/chatMessageService.ts
import { supabase } from "@/integrations/supabase/client";
import type { CustomDatabase } from "@/integrations/supabase/client";
import { AttachedFile } from "@/components/chat/AttachedFilePill"; // Import the specific type

export type ChatMessageDBRow = CustomDatabase['public']['Tables']['chat_messages']['Row'];
export type ChatMessageDBInsert = CustomDatabase['public']['Tables']['chat_messages']['Insert'];

export interface ActiveSource {
    number: number;
    name: string;
    url: string;
    content: string;
    highlight?: string;
    //page_number?: number; // ADDED
}

export interface ChatMessageApp {
  id: string;
  role: 'user' | 'assistant' | 'system';
  content: string;
  createdAt: Date;
  conversation_id: string;
  sources?: ActiveSource[];
  // Add the new property for attached files
  attached_files?: { name: string, type: string }[];
}

const mapToAppMessage = (dbRow: any): ChatMessageApp => ({
  id: dbRow.id,
  role: dbRow.role as 'user' | 'assistant' | 'system',
  content: dbRow.content,
  createdAt: new Date(dbRow.created_at),
  conversation_id: dbRow.conversation_id!,
  sources: (dbRow.message_sources || []).map((source: any) => ({
      number: source.source_number,
      name: source.name,
      url: source.url,
      content: source.content,
      highlight: source.highlight,
      //page_number: source.page_number // ADDED
  })).sort((a: ActiveSource, b: ActiveSource) => a.number - b.number),
  // Map the new field from the database (it might be null)
  attached_files: dbRow.attached_files || [],
});

export const chatMessageService = {
  saveMessage: async (
    messagePayload: Omit<ChatMessageDBInsert, 'user_id' | 'id' | 'created_at'> & { conversation_id: string; sources?: ActiveSource[], attached_files?: { name: string, type: string }[] }
  ): Promise<ChatMessageApp> => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      throw new Error("User must be authenticated to save messages.");
    }

    const { sources, ...messageData } = messagePayload;
    // The attached_files property is already part of messageData if it exists
    const messageToSave: ChatMessageDBInsert = { ...messageData, user_id: user.id };

    const { data: savedMessage, error } = await supabase
      .from('chat_messages')
      .insert(messageToSave)
      .select('*, message_sources(*)') // Re-select sources after insert if needed
      .single();

    if (error) {
      console.error("chatMessageService.saveMessage: Error saving message:", error);
      throw error;
    }

    if (sources && sources.length > 0 && savedMessage) {
        const sourcesToInsert = sources.map(source => ({
            message_id: savedMessage.id,
            source_number: source.number,
            name: source.name,
            url: source.url,
            content: source.content,
            highlight: source.highlight,
            //page_number: source.page_number // MODIFIED: Include page_number in insert payload
        }));

        const { error: sourcesError } = await supabase
            .from('message_sources')
            .insert(sourcesToInsert);
        
        if(sourcesError){
            console.error("chatMessageService.saveMessage: Error saving sources:", sourcesError);
        }
    }
    
    return { ...mapToAppMessage(savedMessage), sources: sources || [] };
  },

  fetchMessagesByConversation: async (conversationId: string): Promise<ChatMessageApp[]> => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) return [];
    if (!conversationId) return [];

    const { data, error } = await supabase
      .from('chat_messages')
      .select(`*, message_sources(*)`)
      .eq('user_id', user.id)
      .eq('conversation_id', conversationId)
      .order('created_at', { ascending: true });

    if (error) {
      console.error("chatMessageService.fetchMessagesByConversation: Error fetching messages:", error);
      throw error;
    }

    return (data || []).map(mapToAppMessage);
  },
};

================
File: src/services/classOpenAIConfig.ts
================
// src/services/classOpenAIConfig.ts
import { supabase } from "@/integrations/supabase/client";
import type { CustomDatabase } from "@/integrations/supabase/client";

// Interface for OpenAI specific configurations for a class
// IMPORTANT: vectorStoreId and assistantId are NO LONGER stored on the 'classes' table.
// If class-specific OpenAI configs are still desired, a new DB table or
// a different management strategy (e.g., purely in Edge Functions) is needed.
export interface OpenAIConfig {
  // These fields are removed from the 'classes' table.
  // Keeping this interface for now as it might be used by other parts of the app
  // for payload structure, but getConfigForClass will return undefined for them.
  vectorStoreId?: string | null;
  assistantId?: string | null;
}

export interface ClassConfig {
  class_id: string;
  class_name: string; // Renamed from 'title'
  user_id?: string | null;
  created_at?: string | null;
  updated_at?: string | null;
  // Deleted fields: professor, classTime, classroom, emoji, enabledWidgets, openAIConfig
  // If openAIConfig is still needed as part of ClassConfig, it will have to be
  // derived or fetched from a different source. For now, it's removed.
}

type ClassesDBInsertPayload = CustomDatabase['public']['Tables']['classes']['Insert'];
type ClassesDBRow = CustomDatabase['public']['Tables']['classes']['Row'];
type ClassesDBUpdatePayload = Partial<ClassesDBRow>;

/**
 * Service to manage class configurations.
 * Note: Direct storage of OpenAI resource IDs (vectorStoreId, assistantId)
 * and detailed class metadata (professor, etc.) directly on the 'classes' table
 * is no longer supported by this client-side service as per the new schema.
 * Re-implement if needed via new tables or backend logic.
 */
export const classOpenAIConfigService = {
  /**
   * Get the OpenAI configuration (assistantId, vectorStoreId) for a specific class.
   * This function will now always return undefined as these columns are removed from 'classes' table.
   * Re-evaluate if these need to be stored elsewhere.
   *
   * @param class_id The ID of the class.
   * @returns Always undefined as these fields are no longer directly on the class record.
   */
  getConfigForClass: async (class_id: string): Promise<OpenAIConfig | undefined> => {
    console.warn("getConfigForClass: OpenAI config IDs are no longer stored on the 'classes' table. This function will return undefined.");
    return undefined; // Or throw an error if this is a critical dependency.
  },

  /**
   * Saves a new class or updates an existing one.
   *
   * @param className The name of the class (renamed from classTitle).
   * @param class_id_to_update Optional ID of the class to update.
   * @returns The created or updated Class database row object.
   */
  saveConfigForClass: async (
    className: string, // Renamed from classTitle
    class_id_to_update?: string | null
  ): Promise<ClassesDBRow> => {
    if (!className || typeof className !== 'string' || className.trim() === "") {
        throw new Error("Class name is required and cannot be empty.");
    }

    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
        throw new Error('Authentication required to save class configuration.');
    }

    let savedClassRecord: ClassesDBRow;
    if (class_id_to_update) {
      // Explicit UPDATE path
      console.log(`Attempting to update existing class with class_id: ${class_id_to_update}`);
      const updatePayload: ClassesDBUpdatePayload = {
        class_name: className, // Renamed from class_title
        updated_at: new Date().toISOString(),
        // Removed: professor, class_time, classroom, emoji, enabled_widgets, vector_store_id, assistant_id
      };
      const { data: updateData, error: updateError } = await supabase
        .from('classes')
        .update(updatePayload)
        .eq('class_id', class_id_to_update)
        .eq('user_id', user.id)
        .select()
        .single();
      if (updateError) {
        console.error('Error updating class in Supabase:', updateError);
        if (updateError.code === 'PGRST116') { // Not found
            throw new Error(`Class with ID ${class_id_to_update} not found for update, or you do not have permission.`);
        }
        throw updateError;
      }
      if (!updateData) throw new Error("Failed to update class, no data returned from Supabase.");
      savedClassRecord = updateData;
      console.log(`Successfully updated class '${className}' (ID: ${class_id_to_update}) in Supabase.`);
    } else {
      // INSERT path (for new classes)
      const { data: existingClassByName, error: fetchError } = await supabase // Renamed var to match new column
        .from('classes')
        .select('class_id, class_name') // Select class_name
        .eq('class_name', className) // Query by class_name
        .eq('user_id', user.id)
        .maybeSingle();
      if (fetchError) {
        console.error('Error checking if class exists by name:', fetchError); // Renamed log
        throw fetchError;
      }

      if (existingClassByName) {
        console.warn(`A class with the name '${className}' already exists for this user.`); // Renamed log
        throw new Error(`A class named '${className}' already exists. Please use a different name.`); // Renamed log
      }

      console.log('Inserting new class record for name:', className); // Renamed log
      const insertPayload: ClassesDBInsertPayload = {
        class_name: className, // Renamed from class_title
        user_id: user.id,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        // Removed: professor, class_time, classroom, emoji, enabled_widgets, vector_store_id, assistant_id
      };
      const { data: insertData, error: insertError } = await supabase
        .from('classes')
        .insert(insertPayload)
        .select()
        .single();
      if (insertError) {
        console.error('Error inserting new class into Supabase:', insertError);
        throw insertError;
      }
      if (!insertData) throw new Error("Failed to insert new class, no data returned from Supabase.");
      savedClassRecord = insertData;
      console.log(`Successfully inserted new class '${className}' with class_id: ${savedClassRecord.class_id}.`); // Renamed log
      // The provision-class-resources function invocation should be handled carefully
      // If assistant_id/vector_store_id are no longer on 'classes' table, this part
      // needs to be re-evaluated how those are stored/managed.
      // For now, removing the client-side attempt to update savedClassRecord with these.
      try {
        console.log(`Invoking 'provision-class-resources' for new class_id: ${savedClassRecord.class_id}`);
        // If 'provision-class-resources' still returns IDs and you want to store them,
        // you'd need a new table (e.g., 'openai_class_configs') to link them.
        const { data: provisionData, error: provisionError } = await supabase.functions.invoke(
          'provision-class-resources',
          { body: { class_id: savedClassRecord.class_id, class_name: savedClassRecord.class_name } } // Renamed class_title to class_name
        );
        if (provisionError) {
          console.error('Error invoking provision-class-resources Edge Function:', provisionError);
        } else {
          console.log('Successfully invoked provision-class-resources. Response:', provisionData);
          // Removed: savedClassRecord.assistant_id = provisionData.assistantId || null;
          // Removed: savedClassRecord.vector_store_id = provisionData.vectorStoreId || null;
        }
      } catch (invokeError) {
        console.error('Exception calling provision-class-resources Edge Function:', invokeError);
      }
    }
    return savedClassRecord;
  },

  getActiveClassConfig: async (): Promise<OpenAIConfig | undefined> => {
    console.warn("getActiveClassConfig: OpenAI config IDs are no longer stored on the 'classes' table. This function will return undefined.");
    return undefined; // Always return undefined now
    /*
    // Original logic that fetched config, now obsolete for direct DB access from 'classes'
    try {
      const activeClassJSON = sessionStorage.getItem('activeClass');
      if (!activeClassJSON) {
        return undefined;
      }
      const parsedActiveClass = JSON.parse(activeClassJSON) as Partial<ClassConfig & { class_id: string; class_name: string; openAIConfig?: OpenAIConfig }>; // Updated 'title' to 'class_name'
      
      // Removed: If (parsedActiveClass.openAIConfig ...)
      // Removed: if (parsedActiveClass.class_id) { return await classOpenAIConfigService.getConfigForClass(parsedActiveClass.class_id); }
      
      if (parsedActiveClass.class_name) { // Fallback for older session data or for initial load
         const { data: { user } } = await supabase.auth.getUser();
         if(user) {
            const { data: classFromDb, error } = await supabase
                .from('classes')
                .select('class_id') // Only select class_id or class_name, as other fields are removed
                .eq('class_name', parsedActiveClass.class_name) // Query by class_name
                .eq('user_id', user.id)
                .maybeSingle();
            if (error) { console.error("Error fetching class by name for active config:", error); throw error; } // Updated log
            if(classFromDb) {
                // If you re-introduce class-specific OpenAI configs in a new table, fetch them here
                // For now, returning undefined as they are not on 'classes' table.
                return undefined;
            }
         }
      }
      return undefined;
    } catch (error) {
      console.error('Error retrieving active class OpenAI configuration:', error);
      return undefined;
    }
    */
  },

  getAllClasses: async (): Promise<ClassConfig[]> => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      return [];
    }
    try {
      const { data, error } = await supabase
        .from('classes')
        .select('*') // Selects all remaining columns: class_id, class_name, user_id, created_at, updated_at
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });
      if (error) {
        console.error('Error fetching classes from Supabase:', error);
        throw error;
      }
      if (data) {
        return data.map((item: ClassesDBRow) => ({
          class_id: item.class_id,
          class_name: item.class_name, // Renamed from item.title
          user_id: item.user_id,
          created_at: item.created_at,
          updated_at: item.updated_at,
          // Removed: professor, classTime, classroom, emoji, enabledWidgets, openAIConfig
        }));
      }
      return [];
    } catch (error) {
      console.error('Error retrieving all classes:', error);
      throw error;
    }
  },

  deleteClass: async (class_id: string): Promise<void> => {
    if (!class_id) {
      throw new Error('Valid class_id is required for deletion');
    }
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      throw new Error('Authentication required to delete a class.');
    }

    console.log(`[deleteClass] Starting deletion process for class_id: ${class_id}`);
    try {
      // Step 1: Delete all dependent data in Supabase tables.
      // The order matters if there are dependencies between these tables.
      // We delete items that depend on others first.

      console.log(`[deleteClass] Deleting associated chat messages for class ${class_id}...`);
      const { error: msgError } = await supabase.from('chat_messages').delete().eq('class_id', class_id);
      if (msgError) console.error("Error deleting chat messages:", msgError);

      console.log(`[deleteClass] Deleting associated conversations for class ${class_id}...`);
      const { error: convoError } = await supabase.from('conversations').delete().eq('class_id', class_id);
      if (convoError) console.error("Error deleting conversations:", convoError);

      console.log(`[deleteClass] Deleting associated files for class ${class_id}...`);
      const { error: filesError } = await supabase.from('files').delete().eq('class_id', class_id);
      if (filesError) console.error("Error deleting files:", filesError);

      console.log(`[deleteClass] Deleting associated folders for class ${class_id}...`);
      const { error: foldersError } = await supabase.from('folders').delete().eq('class_id', class_id); // Changed from file_folders
      if (foldersError) console.error("Error deleting folders:", foldersError); // Changed log

      console.log(`[deleteClass] Deleting associated quiz questions for class ${class_id}...`);
      const { error: quizQError } = await supabase.from('quiz_questions').delete().eq('class_id', class_id);
      if (quizQError) console.error("Error deleting quiz questions:", quizQError);

      console.log(`[deleteClass] Deleting associated quizzes for class ${class_id}...`);
      const { error: quizError } = await supabase.from('quizzes').delete().eq('class_id', class_id);
      if (quizError) console.error("Error deleting quizzes:", quizError);

      console.log(`[deleteClass] Deleting associated flashcards for class ${class_id}...`);
      const { error: flashcardsError } = await supabase.from('flashcards').delete().eq('class_id', class_id);
      if(flashcardsError) console.error("Error deleting flashcards:", flashcardsError);

      console.log(`[deleteClass] Deleting associated flashcard decks for class ${class_id}...`);
      const { error: decksError } = await supabase.from('flashcard-decks').delete().eq('class_id', class_id);
      if(decksError) console.error("Error deleting flashcard decks:", decksError);
      
      // Step 2: Call the new Edge Function to delete data from Weaviate
      // This function's implementation might need to change if vector_store_id is no longer stored on classes table
      console.log(`[deleteClass] Invoking function to delete Weaviate data by class for class ${class_id}...`);
      const { error: weaviateDeleteError } = await supabase.functions.invoke(
        'delete-weaviate-data-by-class',
        { body: { class_id_to_delete: class_id } }
      );
      if (weaviateDeleteError) {
          console.error("Error cleaning up Weaviate data:", weaviateDeleteError);
          // We can choose to continue or throw an error. For now, we'll log it and proceed.
      }

      // Step 3: Now it's safe to delete the class record itself.
      console.log(`[deleteClass] Deleting class record for class_id: ${class_id}`);
      const { error: deleteClassError } = await supabase
        .from('classes')
        .delete()
        .eq('class_id', class_id);
      if (deleteClassError) {
        console.error("Error deleting the final class record:", deleteClassError);
        throw deleteClassError; // This is a critical failure
      }

      console.log(`[deleteClass] Successfully completed deletion for class_id: ${class_id}`);
    } catch (error) {
      console.error(`[deleteClass] A critical error occurred during the deletion process for class ${class_id}:`, error);
      throw error;
    }
  },

  clearAllData: async (): Promise<void> => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      sessionStorage.removeItem('activeClass');
      return;
    }
    try {
      console.warn(`Attempting to delete ALL classes for user: ${user.id} from DB.`);
      await supabase.from('classes').delete().eq('user_id', user.id);
      sessionStorage.removeItem('activeClass');
      console.log(`Cleared all database class data and session storage for user: ${user.id}.`);
    } catch (error) { console.error('Error clearing all class data:', error); throw error; }
  },
};

================
File: src/services/conversationService.ts
================
// src/services/conversationService.ts
import { supabase } from "@/integrations/supabase/client";
import type { CustomDatabase } from "@/integrations/supabase/client";

export type ConversationDBRow = CustomDatabase['public']['Tables']['conversations']['Row'];
export type ConversationDBInsert = CustomDatabase['public']['Tables']['conversations']['Insert'];
export type ConversationDBUpdate = CustomDatabase['public']['Tables']['conversations']['Update'];

// This type is now exported to be used by other components
export interface AppConversation {
  id: string;
  name: string;
  user_id: string;
  class_id: string | null;
  chat_mode: 'rag' | 'web' | null;
  created_at: Date;
  last_message_at: Date;
  updated_at: Date;
  chatbot_type: string;
}

const mapToAppConversation = (dbRow: ConversationDBRow): AppConversation => ({
  id: dbRow.id,
  name: dbRow.title || 'Untitled',
  user_id: dbRow.user_id,
  class_id: dbRow.class_id,
  chat_mode: dbRow.chat_mode as 'rag' | 'web' | null,
  chatbot_type: dbRow.chatbot_type,
  created_at: new Date(dbRow.created_at || 0),
  last_message_at: new Date(dbRow.last_message_at || 0),
  updated_at: new Date(dbRow.updated_at || 0),
});

export const conversationService = {
  fetchConversations: async (userId: string, class_id?: string, chat_mode?: 'rag' | 'web'): Promise<AppConversation[]> => {
   let query = supabase
      .from('conversations')
      .select('*')
      .eq('user_id', userId);
  
    if(class_id){
      query = query.eq('class_id', class_id);
    }
    if(chat_mode){
      query = query.eq('chat_mode', chat_mode);
    }
  
    query = query.order('last_message_at', { ascending: false });

    const { data, error } = await query;

    if (error) {
      console.error("[conversationService] Error fetching conversations:", error);
      throw error;
    }
    return (data || []).map(dbRow => mapToAppConversation(dbRow));
  },

  createConversation: async (
    payload: { name: string; class_id?: string | null; chat_mode?: 'rag' | 'web' | null; chatbot_type?: string; },
    userId: string
  ): Promise<AppConversation> => {
    const insertData: ConversationDBInsert = {
      title: payload.name,
      class_id: payload.class_id || null,
      chat_mode: payload.chat_mode || 'rag',
      chatbot_type: payload.chatbot_type || 'oracle',
      user_id: userId,
    };
    const { data, error } = await supabase
      .from('conversations')
      .insert(insertData)
       .select()
       .single();

    if (error) {
      console.error("[conversationService] Error creating conversation:", error);
      throw error;
    }
    return mapToAppConversation(data);
  },

  renameConversation: async (
    conversationId: string,
    newName: string,
    userId: string
  ): Promise<AppConversation> => {
   const updatePayload: Partial<ConversationDBUpdate> = {
        title: newName,
        updated_at: new Date().toISOString(),
    };
    const { data, error } = await supabase
       .from('conversations')
      .update(updatePayload)
      .eq('id', conversationId)
      .eq('user_id', userId)
      .select()
      .single();

    if (error) {
      console.error("[conversationService] Error renaming conversation:", error);
      throw error;
    }
    return mapToAppConversation(data);
  },

  deleteConversation: async (
    conversationId: string,
    userId: string
  ): Promise<void> => {
    const { error: messagesError } = await supabase
       .from('chat_messages')
      .delete()
      .eq('conversation_id', conversationId)
      .eq('user_id', userId);

    if (messagesError) {
      console.error(`[conversationService] Error deleting messages for conversation ${conversationId}:`, messagesError);
      throw messagesError;
    }

    const { error: conversationError } = await supabase
      .from('conversations')
      .delete()
      .eq('id', conversationId)
      .eq('user_id', userId);

    if (conversationError) {
      console.error(`[conversationService] Error deleting conversation ${conversationId}:`, conversationError);
      throw conversationError;
    }
  },
  
  updateConversationTimestamp: async (conversationId: string, userId: string, timestamp: Date): Promise<AppConversation> => {
    const { data, error } = await supabase
      .from('conversations')
      .update({ last_message_at: timestamp.toISOString() })
      .eq('id', conversationId)
      .eq('user_id', userId)
      .select()
      .single();

    if (error) {
      console.error(`[conversationService] Error updating timestamp for conversation ${conversationId}:`, error);
      throw error;
    }
    return mapToAppConversation(data);
  }
};

================
File: src/services/fileService.ts
================
// src/services/fileService.ts
import { supabase } from "@/integrations/supabase/client";
import { FolderType, FileType } from "@/features/files/types";
import { getEmojiForClass } from "@/utils/emojiUtils"; // Still exists, but its usage for class creation is removed

export const fileService = {
  // --- Create Operations ---
  createClass: async (className: string) => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) throw new Error("User not authenticated.");
    const { data, error } = await supabase
      .from('classes')
      .insert({ class_name: className, user_id: user.id }) // Renamed class_title to class_name, removed emoji
      .select()
      .single();
    if (error) { console.error("Error creating class:", error); throw error; }
    return data;
  },

  createFolder: async (folderName: string, classId: string, parentFolderId: string | null) => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) throw new Error("User not authenticated.");
    const { data, error } = await supabase
      .from('folders') // Changed from file_folders
      .insert({ folder_name: folderName, user_id: user.id, class_id: classId, parent_id: parentFolderId }) // Renamed 'name' to 'folder_name', removed 'database_id'
      .select()
      .single();
    if (error) { console.error("Error creating folder:", error); throw error; }
    return data;
  },

  // NOTE: This function's interaction with 'upload-to-vector-store' will need
  // careful review, as openai_file_id and database_id are removed from 'files' table
  // and vector_store_id is removed from 'classes' table. The Edge Function
  // 'upload-to-vector-store' might need to be re-designed to manage Weaviate
  // interaction without these direct client-side properties.
  uploadFiles: async (files: File[], classId: string, folderId: string | null) => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) throw new Error("User not authenticated.");
    const uploadPromises = files.map(async (file) => {
        const filePath = `${user.id}/${classId}/${folderId || 'root'}/${Date.now()}-${file.name}`;
        const { data: storageData, error: uploadError } = await supabase.storage.from('file_storage').upload(filePath, file);
        if (uploadError) throw new Error(`Storage upload failed for ${file.name}: ${uploadError.message}`);
        const { data: urlData } = supabase.storage.from('file_storage').getPublicUrl(storageData.path);
        const { data: dbFile, error: dbError } = await supabase.from('files').insert({
                name: file.name, size: file.size, type: file.type, url: urlData.publicUrl,
                user_id: user.id, class_id: classId, folder_id: folderId,
                // Removed: openai_file_id, database_id
            }).select().single();
        if (dbError) throw new Error(`Database insert failed for ${file.name}: ${dbError.message}`);
        if (dbFile) {
            // The `upload-to-vector-store` Edge Function needs to be aware of the schema changes
            // and how it will get the vector_store_id if it's not on the class anymore.
            // For now, passing class_id for context, assuming the Edge Function handles the rest.
            await supabase.functions.invoke('upload-to-vector-store', {
                body: { files: [{...dbFile, file_id: dbFile.file_id}], class_id: classId },
            });
        }
    });
    await Promise.all(uploadPromises);
  },

  // --- Read Operations ---
  getFolders: async (classId: string, parentFolderId: string | null): Promise<FolderType[]> => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) throw new Error("User not authenticated.");
    let query = supabase.from('folders').select('*').eq('user_id', user.id).eq('class_id', classId); // Changed from file_folders
    if (parentFolderId) { query = query.eq('parent_id', parentFolderId); }
    else { query = query.is('parent_id', null); }
    const { data, error } = await query.order('folder_name', { ascending: true }); // Ordered by folder_name
    if (error) { console.error("Error fetching folders:", error); throw error; }
    return data as FolderType[];
  },

  getFiles: async (classId: string, parentFolderId: string | null): Promise<FileType[]> => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) throw new Error("User not authenticated.");
    let query = supabase.from('files').select('*').eq('user_id', user.id).eq('class_id', classId);
    if (parentFolderId) { query = query.eq('folder_id', parentFolderId); }
    else { query = query.is('folder_id', null); }
    const { data, error } = await query.order('name', { ascending: true });
    if (error) { console.error("Error fetching files:", error); throw error; }
    return data as FileType[];
  },
  
  getAllFoldersForUser: async (): Promise<FolderType[]> => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) return [];
    const { data, error } = await supabase
      .from('folders') // Changed from file_folders
      .select('*')
      .eq('user_id', user.id);
    if (error) { console.error("Error fetching all folders for user:", error); throw error; }
    return data as FolderType[];
  },
  
  getAllFilesForClass: async (classId: string): Promise<FileType[]> => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) return [];
    const { data, error } = await supabase
      .from('files')
      .select('*')
      .eq('user_id', user.id)
      .eq('class_id', classId);
    if (error) { console.error("Error fetching all files for class:", error); throw error; }
    return data as FileType[];
  },

  getAllFilesWithClass: async (): Promise<unknown[]> => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) throw new Error("User not authenticated.");
    const { data, error } = await supabase.from('files').select(`*, classes (class_name)`).eq('user_id', user.id); // Changed class_title to class_name
    if (error) { console.error("Error fetching all files with class names:", error); throw error; }
    return (data || []).map(file => ({ ...file, class: file.classes?.class_name || 'Unknown Class' })); // Changed class_title to class_name
  },

  deleteFile: async (file: FileType): Promise<void> => {
    if (!file || !file.file_id || !file.url) {
      throw new Error("Invalid file object provided for deletion.");
    }
    const filePathInStorage = new URL(file.url).pathname.split('/public/file_storage/')[1];
    // This removes the actual file from Supabase storage bucket
    await supabase.storage.from('file_storage').remove([filePathInStorage]);

    // The 'delete-weaviate-chunks-by-file' Edge Function should be updated to
    // handle the removal of vector_store_id from the classes table if it relied on it.
    // Assuming it can still find chunks by file_id.
    await supabase.functions.invoke('delete-weaviate-chunks-by-file', {
        body: { file_id: file.file_id }
    });
    
    // This removes the file record from your Supabase 'files' table
    const { error: dbError } = await supabase.from('files').delete().eq('file_id', file.file_id);
    if (dbError) { console.error("Error deleting file from database:", dbError); throw dbError; }
  }
};

================
File: src/App.css
================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

================
File: src/App.tsx
================
// src/App.tsx

import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { AuthGuard } from "./components/auth/AuthGuard";
// REMOVED: import { WidgetsProvider } from "./hooks/use-widgets"; // This line is causing the error
import { HelmetProvider } from 'react-helmet-async';

// Import all active page components
import AuthPage from "./pages/AuthPage";
import NotFound from "./pages/NotFound";
import OraclePage from "./pages/OraclePage";
import DatasetsPage from "./pages/DatasetsPage";
import ProfilePage from "./pages/ProfilePage";
import DashboardPage from "./pages/DashboardPage";
import PlaceholderPage from "./pages/PlaceholderPage";
import PrivacyPolicyPage from "./pages/PrivacyPolicyPage";
import TermsOfServicePage from "./pages/TermsOfServicePage";

const queryClient = new QueryClient();

const App = () => (
  <HelmetProvider>
    <QueryClientProvider client={queryClient}>
      <TooltipProvider>
        <Toaster />
        <Sonner />
        {/* Removed: WidgetsProvider wrapper as widget functionality is obsolete */}
        <BrowserRouter>
          <Routes>
            {/* Public routes that anyone can see */}
            <Route path="/" element={<DashboardPage />} />
            <Route path="/auth" element={<AuthPage />} />
            <Route path="/privacy" element={<PrivacyPolicyPage />} />
            <Route path="/terms" element={<TermsOfServicePage />} />

            {/* Protected routes wrapped by AuthGuard, requiring login */}
            <Route element={<AuthGuard />}>
              <Route path="/profile" element={<ProfilePage />} />
              <Route path="/oracle" element={<OraclePage />} />
              <Route path="/datasets" element={<DatasetsPage />} />
              {/* Placeholder routes for future features */}
              <Route path="/command" element={<PlaceholderPage pageName="Command" />} />
              <Route path="/calendar" element={<PlaceholderPage pageName="Calendar" />} />
              <Route path="/billing" element={<PlaceholderPage pageName="Billing" />} />
              <Route path="/chrono" element={<PlaceholderPage pageName="Chrono" />} />
              <Route path="/codex" element={<PlaceholderPage pageName="Codex" />} />
            </Route>

            {/* Catch-all 404 route */}
            <Route path="*" element={<NotFound />} />
          </Routes>
        </BrowserRouter>
      </TooltipProvider>
    </QueryClientProvider>
  </HelmetProvider>
);

export default App;

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 38 56% 96%;
    --foreground: 220 10% 22%;

    --card: 0 0% 100%;
    --card-foreground: 220 10% 22%;

    --popover: 0 0% 100%;
    --popover-foreground: 220 10% 22%;

    --primary: 185 72% 36%;
    --primary-foreground: 210 40% 98%;

    --secondary: 200 40% 25%;
    --secondary-foreground: 210 40% 98%;

    --muted: 220 15% 94%;
    --muted-foreground: 220 10% 40%;

    --accent: 185 72% 36%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 220 13% 91%;
    --input: 220 13% 91%;
    --ring: 185 72% 36%;

    --radius: 0.5rem; /* MODIFIED: Was 0.75rem */

    --sidebar-background: 220 30% 18%;
    --sidebar-foreground: 210 40% 98%;
    --sidebar-primary: 185 72% 36%;
    --sidebar-primary-foreground: 210 40% 98%;
    --sidebar-accent: 220 20% 25%;
    --sidebar-accent-foreground: 210 40% 98%;
    --sidebar-border: 220 20% 25%;
    --sidebar-ring: 185 72% 36%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
  }
}

@layer components {
  .gradient-background {
    @apply bg-gradient-to-br from-cybercoach-blue-light/10 to-cybercoach-teal-light/10;
  }
  
  .cyber-card {
    @apply bg-white rounded-lg shadow-md p-6 border border-slate-200 hover:border-slate-300 transition-all;
  }

  .chat-message {
    @apply p-4 rounded-lg my-2 max-w-[85%];
  }

  .user-message {
    @apply chat-message bg-cybercoach-blue-light/20 ml-auto;
  }

  .ai-message {
    @apply chat-message bg-gray-100 mr-auto;
  }

  .policy-card {
    @apply bg-white rounded-lg shadow-md p-6 border border-slate-200 hover:shadow-lg transition-all duration-300;
  }

  
  .section-header {
    @apply text-2xl font-semibold text-cybercoach-blue-dark mb-4;
  }
}

================
File: src/main.tsx
================
// src/main.tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css'; // or your global stylesheet
import { HelmetProvider } from 'react-helmet-async';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <HelmetProvider>
      <App />
    </HelmetProvider>
  </React.StrictMode>
);

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

interface ImportMetaEnv {
  readonly VITE_SUPABASE_URL: string
  readonly VITE_SUPABASE_ANON_KEY: string
}

interface ImportMeta {
  readonly env: ImportMetaEnv
}

================
File: supabase/.branches/_current_branch
================
main

================
File: supabase/.temp/cli-latest
================
v2.26.9

================
File: supabase/.temp/gotrue-version
================
v2.176.1

================
File: supabase/.temp/pooler-url
================
postgresql://postgres.uzdtqomtbrccinrkhzme:[YOUR-PASSWORD]@aws-0-us-west-1.pooler.supabase.com:6543/postgres

================
File: supabase/.temp/postgres-version
================
15.8.1.082

================
File: supabase/.temp/project-ref
================
uzdtqomtbrccinrkhzme

================
File: supabase/.temp/rest-version
================
v12.2.3

================
File: supabase/.temp/storage-version
================
custom-metadata

================
File: supabase/functions/_shared/cors.ts
================
export const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

================
File: supabase/functions/check-env-vars/index.ts
================
// supabase/functions/check-env-vars/index.ts

import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import weaviate, { WeaviateClient, ApiKey } from 'npm:weaviate-ts-client@2.0.0';
import { corsHeaders } from "../_shared/cors.ts";

serve(async (_req) => {
  // This function checks environment variables and connectivity to Weaviate.
  console.log("Running diagnostic check...");

  try {
    const weaviateHost = Deno.env.get("WEAVIATE_URL");
    const weaviateApiKey = Deno.env.get("WEAVIATE_API_KEY");
    const openAIApiKey = Deno.env.get("OPENAI_API_KEY");

    const secretsReport = {
      WEAVIATE_URL_SET: !!weaviateHost,
      WEAVIATE_API_KEY_SET: !!weaviateApiKey,
      OPENAI_API_KEY_SET: !!openAIApiKey,
    };

    let connectionReport = {
      weaviateConnectionSuccessful: false,
      error: "Not attempted due to missing secrets.",
    };

    // Only attempt to connect if the required secrets are present.
    if (weaviateHost && weaviateApiKey && openAIApiKey) {
      try {
        const weaviateClient: WeaviateClient = weaviate.client({
          scheme: 'https',
          host: weaviateHost,
          apiKey: new ApiKey(weaviateApiKey),
          headers: { 'X-OpenAI-Api-Key': openAIApiKey },
        });

        // The .misc.liveChecker() is a built-in way to check if the Weaviate instance is running.
        const isLive = await weaviateClient.misc.liveChecker();
        if (isLive) {
          connectionReport = {
            weaviateConnectionSuccessful: true,
            error: "null",
          };
          console.log("Diagnostic check: Successfully connected to Weaviate.");
        } else {
           throw new Error("liveChecker returned false. Instance may be unhealthy.");
        }
      } catch (e) {
        console.error("Diagnostic check: Weaviate connection failed.", e);
        connectionReport = {
          weaviateConnectionSuccessful: false,
          error: e.message,
        };
      }
    }

    const allGood = Object.values(secretsReport).every(Boolean) && connectionReport.weaviateConnectionSuccessful;

    return new Response(
      JSON.stringify({
        success: true,
        message: allGood ? "All checks passed." : "One or more checks failed.",
        report: {
          secrets: secretsReport,
          connectivity: connectionReport,
        }
      }),
      { headers: { ...corsHeaders, "Content-Type": "application/json" }, status: 200 }
    );
  } catch (error) {
    console.error("Critical error in check-env-vars function:", error);
    return new Response(
      JSON.stringify({ success: false, error: error.message }),
      { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }
});

================
File: supabase/functions/generate-flashcards/index.ts
================
// supabase/functions/generate-flashcards/index.ts
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { corsHeaders } from "../_shared/cors.ts"; // Ensure this path is correct

const ASSISTANT_RUN_TIMEOUT = 60000; 

interface FlashcardContent {
  front: string;
  back: string;
}

interface RequestBody {
  title: string;
  cardCount?: number;
  openAIConfig?: {
    assistantId?: string;
  };
}

interface OpenAIThread { id: string; }
interface OpenAIRun {
  id: string;
  status: 'queued' | 'in_progress' | 'cancelling' | 'completed' | 'failed' | 'expired' | 'requires_action';
  last_error?: { message?: string } | null;
}
interface OpenAIMessageContentText { type: "text"; text: { value: string; annotations: unknown[]; };}
interface OpenAIMessage { id: string; role: 'user' | 'assistant'; content: OpenAIMessageContentText[]; }
interface OpenAIMessagesList { data?: OpenAIMessage[]; }
interface OpenAIChatCompletionChoice { message: { content: string; }; }
interface OpenAIChatCompletion { choices: OpenAIChatCompletionChoice[]; }
interface ParsedFlashcardResponse { flashcards: FlashcardContent[]; }
type ParsedFlashcardArrayResponse = FlashcardContent[];

serve(async (req: Request) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { title, cardCount = 10, openAIConfig = {} }: RequestBody = await req.json();
    
    const openaiApiKey = Deno.env.get("OPENAI_API_KEY");
    if (!openaiApiKey) {
      console.error("generate-flashcards: OPENAI_API_KEY env var not set.");
      throw new Error('Server configuration error: OpenAI API key is missing.');
    }

    const assistantId = openAIConfig.assistantId;

    if (!assistantId) {
      console.warn("generate-flashcards: No assistantId provided. Using fallback Chat Completions.");
      const genericPrompt = `You are a flashcard generator. Create ${cardCount} flashcards for the topic "${title}". Format each flashcard as a JSON object with "front" and "back" properties. Your response must be a valid JSON object containing a single key "flashcards" which is an array of these objects. Example: {"flashcards": [{"front": "Question 1", "back": "Answer 1"}, {"front": "Question 2", "back": "Answer 2"}]}`;
      
      const fallbackResponse = await fetch('https://api.openai.com/v1/chat/completions', {
          method: 'POST',
          headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'Content-Type': 'application/json' },
          body: JSON.stringify({ model: 'gpt-4o-mini', messages: [{ role: 'system', content: "You output JSON." },{ role: 'user', content: genericPrompt }], temperature: 0.5, response_format: { type: "json_object" } }),
      });

      if (!fallbackResponse.ok) {
          const errorText = await fallbackResponse.text();
          console.error('generate-flashcards: Fallback OpenAI API error:', fallbackResponse.status, errorText);
          throw new Error(`Fallback OpenAI API error: ${fallbackResponse.status}. ${errorText}`);
      }
      const fallbackData = await fallbackResponse.json() as OpenAIChatCompletion;
      let flashcards: FlashcardContent[] = [];
      try {
          const messageContent = fallbackData.choices[0]?.message?.content;
          if (!messageContent) {
            throw new Error("No content in fallback AI response.");
          }
          const parsedContent = JSON.parse(messageContent) as ParsedFlashcardResponse | ParsedFlashcardArrayResponse;

          if ('flashcards' in parsedContent && Array.isArray(parsedContent.flashcards)) {
               flashcards = parsedContent.flashcards.map((card: FlashcardContent) => ({
                  front: card.front || `Question about ${title}`,
                  back: card.back || "Answer not available"
              }));
          } else if (Array.isArray(parsedContent)) { 
               flashcards = parsedContent.map((card: FlashcardContent) => ({
                  front: card.front || `Question about ${title}`,
                  back: card.back || "Answer not available"
              }));
          } else {
            throw new Error("Fallback AI response did not follow the expected JSON format (expected an object with a 'flashcards' array or a direct array of flashcards).");
          }
      } catch (e) {
          const error = e as Error;
          console.error("generate-flashcards: Error parsing fallback JSON", error.message, fallbackData.choices[0]?.message?.content);
          throw new Error(`Could not parse flashcards from fallback AI response: ${error.message}`);
      }
      return new Response(JSON.stringify({ flashcards }), { headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
    }

    console.log(`generate-flashcards: Using Assistant ID: ${assistantId} for topic: "${title}", count: ${cardCount}`);

    const threadResponse = await fetch('https://api.openai.com/v1/threads', {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'Content-Type': 'application/json', 'OpenAI-Beta': 'assistants=v2' },
      body: JSON.stringify({}),
    });
    if (!threadResponse.ok) throw new Error(`Failed to create assistant thread: ${await threadResponse.text()}`);
    const thread = await threadResponse.json() as OpenAIThread;
    const threadId = thread.id;
    console.log(`generate-flashcards: Created thread ID: ${threadId}`);

    const userMessageContent = `Generate ${cardCount} flashcards on the topic "${title}".
The flashcards should be based on the materials provided for this class.
Format your response as a valid JSON object containing a single key "flashcards" which is an array of objects.
Each object in the "flashcards" array should have two properties: "front" (for the question or term) and "back" (for the answer or definition).
Example: {"flashcards": [{"front": "What is the capital of France?", "back": "Paris"}, {"front": "Define mitosis.", "back": "A type of cell division..."}]}`;

    await fetch(`https://api.openai.com/v1/threads/${threadId}/messages`, {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'Content-Type': 'application/json', 'OpenAI-Beta': 'assistants=v2' },
      body: JSON.stringify({ role: 'user', content: userMessageContent }),
    });
    console.log(`generate-flashcards: Added message to thread ${threadId}`);

    const runResponse = await fetch(`https://api.openai.com/v1/threads/${threadId}/runs`, {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'Content-Type': 'application/json', 'OpenAI-Beta': 'assistants=v2' },
      body: JSON.stringify({
        assistant_id: assistantId,
        instructions: `You are an expert flashcard generator. Please generate ${cardCount} flashcards for the topic "${title}" based on the provided class materials. Output the flashcards in the specified JSON format: {"flashcards": [{"front": "...", "back": "..."}, ...]}. Ensure the content is accurate and relevant to the topic, drawing from the documents you have access to.`
      }),
    });
    if (!runResponse.ok) throw new Error(`Failed to run assistant: ${await runResponse.text()}`);
    let run = await runResponse.json() as OpenAIRun;
    console.log(`generate-flashcards: Created run ID: ${run.id} for thread ${threadId}`);

    const startTime = Date.now();
    while (['queued', 'in_progress', 'cancelling'].includes(run.status)) {
      if (Date.now() - startTime > ASSISTANT_RUN_TIMEOUT) {
        await fetch(`https://api.openai.com/v1/threads/${threadId}/runs/${run.id}/cancel`, {
          method: 'POST',
          headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'OpenAI-Beta': 'assistants=v2' }
        });
        throw new Error('Flashcard generation timed out.');
      }
      await new Promise(resolve => setTimeout(resolve, 2000));
      const runStatusResponse = await fetch(`https://api.openai.com/v1/threads/${threadId}/runs/${run.id}`, {
        headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'OpenAI-Beta': 'assistants=v2' }
      });
      if (!runStatusResponse.ok) throw new Error(`Failed to check assistant run status: ${await runStatusResponse.text()}`);
      run = await runStatusResponse.json() as OpenAIRun;
      console.log(`generate-flashcards: Run ${run.id} status: ${run.status}`);
    }

    if (run.status !== 'completed') {
      throw new Error(`Flashcard generation failed. Status: ${run.status}. ${run.last_error?.message || ''}`);
    }

    const messagesResponse = await fetch(`https://api.openai.com/v1/threads/${threadId}/messages?order=desc&limit=1`, {
      headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'OpenAI-Beta': 'assistants=v2' },
    });
    if (!messagesResponse.ok) throw new Error(`Failed to get assistant messages: ${await messagesResponse.text()}`);
    const messagesData = await messagesResponse.json() as OpenAIMessagesList;
    
    const assistantMessages = messagesData.data?.filter((msg: OpenAIMessage) => msg.role === 'assistant');
    if (!assistantMessages || assistantMessages.length === 0 || !assistantMessages[0].content[0]?.text?.value) {
      throw new Error('No response content from assistant.');
    }

    const rawOutputFromAssistant = assistantMessages[0].content[0].text.value;
    console.log("generate-flashcards: Raw output from assistant:", rawOutputFromAssistant);

    let flashcards: FlashcardContent[] = [];
    // **MODIFICATION: Initialize jsonStringToParse at declaration**
    let jsonStringToParse: string = rawOutputFromAssistant; // Default to raw output, will be refined

    try {
      const jsonRegex = /```json\s*([\s\S]*?)\s*```/; 
      const match = rawOutputFromAssistant.match(jsonRegex);
      
      if (match && match[1]) {
        jsonStringToParse = match[1]; // Assign extracted JSON if match found
        console.log("generate-flashcards: Extracted JSON string:", jsonStringToParse);
      } else {
        // If no markdown block is found, jsonStringToParse already holds rawOutputFromAssistant (from initialization)
        console.warn("generate-flashcards: Markdown JSON block not found in assistant response. Attempting to parse entire response.");
      }

      const parsedJson = JSON.parse(jsonStringToParse) as ParsedFlashcardResponse | ParsedFlashcardArrayResponse;
      if ('flashcards' in parsedJson && Array.isArray(parsedJson.flashcards)) { 
        flashcards = parsedJson.flashcards.map((card: FlashcardContent) => ({ 
            front: card.front || `Question about ${title}`, 
            back: card.back || "Answer not available"     
        }));
      } else if (Array.isArray(parsedJson)) { 
        flashcards = parsedJson.map((card: FlashcardContent) => ({ 
            front: card.front || `Question about ${title}`,
            back: card.back || "Answer not available"
        }));
      }
      else {
        console.error("generate-flashcards: Parsed JSON does not contain a 'flashcards' array or is not an array itself.", parsedJson);
        throw new Error("AI response did not follow the expected JSON format after extraction.");
      }
    } catch (e) {
      const error = e as Error;
      // jsonStringToParse will have a value here for logging
      console.error("generate-flashcards: Error parsing JSON from assistant response:", error.message, "\nAttempted to parse:", jsonStringToParse);
      throw new Error(`Could not parse flashcards from AI response. The format might be incorrect: ${error.message}`);
    }
    
    console.log(`generate-flashcards: Successfully generated and parsed ${flashcards.length} flashcards.`);
    return new Response(
      JSON.stringify({ flashcards }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error: unknown) {
    console.error('generate-flashcards: Critical error in function:', error);
    const errorMessage = error instanceof Error ? error.message : "An unknown error occurred.";
    return new Response(
      JSON.stringify({ error: errorMessage }),
      { 
        status: errorMessage.includes("required") || errorMessage.includes("OpenAI API key") || errorMessage.includes("assistantId") ? 400 : 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});

================
File: supabase/functions/generate-quiz/index.ts
================
// supabase/functions/generate-quiz/index.ts
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { corsHeaders } from "../_shared/cors.ts"; // Ensure this path is correct

const ASSISTANT_RUN_TIMEOUT = 90000; // Increased timeout, quiz generation can be complex

// --- Type Definitions ---
interface QuizQuestion {
  question_text: string; // Ensure this matches the expected output from AI
  options: string[];
  correct_answer_index: number;
  explanation: string;
}

interface RequestBody {
  topic: string;
  questionCount?: number;
  difficulty?: string;
  coverage?: string;
  openAIConfig?: {
    assistantId?: string;
    // vectorStoreId is implicitly used by the assistant if configured
  };
  useRAG?: boolean; // This might be redundant if assistantId implies RAG
}

interface OpenAIThread { id: string; }
interface OpenAIRun {
  id: string;
  status: 'queued' | 'in_progress' | 'cancelling' | 'completed' | 'failed' | 'expired' | 'requires_action';
  last_error?: { message?: string } | null;
}
interface OpenAIMessageContentText { type: "text"; text: { value: string; annotations: unknown[]; };}
interface OpenAIMessage { id: string; role: 'user' | 'assistant'; content: OpenAIMessageContentText[]; }
interface OpenAIMessagesList { data?: OpenAIMessage[]; }

// For Chat Completions fallback
interface OpenAIChatCompletionChoice { message: { content: string; }; }
interface OpenAIChatCompletion { choices: OpenAIChatCompletionChoice[]; }

// Expected structure from AI (for both Assistant and fallback)
interface AIParsedQuizResponse {
    questions: QuizQuestion[];
    // The AI might not directly return timeEstimate, we calculate it.
}


serve(async (req: Request) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { 
      topic, 
      questionCount = 10, 
      difficulty = "medium", 
      coverage = "comprehensive", 
      openAIConfig = {} 
    }: RequestBody = await req.json();
    
    if (!topic) {
      throw new Error('Topic is required');
    }

    const openaiApiKey = Deno.env.get("OPENAI_API_KEY");
    if (!openaiApiKey) {
      console.error("generate-quiz: OPENAI_API_KEY env var not set.");
      throw new Error('Server configuration error: OpenAI API key is missing.');
    }

    const assistantId = openAIConfig.assistantId;
    let generatedQuestions: QuizQuestion[] = [];
    let usedAssistantFlow = false;

    if (assistantId) {
      usedAssistantFlow = true;
      console.log(`generate-quiz: Using Assistant ID: ${assistantId} for topic: "${topic}", count: ${questionCount}`);

      // 1. Create a Thread
      const threadResponse = await fetch('https://api.openai.com/v1/threads', {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'Content-Type': 'application/json', 'OpenAI-Beta': 'assistants=v2' },
        body: JSON.stringify({}),
      });
      if (!threadResponse.ok) throw new Error(`Failed to create assistant thread: ${await threadResponse.text()}`);
      const thread = await threadResponse.json() as OpenAIThread;
      const threadId = thread.id;
      console.log(`generate-quiz: Created thread ID: ${threadId}`);

      // 2. Add a Message to the Thread
      const userMessageContent = `Generate ${questionCount} multiple-choice quiz questions on the topic "${topic}".
The difficulty should be ${difficulty} and the coverage should be ${coverage}.
The questions should be based on the materials provided for this class.
Format your response as a valid JSON object containing a single key "questions" which is an array of objects.
Each object in the "questions" array should have these properties: "question_text", "options" (an array of 4 strings), "correct_answer_index" (0-3), and "explanation".
Example: {"questions": [{"question_text": "What is...", "options": ["A", "B", "C", "D"], "correct_answer_index": 0, "explanation": "Because..."}]}`;

      await fetch(`https://api.openai.com/v1/threads/${threadId}/messages`, {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'Content-Type': 'application/json', 'OpenAI-Beta': 'assistants=v2' },
        body: JSON.stringify({ role: 'user', content: userMessageContent }),
      });
      console.log(`generate-quiz: Added message to thread ${threadId}`);

      // 3. Create a Run
      const runResponse = await fetch(`https://api.openai.com/v1/threads/${threadId}/runs`, {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'Content-Type': 'application/json', 'OpenAI-Beta': 'assistants=v2' },
        body: JSON.stringify({
          assistant_id: assistantId,
          instructions: `You are an expert quiz generator. Please generate ${questionCount} ${difficulty} quiz questions about "${topic}" with ${coverage} coverage, based on the provided class materials. Output the questions in the specified JSON format: {"questions": [...]}. Ensure content is accurate and relevant.`
        }),
      });
      if (!runResponse.ok) throw new Error(`Failed to run assistant: ${await runResponse.text()}`);
      let run = await runResponse.json() as OpenAIRun;
      console.log(`generate-quiz: Created run ID: ${run.id} for thread ${threadId}`);

      // 4. Poll for Run completion
      const startTime = Date.now();
      while (['queued', 'in_progress', 'cancelling'].includes(run.status)) {
        if (Date.now() - startTime > ASSISTANT_RUN_TIMEOUT) {
          await fetch(`https://api.openai.com/v1/threads/${threadId}/runs/${run.id}/cancel`, {
            method: 'POST',
            headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'OpenAI-Beta': 'assistants=v2' }
          });
          throw new Error('Quiz generation (Assistant API) timed out.');
        }
        await new Promise(resolve => setTimeout(resolve, 3000)); // Poll every 3 seconds
        const runStatusResponse = await fetch(`https://api.openai.com/v1/threads/${threadId}/runs/${run.id}`, {
          headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'OpenAI-Beta': 'assistants=v2' }
        });
        if (!runStatusResponse.ok) throw new Error(`Failed to check assistant run status: ${await runStatusResponse.text()}`);
        run = await runStatusResponse.json() as OpenAIRun;
        console.log(`generate-quiz: Run ${run.id} status: ${run.status}`);
      }

      if (run.status !== 'completed') {
        throw new Error(`Quiz generation (Assistant API) failed. Status: ${run.status}. ${run.last_error?.message || ''}`);
      }

      // 5. Retrieve Messages from the Thread
      const messagesResponse = await fetch(`https://api.openai.com/v1/threads/${threadId}/messages?order=desc&limit=1`, {
        headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'OpenAI-Beta': 'assistants=v2' },
      });
      if (!messagesResponse.ok) throw new Error(`Failed to get assistant messages: ${await messagesResponse.text()}`);
      const messagesData = await messagesResponse.json() as OpenAIMessagesList;
      
      const assistantMessages = messagesData.data?.filter((msg: OpenAIMessage) => msg.role === 'assistant');
      if (!assistantMessages || assistantMessages.length === 0 || !assistantMessages[0].content[0]?.text?.value) {
        throw new Error('No response content from assistant.');
      }

      const rawOutputFromAssistant = assistantMessages[0].content[0].text.value;
      console.log("generate-quiz: Raw output from assistant:", rawOutputFromAssistant);
      
      let jsonStringToParse: string = rawOutputFromAssistant;
      try {
        const jsonRegex = /```json\s*([\s\S]*?)\s*```/;
        const match = rawOutputFromAssistant.match(jsonRegex);
        if (match && match[1]) {
          jsonStringToParse = match[1];
        } else {
          console.warn("generate-quiz: Markdown JSON block not found in assistant response. Attempting to parse entire response.");
        }
        const parsedJson = JSON.parse(jsonStringToParse) as AIParsedQuizResponse;
        if (parsedJson.questions && Array.isArray(parsedJson.questions)) {
          generatedQuestions = parsedJson.questions;
        } else {
          throw new Error("AI response did not follow the expected JSON format (missing 'questions' array).");
        }
      } catch (e) {
        const error = e as Error;
        console.error("generate-quiz: Error parsing JSON from assistant response:", error.message, "\nAttempted to parse:", jsonStringToParse);
        throw new Error(`Could not parse quiz questions from AI response: ${error.message}`);
      }

    } else { // Fallback to Chat Completions API
      usedAssistantFlow = false;
      console.warn("generate-quiz: No assistantId provided. Using fallback Chat Completions API.");
      const systemPrompt = `You are a quiz generator. Create ${questionCount} multiple-choice quiz questions about "${topic}" with ${difficulty} difficulty. For each question, provide 4 answer options with exactly one correct option. Format your response as a valid JSON object containing a single key "questions" which is an array of objects. Each object in the "questions" array should have these properties: "question_text", "options" (an array of 4 strings), "correct_answer_index" (0-3), and "explanation". Example: {"questions": [{"question_text": "What is...", "options": ["A", "B", "C", "D"], "correct_answer_index": 0, "explanation": "Because..."}]}`;
      const userContent = `Generate ${questionCount} ${difficulty} multiple-choice quiz questions about "${topic}" with a ${coverage} coverage of the subject.`;

      const fallbackResponse = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${openaiApiKey}`, 'Content-Type': 'application/json' },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [{ role: 'system', content: systemPrompt }, { role: 'user', content: userContent }],
          temperature: 0.7,
          response_format: { type: "json_object" }
        }),
      });

      if (!fallbackResponse.ok) {
        const errorText = await fallbackResponse.text();
        console.error('generate-quiz: Fallback OpenAI API error:', fallbackResponse.status, errorText);
        throw new Error(`Fallback OpenAI API error: ${fallbackResponse.status}. ${errorText}`);
      }
      const fallbackData = await fallbackResponse.json() as OpenAIChatCompletion;
      const messageContent = fallbackData.choices[0]?.message?.content;
      if (!messageContent) throw new Error("No content in fallback AI response.");
      
      try {
        const parsedJson = JSON.parse(messageContent) as AIParsedQuizResponse;
        if (parsedJson.questions && Array.isArray(parsedJson.questions)) {
          generatedQuestions = parsedJson.questions;
        } else {
          throw new Error("Fallback AI response did not follow the expected JSON format (missing 'questions' array).");
        }
      } catch (e) {
        const error = e as Error;
        console.error("generate-quiz: Error parsing fallback JSON", error.message, messageContent);
        throw new Error(`Could not parse quiz questions from fallback AI response: ${error.message}`);
      }
    }

    // Validate and format questions
    const validatedQuestions = generatedQuestions.map((q, index) => {
      if (!q.question_text) q.question_text = `Question ${index + 1} about ${topic}`;
      if (!Array.isArray(q.options) || q.options.length !== 4) {
        q.options = ["Option A", "Option B", "Option C", "Option D"]; // Default if options are bad
      }
      if (typeof q.correct_answer_index !== 'number' || q.correct_answer_index < 0 || q.correct_answer_index > 3) {
        q.correct_answer_index = 0; // Default if index is bad
      }
      if (!q.explanation) q.explanation = "No explanation provided.";
      return q;
    });

    const difficultyMultiplier: { [key: string]: number } = { easy: 0.8, medium: 1.0, hard: 1.2 };
    const timeEstimate = Math.ceil(questionCount * (difficultyMultiplier[difficulty.toLowerCase()] || 1.0) * 0.75); // Adjusted time estimate

    console.log(`generate-quiz: Successfully generated ${validatedQuestions.length} questions. Used Assistant: ${usedAssistantFlow}`);
    return new Response(
      JSON.stringify({
        questions: validatedQuestions,
        timeEstimate,
        assistantId: openAIConfig.assistantId, // Return the ID used, if any
        vectorStoreId: null, // vectorStoreId is part of assistant config, not directly returned here unless needed
        usedAssistant: usedAssistantFlow,
        usedFallback: !usedAssistantFlow
      }),
      { headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );

  } catch (error: unknown) {
    console.error('generate-quiz: Critical error in function:', error);
    const errorMessage = error instanceof Error ? error.message : "An unknown error occurred.";
    return new Response(
      JSON.stringify({ error: errorMessage }),
      { 
        status: errorMessage.includes("required") || errorMessage.includes("OpenAI API key") ? 400 : 500, 
        headers: { ...corsHeaders, "Content-Type": "application/json" } 
      }
    );
  }
});

================
File: supabase/functions/generate-title/index.ts
================
import { serve } from 'https://deno.land/std@0.177.0/http/server.ts'
import { OpenAI } from "https://deno.land/x/openai/mod.ts";

// Define the CORS headers that our function will use
const CORS_HEADERS = {
  'Access-Control-Allow-Origin': '*', // Allow any origin
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // This is for the browser's preflight "permission slip" request
  if (req.method === 'OPTIONS') {
    console.log("--- [INFO] Handled OPTIONS preflight request ---");
    return new Response('ok', { headers: CORS_HEADERS });
  }

  try {
    console.log("--- [1] generate-title function invoked (POST) ---");

    console.log("--- [2] Checking for API Key ---");
    const OPENAI_API_KEY = Deno.env.get("OPENAI_API_KEY");
    if (!OPENAI_API_KEY) {
      console.error("--- [ERROR] Missing OPENAI_API_KEY secret. ---");
      throw new Error("Missing OPENAI_API_KEY secret.");
    }
    console.log("--- [3] API Key found. Parsing request body. ---");

    const { query } = await req.json();
    if (!query) {
      console.error("--- [ERROR] Missing query in request body. ---");
      return new Response(JSON.stringify({ error: 'Missing query in request body' }), {
        status: 400,
        headers: { ...CORS_HEADERS, 'Content-Type': 'application/json' },
      });
    }
    console.log("--- [4] Request body parsed. Initializing OpenAI client. ---");

    const openai = new OpenAI(OPENAI_API_KEY);

    console.log("--- [5] Calling OpenAI API... ---");
    const chatCompletion = await openai.chat.completions.create({
      messages: [
        { 
          role: 'system', 
          content: 'You are an expert at creating short, concise, 3-4 word titles for chat conversations based on the user\'s first message. Do not use quotes in the title. Be direct and relevant.' 
        },
        { 
          role: 'user', 
          content: `Generate a title for a conversation starting with: "${query}"` 
        },
      ],
      model: 'gpt-3.5-turbo',
      max_tokens: 20,
      temperature: 0.3,
    });
    console.log("--- [6] OpenAI API call successful. ---");

    const title = chatCompletion.choices[0].message.content?.trim() || "New Chat";

    // Return the successful response with CORS headers
    return new Response(JSON.stringify({ title }), {
      headers: { ...CORS_HEADERS, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error("--- [7] CAUGHT ERROR BLOCK ---");
    console.error(error.message);
    // Return the error response with CORS headers
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...CORS_HEADERS, "Content-Type": "application/json" },
    });
  }
})

================
File: supabase/functions/hard-reset-weaviate-schema/index.ts
================
// supabase/functions/hard-reset-weaviate-schema/index.ts

import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import weaviate, { WeaviateClient, ApiKey } from 'npm:weaviate-ts-client@2.0.0';
import { corsHeaders } from "../_shared/cors.ts";

serve(async (_req) => {
  console.log("--- [HARD RESET] Function invoked. Attempting to delete Weaviate class... ---");
  try {
    const weaviateHost = Deno.env.get("WEAVIATE_URL");
    const weaviateApiKey = Deno.env.get("WEAVIATE_API_KEY");
    if (!weaviateHost || !weaviateApiKey) {
      throw new Error('Weaviate secrets are not configured.');
    }

    const weaviateClient: WeaviateClient = weaviate.client({
      scheme: 'https',
      host: weaviateHost,
      apiKey: new ApiKey(weaviateApiKey),
    });

    const className = "DocumentChunk";
    
    // Check if the class exists before trying to delete
    try {
      await weaviateClient.schema.classGetter().withClassName(className).do();
      console.log(`--- [HARD RESET] Found class "${className}". Proceeding with deletion. ---`);
      // MODIFIED: Corrected variable name from 'client' to 'weaviateClient'
      await weaviateClient.schema.classDeleter().withClassName(className).do();
      console.log(`--- [HARD RESET] Successfully deleted class "${className}". ---`);
    } catch (e) {
      // If classGetter() throws, it means the class doesn't exist, which is also a success state for our purpose.
      console.log(`--- [HARD RESET] Class "${className}" does not exist. No action needed. ---`);
    }

    return new Response(
      JSON.stringify({ success: true, message: `Schema for "${className}" has been cleared.` }),
      { headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );

  } catch (error) {
    console.error("--- [HARD RESET] Critical error:", error);
    return new Response(
      JSON.stringify({ success: false, error: error.message }),
      { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }
});

================
File: supabase/functions/inspect-weaviate-schema/index.ts
================
// supabase/functions/inspect-weaviate-schema/index.ts

import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import weaviate, { WeaviateClient, ApiKey } from 'npm:weaviate-ts-client@2.0.0';
import { corsHeaders } from "../_shared/cors.ts";

serve(async (_req) => {
  if (_req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    console.log("--- [INSPECT] Function invoked. ---");

    const weaviateHost = Deno.env.get("WEAVIATE_URL");
    const weaviateApiKey = Deno.env.get("WEAVIATE_API_KEY");
    if (!weaviateHost || !weaviateApiKey) {
      throw new Error('Weaviate secrets are not configured.');
    }

    const weaviateClient: WeaviateClient = weaviate.client({
      scheme: 'https',
      host: weaviateHost,
      apiKey: new ApiKey(weaviateApiKey),
    });

    console.log("--- [INSPECT] Weaviate client initialized. Fetching schema for 'DocumentChunk'... ---");

    const schema = await weaviateClient.schema.classGetter().withClassName("DocumentChunk").do();

    console.log("--- [INSPECT] Successfully retrieved schema. ---");

    return new Response(
      JSON.stringify(schema, null, 2), // Pretty-print the JSON response
      { headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : "An unknown error occurred";
    console.error("--- [INSPECT] Error fetching Weaviate schema:", errorMessage);
    
    if (errorMessage.includes("404")) {
       return new Response(
        JSON.stringify({ success: false, error: "Schema 'DocumentChunk' does not exist. This is good, it means the reset worked. Please re-upload a file to recreate it." }),
        { status: 404, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    return new Response(
      JSON.stringify({ success: false, error: errorMessage }),
      { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }
});

================
File: supabase/config.toml
================
# supabase/config.toml
project_id = "uzdtqomtbrccinrkhzme"

[api]
enabled = true
port = 54321
schemas = ["public", "storage", "graphql_public"]

[db]
port = 54322

[studio]
enabled = true
port = 54323
api_url = "http://localhost" # This is for local dev, ensure it's correct for your setup

[inbucket]
enabled = true
port = 54324

[auth]
enabled = true
site_url = "http://localhost:8080"

[storage]
enabled = true

[analytics]
enabled = true
port = 54327

# Functions configuration
[functions.chat]
verify_jwt = true 

# Removed: [functions.generate-flashcards]
# Removed: verify_jwt = true

# Removed: [functions.generate-quiz]
# Removed: verify_jwt = true

[functions.list-vector-store-files]
verify_jwt = true

[functions.upload-to-vector-store]
verify_jwt = true 

[functions.delete-openai-resources]
verify_jwt = true 

[functions.web-chat]
verify_jwt = true 

[functions.provision-class-resources]
verify_jwt = true

[functions.check-env-vars]
verify_jwt = true

[functions.delete-user-account]
verify_jwt = true

[functions.delete-weaviate-chunks-by-file]
verify_jwt = true

[functions.delete-weaviate-data-by-class]
verify_jwt = true

[functions.generate-title]
verify_jwt = true

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local
.env

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}

================
File: eslint.config.js
================
import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";

export default tseslint.config(
  { ignores: ["dist"] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
      "@typescript-eslint/no-unused-vars": "off",
    },
  }
);

================
File: index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Eido - The AI Copilot for Elevated Education</title>
    <meta name="description" content="Eido - The AI Copilot for Elevated Education" />
    <meta name="author" content="Eido" />

    <meta property="og:title" content="Eido - The AI Copilot for Elevated Education" />
    <meta property="og:description" content="Educating and supporting employees on cybersecurity topics" />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="/eido-landing.png" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@cybercoach" />
    <meta name="twitter:image" content="/eido-landing.png" />
    
    <!-- Updated favicon -->
    <link rel="icon" href="/eido-icon.ico" type="image/png">
  </head>

  <body>
    <div id="root"></div>
    <!-- IMPORTANT: DO NOT REMOVE THIS SCRIPT TAG OR THIS VERY COMMENT! -->
    <script src="https://cdn.gpteng.co/gptengineer.js" type="module"></script>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "vite_react_shadcn_ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "build:dev": "vite build --mode development",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.0",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-context-menu": "^2.2.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.2.2",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.11",
    "@radix-ui/react-toast": "^1.2.13",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.4",
    "@supabase/supabase-js": "^2.49.4",
    "@tanstack/react-query": "^5.56.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "date-fns": "^3.6.0",
    "embla-carousel-react": "^8.3.0",
    "input-otp": "^1.2.4",
    "lucide-react": "^0.462.0",
    "next-themes": "^0.3.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-helmet-async": "^2.0.5",
    "react-hook-form": "^7.53.0",
    "react-resizable-panels": "^2.1.3",
    "react-router-dom": "^6.30.0",
    "recharts": "^2.12.7",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.3",
    "weaviate-client": "^3.6.0",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@tailwindcss/typography": "^0.5.15",
    "@types/node": "^22.5.5",
    "@types/react": "^18.3.21",
    "@types/react-dom": "^18.3.7",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "lovable-tagger": "^1.1.7",
    "postcss": "^8.4.47",
    "supabase": "^2.22.12",
    "tailwindcss": "^3.4.11",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^5.4.1"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# Welcome to your Lovable project

## Project info

**URL**: https://lovable.dev/projects/7176c51d-cd4b-4a84-821b-97c3c43fc432

## How can I edit this code?

There are several ways of editing your application.

**Use Lovable**

Simply visit the [Lovable Project](https://lovable.dev/projects/7176c51d-cd4b-4a84-821b-97c3c43fc432) and start prompting.

Changes made via Lovable will be committed automatically to this repo.

**Use your preferred IDE**

If you want to work locally using your own IDE, you can clone this repo and push changes. Pushed changes will also be reflected in Lovable.

The only requirement is having Node.js & npm installed - [install with nvm](https://github.com/nvm-sh/nvm#installing-and-updating)

Follow these steps:

```sh
# Step 1: Clone the repository using the project's Git URL.
git clone <YOUR_GIT_URL>

# Step 2: Navigate to the project directory.
cd <YOUR_PROJECT_NAME>

# Step 3: Install the necessary dependencies.
npm i

# Step 4: Start the development server with auto-reloading and an instant preview.
npm run dev
```

**Edit a file directly in GitHub**

- Navigate to the desired file(s).
- Click the "Edit" button (pencil icon) at the top right of the file view.
- Make your changes and commit the changes.

**Use GitHub Codespaces**

- Navigate to the main page of your repository.
- Click on the "Code" button (green button) near the top right.
- Select the "Codespaces" tab.
- Click on "New codespace" to launch a new Codespace environment.
- Edit files directly within the Codespace and commit and push your changes once you're done.

## What technologies are used for this project?

This project is built with:

- Vite
- TypeScript
- React
- shadcn-ui
- Tailwind CSS

## How can I deploy this project?

Simply open [Lovable](https://lovable.dev/projects/7176c51d-cd4b-4a84-821b-97c3c43fc432) and click on Share -> Publish.

## Can I connect a custom domain to my Lovable project?

Yes, you can!

To connect a domain, navigate to Project > Settings > Domains and click Connect Domain.

Read more here: [Setting up a custom domain](https://docs.lovable.dev/tips-tricks/custom-domain#step-by-step-guide)
test

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";
import animate from "tailwindcss-animate";

export default {
	darkMode: ["class"],
	content: [
		"./pages/**/*.{ts,tsx}",
		"./components/**/*.{ts,tsx}",
		"./app/**/*.{ts,tsx}",
		"./src/**/*.{ts,tsx}",
	],
	prefix: "",
	theme: {
		container: {
			center: true,
			padding: '2rem',
			screens: {
				'2xl': '1400px'
			}
		},
		extend: {
			colors: {
				border: 'hsl(var(--border))',
				input: 'hsl(var(--input))',
				ring: 'hsl(var(--ring))',
				background: 'hsl(var(--background))',
				foreground: 'hsl(var(--foreground))',
				primary: {
					DEFAULT: 'hsl(var(--primary))',
					foreground: 'hsl(var(--primary-foreground))'
				},
				secondary: {
					DEFAULT: 'hsl(var(--secondary))',
					foreground: 'hsl(var(--secondary-foreground))'
				},
				destructive: {
					DEFAULT: 'hsl(var(--destructive))',
					foreground: 'hsl(var(--destructive-foreground))'
				},
				muted: {
					DEFAULT: 'hsl(var(--muted))',
					foreground: 'hsl(var(--muted-foreground))'
				},
				accent: {
					DEFAULT: 'hsl(var(--accent))',
					foreground: 'hsl(var(--accent-foreground))'
				},
				popover: {
					DEFAULT: 'hsl(var(--popover))',
					foreground: 'hsl(var(--popover-foreground))'
				},
				card: {
					DEFAULT: 'hsl(var(--card))',
					foreground: 'hsl(var(--card-foreground))'
				},
				sidebar: {
					DEFAULT: 'hsl(var(--sidebar-background))',
					foreground: 'hsl(var(--sidebar-foreground))',
					primary: 'hsl(var(--sidebar-primary))',
					'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
					accent: 'hsl(var(--sidebar-accent))',
					'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
					border: 'hsl(var(--sidebar-border))',
					ring: 'hsl(var(--sidebar-ring))'
				},
				cybercoach: {
					teal: '#1A9F9F',
					'teal-light': '#63C5C5',
					'teal-dark': '#0E7575',
					blue: '#005780',
					'blue-light': '#3A89AD',
					'blue-dark': '#003A56',
					grey: '#8E9196',
					'grey-light': '#F6F6F7',
					'grey-dark': '#403E43'
				},
                volcanic: '#212121' /* Added dark charcoal color */
			},
			borderRadius: {
				lg: 'var(--radius)',
				md: 'calc(var(--radius) - 2px)',
				sm: 'calc(var(--radius) - 4px)'
			},
			keyframes: {
				'accordion-down': {
					from: {
						height: '0'
					},
					to: {
						height: 'var(--radix-accordion-content-height)'
					}
				},
				'accordion-up': {
					from: {
						height: 'var(--radix-accordion-content-height)'
					},
					to: {
						height: '0'
					}
				},
				'fade-in': {
					from: {
						opacity: '0'
					},
					to: {
						opacity: '1'
					}
				}
			},
			animation: {
				'accordion-down': 'accordion-down 0.2s ease-out',
				'accordion-up': 'accordion-up 0.2s ease-out',
				'fade-in': 'fade-in 0.5s ease-out'
			}
		}
	},
	plugins: [animate],
} satisfies Config;

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": false,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noImplicitAny": false,
    "noFallthroughCasesInSwitch": false,

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "noImplicitAny": false,
    "noUnusedParameters": false,
    "skipLibCheck": true,
    "allowJs": true,
    "noUnusedLocals": false,
    "strictNullChecks": false
  }
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}

================
File: vercel.json
================
{
  "rewrites": [
    {
      "source": "/((?!api/|assets/|robots.txt|favicon.ico|eido-icon.png|eido-icon.ico|placeholder.svg|_next/static/|_next/image/|sitemap.xml|manifest.json|sw.js|workbox-.*.js).*)",
      "destination": "/index.html"
    }
  ]
}

================
File: vite.config.ts
================
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
import { componentTagger } from "lovable-tagger";

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => ({
  server: {
    host: "::",
    port: 8080,
  },
  plugins: [
    react(),
    mode === 'development' &&
    componentTagger(),
  ].filter(Boolean),
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
}));



================================================================
End of Codebase
================================================================
