// src/components/class/CreateClassDialog.tsx

import {
  Dialog,
  DialogContent,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogDescription
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { CreateClassDialogContent } from "./dialog/CreateClassDialogContent";
import { useState, useEffect } from "react";
import { classOpenAIConfigService } from "@/services/classOpenAIConfig";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import type { User } from '@supabase/supabase-js'; // Import Supabase User type
import type { WidgetType } from '@/hooks/use-widgets'; // Import WidgetType

// Updated interface for OpenAI specific configurations passed from the dialog
// API Key is no longer handled on the client-side.
interface OpenAIConfigForDialog {
  vectorStoreId?: string | null;
  assistantId?: string | null;
  // apiKey is removed
}

// Updated interface for the data structure representing a new class
export interface ClassData {
  // class_id will be generated by the database or returned after insert; not part of initial creation data from form.
  title: string;
  professor?: string | null;
  classTime?: string | null;
  classroom?: string | null;
  emoji?: string | null;
  enabledWidgets: WidgetType[]; // Using specific WidgetType
  openAIConfig?: OpenAIConfigForDialog; // Uses the updated structure
}

interface CreateClassDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onClassCreate: (classData: ClassData) => void; // This callback receives the data for the new class
}

// Default widgets for a new class if not specified otherwise
const DEFAULT_CLASS_WIDGETS: WidgetType[] = ["supertutor", "database"];


export function CreateClassDialog({ open, onOpenChange, onClassCreate }: CreateClassDialogProps) {
  const [isFormValid, setIsFormValid] = useState(false);
  const [formData, setFormData] = useState<ClassData | null>(null);
  const [user, setUser] = useState<User | null>(null); // Use Supabase User type
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();

  // Check for authenticated user
  useEffect(() => {
    const checkAuth = async () => {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        console.log("Auth session check in CreateClassDialog:", session);
        setUser(session?.user || null);
      } catch (error) {
        // It's better to type error here as well, or at least log it
        if (error instanceof Error) {
            console.error("Error checking auth in CreateClassDialog:", error.message);
        } else {
            console.error("An unknown error occurred while checking auth:", error);
        }
      }
    };

    checkAuth();

    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
      console.log("Auth state change in CreateClassDialog:", event, session?.user?.id);
      setUser(session?.user || null);
    });

    return () => subscription.unsubscribe();
  }, []);

  // Reset form when dialog closes
  useEffect(() => {
    if (!open) {
      setFormData(null);
      setIsFormValid(false);
      setIsSubmitting(false);
    }
  }, [open]);

  const handleSubmit = async () => {
    if (!formData || !formData.title.trim()) {
      toast({
        title: "Missing information",
        description: "Please provide a title for your class.",
        variant: "destructive",
      });
      return;
    }

    try {
      setIsSubmitting(true);

      // Ensure user is still authenticated
      const currentUser = user; // Use state variable that's updated by useEffect
      if (!currentUser) {
        toast({
          title: "Authentication Error",
          description: "You must be signed in to create a class. Please sign in and try again.",
          variant: "destructive",
        });
        setIsSubmitting(false);
        return;
      }

      console.log("Creating class with user:", currentUser.id);
      console.log("Class data to be saved:", formData);

      // Ensure enabledWidgets is always a valid array of WidgetType
      const safeEnabledWidgets: WidgetType[] = Array.isArray(formData.enabledWidgets) && formData.enabledWidgets.length > 0
        ? formData.enabledWidgets
        : DEFAULT_CLASS_WIDGETS;

      // The `classOpenAIConfigService.saveConfigForClass` will be refactored to:
      // 1. Save the basic class info to the 'classes' table.
      // 2. Get the new 'class_id'.
      // 3. Call the 'provision-class-resources' Edge Function with the new 'class_id' and 'class_title'.
      // This Edge Function will create OpenAI Assistant & Vector Store and update the class record.
      await classOpenAIConfigService.saveConfigForClass(
        formData.title,
        formData.openAIConfig || {}, // Contains only assistantId and vectorStoreId if manually entered
        formData.emoji,
        formData.professor,
        formData.classTime,
        formData.classroom,
        safeEnabledWidgets,
        // We will add a step here or within saveConfigForClass to call provision-class-resources
      );

      // The onClassCreate callback might need to be adjusted based on when assistantId/vectorStoreId are available
      // For now, it passes the form data. HomePage will likely need to re-fetch or be updated.
      const callbackData: ClassData = {
        ...formData,
        enabledWidgets: safeEnabledWidgets,
      };

      onOpenChange(false); // Close dialog
      onClassCreate(callbackData); // Notify parent component

      setFormData(null);
      setIsFormValid(false);

      toast({
        title: "Class created successfully!",
        description: `${formData.title} has been added. AI resources will be set up shortly.`,
      });

    } catch (error) { // Changed from 'error: any'
      console.error("Error creating class:", error);
      let errorMessage = "There was a problem saving your class data. Please make sure you're signed in and try again.";
      if (error instanceof Error) {
        errorMessage = error.message;
      }
      toast({
        title: "Error creating class",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleCancel = () => {
    if (!isSubmitting) {
      onOpenChange(false);
      setFormData(null);
      setIsFormValid(false);
    }
  };

  // This function is called by CreateClassDialogContent whenever its internal form data changes
  const handleFormDataChange = (data: ClassData) => {
    setFormData(data);
    // Ensure title exists and is not just whitespace for form validity
    setIsFormValid(!!data.title?.trim());
  };

  return (
    <Dialog
      open={open}
      onOpenChange={(newOpen) => {
        if (!isSubmitting) { // Prevent closing while submitting
          onOpenChange(newOpen);
        }
      }}
    >
      <DialogContent className="sm:max-w-2xl max-h-[90vh]">
        <DialogHeader className="text-left">
          <DialogTitle>Create New Class</DialogTitle>
          <DialogDescription>
            Set up your new class with all the tools you'll need.
          </DialogDescription>
        </DialogHeader>

        <CreateClassDialogContent
          onClassCreate={handleFormDataChange}
          onCancel={handleCancel}
          // initialData and isEditing are not used for new class creation here,
          // but CreateClassDialogContent might use them if it's a shared component.
        />

        <DialogFooter className="flex justify-between sm:justify-between mt-4 pt-2 border-t">
          <Button variant="outline" onClick={handleCancel} disabled={isSubmitting}>
            Cancel
          </Button>
          <Button
            onClick={handleSubmit}
            disabled={!isFormValid || !user || isSubmitting}
          >
            {isSubmitting ? "Creating..." : "Create Class"}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
